{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"source/images/bg.svg","path":"images/bg.svg","modified":1,"renderable":0},{"_id":"source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":0},{"_id":"source/about/index/aboutme.png","path":"about/index/aboutme.png","modified":1,"renderable":0},{"_id":"source/about/index/index/aboutme.png","path":"about/index/index/aboutme.png","modified":1,"renderable":0},{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":1,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":1,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"37512881b914bd2aaae9a2e6ee291e4160f7f50a","modified":1612074695747},{"_id":"source/about/index.md","hash":"fee2419fb64c7af9101f8b8477bb131650fa2a2a","modified":1612080270255},{"_id":"source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1612074695773},{"_id":"source/images/avatar.png","hash":"d608d1a238e5a5250e4f22b9548723553eb8999b","modified":1612074695773},{"_id":"source/tags/index.md","hash":"a5b52306c0b6abd8b78e31c4eba36e12773794bd","modified":1612074695773},{"_id":"source/images/loading.svg","hash":"eedfa204e08a60ca5c80c620cfe9a3eaa6201585","modified":1612074695773},{"_id":"source/categories/index.md","hash":"2f60a6408a44bc0787a7ee70db94164685440c2d","modified":1612074695772},{"_id":"source/_posts/Java8新特性.md","hash":"3ecbf3478727655b818de4ee8556e32eba9a43bf","modified":1612074695747},{"_id":"source/_posts/Linux-shell.md","hash":"47fbcc1ec586fe1dbf72d71bc733af7a6c8a5e7e","modified":1612074695748},{"_id":"source/_posts/Linux.md","hash":"76b6374fc0081a9c35c8c519580fea337c18b751","modified":1612074695749},{"_id":"source/_posts/Java对接iOS内购以及各个渠道微信支付.md","hash":"5b3c37ef25a02757a868ff4802dfc22d8fdfee32","modified":1612074695748},{"_id":"source/_posts/docker安装MySQL.md","hash":"1ff567a6ecd4e73e651384a9795a1681534b9bec","modified":1612074695750},{"_id":"source/_posts/docker安装mongodb.md","hash":"048e14b852d720e68a1335d666586e6c6af884fc","modified":1612074695751},{"_id":"source/_posts/RabbitMQ安装和使用.md","hash":"6395ec9d0434c1966eac9509f56072278f03ea48","modified":1612074695749},{"_id":"source/_posts/java-fragment-knowledge.md","hash":"98b755148c0f7e7fbb2bd3261589c800a3fa9654","modified":1612074695752},{"_id":"source/_posts/jvm-class文件结构.md","hash":"f3e7744c168e41c37424fe4a1dbcf77c7b9d7e7f","modified":1612074695753},{"_id":"source/_posts/manjaro安装.md","hash":"503c742ff5f965100fdba59957ebc293fec82c16","modified":1612074695754},{"_id":"source/_posts/manjaro编译openjdk.md","hash":"496780ddbf7568433783fa61b2a33965252d3503","modified":1612074695756},{"_id":"source/_posts/manjaro输入密码卡死问题.md","hash":"e9a13e8c287163f56477dde4d111615683ed76ac","modified":1612074695757},{"_id":"source/_posts/jvm-类加载机制.md","hash":"103b67fed7cf2caf6cd76600971bdad7dff26123","modified":1612074695754},{"_id":"source/_posts/mongo乐观锁.md","hash":"ec5d34e70b94808e060196f916782cb5c8625988","modified":1612074695758},{"_id":"source/_posts/mongo权限设置.md","hash":"e915dad8cf93b8e4864fad1abb739644b1b1d936","modified":1612074695759},{"_id":"source/_posts/mongo分片集群.md","hash":"3d2de6d834c488c9f9b2aae75cd2f4ffec2ddd29","modified":1612074695758},{"_id":"source/_posts/mysql.md","hash":"56d85bd3da8a2ca2d0ad97f9019289d81b3ccd22","modified":1612074695759},{"_id":"source/_posts/netty-un.md","hash":"f0b317c5dd5b89bce6b80267cf083719c9b3096f","modified":1612074695760},{"_id":"source/_posts/rabbitMQ延时队列.md","hash":"1b15f4e7bad37570f85c82ed4a7bca7e28a8bca7","modified":1612074695761},{"_id":"source/_posts/nginx安装和使用.md","hash":"505ddf8a3d8aa0fac984563dac8cfce9fb10854d","modified":1612085408666},{"_id":"source/_posts/redis安装和使用.md","hash":"39876e2cb7dca0103015aa9b3f8a1f39a308aba0","modified":1612074695761},{"_id":"source/_posts/springboot集成jedis和redisson.md","hash":"4f34da2e44359347affc22b57d6db842b8191b06","modified":1612074695762},{"_id":"source/_posts/springcloud-feign.md","hash":"24d51d0ac72c6804d18c30682568d944341735fa","modified":1612074695763},{"_id":"source/_posts/springcloud-eureka.md","hash":"a9539126bdba67d07e785cc76cafd7585f4aab1e","modified":1612074695762},{"_id":"source/_posts/springcloud-config.md","hash":"86c7d9fe079e40b79e0ac67140da0f971b36aa68","modified":1612074695762},{"_id":"source/_posts/springcloud-hystrix.md","hash":"b5d4bdc056567b317d9a7eb052e6c738d19cf334","modified":1612074695764},{"_id":"source/_posts/springcloud-ribbon.md","hash":"e047e19e7a5b3b6a617326e1b05c14aa857b5e13","modified":1612074695764},{"_id":"source/_posts/springcloud.md","hash":"d3921438a563627dfc848734605e2096e8504588","modified":1612074695766},{"_id":"source/_posts/timeline.md","hash":"6be9b0abd835ff83b7119091706ac1f7bd1c4f91","modified":1612074695766},{"_id":"source/_posts/springcloud-zuul.md","hash":"a37319875077d89dd6ff308aef962cd5e66f8b1c","modified":1612074695765},{"_id":"source/_posts/tomcat-un.md","hash":"2d22c2b3db2ca16a655addea4a55e22259aecce5","modified":1612074695767},{"_id":"source/_posts/tomcat一键启动脚本.md","hash":"c69b3007184d720547c2df0e7865e2d3d61d77c6","modified":1612086039225},{"_id":"source/_posts/分布式事务-un.md","hash":"60f95861780cbcce14fb4fbecef4841127db6ea5","modified":1612074695768},{"_id":"source/_posts/多线程.md","hash":"04fddc362e359589137d27d27f95c83d95d85260","modified":1612074695770},{"_id":"source/about/index/aboutme.png","hash":"2da3ebf30e8a16d1fc499dbbadfce1b04f526605","modified":1612079453155},{"_id":"source/_posts/支付宝微信一码支付.md","hash":"76ce5869355528791ce4c774859178ed4d27dd35","modified":1612074695771},{"_id":"source/_posts/Linux/Linux-权限.png","hash":"97fab980001ab4bbda62499a2d12d776d9645313","modified":1612074695749},{"_id":"source/_posts/docker安装mongodb/mongo.png","hash":"8262d3a9b2956ab2e8d43ace7c706e4a96775e98","modified":1612074695751},{"_id":"source/_posts/redis安装和使用/redis.png","hash":"c16a9a8d54d8d511a04960302a40380bc3e4416b","modified":1612074695761},{"_id":"source/_posts/rabbitMQ延时队列/rabbitMqDelayQueue.png","hash":"f64203f539c94334a06d5420bba3d92a0695aa5a","modified":1612074695761},{"_id":"source/_posts/springcloud-feign/springcloud-feign.png","hash":"7173b87aea5f26a05efe719002c2b591fc504ed1","modified":1612074695763},{"_id":"source/_posts/springcloud-zuul/zuul-user.png","hash":"1e0f140f3deff8355450e296b92587b6d16d41b7","modified":1612074695766},{"_id":"source/_posts/tomcat一键启动脚本/start-sh.png","hash":"6014de38c1105c4b22c53fcbb6a9881ac41b4415","modified":1612074695768},{"_id":"source/about/index/index/aboutme.png","hash":"2da3ebf30e8a16d1fc499dbbadfce1b04f526605","modified":1612079273729},{"_id":"source/_posts/科学上网/internet.png","hash":"d59a5ecddd6535ae1a51c3da6a8242402f19d856","modified":1612074695771},{"_id":"source/_posts/RabbitMQ安装和使用/rabbitmq.png","hash":"45b83b4a59c5787c9f8055a3f9e1df007ab13668","modified":1612074695750},{"_id":"source/_posts/jvm-class文件结构/class.png","hash":"2ec48b3de1378f9d9396c6fe218471785ba975bc","modified":1612074695753},{"_id":"source/_posts/jvm-类加载机制/load-class.png","hash":"69eab96202eadbf1192a5784ed2564ec2e1bf204","modified":1612074695754},{"_id":"source/_posts/mysql/mysql.png","hash":"cf811043b597672298ace563d8097e7561b5c1b7","modified":1612074695760},{"_id":"source/_posts/springboot集成jedis和redisson/redisLock.png","hash":"700572c2d2b66ac7fb94fb58475b5327f236ee9f","modified":1612074695762},{"_id":"source/_posts/springcloud-config/springcloud-config.png","hash":"e138130e0ebdc424f1b667258eaeff803f560c75","modified":1612074695762},{"_id":"source/_posts/springcloud-zuul/springcloud-zuul.png","hash":"c1b7d27e968d74b7975bf1038a674f95b5b75997","modified":1612074695765},{"_id":"source/_posts/tomcat/tomcat.png","hash":"d11de9df110258abe0054445cf5297e724a3ab37","modified":1612074695768},{"_id":"source/_posts/timeline/一生所爱.png","hash":"5e9f38eccdf23cf497f97ce2ce539e5e426f8730","modified":1612074695767},{"_id":"source/_posts/多线程/duoxiancheng.png","hash":"ecbb2127c2f86d30ed94739495534f01659ee725","modified":1612074695770},{"_id":"source/_posts/Java8新特性/Java8新特性.png","hash":"23a1c94b520efc0ab46ff9f10b20330957f4a9be","modified":1612074695747},{"_id":"source/_posts/Linux-shell/linux-shell.png","hash":"82ff55129dcb9bda5cb667bc961f2a76d1280add","modified":1612074695748},{"_id":"source/_posts/java-fragment-knowledge/java-konwlege.png","hash":"8121a1cc5777b677b62d48260bf6e1b7a7cf0f63","modified":1612074695752},{"_id":"source/_posts/manjaro编译openjdk/openjdk.png","hash":"a3f49b627616eeb151d6b7aa3f48cee9ad17aa64","modified":1612074695757},{"_id":"source/_posts/mongo分片集群/replicaSet.png","hash":"dd83bde1afe23531a3f7e86017ad1c9d2a3ae26f","modified":1612074695758},{"_id":"source/_posts/nginx安装和使用/nginx.png","hash":"0e153676ca5962e9ee38845f8dcaa9c886682e38","modified":1612074695761},{"_id":"source/_posts/springcloud-ribbon/springcloud-ribbon.png","hash":"b7f3cbbbbf06d0ec048cbd02a6046c6510184394","modified":1612074695765},{"_id":"source/_posts/支付宝微信一码支付/alipay-wechatpay-qr.png","hash":"86222a1a736026d81dce3a8eac97ece32144fca9","modified":1612074695771},{"_id":"source/_posts/Java对接iOS内购以及各个渠道微信支付/pay.png","hash":"90a8d81a4c0d18818ca0a6dc0c5045566dcff361","modified":1612074695748},{"_id":"source/_posts/Linux/linux.png","hash":"bad97c79b76d1f44769bf2e2edd521ecca3c8165","modified":1612074695749},{"_id":"source/_posts/mongo乐观锁/mongoLock.png","hash":"9c660b5f99eb73f0f8f4aafa004ef7be8bc17b2f","modified":1612074695758},{"_id":"source/_posts/springcloud/springcloud.png","hash":"1ffd0382a1d949f2f3bba10798dd021792ecde89","modified":1612074695766},{"_id":"source/_posts/springcloud-hystrix/hystrix.png","hash":"b9fc14fa24e4e3e98f09043bba2cf049ab356208","modified":1612074695764},{"_id":"source/_posts/mongo权限设置/mongoPower.png","hash":"db4ec6f2f64f1357678d897eb9678e3a4c3c14bb","modified":1612074695759},{"_id":"source/_posts/timeline/timeline.png","hash":"95b7be43067e16b0c12f973c67d8855c9cbe759e","modified":1612074695767},{"_id":"source/_posts/分布式事务/transaction.png","hash":"952f7a4b186d9b0d60fc2bbcbd5fd26e0599c997","modified":1612074695770},{"_id":"themes/keep/.gitignore","hash":"b49daa26b8121cc0c7074d61b377c8e7e0880d03","modified":1612078713848},{"_id":"themes/keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1612078713848},{"_id":"themes/keep/_config.yml","hash":"81a5f935ec583b39f4c761a5f299bedfdb16358a","modified":1612087699005},{"_id":"themes/keep/package.json","hash":"51e92666d17fa4d5e6366b9c812d143c502db7ca","modified":1612078713854},{"_id":"themes/keep/LICENSE","hash":"98b8bd28e54ab36ee12396687dfdf88807c6cfdd","modified":1612078713848},{"_id":"themes/keep/README.md","hash":"9011b2905bfce7f2386373ebabce1b2a9e212345","modified":1612078713848},{"_id":"themes/keep/README_zh-CN.md","hash":"84e48964c08660222c3ba09bbe6248b4a7bf6c35","modified":1612078713848},{"_id":"themes/keep/languages/en.yml","hash":"eb7a66de92ef19dcaa969155fc6737d32e784556","modified":1612078713848},{"_id":"themes/keep/layout/archive-content.ejs","hash":"cfa8f29b8863534f407136ea3deb18a4b2ff722c","modified":1612078713852},{"_id":"themes/keep/languages/zh-CN.yml","hash":"de8aec3e9960fa489c0a290cda825dfc1e7528dd","modified":1612078713849},{"_id":"themes/keep/layout/category-content.ejs","hash":"aef0c90a395f909be7d2c358eb41d5558a10406f","modified":1612078713853},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1612078713852},{"_id":"themes/keep/layout/article-content.ejs","hash":"ae9fc0712b89af58e80b6c6daf749d01624c4a3c","modified":1612078713852},{"_id":"themes/keep/layout/category-list.ejs","hash":"a9390b25238332417fd554d32563a4d9999db90f","modified":1612078713853},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1612078713853},{"_id":"themes/keep/layout/home-content.ejs","hash":"79e16c3baa6569afbc07ac6a5d2e3f37b273016a","modified":1612078713853},{"_id":"themes/keep/layout/layout.ejs","hash":"da9dbeba541ad19fed35c41fe187f4016e41f0db","modified":1612078713853},{"_id":"themes/keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1612078713853},{"_id":"themes/keep/layout/page.ejs","hash":"4bf34f19bcf18efb5f6e76fcbe7cd36b25ceee6a","modified":1612078713854},{"_id":"themes/keep/scripts/use-source-data.js","hash":"21f6a49e47b7e4d792d67503079ea5b509f18311","modified":1612078713855},{"_id":"themes/keep/layout/tag-content.ejs","hash":"ce4c8192a4ccd6a626af412a7ba258d1edbc0b95","modified":1612078713854},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1612078713854},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1612078713854},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"7c33e49286d54824cd8f3483e30de5579951edc6","modified":1612078713849},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"77e13720374efb902ee3d4d04d13b62de033a3ae","modified":1612078713849},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"54f77621034e39809911a184f15006ce80e0f67b","modified":1612078713849},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"106683de71f01b368c6f0c5417952b54fcdc9611","modified":1612078713850},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"0b00a5b13d71d5f616079fb8d3a7ce66db36c5e9","modified":1612078713850},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"b3dd2feb168c81332845051fe60e9a94cff7fd9a","modified":1612078713850},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"03eb99b95500c8b2daa7f469aed4f4515f5e994e","modified":1612078713850},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"8f2d389c6db5c9e8e6d30fb1579d99ee1660a485","modified":1612078713850},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"0aceb1c7c29b65bd5fc2d79a285a564da8c09b63","modified":1612078713851},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":1612078713851},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"6fbcc0a14467da8362a2eaa490d84acb1336d21b","modified":1612078713851},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"8fd596f871326b03e707d7defcc96f639cdd628e","modified":1612078713851},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"e8a303fa393a1716c5ff1f731923781eb12322ab","modified":1612078713851},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"cfd4d9a30bd20ee0750b79226cb94562439013bf","modified":1612078713851},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"44af04816b86546e0260e73c2df61353e7404208","modified":1612078713851},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"ad75de7966c4d9d923c9ac8cfbfe26b38fbe7aed","modified":1612078713852},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"e55d2034d7e2b8b0c1bd5ac7fdc56ffb8bbd4e60","modified":1612078713852},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"2eb08e3b66b57deed5a8645eb804fede0253317d","modified":1612078713854},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"b39cfa42d156b7ad4d4e8246b6f934cd51d8db55","modified":1612078713854},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"5757d5a7d026105f28555ee36810ffa8eb2c9693","modified":1612078713855},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"5968618b53a029922f2255b0c76bf8a9f11712ff","modified":1612078713852},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"0d2dd8ed72f38d627aefa0a969152f7dcc87b3d3","modified":1612078713855},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"aefc9db612c0fceb4a02fdbed9fa47a6c4e144b5","modified":1612078713852},{"_id":"themes/keep/source/css/style.styl","hash":"77b61baccadc3f71d1d06598f5c2b7fc506d77d4","modified":1612078713862},{"_id":"themes/keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1612078713862},{"_id":"themes/keep/source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1612078713862},{"_id":"themes/keep/source/images/loading.svg","hash":"eedfa204e08a60ca5c80c620cfe9a3eaa6201585","modified":1612078713862},{"_id":"themes/keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1612078713862},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1612078713857},{"_id":"themes/keep/source/js/back2top.js","hash":"fc8e85f6704e39ae3a613bbec5dd51d449be8010","modified":1612078713863},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"223e6f1d4e6e70956e4661b58c430e1c68def125","modified":1612078713863},{"_id":"themes/keep/source/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1612078713863},{"_id":"themes/keep/source/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1612078713863},{"_id":"themes/keep/source/js/lazyload.js","hash":"95aad532f17d7a8119979fc61ade9e626308a2af","modified":1612078713863},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"618f7cfc45db4d82b2f1d00d8e9ee936bcf9043b","modified":1612078713863},{"_id":"themes/keep/source/js/main.js","hash":"ca8ed228cc0bc234be74428d029cfd047eec0ed6","modified":1612078713864},{"_id":"themes/keep/source/js/toc.js","hash":"ae69bf65d2b30d299b6ca9e2361d3b6e0db3a077","modified":1612078713864},{"_id":"themes/keep/source/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1612078713864},{"_id":"themes/keep/source/js/utils.js","hash":"47c6d222a116498359345777aea383c429975abf","modified":1612078713864},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1612078713871},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1612078713872},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1612078713873},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1612078713873},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"28a0c8b1da66a9b6863e5444aa0b50c8f6b862f0","modified":1612078713850},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"92d858874543c4ba149acd04374d84e784ba0aaf","modified":1612078713850},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"4a7294bbe9aa4be22878e8a638668ed7ade25e2c","modified":1612078713849},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"467cafd412837af791b4c353646cf44ac4458a3f","modified":1612078713850},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"2060f13718b4c9f79f52de7e47ce262f06c19bd0","modified":1612078713851},{"_id":"themes/keep/source/css/common/animated.styl","hash":"982afcd440646eff077834e42bb03405a8aab637","modified":1612078713856},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"9b6bf080299102571a6667ca99a62f53c9684246","modified":1612078713856},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"db586cb2289ed138e8d48cd365a4eb7e13863fe2","modified":1612078713856},{"_id":"themes/keep/source/css/common/basic.styl","hash":"c568ed052e2f67f07db816ccf7463965030308c3","modified":1612078713856},{"_id":"themes/keep/source/css/common/variables.styl","hash":"7a3e118d0259084a257327ed6d89f2ceeac6d51f","modified":1612078713856},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"515ebe2a251f3b53f0cf130cdc48b8bb1fb85952","modified":1612078713861},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"327bb874968feaa981093c3f218b48aa34cd1d44","modified":1612078713861},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"bea0a03fe3de16ed08e7b3b541a46d2074561841","modified":1612078713861},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"638c3b50d8203c76106f3010fbfeed9a29bfde5c","modified":1612078713861},{"_id":"themes/keep/source/css/layout/page.styl","hash":"f58cede20abbf250dfe7d38f594632c5b46a61e9","modified":1612078713862},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"2f2ee2f70020cf5e2ffb5612607bd58772e785a4","modified":1612078713861},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"0d1cc0cc0d263f55b9c7245c1dc023abdcfcd69f","modified":1612078713862},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1612078713863},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","hash":"fd81f8a76ae4f55bf5da38116bbc4f0e973daad2","modified":1612078713856},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","hash":"1edcb0ece1bf4b9838c1937e98eaa845de7f4b3b","modified":1612078713856},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1612078713864},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","hash":"64ea39fa5503f6c5a21a9ed7c9d3d5103cccad5a","modified":1612078713856},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"95c41684691a849d102c5a30efb365300d3d5c6d","modified":1612078713857},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"6eaa067231bd9e9faa5de2260b8974142faae510","modified":1612078713858},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"d73c088e639d2d4e076552ff92e611682ce2380b","modified":1612078713859},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"19a8fc0a01bf1efed637e90530c412d57137dfc4","modified":1612078713859},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"91bf4f2f58217c0d0c6d51ad4792e5e0a00c3165","modified":1612078713858},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"4d77c69a897df137b8a1a0c451e95e6aad7d2ad7","modified":1612078713859},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"da5df38b09138af28cb8b3fe9a05aeda9dae5011","modified":1612078713860},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"59525fcc1f88c78abf8c1f0b06e24b16a088698c","modified":1612078713859},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"98aa2e22f16b98b2ffdbf36e1ea24363f8e5045b","modified":1612078713859},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"27d1e19691867a09283facd2983afb9a3404e999","modified":1612078713859},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"f78a13e3b03b19cb72b03db0a5659f8c734e742e","modified":1612078713860},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"a64df5515c60a3a0993c427dc50facee33215f2b","modified":1612078713860},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"a68a1e3f21da63ee2d387035e91f9f60e956e234","modified":1612078713860},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"61016e73c8e420c74800b3afdbd6c2f890400e51","modified":1612078713860},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"029ac31a21203a8b86027e67a3ff3a977579325d","modified":1612078713861},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"f6d9a37520566e38738fc1184ed76817273c3ee5","modified":1612078713858},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"b8fccd13e2753c9fe891fb88a6413087048ab830","modified":1612078713858},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"5844874c50a93239031e58b23856698ca9af2725","modified":1612078713859},{"_id":"source/_posts/docker安装MySQL/mysql.png","hash":"8fbaa372856adb3095bc2950716c70d5b6a37aec","modified":1612074695751},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"6b0c7d69fc3f819610576b41e987ec655411ca44","modified":1612078713859},{"_id":"source/_posts/springcloud-eureka/eureka.png","hash":"7da94f0f3fb7fdb46e59dc1366dd43eda3e04875","modified":1612074695763},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1612078713871},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1612078713871},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1612078713881},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1612078713881},{"_id":"source/_posts/manjaro输入密码卡死问题/密码卡死.png","hash":"393d855242bbd7c1439619866e3378332089dceb","modified":1612074695757},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1612078713870},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"c41a688158d577e3a2738137992d49b05b17ab8f","modified":1612078713872},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1612078713865},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1612078713874},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1612078713880},{"_id":"source/_posts/manjaro安装/manjaro.png","hash":"0c077502fc8d311044c168a22eb092272fa18ad5","modified":1612074695756},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"69a0ff79a9d93a451e9fa90bd79ae7008d2a9da5","modified":1612078713869},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"36de6a298660ed3feaab37900f7b28c3e981d80e","modified":1612078713878},{"_id":"public/search.xml","hash":"db7c7fedebaa72da6af53551ff3f0c5208f08416","modified":1612087723782},{"_id":"public/about/index.html","hash":"e11b29e2407816ee8a67e5423f32aa897936ffb8","modified":1612087723782},{"_id":"public/categories/index.html","hash":"5a82ae6e8bf9f3fd91b6be834284866dbce60229","modified":1612087723782},{"_id":"public/tags/index.html","hash":"d48169fa269fd275529a15d164693abeec7f8c9d","modified":1612087723782},{"_id":"public/categories/Java/index.html","hash":"0197cc70232c0147e73f01be8eef39ef4a790d4e","modified":1612087723782},{"_id":"public/categories/pay/index.html","hash":"c33e84de425212f2ac1e50d013ac9e6d09490c2c","modified":1612087723782},{"_id":"public/categories/Linux/index.html","hash":"3a5b1f0d17ec65e823acc745832b73416bcf6677","modified":1612087723782},{"_id":"public/categories/MQ/index.html","hash":"f19c15ef0929c95ad4c7548d25d9d81cb706258a","modified":1612087723782},{"_id":"public/categories/docker/index.html","hash":"1b4c70d91c798b35c1029cb79211fc097fe819dc","modified":1612087723782},{"_id":"public/categories/OS/index.html","hash":"bde4e4c6de07be82194b700430b32a8be8b58cba","modified":1612087723782},{"_id":"public/categories/openjdk/index.html","hash":"d4f9f851a7d0a76e87fb4fe355ad277d0af924dd","modified":1612087723782},{"_id":"public/categories/manjaro/index.html","hash":"cd2bb2354289274f4a3f867de71be777a10e798d","modified":1612087723782},{"_id":"public/categories/mongo/index.html","hash":"166f163cfe52626065b31130adf92576a9ac95b3","modified":1612087723782},{"_id":"public/categories/docker/mysql/index.html","hash":"b3ef257fa00ac787fdd98d4795013152c5fa75c8","modified":1612087723782},{"_id":"public/categories/mysql/index.html","hash":"6dbf3e349bf7ff0b37fdf173f3cf08a6b43a8152","modified":1612087723782},{"_id":"public/categories/netty/index.html","hash":"9b233c1b186997f4547874f37df8c53f8e7130c7","modified":1612087723782},{"_id":"public/categories/docker/mongo/index.html","hash":"249ea65fa366fbb451bf65a688e8132d65b3fb8c","modified":1612087723782},{"_id":"public/categories/nginx/index.html","hash":"f3ff21839a5cb90e6b6b1a775699f5e398f3dfc2","modified":1612087723782},{"_id":"public/categories/分布式锁/index.html","hash":"f8c57baa1648c83641ddeef5dc67eb6c04c1a201","modified":1612087723782},{"_id":"public/categories/springcloud/index.html","hash":"de90a6b68a6ae87534120d989f136831bbe826eb","modified":1612087723782},{"_id":"public/categories/we/index.html","hash":"de8faa61a23b4cc6abd370c2f1f65f39be252e28","modified":1612087723782},{"_id":"public/categories/tomcat/index.html","hash":"42333ab4bb56e2beea39a84c43d0a10d7993ade2","modified":1612087723782},{"_id":"public/categories/事务/index.html","hash":"aee85f8c7a6b115b587b4b2cfa916781df616b54","modified":1612087723782},{"_id":"public/categories/java/index.html","hash":"c1af20e06716d78b3528f1f23366d5077d21ae92","modified":1612087723782},{"_id":"public/categories/java/多线程/index.html","hash":"b5689a4b1f78e85279e2810f19762c5cf01bb2d7","modified":1612087723782},{"_id":"public/categories/缓存/index.html","hash":"d491879525f82d55fc28e4883169a35157e2d1fe","modified":1612087723782},{"_id":"public/tags/Java/index.html","hash":"418dcf24109d8f0c2b82f20f26d715a689af4149","modified":1612087723782},{"_id":"public/tags/pay/index.html","hash":"8a40c28d80ce1e342160e2812e513a0667368fd1","modified":1612087723782},{"_id":"public/tags/Linux/index.html","hash":"c089211fad20259443ff908a753d8375244d2379","modified":1612087723782},{"_id":"public/tags/RabbitMQ/index.html","hash":"61cdd8eaa7dc1789a7aa38835c63b345a444af8d","modified":1612087723782},{"_id":"public/tags/docker/index.html","hash":"fda6d11136313a2e0e25c86617b5eaac86f538d9","modified":1612087723782},{"_id":"public/tags/mysql/index.html","hash":"8af10a78a23e1a4bc9ae8b368111f2fdf4f69e05","modified":1612087723782},{"_id":"public/tags/mongo/index.html","hash":"4f2528b2631e847f4b48080ad2f09dd38ce9f264","modified":1612087723782},{"_id":"public/tags/manjaro/index.html","hash":"cee58c84aa652fcea25023b7d979c24c19ff34b6","modified":1612087723782},{"_id":"public/tags/openjdk/index.html","hash":"a63df6cacfecab0608597f77ac6451db5f2b4dab","modified":1612087723782},{"_id":"public/tags/netty/index.html","hash":"4fd132e6a814922a8a4165eee44d35bfaae947ad","modified":1612087723782},{"_id":"public/tags/nginx/index.html","hash":"ca78c6fcadda770e72299fd626a57e4b70421368","modified":1612087723782},{"_id":"public/tags/redis/index.html","hash":"e9fde4d30b0ef0566622dc568e84d96cfb3765a9","modified":1612087723782},{"_id":"public/tags/springcloud/index.html","hash":"0df8d16c705ed17d1bf8ced93588423aeb613f4d","modified":1612087723782},{"_id":"public/tags/we/index.html","hash":"879f66e4af4a43ba8b262acedd449d283c5777ef","modified":1612087723782},{"_id":"public/tags/tomcat/index.html","hash":"b8bf52ee4fec49fd6381c21e7ded911a8f84f251","modified":1612087723782},{"_id":"public/tags/事务/index.html","hash":"e6c100c0b0821a6bf3d327723689e0077005c4ae","modified":1612087723782},{"_id":"public/tags/java/index.html","hash":"0f77648893d98134aaf787b4a498076085cf1a4b","modified":1612087723782},{"_id":"public/tags/多线程/index.html","hash":"48c0b9f64a13a81e8e0e869090714cf5a4612f72","modified":1612087723782},{"_id":"public/2020/02/24/tomcat一键启动脚本/index.html","hash":"8fa9bec2fff560dc62cc5abe3eb1656c536b3141","modified":1612087723782},{"_id":"public/2020/02/04/多线程/index.html","hash":"6e782e03a3fbd5fdd0ae6cd14774f2c7a3b176f3","modified":1612087723782},{"_id":"public/2020/01/18/mysql/index.html","hash":"e167ef0cc90d6f5d466b4715363efd92f5d3c37b","modified":1612087723782},{"_id":"public/2020/01/14/netty-un/index.html","hash":"1230b1cb3a57dace3dce3254e776b218129da1f2","modified":1612087723782},{"_id":"public/2020/01/08/tomcat-un/index.html","hash":"657ed7cbd4ea5af89fa562267ef52da8926f56ac","modified":1612087723782},{"_id":"public/2020/01/03/Linux-shell/index.html","hash":"5f69eef10e54231807518d5cfef1284f4eba78f2","modified":1612087723782},{"_id":"public/2020/01/01/Linux/index.html","hash":"595c55f066385fb45167b70fea3b6dc14a771b03","modified":1612087723782},{"_id":"public/2019/12/20/分布式事务-un/index.html","hash":"5f3f2430fa0cf0f5d31ee574e26e2eb6af093691","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-config/index.html","hash":"9bffc13045e1b8f798faae9d8a1cc3b4d5bc12c3","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-zuul/index.html","hash":"246649cc42f639152e3621acfc71e61e33f73fe4","modified":1612087723782},{"_id":"public/2019/12/15/java-fragment-knowledge/index.html","hash":"216033c2621b1d4494d417b31044b5e43f46d3c3","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-feign/index.html","hash":"a7e951ce46c7f9c8736c2a03cdc236e328b690d0","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-ribbon/index.html","hash":"347435cb49a9c255998f9fd0edcacec2a261cd38","modified":1612087723782},{"_id":"public/2019/12/01/支付宝微信一码支付/index.html","hash":"839b96df62de89858276fd6443375a79505445f0","modified":1612087723782},{"_id":"public/2019/11/25/nginx安装和使用/index.html","hash":"912649428e09dcfe2d2af7825fa79b9eb90af1a3","modified":1612087723782},{"_id":"public/2019/11/23/springboot集成jedis和redisson/index.html","hash":"4dc1f0d90df01451d1ab4cac26c2f9488cddc814","modified":1612087723782},{"_id":"public/2019/11/20/redis安装和使用/index.html","hash":"b8402a859007d0144015a0489e21464f4383b61f","modified":1612087723782},{"_id":"public/2019/11/12/mongo分片集群/index.html","hash":"49216ffdb12bd7990e22a753d6241867bed99802","modified":1612087723782},{"_id":"public/2019/11/02/rabbitMQ延时队列/index.html","hash":"4614a57f41c0db3a1fbe3a2290b545c51d377be4","modified":1612087723782},{"_id":"public/2019/09/05/RabbitMQ安装和使用/index.html","hash":"363861240ee4bdbb610a3047ceddc9ef30a932e6","modified":1612087723782},{"_id":"public/2019/08/04/jvm-类加载机制/index.html","hash":"2f07213b546ca025acc16642d2f205c9f9253902","modified":1612087723782},{"_id":"public/2019/07/27/Java8新特性/index.html","hash":"a3b6cc15a250f8e0e343938e2e49a3f6f0696f86","modified":1612087723782},{"_id":"public/2019/05/29/Java对接iOS内购以及各个渠道微信支付/index.html","hash":"b5cbb6cf0f1df686f5eca84b78ea9eaf1d2e2095","modified":1612087723782},{"_id":"public/2019/05/05/jvm-class文件结构/index.html","hash":"4d102808d19725c1f76f9849d304d481962efea6","modified":1612087723782},{"_id":"public/2019/04/25/springcloud-hystrix/index.html","hash":"62a2234efe51b5252bf383d93c6097c29645b475","modified":1612087723782},{"_id":"public/2019/04/24/manjaro输入密码卡死问题/index.html","hash":"e73fb848c6ce9b3acb82c012e7431f973d0dfe09","modified":1612087723782},{"_id":"public/2019/04/18/springcloud/index.html","hash":"6f98dca6072f9902b23e8dab07dec9bde3456c08","modified":1612087723782},{"_id":"public/2019/04/18/springcloud-eureka/index.html","hash":"1c26ce21b008e52ca50381cba9a5951c43aaf8ee","modified":1612087723782},{"_id":"public/2019/04/09/manjaro编译openjdk/index.html","hash":"c2f9444eeadf7cb07d133e4d2d21b79561232b8a","modified":1612087723782},{"_id":"public/2019/04/09/docker安装MySQL/index.html","hash":"3682a7558a0fba2173092f996729f4b384f4f0db","modified":1612087723782},{"_id":"public/2019/03/31/mongo乐观锁/index.html","hash":"64cbae741026feeb57b6e5da85d70c35cce07657","modified":1612087723782},{"_id":"public/2019/03/28/mongo权限设置/index.html","hash":"c68737a2a9b9b58462a4b5bea5b559ad6adf0cc3","modified":1612087723782},{"_id":"public/2019/03/25/timeline/index.html","hash":"ef2f39c088bc9a8e556e5f61b967467bf9c44a09","modified":1612087723782},{"_id":"public/2019/03/19/docker安装mongodb/index.html","hash":"da5597ba20be0e5fce3de42b070c0cfd3297c9b3","modified":1612087723782},{"_id":"public/2019/03/17/manjaro安装/index.html","hash":"45c12e246577ac6e4addbb32f84d858153b3fe80","modified":1612087723782},{"_id":"public/archives/index.html","hash":"bafb558180b5f7271e790c16eca780fadd63296c","modified":1612087723782},{"_id":"public/archives/page/2/index.html","hash":"bafb558180b5f7271e790c16eca780fadd63296c","modified":1612087723782},{"_id":"public/archives/page/3/index.html","hash":"bafb558180b5f7271e790c16eca780fadd63296c","modified":1612087723782},{"_id":"public/archives/page/4/index.html","hash":"bafb558180b5f7271e790c16eca780fadd63296c","modified":1612087723782},{"_id":"public/archives/2019/index.html","hash":"69a48b39c7b2f703b52190531891d96f4629e6a2","modified":1612087723782},{"_id":"public/archives/2019/page/2/index.html","hash":"69a48b39c7b2f703b52190531891d96f4629e6a2","modified":1612087723782},{"_id":"public/archives/2019/page/3/index.html","hash":"69a48b39c7b2f703b52190531891d96f4629e6a2","modified":1612087723782},{"_id":"public/archives/2019/03/index.html","hash":"de1747bc418d4ee579404e27aecf505abb8b1930","modified":1612087723782},{"_id":"public/archives/2019/04/index.html","hash":"7c924d14aea106abec0e019dc6b770d659d44b7e","modified":1612087723782},{"_id":"public/archives/2019/05/index.html","hash":"48c4f97767dfeab4fbe72c72f2f68b061cb21666","modified":1612087723782},{"_id":"public/archives/2019/07/index.html","hash":"87447cd2a60c1feffb609bfec4041c0473f758d4","modified":1612087723782},{"_id":"public/archives/2019/08/index.html","hash":"31939b8b6462c61db4de8b462be1b22367da72e5","modified":1612087723782},{"_id":"public/archives/2019/09/index.html","hash":"45edcf5bb5fad6ee0d53be4dc0ae711e20ad2a42","modified":1612087723782},{"_id":"public/archives/2019/11/index.html","hash":"a7f5859a933ef0f52e8d4d0d7d9efcb9c4fbd54b","modified":1612087723782},{"_id":"public/archives/2019/12/index.html","hash":"c5551e21303977bbaef51a6109e54a60353da360","modified":1612087723782},{"_id":"public/archives/2020/index.html","hash":"66b546c098ba57a86b9780926edfb304f32df101","modified":1612087723782},{"_id":"public/archives/2020/01/index.html","hash":"896af994c8f331ba0858a776af7c761d78d75ace","modified":1612087723782},{"_id":"public/archives/2020/02/index.html","hash":"a240090c66fae0e7cd2ffb8b4478e7432308bfc6","modified":1612087723782},{"_id":"public/index.html","hash":"23bf337c7ef21aa212faaad1f2fdc861c6097e5e","modified":1612087723782},{"_id":"public/page/2/index.html","hash":"259269855a0757577cd938bbc12b66672e6506ac","modified":1612087723782},{"_id":"public/page/3/index.html","hash":"35ed1399a3d6f70b4558ac62f5f97445407b6b64","modified":1612087723782},{"_id":"public/page/4/index.html","hash":"77599cedffe4fa7d649bd6b6578b18c7a92e5959","modified":1612087723782},{"_id":"public/page/5/index.html","hash":"293116f0f029497982cbb4d99925a21813aff35a","modified":1612087723782},{"_id":"public/page/6/index.html","hash":"dce82d1b1556faae79e4feeee90ca6a5fe9ba046","modified":1612087723782},{"_id":"public/page/7/index.html","hash":"e0befb66b661088f30a07dd36130acf78d1c9c59","modified":1612087723782},{"_id":"public/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1612087723782},{"_id":"public/images/loading.svg","hash":"eedfa204e08a60ca5c80c620cfe9a3eaa6201585","modified":1612087723782},{"_id":"public/CNAME","hash":"37512881b914bd2aaae9a2e6ee291e4160f7f50a","modified":1612087723782},{"_id":"public/about/index/index/aboutme.png","hash":"2da3ebf30e8a16d1fc499dbbadfce1b04f526605","modified":1612087723782},{"_id":"public/about/index/aboutme.png","hash":"2da3ebf30e8a16d1fc499dbbadfce1b04f526605","modified":1612087723782},{"_id":"public/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1612087723782},{"_id":"public/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1612087723782},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1612087723782},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1612087723782},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1612087723782},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1612087723782},{"_id":"public/2020/01/01/Linux/Linux-权限.png","hash":"97fab980001ab4bbda62499a2d12d776d9645313","modified":1612087723782},{"_id":"public/2019/03/19/docker安装mongodb/mongo.png","hash":"8262d3a9b2956ab2e8d43ace7c706e4a96775e98","modified":1612087723782},{"_id":"public/2019/11/02/rabbitMQ延时队列/rabbitMqDelayQueue.png","hash":"f64203f539c94334a06d5420bba3d92a0695aa5a","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-feign/springcloud-feign.png","hash":"7173b87aea5f26a05efe719002c2b591fc504ed1","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-zuul/zuul-user.png","hash":"1e0f140f3deff8355450e296b92587b6d16d41b7","modified":1612087723782},{"_id":"public/2020/02/24/tomcat一键启动脚本/start-sh.png","hash":"6014de38c1105c4b22c53fcbb6a9881ac41b4415","modified":1612087723782},{"_id":"public/2019/11/20/redis安装和使用/redis.png","hash":"c16a9a8d54d8d511a04960302a40380bc3e4416b","modified":1612087723782},{"_id":"public/images/avatar.png","hash":"d608d1a238e5a5250e4f22b9548723553eb8999b","modified":1612087723782},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1612087723782},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1612087723782},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1612087723782},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1612087723782},{"_id":"public/2019/09/05/RabbitMQ安装和使用/rabbitmq.png","hash":"45b83b4a59c5787c9f8055a3f9e1df007ab13668","modified":1612087723782},{"_id":"public/2019/05/05/jvm-class文件结构/class.png","hash":"2ec48b3de1378f9d9396c6fe218471785ba975bc","modified":1612087723782},{"_id":"public/2020/01/18/mysql/mysql.png","hash":"cf811043b597672298ace563d8097e7561b5c1b7","modified":1612087723782},{"_id":"public/2019/11/23/springboot集成jedis和redisson/redisLock.png","hash":"700572c2d2b66ac7fb94fb58475b5327f236ee9f","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-config/springcloud-config.png","hash":"e138130e0ebdc424f1b667258eaeff803f560c75","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-zuul/springcloud-zuul.png","hash":"c1b7d27e968d74b7975bf1038a674f95b5b75997","modified":1612087723782},{"_id":"public/2019/03/25/timeline/一生所爱.png","hash":"5e9f38eccdf23cf497f97ce2ce539e5e426f8730","modified":1612087723782},{"_id":"public/2020/02/04/多线程/duoxiancheng.png","hash":"ecbb2127c2f86d30ed94739495534f01659ee725","modified":1612087723782},{"_id":"public/2019/08/04/jvm-类加载机制/load-class.png","hash":"69eab96202eadbf1192a5784ed2564ec2e1bf204","modified":1612087723782},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1612087723782},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1612087723782},{"_id":"public/webfonts/fa-regular-400.svg","hash":"c41a688158d577e3a2738137992d49b05b17ab8f","modified":1612087723782},{"_id":"public/2019/07/27/Java8新特性/Java8新特性.png","hash":"23a1c94b520efc0ab46ff9f10b20330957f4a9be","modified":1612087723782},{"_id":"public/2020/01/03/Linux-shell/linux-shell.png","hash":"82ff55129dcb9bda5cb667bc961f2a76d1280add","modified":1612087723782},{"_id":"public/2019/04/09/manjaro编译openjdk/openjdk.png","hash":"a3f49b627616eeb151d6b7aa3f48cee9ad17aa64","modified":1612087723782},{"_id":"public/2019/03/31/mongo乐观锁/mongoLock.png","hash":"9c660b5f99eb73f0f8f4aafa004ef7be8bc17b2f","modified":1612087723782},{"_id":"public/2019/11/12/mongo分片集群/replicaSet.png","hash":"dd83bde1afe23531a3f7e86017ad1c9d2a3ae26f","modified":1612087723782},{"_id":"public/2019/12/15/springcloud-ribbon/springcloud-ribbon.png","hash":"b7f3cbbbbf06d0ec048cbd02a6046c6510184394","modified":1612087723782},{"_id":"public/js/back2top.js","hash":"fc8e85f6704e39ae3a613bbec5dd51d449be8010","modified":1612087723782},{"_id":"public/js/dark-light-toggle.js","hash":"223e6f1d4e6e70956e4661b58c430e1c68def125","modified":1612087723782},{"_id":"public/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1612087723782},{"_id":"public/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1612087723782},{"_id":"public/js/lazyload.js","hash":"95aad532f17d7a8119979fc61ade9e626308a2af","modified":1612087723782},{"_id":"public/js/left-side-toggle.js","hash":"618f7cfc45db4d82b2f1d00d8e9ee936bcf9043b","modified":1612087723782},{"_id":"public/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1612087723782},{"_id":"public/js/main.js","hash":"ca8ed228cc0bc234be74428d029cfd047eec0ed6","modified":1612087723782},{"_id":"public/js/toc.js","hash":"ae69bf65d2b30d299b6ca9e2361d3b6e0db3a077","modified":1612087723782},{"_id":"public/js/utils.js","hash":"47c6d222a116498359345777aea383c429975abf","modified":1612087723782},{"_id":"public/css/common/animated.css","hash":"061e145f3c7ac90dd305bd5260aaee71b1833167","modified":1612087723782},{"_id":"public/css/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612087723782},{"_id":"public/css/common/markdown.css","hash":"3a3145b04fb0ff536661ae470a8c73cf6ab38d62","modified":1612087723782},{"_id":"public/css/common/basic.css","hash":"2d666b859829bfee7cf66579f543a0b9c26c8426","modified":1612087723782},{"_id":"public/css/common/variables.css","hash":"74aa9b6370901c80ee916bdf8e4907f48d5b85d9","modified":1612087723782},{"_id":"public/css/layout/article-content.css","hash":"bb2e9b90086c4a014d0dbeb97cd0beedab27fe9c","modified":1612087723782},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612087723782},{"_id":"public/css/layout/category-content.css","hash":"9687f9cbe029092b633fb804c28ecdcb54860511","modified":1612087723782},{"_id":"public/css/layout/category-list.css","hash":"672859a61a4e93c0514772112fb557395306e940","modified":1612087723782},{"_id":"public/css/layout/home-content.css","hash":"be1438b849ebf82cea573986fbbd1deed5334a72","modified":1612087723782},{"_id":"public/css/layout/page.css","hash":"dc57eee2b360ad0e9910d69653d547f033dbbd4c","modified":1612087723782},{"_id":"public/css/layout/tag-content.css","hash":"90b0cff1ef0228035cdca9ade2adef71c6c8fb5e","modified":1612087723782},{"_id":"public/css/common/codeblock/copy-code.css","hash":"b89f31aee2da7a9abe05293391a90602094095b8","modified":1612087723782},{"_id":"public/css/common/codeblock/code-theme.css","hash":"e1f7d141756aebf3587fb5de8f951c7d7e963300","modified":1612087723782},{"_id":"public/css/common/codeblock/highlight.css","hash":"6a4b0339a26ee74c0b8d947129aafd64ac5947f2","modified":1612087723782},{"_id":"public/css/style.css","hash":"8594625777040a3c259ed44adc0ca56ef8e2f2d3","modified":1612087723782},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1612087723782},{"_id":"public/2019/05/29/Java对接iOS内购以及各个渠道微信支付/pay.png","hash":"90a8d81a4c0d18818ca0a6dc0c5045566dcff361","modified":1612087723782},{"_id":"public/2019/11/25/nginx安装和使用/nginx.png","hash":"0e153676ca5962e9ee38845f8dcaa9c886682e38","modified":1612087723782},{"_id":"public/2019/04/18/springcloud/springcloud.png","hash":"1ffd0382a1d949f2f3bba10798dd021792ecde89","modified":1612087723782},{"_id":"public/2019/12/01/支付宝微信一码支付/alipay-wechatpay-qr.png","hash":"86222a1a736026d81dce3a8eac97ece32144fca9","modified":1612087723782},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1612087723782},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1612087723782},{"_id":"public/2019/04/25/springcloud-hystrix/hystrix.png","hash":"b9fc14fa24e4e3e98f09043bba2cf049ab356208","modified":1612087723782},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1612087723782},{"_id":"public/2019/12/15/java-fragment-knowledge/java-konwlege.png","hash":"8121a1cc5777b677b62d48260bf6e1b7a7cf0f63","modified":1612087723782},{"_id":"public/2019/04/24/manjaro输入密码卡死问题/密码卡死.png","hash":"393d855242bbd7c1439619866e3378332089dceb","modified":1612087723782},{"_id":"public/2019/03/28/mongo权限设置/mongoPower.png","hash":"db4ec6f2f64f1357678d897eb9678e3a4c3c14bb","modified":1612087723782},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1612087723782},{"_id":"public/2020/01/01/Linux/linux.png","hash":"bad97c79b76d1f44769bf2e2edd521ecca3c8165","modified":1612087723782},{"_id":"public/2019/04/09/docker安装MySQL/mysql.png","hash":"8fbaa372856adb3095bc2950716c70d5b6a37aec","modified":1612087723782},{"_id":"public/2019/04/18/springcloud-eureka/eureka.png","hash":"7da94f0f3fb7fdb46e59dc1366dd43eda3e04875","modified":1612087723782},{"_id":"public/2019/03/25/timeline/timeline.png","hash":"95b7be43067e16b0c12f973c67d8855c9cbe759e","modified":1612087723782},{"_id":"public/webfonts/fa-brands-400.svg","hash":"69a0ff79a9d93a451e9fa90bd79ae7008d2a9da5","modified":1612087723782},{"_id":"public/webfonts/fa-solid-900.svg","hash":"36de6a298660ed3feaab37900f7b28c3e981d80e","modified":1612087723782},{"_id":"public/2019/03/17/manjaro安装/manjaro.png","hash":"0c077502fc8d311044c168a22eb092272fa18ad5","modified":1612087723782}],"Category":[{"name":"Java","_id":"ckkkzeow50004rh1thmm66jny"},{"name":"pay","_id":"ckkkzeow9000arh1tgghtg7zl"},{"name":"Linux","_id":"ckkkzeowc000grh1t5eds3bt1"},{"name":"MQ","_id":"ckkkzeowi000trh1thspbg8hi"},{"name":"docker","_id":"ckkkzeowl0011rh1tdv982z4o"},{"name":"OS","_id":"ckkkzeowr001drh1t1u63gb2e"},{"name":"openjdk","_id":"ckkkzeowu001jrh1t0tz30b7v"},{"name":"manjaro","_id":"ckkkzeoww001prh1t0ey46ca1"},{"name":"mongo","_id":"ckkkzeowy001xrh1tgj0kem4n"},{"name":"mysql","parent":"ckkkzeowl0011rh1tdv982z4o","_id":"ckkkzeox4002frh1tbfhh0aq7"},{"name":"mysql","_id":"ckkkzeox5002mrh1ta4oy9b1i"},{"name":"netty","_id":"ckkkzeox6002qrh1t0131dro9"},{"name":"mongo","parent":"ckkkzeowl0011rh1tdv982z4o","_id":"ckkkzeox7002vrh1t6tbd7q84"},{"name":"nginx","_id":"ckkkzeox8002zrh1taemladii"},{"name":"分布式锁","_id":"ckkkzeox90033rh1t79lf308u"},{"name":"springcloud","_id":"ckkkzeox90038rh1t2qj6909e"},{"name":"we","_id":"ckkkzeoxg003zrh1tefpx0yxa"},{"name":"tomcat","_id":"ckkkzeoxh0044rh1tflmy6vi8"},{"name":"事务","_id":"ckkkzeoxj004brh1t474ra85t"},{"name":"java","_id":"ckkkzeoxk004grh1the245h2m"},{"name":"多线程","parent":"ckkkzeoxk004grh1the245h2m","_id":"ckkkzeoxl004krh1tdiuudtcj"},{"name":"缓存","_id":"ckkkzeoxt004trh1t8q616s32"}],"Data":[],"Page":[{"title":"关于我","date":"2019-03-03T15:37:38.000Z","type":"about","_content":"![dream](/about/index/aboutme.png)\n\n###### 梦想\n\n``` md\n做人如果没有梦想，跟咸鱼有什么区别？\n```\n\n###### 旅途\n\n``` md\n如果你足够幸运，年轻时候在巴黎居住过，那么此后无论你到哪里，巴黎都将一直跟着你。\n```\n\n###### 遗憾\n\n```md\n人生如果没有遗憾，那该多无聊？\n```\n\n###### 我\n\n``` md\ngood good study, day day up.\n```\n\n> 搭一个博客的事情想了很久了，初次搭建是在 18 年的时候，但是搭建之后因为那段时间事情比较多的原因，就没有去更新任何东西。现在碎块化的知识越来越多，所以准备搭建这个博客来记录一些自己学习工作中的问题和一些新知识的学习，也算是一个自我整理的地方。当然也会写一些无关技术的东西，毕竟，生活不止有代码，还有诗和远方。(•‾̑⌣‾̑•)✧˖°  \n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=430 height=86 src=\"//music.163.com/outchain/player?type=2&id=31445772&auto=0&height=66\"></iframe>","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-03-03 23:37:38\ntype: \"about\"\n\n---\n![dream](/about/index/aboutme.png)\n\n###### 梦想\n\n``` md\n做人如果没有梦想，跟咸鱼有什么区别？\n```\n\n###### 旅途\n\n``` md\n如果你足够幸运，年轻时候在巴黎居住过，那么此后无论你到哪里，巴黎都将一直跟着你。\n```\n\n###### 遗憾\n\n```md\n人生如果没有遗憾，那该多无聊？\n```\n\n###### 我\n\n``` md\ngood good study, day day up.\n```\n\n> 搭一个博客的事情想了很久了，初次搭建是在 18 年的时候，但是搭建之后因为那段时间事情比较多的原因，就没有去更新任何东西。现在碎块化的知识越来越多，所以准备搭建这个博客来记录一些自己学习工作中的问题和一些新知识的学习，也算是一个自我整理的地方。当然也会写一些无关技术的东西，毕竟，生活不止有代码，还有诗和远方。(•‾̑⌣‾̑•)✧˖°  \n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=430 height=86 src=\"//music.163.com/outchain/player?type=2&id=31445772&auto=0&height=66\"></iframe>","updated":"2021-01-31T08:04:30.255Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckkkzeovy0000rh1tdaelbmba","content":"<p><img src=\"/about/index/index/aboutme.png\" alt=\"dream\"></p>\n<h6 id=\"梦想\"><a href=\"#梦想\" class=\"headerlink\" title=\"梦想\"></a>梦想</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">做人如果没有梦想，跟咸鱼有什么区别？</span><br></pre></td></tr></table></figure>\n<h6 id=\"旅途\"><a href=\"#旅途\" class=\"headerlink\" title=\"旅途\"></a>旅途</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你足够幸运，年轻时候在巴黎居住过，那么此后无论你到哪里，巴黎都将一直跟着你。</span><br></pre></td></tr></table></figure>\n<h6 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">人生如果没有遗憾，那该多无聊？</span><br></pre></td></tr></table></figure>\n<h6 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">good good study, day day up.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>搭一个博客的事情想了很久了，初次搭建是在 18 年的时候，但是搭建之后因为那段时间事情比较多的原因，就没有去更新任何东西。现在碎块化的知识越来越多，所以准备搭建这个博客来记录一些自己学习工作中的问题和一些新知识的学习，也算是一个自我整理的地方。当然也会写一些无关技术的东西，毕竟，生活不止有代码，还有诗和远方。(•‾̑⌣‾̑•)✧˖°  </p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"430\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=31445772&auto=0&height=66\"></iframe>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/about/index/index/aboutme.png\" alt=\"dream\"></p>\n<h6 id=\"梦想\"><a href=\"#梦想\" class=\"headerlink\" title=\"梦想\"></a>梦想</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">做人如果没有梦想，跟咸鱼有什么区别？</span><br></pre></td></tr></table></figure>\n<h6 id=\"旅途\"><a href=\"#旅途\" class=\"headerlink\" title=\"旅途\"></a>旅途</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你足够幸运，年轻时候在巴黎居住过，那么此后无论你到哪里，巴黎都将一直跟着你。</span><br></pre></td></tr></table></figure>\n<h6 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">人生如果没有遗憾，那该多无聊？</span><br></pre></td></tr></table></figure>\n<h6 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h6><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">good good study, day day up.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>搭一个博客的事情想了很久了，初次搭建是在 18 年的时候，但是搭建之后因为那段时间事情比较多的原因，就没有去更新任何东西。现在碎块化的知识越来越多，所以准备搭建这个博客来记录一些自己学习工作中的问题和一些新知识的学习，也算是一个自我整理的地方。当然也会写一些无关技术的东西，毕竟，生活不止有代码，还有诗和远方。(•‾̑⌣‾̑•)✧˖°  </p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"430\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=31445772&auto=0&height=66\"></iframe>"},{"title":"categories","date":"2019-03-03T15:36:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-03 23:36:20\ntype: \"categories\"\n---\n","updated":"2021-01-31T06:31:35.772Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckkkzeow30002rh1t85n4d3jl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-03T15:38:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-03 23:38:03\ntype: \"tags\"\n---\n","updated":"2021-01-31T06:31:35.773Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckkkzeow70006rh1t7gawb6mh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java8新特性","date":"2019-07-26T16:03:44.000Z","_content":"\n![Photo by Cristofer Jeschke](Java8新特性/Java8新特性.png)\n\nJava8 相对之前版本来说是更新比较大的一个版本，不仅在 Java 语言本身，而且在编译器，类库，jvm 都引入了很多新的特性，工作中虽然偶尔会用到一些简单的特性，比如 forEach,stream,等相关功能，但是没有专门花时间去整理这些特性，最近新版本刚刚发布完成，抽空整理学习下这部分内容。用了 Java8 这么久，新特性面前不能瑟瑟发抖，哈哈哈....  <!--more-->\n\n\n#### Lambda 表达式和函数式接口 FunctionInterface\n\nLambda 表达式是 Java8 引入的一个新特性，它允许将函数作为参数传递给调用方法，极大程度的简化了 Java 的代码量，这里举个例子：\n``` java\n/// 栗子\n// Java8 之前遍历 List 实例\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nfor (String s : strings) {\n    System.out.println(s);\n}\n// Java8 \nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nstrings.forEach(s -> System.out.println(s));\n```\n上面这个例子比较简单，看起来也就省了一行代码，但是代码在整体的简洁程度有了很大的提高，Lambda 表达式主要符号是 `->`，在上面的例子中，参数 `s` 的类型是编译器自动去推断的，当然也可以自己声明参数的类型：\n``` java\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nstrings.forEach((String s )-> System.out.println(s));\n```\nLambda 表达式引用成员变量或者局部变量时，会被隐式的转成 final 类型\n```java\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nString ext = \",\";\nstrings.forEach((String s )-> System.out.println(s + ext));\n```\n上面其实等价于\n```java\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nfinal String ext = \",\";\nstrings.forEach((String s )-> System.out.println(s + ext));\n```\n\n#### 方法引用\n\nJava8 提供了方法引用的语法来直接访问类或者已经存在的方法或者构造方法，是语法更加简洁紧凑，一般主要有下面几种形式：\n##### 构造方法引用\n通过构造方法引用，可以实例化一个对象\n```java\n// Person 类【\npublic class Person {\n    public static Person newPerson(final Supplier<Person> supplier) {\n        return supplier.get();\n    }\n}\n// test\n@Test\npublic void testNew() {\n    Person person = Person.newPerson(Person::new);\n    System.out.println(person);\n}\n\n```\n通过 Class::new 这种语法来创建对象，这里要提供一个无参构造器，否则会编译出错。\n##### 类实例方法引用&静态方法引用\n```java\npublic class Person {\n\n    private Integer age;\n    public Person() {\n        age = new Random().nextInt(10);\n    }\n    public static Person newPerson(final Supplier<Person> supplier) {\n        return supplier.get();\n    }\n    public Integer getAge() {\n        System.out.println(age);\n        return age;\n    }\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n\n/// test\n@Test\npublic void testFor() {\n    List<Person> list = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n        list.add(Person.newPerson(Person::new));\n    }\n    // 类的实例方法引用\n    list.forEach(Person::getAge);\n}\n```\n从上面的例子可以看到，每次输出的都是不同的 age 属性，语法上更加简洁明了。**静态方法引用**和类的实例方法引用一样，也是 ClassName::methodName 的方式引用。一般用的最多的也就是这几种引用，后面有机会在补充上来。\n\n#### Stream 流\nJava8 提供了一种新的数据处理方式---流。流的处理的概念类似管道处理，结合 Lambda 表达式使得集合等数据处理变得简洁高效，还可以对数据进行筛选、排序、聚合等操作，简直不要太爽。\n\n> 集合，数组，I/O channel，generator 等。\n> 集合中包含串行流和并行流，一般情况下并行流比串行流效率更高。\n> 串行流：stream()。\n> 并行流：parallelStream()。\n\n下面是一个简单的列子：\n\n```java\n// javabean 添加了 name 属性\npublic class Person {\n\n    private Integer age;\n    private String name;\n    public Person() {\n        age = new Random().nextInt(10);\n    }\n\n    public Person(String name,Integer age) {\n        this.age = age;\n        this.name = name;\n    }\n    public static Person newPerson(final Supplier<Person> supplier) {\n        return supplier.get();\n    }\n    public Integer getAge() {\n        System.out.println(age);\n        return age;\n    }\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n// 测试\n@Test\npublic void testStream() {\n    List<Person> list = new ArrayList<>();\n    list.add(new Person(\"小明\", 20));\n    list.add(new Person(\"李四\", 25));\n    list.add(new Person(\"二炮\", 23));\n    list.add(new Person(\"大同\", 29));\n    list.add(new Person(\"王五\", 34));\n    list.add(new Person(\"小二\", 18));\n    Predicate<Person> predicate = (person) -> person.getAge() > 25;\n    list.forEach(person -> {\n        if(predicate.test(person)){\n            System.out.println(person.getName());\n        }\n    });\n}\n```\n这里的串行流比较类似迭代器，使用 Predicate 创建了一个条件，在迭代时将满足条件的接口打印出来。\n\n##### 聚合操作\n\n###### forEach\n> forEach() 在上面的例子中已经出现了很多次了，也是我经常用的方法之一，stream 流内部遍历简化了代码，在语法上面更加清晰。\n\n###### map\n\n> map 可以按照规则映射成另一个元素，简单来说就是可以给某个元素设置另外的值。\n```java\n@Test\npublic void testMap() {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\n    List<Integer> collect = integers.stream().map(i -> i+1).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n###### filter\n\n> filter 可以对 stream 中元素进行过滤\n\n```java\n@Test\npublic void filter() {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\n    long count = integers.stream().filter(integer -> integer > 3).count();\n    System.out.println(count);\n}\n```\n集合中数值大于 3 的数量统计。\n\n###### limit \n\n> 此方法可以获取指定数量的流\n\n```java\n@Test\npublic void testLimit() {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 8, 9, 34);\n    List<Integer> collect = integers.stream().limit(6).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n打印前 6 条记录，这里 limit 指定想要的条数，从 0 开始取。\n\n###### sorted\n\n> 顾名思义，可以利用 sorted 方法对流数据进行排序\n\n```java\n@Test\npublic void testSorted() {\n    List<Integer> integers = Arrays.asList(1, 99, 22, 4, 3, 11, 9, 34);\n    List<Integer> collect = integers.stream().sorted().collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n这个使用还是很顺滑的，减少了很多代码就可以优雅进行排序了。\n\n###### concat\n\n> 对流进行合并操作\n\nconcat 方法是 Stream 接口的一个静态方法，如果合并时两个流中元素是经过排序的，则得到的元素也是排序的结果。\n\n```java\n@Test\npublic void testConcat() {\n    List<Integer> integers = Arrays.asList(11, 9, 34);\n    List<Integer> integerList = Arrays.asList(10,19, 2);\n    List<Integer> collect = Stream.concat(integers.stream(), integerList.stream()).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n###### distinct\n\n> 对流中元素进行去重操作\n\n```java\n@Test\npublic void testDistinct() {\n    List<Integer> integers = Arrays.asList(1, 99, 1, 4, 1, 11, 1, 34);\n    List<Integer> collect = integers.stream().distinct().collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n这里有个坑，就是如果List 是一个对象集合，没有重写 equals() 方法的话，得到的答案是不正确的，因为它是基于 equals() 方法来实现的。\n\n###### skip\n\n> 跳过流中的某几个元素，经常和 limit 配置使用。\n\n使用 skip 配合 limit 可以更好的对流中元素进行分页操作。\n\n```java\n@Test\npublic void testSkip() {\n    List<Integer> integers = Arrays.asList(1, 99, 12, 40, 8, 11);\n    List<Integer> collect = integers.stream().skip(2).limit(3).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n###### match\n\n> 匹配指定的元素\n> Stream 提供了 3 个 api 接口，分别是：allMatch()，anyMatch()，noneMatch() 方法的功能基本顾名思义的。\n\n```java\n @Test\npublic void testMatch() {\n    List<Integer> integers = Arrays.asList(1, 99, 12, 40, 8, 11);\n    boolean b = integers.stream().allMatch(integer -> integer > 8);\n    System.out.println(b);\n    boolean anyMatch = integers.stream().anyMatch(integer -> integer > 8);\n    System.out.println(anyMatch);\n    boolean noneMatch = integers.stream().noneMatch(integer -> integer > 8);\n    System.out.println(noneMatch);\n}\n```\n\n#### Optional\n\n代码中空指针异常是一个让人很头疼但是又不得不去检查的操作，在 Java8 之前都是用过 if 来判断的，Java8 则引入了 Optional 来解决，使代码不被空间查污染。\nOptional 是一个容器，它可以保存任意类型的值，也可以保存 null，通过它提供的方法，就可以不用显式的进行空值判断。书面话的说明看着都是似懂非懂的感觉，还是看代码更有感觉一点。\n\n##### Optional 创建\n\n1. Optional.empty():创建一个空的 Optional 对象\n2. Optional.of(T value):传入的 value 值为 null 的话，会抛空指针异常。\n3. Optional.ofNullable(T value): 传入的 value 值允许为空。\n```java\n@Test\npublic void testOptional() {\n    // empty()\n    Optional<Person> empty = Optional.empty();\n    // of(T value)\n    Optional<Person> optional = Optional.of(new Person());\n    // ofNullable(T value)\n    Optional<Person> ofNullable = Optional.ofNullable(null);\n}\n```\n###### orElse\n\n> 有值则返回，没有则返回其他值\n\n如果传入的值是 null 时，返回 orElse 方法中指定的结果，否则返回实例的值。\n\n```java\n@Test\npublic void testOrElse() {\n    Person p = new Person();\n    Optional<String> optional = Optional.ofNullable(p.getName());\n    String name_is_null = optional.orElse(\"name is null\");\n    System.out.println(name_is_null);\n    p.setName(\"jihe\");\n    Optional<String> optionalS = Optional.ofNullable(p.getName());\n    String name_is_nullS = optionalS.orElse(\"name is null\");\n    System.out.println(name_is_nullS);\n}\n```\n\n###### orElseGet\n\n> 在功能上和 orElse() 方法类似，只是 orElseGet 指出传入一个 Lambda 表达式生产默认值\n\n如果想要的实例为 null 时，就可以通过 orElseGet 获取一个非空实例\n\n```java\n@Test\npublic void testOrElseGet() {\n    Person p = null;\n    Optional<Person> optional = Optional.ofNullable(p);\n    Person person = optional.orElseGet(() -> new Person(\"jihe\", 23));\n    System.out.println(person.getName());\n}\n```\n\n以上是一些比较常用的 Java8 新特性，后面会一点点的完善上来。另外 Java8 对时间日期处理也引入了新的 API 来解决让人傻傻分不清的日期类。让日期和时间的处理更加人性化，易于理解。在 JVM 层面，PermGen 空间被移除了，取而代之的是 MetaSpace，与之对应的 -XX:PermSize 和 -XX:MaxPermSize 参数分别被 -XX:MetaSpaceSize 和 -XX:MaxMetaSpaceSize 所代替。[ PermSize 是用来存放 Class 类元数据的内存区域，如果在应用启动时加载的类信息比较的的话，可能会抛出 \"java.lang.OutOfMemoryError: PermGen space\" 异常，Java8 使用了本地内存来存储这部分信息，将这部分空间全部移除]\n\n\n\n今晚去看了哪吒，超级好看。里面一句台词让人印象深刻。\n\n***\n\n<center>人的成见就像一座大山</center>\n\n\n\n\n\n\n\n\n\n","source":"_posts/Java8新特性.md","raw":"---\ntitle: Java8新特性\ndate: 2019-07-27 00:03:44\ntags: Java\ncategory: Java\n---\n\n![Photo by Cristofer Jeschke](Java8新特性/Java8新特性.png)\n\nJava8 相对之前版本来说是更新比较大的一个版本，不仅在 Java 语言本身，而且在编译器，类库，jvm 都引入了很多新的特性，工作中虽然偶尔会用到一些简单的特性，比如 forEach,stream,等相关功能，但是没有专门花时间去整理这些特性，最近新版本刚刚发布完成，抽空整理学习下这部分内容。用了 Java8 这么久，新特性面前不能瑟瑟发抖，哈哈哈....  <!--more-->\n\n\n#### Lambda 表达式和函数式接口 FunctionInterface\n\nLambda 表达式是 Java8 引入的一个新特性，它允许将函数作为参数传递给调用方法，极大程度的简化了 Java 的代码量，这里举个例子：\n``` java\n/// 栗子\n// Java8 之前遍历 List 实例\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nfor (String s : strings) {\n    System.out.println(s);\n}\n// Java8 \nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nstrings.forEach(s -> System.out.println(s));\n```\n上面这个例子比较简单，看起来也就省了一行代码，但是代码在整体的简洁程度有了很大的提高，Lambda 表达式主要符号是 `->`，在上面的例子中，参数 `s` 的类型是编译器自动去推断的，当然也可以自己声明参数的类型：\n``` java\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nstrings.forEach((String s )-> System.out.println(s));\n```\nLambda 表达式引用成员变量或者局部变量时，会被隐式的转成 final 类型\n```java\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nString ext = \",\";\nstrings.forEach((String s )-> System.out.println(s + ext));\n```\n上面其实等价于\n```java\nList<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\nfinal String ext = \",\";\nstrings.forEach((String s )-> System.out.println(s + ext));\n```\n\n#### 方法引用\n\nJava8 提供了方法引用的语法来直接访问类或者已经存在的方法或者构造方法，是语法更加简洁紧凑，一般主要有下面几种形式：\n##### 构造方法引用\n通过构造方法引用，可以实例化一个对象\n```java\n// Person 类【\npublic class Person {\n    public static Person newPerson(final Supplier<Person> supplier) {\n        return supplier.get();\n    }\n}\n// test\n@Test\npublic void testNew() {\n    Person person = Person.newPerson(Person::new);\n    System.out.println(person);\n}\n\n```\n通过 Class::new 这种语法来创建对象，这里要提供一个无参构造器，否则会编译出错。\n##### 类实例方法引用&静态方法引用\n```java\npublic class Person {\n\n    private Integer age;\n    public Person() {\n        age = new Random().nextInt(10);\n    }\n    public static Person newPerson(final Supplier<Person> supplier) {\n        return supplier.get();\n    }\n    public Integer getAge() {\n        System.out.println(age);\n        return age;\n    }\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n\n/// test\n@Test\npublic void testFor() {\n    List<Person> list = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n        list.add(Person.newPerson(Person::new));\n    }\n    // 类的实例方法引用\n    list.forEach(Person::getAge);\n}\n```\n从上面的例子可以看到，每次输出的都是不同的 age 属性，语法上更加简洁明了。**静态方法引用**和类的实例方法引用一样，也是 ClassName::methodName 的方式引用。一般用的最多的也就是这几种引用，后面有机会在补充上来。\n\n#### Stream 流\nJava8 提供了一种新的数据处理方式---流。流的处理的概念类似管道处理，结合 Lambda 表达式使得集合等数据处理变得简洁高效，还可以对数据进行筛选、排序、聚合等操作，简直不要太爽。\n\n> 集合，数组，I/O channel，generator 等。\n> 集合中包含串行流和并行流，一般情况下并行流比串行流效率更高。\n> 串行流：stream()。\n> 并行流：parallelStream()。\n\n下面是一个简单的列子：\n\n```java\n// javabean 添加了 name 属性\npublic class Person {\n\n    private Integer age;\n    private String name;\n    public Person() {\n        age = new Random().nextInt(10);\n    }\n\n    public Person(String name,Integer age) {\n        this.age = age;\n        this.name = name;\n    }\n    public static Person newPerson(final Supplier<Person> supplier) {\n        return supplier.get();\n    }\n    public Integer getAge() {\n        System.out.println(age);\n        return age;\n    }\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n// 测试\n@Test\npublic void testStream() {\n    List<Person> list = new ArrayList<>();\n    list.add(new Person(\"小明\", 20));\n    list.add(new Person(\"李四\", 25));\n    list.add(new Person(\"二炮\", 23));\n    list.add(new Person(\"大同\", 29));\n    list.add(new Person(\"王五\", 34));\n    list.add(new Person(\"小二\", 18));\n    Predicate<Person> predicate = (person) -> person.getAge() > 25;\n    list.forEach(person -> {\n        if(predicate.test(person)){\n            System.out.println(person.getName());\n        }\n    });\n}\n```\n这里的串行流比较类似迭代器，使用 Predicate 创建了一个条件，在迭代时将满足条件的接口打印出来。\n\n##### 聚合操作\n\n###### forEach\n> forEach() 在上面的例子中已经出现了很多次了，也是我经常用的方法之一，stream 流内部遍历简化了代码，在语法上面更加清晰。\n\n###### map\n\n> map 可以按照规则映射成另一个元素，简单来说就是可以给某个元素设置另外的值。\n```java\n@Test\npublic void testMap() {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\n    List<Integer> collect = integers.stream().map(i -> i+1).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n###### filter\n\n> filter 可以对 stream 中元素进行过滤\n\n```java\n@Test\npublic void filter() {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\n    long count = integers.stream().filter(integer -> integer > 3).count();\n    System.out.println(count);\n}\n```\n集合中数值大于 3 的数量统计。\n\n###### limit \n\n> 此方法可以获取指定数量的流\n\n```java\n@Test\npublic void testLimit() {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 8, 9, 34);\n    List<Integer> collect = integers.stream().limit(6).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n打印前 6 条记录，这里 limit 指定想要的条数，从 0 开始取。\n\n###### sorted\n\n> 顾名思义，可以利用 sorted 方法对流数据进行排序\n\n```java\n@Test\npublic void testSorted() {\n    List<Integer> integers = Arrays.asList(1, 99, 22, 4, 3, 11, 9, 34);\n    List<Integer> collect = integers.stream().sorted().collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n这个使用还是很顺滑的，减少了很多代码就可以优雅进行排序了。\n\n###### concat\n\n> 对流进行合并操作\n\nconcat 方法是 Stream 接口的一个静态方法，如果合并时两个流中元素是经过排序的，则得到的元素也是排序的结果。\n\n```java\n@Test\npublic void testConcat() {\n    List<Integer> integers = Arrays.asList(11, 9, 34);\n    List<Integer> integerList = Arrays.asList(10,19, 2);\n    List<Integer> collect = Stream.concat(integers.stream(), integerList.stream()).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n###### distinct\n\n> 对流中元素进行去重操作\n\n```java\n@Test\npublic void testDistinct() {\n    List<Integer> integers = Arrays.asList(1, 99, 1, 4, 1, 11, 1, 34);\n    List<Integer> collect = integers.stream().distinct().collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n这里有个坑，就是如果List 是一个对象集合，没有重写 equals() 方法的话，得到的答案是不正确的，因为它是基于 equals() 方法来实现的。\n\n###### skip\n\n> 跳过流中的某几个元素，经常和 limit 配置使用。\n\n使用 skip 配合 limit 可以更好的对流中元素进行分页操作。\n\n```java\n@Test\npublic void testSkip() {\n    List<Integer> integers = Arrays.asList(1, 99, 12, 40, 8, 11);\n    List<Integer> collect = integers.stream().skip(2).limit(3).collect(Collectors.toList());\n    System.out.println(collect);\n}\n```\n\n###### match\n\n> 匹配指定的元素\n> Stream 提供了 3 个 api 接口，分别是：allMatch()，anyMatch()，noneMatch() 方法的功能基本顾名思义的。\n\n```java\n @Test\npublic void testMatch() {\n    List<Integer> integers = Arrays.asList(1, 99, 12, 40, 8, 11);\n    boolean b = integers.stream().allMatch(integer -> integer > 8);\n    System.out.println(b);\n    boolean anyMatch = integers.stream().anyMatch(integer -> integer > 8);\n    System.out.println(anyMatch);\n    boolean noneMatch = integers.stream().noneMatch(integer -> integer > 8);\n    System.out.println(noneMatch);\n}\n```\n\n#### Optional\n\n代码中空指针异常是一个让人很头疼但是又不得不去检查的操作，在 Java8 之前都是用过 if 来判断的，Java8 则引入了 Optional 来解决，使代码不被空间查污染。\nOptional 是一个容器，它可以保存任意类型的值，也可以保存 null，通过它提供的方法，就可以不用显式的进行空值判断。书面话的说明看着都是似懂非懂的感觉，还是看代码更有感觉一点。\n\n##### Optional 创建\n\n1. Optional.empty():创建一个空的 Optional 对象\n2. Optional.of(T value):传入的 value 值为 null 的话，会抛空指针异常。\n3. Optional.ofNullable(T value): 传入的 value 值允许为空。\n```java\n@Test\npublic void testOptional() {\n    // empty()\n    Optional<Person> empty = Optional.empty();\n    // of(T value)\n    Optional<Person> optional = Optional.of(new Person());\n    // ofNullable(T value)\n    Optional<Person> ofNullable = Optional.ofNullable(null);\n}\n```\n###### orElse\n\n> 有值则返回，没有则返回其他值\n\n如果传入的值是 null 时，返回 orElse 方法中指定的结果，否则返回实例的值。\n\n```java\n@Test\npublic void testOrElse() {\n    Person p = new Person();\n    Optional<String> optional = Optional.ofNullable(p.getName());\n    String name_is_null = optional.orElse(\"name is null\");\n    System.out.println(name_is_null);\n    p.setName(\"jihe\");\n    Optional<String> optionalS = Optional.ofNullable(p.getName());\n    String name_is_nullS = optionalS.orElse(\"name is null\");\n    System.out.println(name_is_nullS);\n}\n```\n\n###### orElseGet\n\n> 在功能上和 orElse() 方法类似，只是 orElseGet 指出传入一个 Lambda 表达式生产默认值\n\n如果想要的实例为 null 时，就可以通过 orElseGet 获取一个非空实例\n\n```java\n@Test\npublic void testOrElseGet() {\n    Person p = null;\n    Optional<Person> optional = Optional.ofNullable(p);\n    Person person = optional.orElseGet(() -> new Person(\"jihe\", 23));\n    System.out.println(person.getName());\n}\n```\n\n以上是一些比较常用的 Java8 新特性，后面会一点点的完善上来。另外 Java8 对时间日期处理也引入了新的 API 来解决让人傻傻分不清的日期类。让日期和时间的处理更加人性化，易于理解。在 JVM 层面，PermGen 空间被移除了，取而代之的是 MetaSpace，与之对应的 -XX:PermSize 和 -XX:MaxPermSize 参数分别被 -XX:MetaSpaceSize 和 -XX:MaxMetaSpaceSize 所代替。[ PermSize 是用来存放 Class 类元数据的内存区域，如果在应用启动时加载的类信息比较的的话，可能会抛出 \"java.lang.OutOfMemoryError: PermGen space\" 异常，Java8 使用了本地内存来存储这部分信息，将这部分空间全部移除]\n\n\n\n今晚去看了哪吒，超级好看。里面一句台词让人印象深刻。\n\n***\n\n<center>人的成见就像一座大山</center>\n\n\n\n\n\n\n\n\n\n","slug":"Java8新特性","published":1,"updated":"2021-01-31T06:31:35.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeow00001rh1t3dp096ge","content":"<p><img src=\"/2019/07/27/Java8%E6%96%B0%E7%89%B9%E6%80%A7/Java8%E6%96%B0%E7%89%B9%E6%80%A7.png\" alt=\"Photo by Cristofer Jeschke\"></p>\n<p>Java8 相对之前版本来说是更新比较大的一个版本，不仅在 Java 语言本身，而且在编译器，类库，jvm 都引入了很多新的特性，工作中虽然偶尔会用到一些简单的特性，比如 forEach,stream,等相关功能，但是没有专门花时间去整理这些特性，最近新版本刚刚发布完成，抽空整理学习下这部分内容。用了 Java8 这么久，新特性面前不能瑟瑟发抖，哈哈哈….  <a id=\"more\"></a></p>\n<h4 id=\"Lambda-表达式和函数式接口-FunctionInterface\"><a href=\"#Lambda-表达式和函数式接口-FunctionInterface\" class=\"headerlink\" title=\"Lambda 表达式和函数式接口 FunctionInterface\"></a>Lambda 表达式和函数式接口 FunctionInterface</h4><p>Lambda 表达式是 Java8 引入的一个新特性，它允许将函数作为参数传递给调用方法，极大程度的简化了 Java 的代码量，这里举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 栗子</span></span><br><span class=\"line\"><span class=\"comment\">// Java8 之前遍历 List 实例</span></span><br><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s : strings) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java8 </span></span><br><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">strings.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>\n<p>上面这个例子比较简单，看起来也就省了一行代码，但是代码在整体的简洁程度有了很大的提高，Lambda 表达式主要符号是 <code>-&gt;</code>，在上面的例子中，参数 <code>s</code> 的类型是编译器自动去推断的，当然也可以自己声明参数的类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">strings.forEach((String s )-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>\n<p>Lambda 表达式引用成员变量或者局部变量时，会被隐式的转成 final 类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">String ext = <span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">strings.forEach((String s )-&gt; System.out.println(s + ext));</span><br></pre></td></tr></table></figure>\n<p>上面其实等价于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> String ext = <span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">strings.forEach((String s )-&gt; System.out.println(s + ext));</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h4><p>Java8 提供了方法引用的语法来直接访问类或者已经存在的方法或者构造方法，是语法更加简洁紧凑，一般主要有下面几种形式：</p>\n<h5 id=\"构造方法引用\"><a href=\"#构造方法引用\" class=\"headerlink\" title=\"构造方法引用\"></a>构造方法引用</h5><p>通过构造方法引用，可以实例化一个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person 类【</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">newPerson</span><span class=\"params\">(<span class=\"keyword\">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// test</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person person = Person.newPerson(Person::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">    System.out.println(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>通过 Class::new 这种语法来创建对象，这里要提供一个无参构造器，否则会编译出错。</p>\n<h5 id=\"类实例方法引用-amp-静态方法引用\"><a href=\"#类实例方法引用-amp-静态方法引用\" class=\"headerlink\" title=\"类实例方法引用&amp;静态方法引用\"></a>类实例方法引用&amp;静态方法引用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">newPerson</span><span class=\"params\">(<span class=\"keyword\">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// test</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Person&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        list.add(Person.newPerson(Person::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 类的实例方法引用</span></span><br><span class=\"line\">    list.forEach(Person::getAge);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看到，每次输出的都是不同的 age 属性，语法上更加简洁明了。<strong>静态方法引用</strong>和类的实例方法引用一样，也是 ClassName::methodName 的方式引用。一般用的最多的也就是这几种引用，后面有机会在补充上来。</p>\n<h4 id=\"Stream-流\"><a href=\"#Stream-流\" class=\"headerlink\" title=\"Stream 流\"></a>Stream 流</h4><p>Java8 提供了一种新的数据处理方式—流。流的处理的概念类似管道处理，结合 Lambda 表达式使得集合等数据处理变得简洁高效，还可以对数据进行筛选、排序、聚合等操作，简直不要太爽。</p>\n<blockquote>\n<p>集合，数组，I/O channel，generator 等。<br>集合中包含串行流和并行流，一般情况下并行流比串行流效率更高。<br>串行流：stream()。<br>并行流：parallelStream()。</p>\n</blockquote>\n<p>下面是一个简单的列子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javabean 添加了 name 属性</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name,Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">newPerson</span><span class=\"params\">(<span class=\"keyword\">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStream</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Person&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">25</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;二炮&quot;</span>, <span class=\"number\">23</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;大同&quot;</span>, <span class=\"number\">29</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">34</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;小二&quot;</span>, <span class=\"number\">18</span>));</span><br><span class=\"line\">    Predicate&lt;Person&gt; predicate = (person) -&gt; person.getAge() &gt; <span class=\"number\">25</span>;</span><br><span class=\"line\">    list.forEach(person -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(predicate.test(person))&#123;</span><br><span class=\"line\">            System.out.println(person.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的串行流比较类似迭代器，使用 Predicate 创建了一个条件，在迭代时将满足条件的接口打印出来。</p>\n<h5 id=\"聚合操作\"><a href=\"#聚合操作\" class=\"headerlink\" title=\"聚合操作\"></a>聚合操作</h5><h6 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h6><blockquote>\n<p>forEach() 在上面的例子中已经出现了很多次了，也是我经常用的方法之一，stream 流内部遍历简化了代码，在语法上面更加清晰。</p>\n</blockquote>\n<h6 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h6><blockquote>\n<p>map 可以按照规则映射成另一个元素，简单来说就是可以给某个元素设置另外的值。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().map(i -&gt; i+<span class=\"number\">1</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h6><blockquote>\n<p>filter 可以对 stream 中元素进行过滤</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">filter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count = integers.stream().filter(integer -&gt; integer &gt; <span class=\"number\">3</span>).count();</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>集合中数值大于 3 的数量统计。</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><blockquote>\n<p>此方法可以获取指定数量的流</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testLimit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().limit(<span class=\"number\">6</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印前 6 条记录，这里 limit 指定想要的条数，从 0 开始取。</p>\n<h6 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h6><blockquote>\n<p>顾名思义，可以利用 sorted 方法对流数据进行排序</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSorted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">22</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个使用还是很顺滑的，减少了很多代码就可以优雅进行排序了。</p>\n<h6 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h6><blockquote>\n<p>对流进行合并操作</p>\n</blockquote>\n<p>concat 方法是 Stream 接口的一个静态方法，如果合并时两个流中元素是经过排序的，则得到的元素也是排序的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testConcat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; integerList = Arrays.asList(<span class=\"number\">10</span>,<span class=\"number\">19</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = Stream.concat(integers.stream(), integerList.stream()).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h6><blockquote>\n<p>对流中元素进行去重操作</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDistinct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有个坑，就是如果List 是一个对象集合，没有重写 equals() 方法的话，得到的答案是不正确的，因为它是基于 equals() 方法来实现的。</p>\n<h6 id=\"skip\"><a href=\"#skip\" class=\"headerlink\" title=\"skip\"></a>skip</h6><blockquote>\n<p>跳过流中的某几个元素，经常和 limit 配置使用。</p>\n</blockquote>\n<p>使用 skip 配合 limit 可以更好的对流中元素进行分页操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().skip(<span class=\"number\">2</span>).limit(<span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h6><blockquote>\n<p>匹配指定的元素<br>Stream 提供了 3 个 api 接口，分别是：allMatch()，anyMatch()，noneMatch() 方法的功能基本顾名思义的。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMatch</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = integers.stream().allMatch(integer -&gt; integer &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> anyMatch = integers.stream().anyMatch(integer -&gt; integer &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    System.out.println(anyMatch);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> noneMatch = integers.stream().noneMatch(integer -&gt; integer &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    System.out.println(noneMatch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h4><p>代码中空指针异常是一个让人很头疼但是又不得不去检查的操作，在 Java8 之前都是用过 if 来判断的，Java8 则引入了 Optional 来解决，使代码不被空间查污染。<br>Optional 是一个容器，它可以保存任意类型的值，也可以保存 null，通过它提供的方法，就可以不用显式的进行空值判断。书面话的说明看着都是似懂非懂的感觉，还是看代码更有感觉一点。</p>\n<h5 id=\"Optional-创建\"><a href=\"#Optional-创建\" class=\"headerlink\" title=\"Optional 创建\"></a>Optional 创建</h5><ol>\n<li>Optional.empty():创建一个空的 Optional 对象</li>\n<li>Optional.of(T value):传入的 value 值为 null 的话，会抛空指针异常。</li>\n<li>Optional.ofNullable(T value): 传入的 value 值允许为空。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOptional</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// empty()</span></span><br><span class=\"line\">    Optional&lt;Person&gt; empty = Optional.empty();</span><br><span class=\"line\">    <span class=\"comment\">// of(T value)</span></span><br><span class=\"line\">    Optional&lt;Person&gt; optional = Optional.of(<span class=\"keyword\">new</span> Person());</span><br><span class=\"line\">    <span class=\"comment\">// ofNullable(T value)</span></span><br><span class=\"line\">    Optional&lt;Person&gt; ofNullable = Optional.ofNullable(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"orElse\"><a href=\"#orElse\" class=\"headerlink\" title=\"orElse\"></a>orElse</h6></li>\n</ol>\n<blockquote>\n<p>有值则返回，没有则返回其他值</p>\n</blockquote>\n<p>如果传入的值是 null 时，返回 orElse 方法中指定的结果，否则返回实例的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOrElse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    Optional&lt;String&gt; optional = Optional.ofNullable(p.getName());</span><br><span class=\"line\">    String name_is_null = optional.orElse(<span class=\"string\">&quot;name is null&quot;</span>);</span><br><span class=\"line\">    System.out.println(name_is_null);</span><br><span class=\"line\">    p.setName(<span class=\"string\">&quot;jihe&quot;</span>);</span><br><span class=\"line\">    Optional&lt;String&gt; optionalS = Optional.ofNullable(p.getName());</span><br><span class=\"line\">    String name_is_nullS = optionalS.orElse(<span class=\"string\">&quot;name is null&quot;</span>);</span><br><span class=\"line\">    System.out.println(name_is_nullS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"orElseGet\"><a href=\"#orElseGet\" class=\"headerlink\" title=\"orElseGet\"></a>orElseGet</h6><blockquote>\n<p>在功能上和 orElse() 方法类似，只是 orElseGet 指出传入一个 Lambda 表达式生产默认值</p>\n</blockquote>\n<p>如果想要的实例为 null 时，就可以通过 orElseGet 获取一个非空实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOrElseGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Optional&lt;Person&gt; optional = Optional.ofNullable(p);</span><br><span class=\"line\">    Person person = optional.orElseGet(() -&gt; <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;jihe&quot;</span>, <span class=\"number\">23</span>));</span><br><span class=\"line\">    System.out.println(person.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是一些比较常用的 Java8 新特性，后面会一点点的完善上来。另外 Java8 对时间日期处理也引入了新的 API 来解决让人傻傻分不清的日期类。让日期和时间的处理更加人性化，易于理解。在 JVM 层面，PermGen 空间被移除了，取而代之的是 MetaSpace，与之对应的 -XX:PermSize 和 -XX:MaxPermSize 参数分别被 -XX:MetaSpaceSize 和 -XX:MaxMetaSpaceSize 所代替。[ PermSize 是用来存放 Class 类元数据的内存区域，如果在应用启动时加载的类信息比较的的话，可能会抛出 “java.lang.OutOfMemoryError: PermGen space” 异常，Java8 使用了本地内存来存储这部分信息，将这部分空间全部移除]</p>\n<p>今晚去看了哪吒，超级好看。里面一句台词让人印象深刻。</p>\n<hr>\n<center>人的成见就像一座大山</center>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/07/27/Java8%E6%96%B0%E7%89%B9%E6%80%A7/Java8%E6%96%B0%E7%89%B9%E6%80%A7.png\" alt=\"Photo by Cristofer Jeschke\"></p>\n<p>Java8 相对之前版本来说是更新比较大的一个版本，不仅在 Java 语言本身，而且在编译器，类库，jvm 都引入了很多新的特性，工作中虽然偶尔会用到一些简单的特性，比如 forEach,stream,等相关功能，但是没有专门花时间去整理这些特性，最近新版本刚刚发布完成，抽空整理学习下这部分内容。用了 Java8 这么久，新特性面前不能瑟瑟发抖，哈哈哈….</p>","more":"<p></p>\n<h4 id=\"Lambda-表达式和函数式接口-FunctionInterface\"><a href=\"#Lambda-表达式和函数式接口-FunctionInterface\" class=\"headerlink\" title=\"Lambda 表达式和函数式接口 FunctionInterface\"></a>Lambda 表达式和函数式接口 FunctionInterface</h4><p>Lambda 表达式是 Java8 引入的一个新特性，它允许将函数作为参数传递给调用方法，极大程度的简化了 Java 的代码量，这里举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 栗子</span></span><br><span class=\"line\"><span class=\"comment\">// Java8 之前遍历 List 实例</span></span><br><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s : strings) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java8 </span></span><br><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">strings.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>\n<p>上面这个例子比较简单，看起来也就省了一行代码，但是代码在整体的简洁程度有了很大的提高，Lambda 表达式主要符号是 <code>-&gt;</code>，在上面的例子中，参数 <code>s</code> 的类型是编译器自动去推断的，当然也可以自己声明参数的类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">strings.forEach((String s )-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>\n<p>Lambda 表达式引用成员变量或者局部变量时，会被隐式的转成 final 类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">String ext = <span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">strings.forEach((String s )-&gt; System.out.println(s + ext));</span><br></pre></td></tr></table></figure>\n<p>上面其实等价于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> String ext = <span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">strings.forEach((String s )-&gt; System.out.println(s + ext));</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h4><p>Java8 提供了方法引用的语法来直接访问类或者已经存在的方法或者构造方法，是语法更加简洁紧凑，一般主要有下面几种形式：</p>\n<h5 id=\"构造方法引用\"><a href=\"#构造方法引用\" class=\"headerlink\" title=\"构造方法引用\"></a>构造方法引用</h5><p>通过构造方法引用，可以实例化一个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person 类【</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">newPerson</span><span class=\"params\">(<span class=\"keyword\">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// test</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person person = Person.newPerson(Person::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">    System.out.println(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>通过 Class::new 这种语法来创建对象，这里要提供一个无参构造器，否则会编译出错。</p>\n<h5 id=\"类实例方法引用-amp-静态方法引用\"><a href=\"#类实例方法引用-amp-静态方法引用\" class=\"headerlink\" title=\"类实例方法引用&amp;静态方法引用\"></a>类实例方法引用&amp;静态方法引用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">newPerson</span><span class=\"params\">(<span class=\"keyword\">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// test</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Person&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        list.add(Person.newPerson(Person::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 类的实例方法引用</span></span><br><span class=\"line\">    list.forEach(Person::getAge);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看到，每次输出的都是不同的 age 属性，语法上更加简洁明了。<strong>静态方法引用</strong>和类的实例方法引用一样，也是 ClassName::methodName 的方式引用。一般用的最多的也就是这几种引用，后面有机会在补充上来。</p>\n<h4 id=\"Stream-流\"><a href=\"#Stream-流\" class=\"headerlink\" title=\"Stream 流\"></a>Stream 流</h4><p>Java8 提供了一种新的数据处理方式—流。流的处理的概念类似管道处理，结合 Lambda 表达式使得集合等数据处理变得简洁高效，还可以对数据进行筛选、排序、聚合等操作，简直不要太爽。</p>\n<blockquote>\n<p>集合，数组，I/O channel，generator 等。<br>集合中包含串行流和并行流，一般情况下并行流比串行流效率更高。<br>串行流：stream()。<br>并行流：parallelStream()。</p>\n</blockquote>\n<p>下面是一个简单的列子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javabean 添加了 name 属性</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        age = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name,Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">newPerson</span><span class=\"params\">(<span class=\"keyword\">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStream</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Person&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">25</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;二炮&quot;</span>, <span class=\"number\">23</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;大同&quot;</span>, <span class=\"number\">29</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">34</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;小二&quot;</span>, <span class=\"number\">18</span>));</span><br><span class=\"line\">    Predicate&lt;Person&gt; predicate = (person) -&gt; person.getAge() &gt; <span class=\"number\">25</span>;</span><br><span class=\"line\">    list.forEach(person -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(predicate.test(person))&#123;</span><br><span class=\"line\">            System.out.println(person.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的串行流比较类似迭代器，使用 Predicate 创建了一个条件，在迭代时将满足条件的接口打印出来。</p>\n<h5 id=\"聚合操作\"><a href=\"#聚合操作\" class=\"headerlink\" title=\"聚合操作\"></a>聚合操作</h5><h6 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h6><blockquote>\n<p>forEach() 在上面的例子中已经出现了很多次了，也是我经常用的方法之一，stream 流内部遍历简化了代码，在语法上面更加清晰。</p>\n</blockquote>\n<h6 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h6><blockquote>\n<p>map 可以按照规则映射成另一个元素，简单来说就是可以给某个元素设置另外的值。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().map(i -&gt; i+<span class=\"number\">1</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h6><blockquote>\n<p>filter 可以对 stream 中元素进行过滤</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">filter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count = integers.stream().filter(integer -&gt; integer &gt; <span class=\"number\">3</span>).count();</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>集合中数值大于 3 的数量统计。</p>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h6><blockquote>\n<p>此方法可以获取指定数量的流</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testLimit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().limit(<span class=\"number\">6</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印前 6 条记录，这里 limit 指定想要的条数，从 0 开始取。</p>\n<h6 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h6><blockquote>\n<p>顾名思义，可以利用 sorted 方法对流数据进行排序</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSorted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">22</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个使用还是很顺滑的，减少了很多代码就可以优雅进行排序了。</p>\n<h6 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h6><blockquote>\n<p>对流进行合并操作</p>\n</blockquote>\n<p>concat 方法是 Stream 接口的一个静态方法，如果合并时两个流中元素是经过排序的，则得到的元素也是排序的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testConcat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; integerList = Arrays.asList(<span class=\"number\">10</span>,<span class=\"number\">19</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = Stream.concat(integers.stream(), integerList.stream()).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h6><blockquote>\n<p>对流中元素进行去重操作</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDistinct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">34</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有个坑，就是如果List 是一个对象集合，没有重写 equals() 方法的话，得到的答案是不正确的，因为它是基于 equals() 方法来实现的。</p>\n<h6 id=\"skip\"><a href=\"#skip\" class=\"headerlink\" title=\"skip\"></a>skip</h6><blockquote>\n<p>跳过流中的某几个元素，经常和 limit 配置使用。</p>\n</blockquote>\n<p>使用 skip 配合 limit 可以更好的对流中元素进行分页操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSkip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().skip(<span class=\"number\">2</span>).limit(<span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h6><blockquote>\n<p>匹配指定的元素<br>Stream 提供了 3 个 api 接口，分别是：allMatch()，anyMatch()，noneMatch() 方法的功能基本顾名思义的。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMatch</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">99</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = integers.stream().allMatch(integer -&gt; integer &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> anyMatch = integers.stream().anyMatch(integer -&gt; integer &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    System.out.println(anyMatch);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> noneMatch = integers.stream().noneMatch(integer -&gt; integer &gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    System.out.println(noneMatch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h4><p>代码中空指针异常是一个让人很头疼但是又不得不去检查的操作，在 Java8 之前都是用过 if 来判断的，Java8 则引入了 Optional 来解决，使代码不被空间查污染。<br>Optional 是一个容器，它可以保存任意类型的值，也可以保存 null，通过它提供的方法，就可以不用显式的进行空值判断。书面话的说明看着都是似懂非懂的感觉，还是看代码更有感觉一点。</p>\n<h5 id=\"Optional-创建\"><a href=\"#Optional-创建\" class=\"headerlink\" title=\"Optional 创建\"></a>Optional 创建</h5><ol>\n<li>Optional.empty():创建一个空的 Optional 对象</li>\n<li>Optional.of(T value):传入的 value 值为 null 的话，会抛空指针异常。</li>\n<li>Optional.ofNullable(T value): 传入的 value 值允许为空。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOptional</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// empty()</span></span><br><span class=\"line\">    Optional&lt;Person&gt; empty = Optional.empty();</span><br><span class=\"line\">    <span class=\"comment\">// of(T value)</span></span><br><span class=\"line\">    Optional&lt;Person&gt; optional = Optional.of(<span class=\"keyword\">new</span> Person());</span><br><span class=\"line\">    <span class=\"comment\">// ofNullable(T value)</span></span><br><span class=\"line\">    Optional&lt;Person&gt; ofNullable = Optional.ofNullable(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"orElse\"><a href=\"#orElse\" class=\"headerlink\" title=\"orElse\"></a>orElse</h6></li>\n</ol>\n<blockquote>\n<p>有值则返回，没有则返回其他值</p>\n</blockquote>\n<p>如果传入的值是 null 时，返回 orElse 方法中指定的结果，否则返回实例的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOrElse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    Optional&lt;String&gt; optional = Optional.ofNullable(p.getName());</span><br><span class=\"line\">    String name_is_null = optional.orElse(<span class=\"string\">&quot;name is null&quot;</span>);</span><br><span class=\"line\">    System.out.println(name_is_null);</span><br><span class=\"line\">    p.setName(<span class=\"string\">&quot;jihe&quot;</span>);</span><br><span class=\"line\">    Optional&lt;String&gt; optionalS = Optional.ofNullable(p.getName());</span><br><span class=\"line\">    String name_is_nullS = optionalS.orElse(<span class=\"string\">&quot;name is null&quot;</span>);</span><br><span class=\"line\">    System.out.println(name_is_nullS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"orElseGet\"><a href=\"#orElseGet\" class=\"headerlink\" title=\"orElseGet\"></a>orElseGet</h6><blockquote>\n<p>在功能上和 orElse() 方法类似，只是 orElseGet 指出传入一个 Lambda 表达式生产默认值</p>\n</blockquote>\n<p>如果想要的实例为 null 时，就可以通过 orElseGet 获取一个非空实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testOrElseGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Person p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Optional&lt;Person&gt; optional = Optional.ofNullable(p);</span><br><span class=\"line\">    Person person = optional.orElseGet(() -&gt; <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;jihe&quot;</span>, <span class=\"number\">23</span>));</span><br><span class=\"line\">    System.out.println(person.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是一些比较常用的 Java8 新特性，后面会一点点的完善上来。另外 Java8 对时间日期处理也引入了新的 API 来解决让人傻傻分不清的日期类。让日期和时间的处理更加人性化，易于理解。在 JVM 层面，PermGen 空间被移除了，取而代之的是 MetaSpace，与之对应的 -XX:PermSize 和 -XX:MaxPermSize 参数分别被 -XX:MetaSpaceSize 和 -XX:MaxMetaSpaceSize 所代替。[ PermSize 是用来存放 Class 类元数据的内存区域，如果在应用启动时加载的类信息比较的的话，可能会抛出 “java.lang.OutOfMemoryError: PermGen space” 异常，Java8 使用了本地内存来存储这部分信息，将这部分空间全部移除]</p>\n<p>今晚去看了哪吒，超级好看。里面一句台词让人印象深刻。</p>\n<hr>\n<center>人的成见就像一座大山</center>"},{"title":"Java对接iOS内购以及各个渠道微信支付","date":"2019-05-29T15:11:29.000Z","_content":"\n![](jvm-Java对接iOS内购以及各个渠道微信支付/pay.png)\n\n最近因为公司业务需要，要对接支付这一块，我也是第一次对接第三方支付相关，因为是微信，iOS 缘故，对接前感觉可能会比较容易，毕竟这两家的东西用的人肯定很多，但是在具体的对接过程中还是碰到了很多的问题。\n\n<!-- more -->\n\n##### iOS 内购\n\niOS 对接相对来说比较容易点，客户端 SDK 已经集成了支付相关的很多流程，这里服务端只是做一个校验，保存相关数据和业务操作就可以。\n\n###### 购买流程：\n\n1. app 购买成功之后，将 receipt-data 提交给自己的应用服务器\n2. 应用服务器拿到数据之后解析后拿着数据去苹果服务器验证。\n3. 苹果返回验证结果给应用服务器，应用服务器返回给 app。\n\n####### 问题\n\n1. 应用服务器到苹果服务器验证数时会有两个环境，沙盒测试环境和正式环境，这里在保存数据的时候要注意标记支付环境，方便后续统计数据。\n2. 苹果服务器访问是真慢。\n3. 这个问题是代码上线一段时间后在生产暴露出来的，被刷单。\n\n###### 相关代码\n\n> \n1. 内购沙盒地址：SANDBOX_CERTIFICATE_URL = https://sandbox.itunes.apple.com/verifyReceipt\n2. 正式地址：    BUY_CERTIFICATE_URL = https://buy.itunes.apple.com/verifyReceipt\n\n``` java\n/**\n * \n * @param receiptData app 端传来的交易数据\n * @param userId 用户ID\n * @return \n*/\npublic Order iosInnerBuy(String receiptData, String userId) {\n        // 用于记录是沙盒测试支付还是实际用户购买支付，可用于以后对账\n        String payChannel = \"sandbox\";\n        String result = OkHttpUtil.sendHttpPost(SANDBOX_CERTIFICATE_URL, \"{\\\"receipt-data\\\":\\\"\" + receiptData + \"\\\"}\");\n        JSONObject obj = JSONObject.parseObject(result);\n        // 如果沙箱环境没有成功，调用正式环境处理\n        if (obj.getInteger(\"status\") != 0) {\n            payChannel = \"formal\";\n            result = OkHttpUtil.sendHttpPost(BUY_CERTIFICATE_URL, \"{\\\"receipt-data\\\":\\\"\" + receiptData + \"\\\"}\");\n        }\n        String productId = \"\";\n        JSONObject jsonArry = JSONObject.parseObject(result);\n        if (jsonArry == null) {\n            throw new ParamsException(Code.FAILED, \"参数有误\");\n        }\n        JSONObject map = (JSONObject) jsonArry.get(\"receipt\");\n        if (map == null) {\n            throw new ParamsException(Code.FAILED, \"参数有误\");\n        }\n        JSONArray inApp = (JSONArray) map.get(\"in_app\");\n        if (inApp == null) {\n            throw new ParamsException(Code.FAILED, \"参数有误\");\n        }\n        if (inApp.size() > 0) {\n            for (int i = 0; i < inApp.size(); i++) {\n                JSONObject json = inApp.getJSONObject(i);\n                productId = (String) json.get(\"product_id\");\n            }\n        }\n        if (StringUtils.isBlank(productId)) {\n            log.info(\"product_id 为空，返回结果为:{}\", result);\n            throw new ParamsException(Code.FAILED, \"product_id 不能为空\");\n        }\n        // TODO 具体的业务逻辑...\n        return order;\n    }\n\n```\n\n###### 被恶意攻击\n1. 起因\n\n因为版本时间比较紧张，各个开发和测试的时间都很短，导致在开发和测试环境没有暴露出来被刷单的问题。今天数据分析师突然说有异常充值订单，（和钱有关的还是要进行代码审核，多方确认才能上生产的）进行排查后发现是因为有人用支付成功的 receipt-data 来进行多次请求（应该是写了脚本进行连续访问）因为当时代码没有加入苹果支付返回的唯一ID transaction_id（这里确实是代码问题，正常情况是必须加上这些参数的）。导致重复充值问题。当时已经下班了才发现的（肯定回不去了），立马进行了修复，异常订单问题还没有讨论。\n\n2. 解决\n\n```\n1. 首先给充值接口添加 redis 分布式锁，防止脚本恶意频繁刷单。接口的加密校验也做了处理。\n2. 保存 Apple 验证返回的 transaction_id，校验获取到的这个值是唯一的，和 product_id 在同一层数据结构中。\n3. 对异常用户做一些处理，纠正被刷的订单。\n```\n\n> 这个解决也都相对简单，就是在创建订单前先用 transaction_id 检查以下有没有订单，如果有的话就直接抛出相应的异常告知调用方。\n> 如果没有的话，则创建订单，保存对应的 transaction_id，进行数据校验。\n\n##### 微信 app 支付\n\n> 推荐参考 https://github.com/binarywang\n\n微信支付我们在生活中使用也比较多，流程也相对比较清晰，并且官方提供的文档都是中文的，所以比较容易一点。微信支付一般涉及到 APP 拉起支付，h5 支付，JSAPI 支付，Native 支付这几种，具体描述[官网](https://pay.weixin.qq.com/wiki/doc/api/index.html)看起来比较清晰，也更加详细，这里先看下 [APP 支付](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1)，在自己 APP 中集成微信支付。\n\n###### 流程\n\n1. 选择要购买的商品，调用 APP 自己的服务生成订单和支付数据，加签后返回给客户端。\n2. 客户端校验服务端返回的参数，拉起微信支付。\n3. 输入密码进行支付，生成支付信息。\n\n###### 问题\n\n1. 前后端验签的时候特别容易出错，这里要仔细看文档。\n\n###### 相关代码\n\n``` java\n /**\n     * 统一预下单接口\n     *\n     * @param jsonParam\n     * @param request\n     * @return\n     * @throws WxPayException\n     */\n    @RequestMapping(\"/unifiedOrder\")\n    @ResponseBody\n    public ResponseMsg unifiedOrder(@RequestBody JSONObject jsonParam,\n                                    HttpServletRequest request) throws WxPayException {\n        ResponseMsg responseMsg = new ResponseMsg(Code.SUCCESSED, Constants.SUCCESS);\n        // 1. 根据自己业务校验参数\n        // 2. 创建订单\n        WxPayUnifiedOrderRequest orderRequest = new WxPayUnifiedOrderRequest();\n        //商品描述\n        orderRequest.setBody(\"some desc\");\n        //商户订单号\n        orderRequest.setOutTradeNo(order.getOrderId());\n        //订单总金额，单位为分\n        orderRequest.setTotalFee(Item.getPrice());\n        //终端IP\n        orderRequest.setSpbillCreateIp(request.getRemoteAddr());\n        //指定支付方式 no_credit--可限制用户不能使用信用卡支付\n        orderRequest.setLimitPay(\"no_credit\");\n        //交易类型\n        orderRequest.setTradeType(\"APP\");\n        //用户的 openid\n        orderRequest.setOpenid(user.getOpenidApp());\n       \n        WxPayUnifiedOrderResult result = this.wxAppPayService.unifiedOrder(orderRequest);\n        HashMap<String, String> param = new HashMap<>(8);\n        param.put(\"appid\", result.getAppid());\n        param.put(\"partnerid\", result.getMchId());\n        param.put(\"prepayid\", result.getPrepayId());\n        param.put(\"package\", \"Sign=WXPay\");\n        param.put(\"noncestr\", result.getNonceStr());\n        param.put(\"timestamp\", String.valueOf(System.currentTimeMillis() / 1000));\n        final WxPayAppOrderResult pay = WxPayAppOrderResult.builder()\n                .sign(SignUtils.createSign(param, null, properties.getMchKey(), new String[]{}))\n                .prepayId(result.getPrepayId())\n                .partnerId(result.getMchId())\n                .appId(result.getAppid())\n                .timeStamp(param.get(\"timestamp\"))\n                .nonceStr(result.getNonceStr())\n                .packageValue(\"Sign=WXPay\")\n                .rechargeOrderId(order.getRechargeOrderId())\n                .build();\n        responseMsg.setData(pay);\n        return responseMsg;\n    }\n\n```\n加签方法：在 https://github.com/binarywang 加到本地后可以直接使用\n```java\n\n/**\n   * 微信支付签名算法(详见:https://pay.weixin.qq.com/wiki/doc/api/tools/cash_coupon.php?chapter=4_3).\n   *\n   * @param params        参数信息\n   * @param signType      签名类型，如果为空，则默认为MD5\n   * @param signKey       签名Key\n   * @param ignoredParams 签名时需要忽略的特殊参数\n   * @return 签名字符串 string\n   */\n  public static String createSign(Map<String, String> params, String signType, String signKey, String[] ignoredParams) {\n    SortedMap<String, String> sortedMap = new TreeMap<>(params);\n\n    StringBuilder toSign = new StringBuilder();\n    for (String key : sortedMap.keySet()) {\n      String value = params.get(key);\n      boolean shouldSign = false;\n      if (StringUtils.isNotEmpty(value) && !ArrayUtils.contains(ignoredParams, key)\n        && !Lists.newArrayList(\"sign\", \"key\", \"xmlString\", \"xmlDoc\", \"couponList\").contains(key)) {\n        shouldSign = true;\n      }\n\n      if (shouldSign) {\n        toSign.append(key).append(\"=\").append(value).append(\"&\");\n      }\n    }\n\n    toSign.append(\"key=\").append(signKey);\n    if (WxPayConstants.SignType.HMAC_SHA256.equals(signType)) {\n      return me.chanjar.weixin.common.util.SignUtils.createHmacSha256Sign(toSign.toString(), signKey);\n    } else {\n      return DigestUtils.md5Hex(toSign.toString()).toUpperCase();\n    }\n  }\n\n```\n\n加签返回给 APP 后进行验证拉起支付，这里得特别小心加签前后的参数大小写，很容易出现问题。以上就是微信 APP 支付。\n\n***\n\n<center>沉淀</center>\n\n","source":"_posts/Java对接iOS内购以及各个渠道微信支付.md","raw":"---\ntitle: Java对接iOS内购以及各个渠道微信支付\ndate: 2019-05-29 23:11:29\ntags: pay\ncategory: pay \n---\n\n![](jvm-Java对接iOS内购以及各个渠道微信支付/pay.png)\n\n最近因为公司业务需要，要对接支付这一块，我也是第一次对接第三方支付相关，因为是微信，iOS 缘故，对接前感觉可能会比较容易，毕竟这两家的东西用的人肯定很多，但是在具体的对接过程中还是碰到了很多的问题。\n\n<!-- more -->\n\n##### iOS 内购\n\niOS 对接相对来说比较容易点，客户端 SDK 已经集成了支付相关的很多流程，这里服务端只是做一个校验，保存相关数据和业务操作就可以。\n\n###### 购买流程：\n\n1. app 购买成功之后，将 receipt-data 提交给自己的应用服务器\n2. 应用服务器拿到数据之后解析后拿着数据去苹果服务器验证。\n3. 苹果返回验证结果给应用服务器，应用服务器返回给 app。\n\n####### 问题\n\n1. 应用服务器到苹果服务器验证数时会有两个环境，沙盒测试环境和正式环境，这里在保存数据的时候要注意标记支付环境，方便后续统计数据。\n2. 苹果服务器访问是真慢。\n3. 这个问题是代码上线一段时间后在生产暴露出来的，被刷单。\n\n###### 相关代码\n\n> \n1. 内购沙盒地址：SANDBOX_CERTIFICATE_URL = https://sandbox.itunes.apple.com/verifyReceipt\n2. 正式地址：    BUY_CERTIFICATE_URL = https://buy.itunes.apple.com/verifyReceipt\n\n``` java\n/**\n * \n * @param receiptData app 端传来的交易数据\n * @param userId 用户ID\n * @return \n*/\npublic Order iosInnerBuy(String receiptData, String userId) {\n        // 用于记录是沙盒测试支付还是实际用户购买支付，可用于以后对账\n        String payChannel = \"sandbox\";\n        String result = OkHttpUtil.sendHttpPost(SANDBOX_CERTIFICATE_URL, \"{\\\"receipt-data\\\":\\\"\" + receiptData + \"\\\"}\");\n        JSONObject obj = JSONObject.parseObject(result);\n        // 如果沙箱环境没有成功，调用正式环境处理\n        if (obj.getInteger(\"status\") != 0) {\n            payChannel = \"formal\";\n            result = OkHttpUtil.sendHttpPost(BUY_CERTIFICATE_URL, \"{\\\"receipt-data\\\":\\\"\" + receiptData + \"\\\"}\");\n        }\n        String productId = \"\";\n        JSONObject jsonArry = JSONObject.parseObject(result);\n        if (jsonArry == null) {\n            throw new ParamsException(Code.FAILED, \"参数有误\");\n        }\n        JSONObject map = (JSONObject) jsonArry.get(\"receipt\");\n        if (map == null) {\n            throw new ParamsException(Code.FAILED, \"参数有误\");\n        }\n        JSONArray inApp = (JSONArray) map.get(\"in_app\");\n        if (inApp == null) {\n            throw new ParamsException(Code.FAILED, \"参数有误\");\n        }\n        if (inApp.size() > 0) {\n            for (int i = 0; i < inApp.size(); i++) {\n                JSONObject json = inApp.getJSONObject(i);\n                productId = (String) json.get(\"product_id\");\n            }\n        }\n        if (StringUtils.isBlank(productId)) {\n            log.info(\"product_id 为空，返回结果为:{}\", result);\n            throw new ParamsException(Code.FAILED, \"product_id 不能为空\");\n        }\n        // TODO 具体的业务逻辑...\n        return order;\n    }\n\n```\n\n###### 被恶意攻击\n1. 起因\n\n因为版本时间比较紧张，各个开发和测试的时间都很短，导致在开发和测试环境没有暴露出来被刷单的问题。今天数据分析师突然说有异常充值订单，（和钱有关的还是要进行代码审核，多方确认才能上生产的）进行排查后发现是因为有人用支付成功的 receipt-data 来进行多次请求（应该是写了脚本进行连续访问）因为当时代码没有加入苹果支付返回的唯一ID transaction_id（这里确实是代码问题，正常情况是必须加上这些参数的）。导致重复充值问题。当时已经下班了才发现的（肯定回不去了），立马进行了修复，异常订单问题还没有讨论。\n\n2. 解决\n\n```\n1. 首先给充值接口添加 redis 分布式锁，防止脚本恶意频繁刷单。接口的加密校验也做了处理。\n2. 保存 Apple 验证返回的 transaction_id，校验获取到的这个值是唯一的，和 product_id 在同一层数据结构中。\n3. 对异常用户做一些处理，纠正被刷的订单。\n```\n\n> 这个解决也都相对简单，就是在创建订单前先用 transaction_id 检查以下有没有订单，如果有的话就直接抛出相应的异常告知调用方。\n> 如果没有的话，则创建订单，保存对应的 transaction_id，进行数据校验。\n\n##### 微信 app 支付\n\n> 推荐参考 https://github.com/binarywang\n\n微信支付我们在生活中使用也比较多，流程也相对比较清晰，并且官方提供的文档都是中文的，所以比较容易一点。微信支付一般涉及到 APP 拉起支付，h5 支付，JSAPI 支付，Native 支付这几种，具体描述[官网](https://pay.weixin.qq.com/wiki/doc/api/index.html)看起来比较清晰，也更加详细，这里先看下 [APP 支付](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1)，在自己 APP 中集成微信支付。\n\n###### 流程\n\n1. 选择要购买的商品，调用 APP 自己的服务生成订单和支付数据，加签后返回给客户端。\n2. 客户端校验服务端返回的参数，拉起微信支付。\n3. 输入密码进行支付，生成支付信息。\n\n###### 问题\n\n1. 前后端验签的时候特别容易出错，这里要仔细看文档。\n\n###### 相关代码\n\n``` java\n /**\n     * 统一预下单接口\n     *\n     * @param jsonParam\n     * @param request\n     * @return\n     * @throws WxPayException\n     */\n    @RequestMapping(\"/unifiedOrder\")\n    @ResponseBody\n    public ResponseMsg unifiedOrder(@RequestBody JSONObject jsonParam,\n                                    HttpServletRequest request) throws WxPayException {\n        ResponseMsg responseMsg = new ResponseMsg(Code.SUCCESSED, Constants.SUCCESS);\n        // 1. 根据自己业务校验参数\n        // 2. 创建订单\n        WxPayUnifiedOrderRequest orderRequest = new WxPayUnifiedOrderRequest();\n        //商品描述\n        orderRequest.setBody(\"some desc\");\n        //商户订单号\n        orderRequest.setOutTradeNo(order.getOrderId());\n        //订单总金额，单位为分\n        orderRequest.setTotalFee(Item.getPrice());\n        //终端IP\n        orderRequest.setSpbillCreateIp(request.getRemoteAddr());\n        //指定支付方式 no_credit--可限制用户不能使用信用卡支付\n        orderRequest.setLimitPay(\"no_credit\");\n        //交易类型\n        orderRequest.setTradeType(\"APP\");\n        //用户的 openid\n        orderRequest.setOpenid(user.getOpenidApp());\n       \n        WxPayUnifiedOrderResult result = this.wxAppPayService.unifiedOrder(orderRequest);\n        HashMap<String, String> param = new HashMap<>(8);\n        param.put(\"appid\", result.getAppid());\n        param.put(\"partnerid\", result.getMchId());\n        param.put(\"prepayid\", result.getPrepayId());\n        param.put(\"package\", \"Sign=WXPay\");\n        param.put(\"noncestr\", result.getNonceStr());\n        param.put(\"timestamp\", String.valueOf(System.currentTimeMillis() / 1000));\n        final WxPayAppOrderResult pay = WxPayAppOrderResult.builder()\n                .sign(SignUtils.createSign(param, null, properties.getMchKey(), new String[]{}))\n                .prepayId(result.getPrepayId())\n                .partnerId(result.getMchId())\n                .appId(result.getAppid())\n                .timeStamp(param.get(\"timestamp\"))\n                .nonceStr(result.getNonceStr())\n                .packageValue(\"Sign=WXPay\")\n                .rechargeOrderId(order.getRechargeOrderId())\n                .build();\n        responseMsg.setData(pay);\n        return responseMsg;\n    }\n\n```\n加签方法：在 https://github.com/binarywang 加到本地后可以直接使用\n```java\n\n/**\n   * 微信支付签名算法(详见:https://pay.weixin.qq.com/wiki/doc/api/tools/cash_coupon.php?chapter=4_3).\n   *\n   * @param params        参数信息\n   * @param signType      签名类型，如果为空，则默认为MD5\n   * @param signKey       签名Key\n   * @param ignoredParams 签名时需要忽略的特殊参数\n   * @return 签名字符串 string\n   */\n  public static String createSign(Map<String, String> params, String signType, String signKey, String[] ignoredParams) {\n    SortedMap<String, String> sortedMap = new TreeMap<>(params);\n\n    StringBuilder toSign = new StringBuilder();\n    for (String key : sortedMap.keySet()) {\n      String value = params.get(key);\n      boolean shouldSign = false;\n      if (StringUtils.isNotEmpty(value) && !ArrayUtils.contains(ignoredParams, key)\n        && !Lists.newArrayList(\"sign\", \"key\", \"xmlString\", \"xmlDoc\", \"couponList\").contains(key)) {\n        shouldSign = true;\n      }\n\n      if (shouldSign) {\n        toSign.append(key).append(\"=\").append(value).append(\"&\");\n      }\n    }\n\n    toSign.append(\"key=\").append(signKey);\n    if (WxPayConstants.SignType.HMAC_SHA256.equals(signType)) {\n      return me.chanjar.weixin.common.util.SignUtils.createHmacSha256Sign(toSign.toString(), signKey);\n    } else {\n      return DigestUtils.md5Hex(toSign.toString()).toUpperCase();\n    }\n  }\n\n```\n\n加签返回给 APP 后进行验证拉起支付，这里得特别小心加签前后的参数大小写，很容易出现问题。以上就是微信 APP 支付。\n\n***\n\n<center>沉淀</center>\n\n","slug":"Java对接iOS内购以及各个渠道微信支付","published":1,"updated":"2021-01-31T06:31:35.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeow30003rh1t1yp3f11n","content":"<p><img src=\"/2019/05/29/Java%E5%AF%B9%E6%8E%A5iOS%E5%86%85%E8%B4%AD%E4%BB%A5%E5%8F%8A%E5%90%84%E4%B8%AA%E6%B8%A0%E9%81%93%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/pay.png\"></p>\n<p>最近因为公司业务需要，要对接支付这一块，我也是第一次对接第三方支付相关，因为是微信，iOS 缘故，对接前感觉可能会比较容易，毕竟这两家的东西用的人肯定很多，但是在具体的对接过程中还是碰到了很多的问题。</p>\n<a id=\"more\"></a>\n\n<h5 id=\"iOS-内购\"><a href=\"#iOS-内购\" class=\"headerlink\" title=\"iOS 内购\"></a>iOS 内购</h5><p>iOS 对接相对来说比较容易点，客户端 SDK 已经集成了支付相关的很多流程，这里服务端只是做一个校验，保存相关数据和业务操作就可以。</p>\n<h6 id=\"购买流程：\"><a href=\"#购买流程：\" class=\"headerlink\" title=\"购买流程：\"></a>购买流程：</h6><ol>\n<li>app 购买成功之后，将 receipt-data 提交给自己的应用服务器</li>\n<li>应用服务器拿到数据之后解析后拿着数据去苹果服务器验证。</li>\n<li>苹果返回验证结果给应用服务器，应用服务器返回给 app。</li>\n</ol>\n<p>####### 问题</p>\n<ol>\n<li>应用服务器到苹果服务器验证数时会有两个环境，沙盒测试环境和正式环境，这里在保存数据的时候要注意标记支付环境，方便后续统计数据。</li>\n<li>苹果服务器访问是真慢。</li>\n<li>这个问题是代码上线一段时间后在生产暴露出来的，被刷单。</li>\n</ol>\n<h6 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h6><blockquote>\n</blockquote>\n<ol>\n<li>内购沙盒地址：SANDBOX_CERTIFICATE_URL = <a class=\"link\" href=\"https://sandbox.itunes.apple.com/verifyReceipt\">https://sandbox.itunes.apple.com/verifyReceipt<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>正式地址：    BUY_CERTIFICATE_URL = <a class=\"link\" href=\"https://buy.itunes.apple.com/verifyReceipt\">https://buy.itunes.apple.com/verifyReceipt<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> receiptData app 端传来的交易数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> userId 用户ID</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Order <span class=\"title\">iosInnerBuy</span><span class=\"params\">(String receiptData, String userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于记录是沙盒测试支付还是实际用户购买支付，可用于以后对账</span></span><br><span class=\"line\">        String payChannel = <span class=\"string\">&quot;sandbox&quot;</span>;</span><br><span class=\"line\">        String result = OkHttpUtil.sendHttpPost(SANDBOX_CERTIFICATE_URL, <span class=\"string\">&quot;&#123;\\&quot;receipt-data\\&quot;:\\&quot;&quot;</span> + receiptData + <span class=\"string\">&quot;\\&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        JSONObject obj = JSONObject.parseObject(result);</span><br><span class=\"line\">        <span class=\"comment\">// 如果沙箱环境没有成功，调用正式环境处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.getInteger(<span class=\"string\">&quot;status&quot;</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            payChannel = <span class=\"string\">&quot;formal&quot;</span>;</span><br><span class=\"line\">            result = OkHttpUtil.sendHttpPost(BUY_CERTIFICATE_URL, <span class=\"string\">&quot;&#123;\\&quot;receipt-data\\&quot;:\\&quot;&quot;</span> + receiptData + <span class=\"string\">&quot;\\&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String productId = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        JSONObject jsonArry = JSONObject.parseObject(result);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonArry == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;参数有误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JSONObject map = (JSONObject) jsonArry.get(<span class=\"string\">&quot;receipt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;参数有误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JSONArray inApp = (JSONArray) map.get(<span class=\"string\">&quot;in_app&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inApp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;参数有误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inApp.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; inApp.size(); i++) &#123;</span><br><span class=\"line\">                JSONObject json = inApp.getJSONObject(i);</span><br><span class=\"line\">                productId = (String) json.get(<span class=\"string\">&quot;product_id&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(productId)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;product_id 为空，返回结果为:&#123;&#125;&quot;</span>, result);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;product_id 不能为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 具体的业务逻辑...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"被恶意攻击\"><a href=\"#被恶意攻击\" class=\"headerlink\" title=\"被恶意攻击\"></a>被恶意攻击</h6><ol>\n<li>起因</li>\n</ol>\n<p>因为版本时间比较紧张，各个开发和测试的时间都很短，导致在开发和测试环境没有暴露出来被刷单的问题。今天数据分析师突然说有异常充值订单，（和钱有关的还是要进行代码审核，多方确认才能上生产的）进行排查后发现是因为有人用支付成功的 receipt-data 来进行多次请求（应该是写了脚本进行连续访问）因为当时代码没有加入苹果支付返回的唯一ID transaction_id（这里确实是代码问题，正常情况是必须加上这些参数的）。导致重复充值问题。当时已经下班了才发现的（肯定回不去了），立马进行了修复，异常订单问题还没有讨论。</p>\n<ol start=\"2\">\n<li>解决</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 首先给充值接口添加 redis 分布式锁，防止脚本恶意频繁刷单。接口的加密校验也做了处理。</span><br><span class=\"line\">2. 保存 Apple 验证返回的 transaction_id，校验获取到的这个值是唯一的，和 product_id 在同一层数据结构中。</span><br><span class=\"line\">3. 对异常用户做一些处理，纠正被刷的订单。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个解决也都相对简单，就是在创建订单前先用 transaction_id 检查以下有没有订单，如果有的话就直接抛出相应的异常告知调用方。<br>如果没有的话，则创建订单，保存对应的 transaction_id，进行数据校验。</p>\n</blockquote>\n<h5 id=\"微信-app-支付\"><a href=\"#微信-app-支付\" class=\"headerlink\" title=\"微信 app 支付\"></a>微信 app 支付</h5><blockquote>\n<p>推荐参考 <a class=\"link\" href=\"https://github.com/binarywang\">https://github.com/binarywang<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>微信支付我们在生活中使用也比较多，流程也相对比较清晰，并且官方提供的文档都是中文的，所以比较容易一点。微信支付一般涉及到 APP 拉起支付，h5 支付，JSAPI 支付，Native 支付这几种，具体描述<a class=\"link\" href=\"https://pay.weixin.qq.com/wiki/doc/api/index.html\">官网<i class=\"fas fa-external-link-alt\"></i></a>看起来比较清晰，也更加详细，这里先看下 <a class=\"link\" href=\"https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1\">APP 支付<i class=\"fas fa-external-link-alt\"></i></a>，在自己 APP 中集成微信支付。</p>\n<h6 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h6><ol>\n<li>选择要购买的商品，调用 APP 自己的服务生成订单和支付数据，加签后返回给客户端。</li>\n<li>客户端校验服务端返回的参数，拉起微信支付。</li>\n<li>输入密码进行支付，生成支付信息。</li>\n</ol>\n<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h6><ol>\n<li>前后端验签的时候特别容易出错，这里要仔细看文档。</li>\n</ol>\n<h6 id=\"相关代码-1\"><a href=\"#相关代码-1\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 统一预下单接口</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> jsonParam</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> WxPayException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@RequestMapping(&quot;/unifiedOrder&quot;)</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">unifiedOrder</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject jsonParam,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   HttpServletRequest request)</span> <span class=\"keyword\">throws</span> WxPayException </span>&#123;</span><br><span class=\"line\">       ResponseMsg responseMsg = <span class=\"keyword\">new</span> ResponseMsg(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">       <span class=\"comment\">// 1. 根据自己业务校验参数</span></span><br><span class=\"line\">       <span class=\"comment\">// 2. 创建订单</span></span><br><span class=\"line\">       WxPayUnifiedOrderRequest orderRequest = <span class=\"keyword\">new</span> WxPayUnifiedOrderRequest();</span><br><span class=\"line\">       <span class=\"comment\">//商品描述</span></span><br><span class=\"line\">       orderRequest.setBody(<span class=\"string\">&quot;some desc&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//商户订单号</span></span><br><span class=\"line\">       orderRequest.setOutTradeNo(order.getOrderId());</span><br><span class=\"line\">       <span class=\"comment\">//订单总金额，单位为分</span></span><br><span class=\"line\">       orderRequest.setTotalFee(Item.getPrice());</span><br><span class=\"line\">       <span class=\"comment\">//终端IP</span></span><br><span class=\"line\">       orderRequest.setSpbillCreateIp(request.getRemoteAddr());</span><br><span class=\"line\">       <span class=\"comment\">//指定支付方式 no_credit--可限制用户不能使用信用卡支付</span></span><br><span class=\"line\">       orderRequest.setLimitPay(<span class=\"string\">&quot;no_credit&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//交易类型</span></span><br><span class=\"line\">       orderRequest.setTradeType(<span class=\"string\">&quot;APP&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//用户的 openid</span></span><br><span class=\"line\">       orderRequest.setOpenid(user.getOpenidApp());</span><br><span class=\"line\">      </span><br><span class=\"line\">       WxPayUnifiedOrderResult result = <span class=\"keyword\">this</span>.wxAppPayService.unifiedOrder(orderRequest);</span><br><span class=\"line\">       HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;appid&quot;</span>, result.getAppid());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;partnerid&quot;</span>, result.getMchId());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;prepayid&quot;</span>, result.getPrepayId());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;package&quot;</span>, <span class=\"string\">&quot;Sign=WXPay&quot;</span>);</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;noncestr&quot;</span>, result.getNonceStr());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis() / <span class=\"number\">1000</span>));</span><br><span class=\"line\">       <span class=\"keyword\">final</span> WxPayAppOrderResult pay = WxPayAppOrderResult.builder()</span><br><span class=\"line\">               .sign(SignUtils.createSign(param, <span class=\"keyword\">null</span>, properties.getMchKey(), <span class=\"keyword\">new</span> String[]&#123;&#125;))</span><br><span class=\"line\">               .prepayId(result.getPrepayId())</span><br><span class=\"line\">               .partnerId(result.getMchId())</span><br><span class=\"line\">               .appId(result.getAppid())</span><br><span class=\"line\">               .timeStamp(param.get(<span class=\"string\">&quot;timestamp&quot;</span>))</span><br><span class=\"line\">               .nonceStr(result.getNonceStr())</span><br><span class=\"line\">               .packageValue(<span class=\"string\">&quot;Sign=WXPay&quot;</span>)</span><br><span class=\"line\">               .rechargeOrderId(order.getRechargeOrderId())</span><br><span class=\"line\">               .build();</span><br><span class=\"line\">       responseMsg.setData(pay);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> responseMsg;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>加签方法：在 <a class=\"link\" href=\"https://github.com/binarywang\">https://github.com/binarywang<i class=\"fas fa-external-link-alt\"></i></a> 加到本地后可以直接使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 微信支付签名算法(详见:https://pay.weixin.qq.com/wiki/doc/api/tools/cash_coupon.php?chapter=4_3).</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> params        参数信息</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> signType      签名类型，如果为空，则默认为MD5</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> signKey       签名Key</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> ignoredParams 签名时需要忽略的特殊参数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> 签名字符串 string</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createSign</span><span class=\"params\">(Map&lt;String, String&gt; params, String signType, String signKey, String[] ignoredParams)</span> </span>&#123;</span><br><span class=\"line\">    SortedMap&lt;String, String&gt; sortedMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;(params);</span><br><span class=\"line\"></span><br><span class=\"line\">    StringBuilder toSign = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String key : sortedMap.keySet()) &#123;</span><br><span class=\"line\">      String value = params.get(key);</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> shouldSign = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(value) &amp;&amp; !ArrayUtils.contains(ignoredParams, key)</span><br><span class=\"line\">        &amp;&amp; !Lists.newArrayList(<span class=\"string\">&quot;sign&quot;</span>, <span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;xmlString&quot;</span>, <span class=\"string\">&quot;xmlDoc&quot;</span>, <span class=\"string\">&quot;couponList&quot;</span>).contains(key)) &#123;</span><br><span class=\"line\">        shouldSign = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (shouldSign) &#123;</span><br><span class=\"line\">        toSign.append(key).append(<span class=\"string\">&quot;=&quot;</span>).append(value).append(<span class=\"string\">&quot;&amp;&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toSign.append(<span class=\"string\">&quot;key=&quot;</span>).append(signKey);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WxPayConstants.SignType.HMAC_SHA256.equals(signType)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> me.chanjar.weixin.common.util.SignUtils.createHmacSha256Sign(toSign.toString(), signKey);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> DigestUtils.md5Hex(toSign.toString()).toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>加签返回给 APP 后进行验证拉起支付，这里得特别小心加签前后的参数大小写，很容易出现问题。以上就是微信 APP 支付。</p>\n<hr>\n<center>沉淀</center>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/05/29/Java%E5%AF%B9%E6%8E%A5iOS%E5%86%85%E8%B4%AD%E4%BB%A5%E5%8F%8A%E5%90%84%E4%B8%AA%E6%B8%A0%E9%81%93%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/pay.png\"></p>\n<p>最近因为公司业务需要，要对接支付这一块，我也是第一次对接第三方支付相关，因为是微信，iOS 缘故，对接前感觉可能会比较容易，毕竟这两家的东西用的人肯定很多，但是在具体的对接过程中还是碰到了很多的问题。</p>","more":"<h5 id=\"iOS-内购\"><a href=\"#iOS-内购\" class=\"headerlink\" title=\"iOS 内购\"></a>iOS 内购</h5><p>iOS 对接相对来说比较容易点，客户端 SDK 已经集成了支付相关的很多流程，这里服务端只是做一个校验，保存相关数据和业务操作就可以。</p>\n<h6 id=\"购买流程：\"><a href=\"#购买流程：\" class=\"headerlink\" title=\"购买流程：\"></a>购买流程：</h6><ol>\n<li>app 购买成功之后，将 receipt-data 提交给自己的应用服务器</li>\n<li>应用服务器拿到数据之后解析后拿着数据去苹果服务器验证。</li>\n<li>苹果返回验证结果给应用服务器，应用服务器返回给 app。</li>\n</ol>\n<p>####### 问题</p>\n<ol>\n<li>应用服务器到苹果服务器验证数时会有两个环境，沙盒测试环境和正式环境，这里在保存数据的时候要注意标记支付环境，方便后续统计数据。</li>\n<li>苹果服务器访问是真慢。</li>\n<li>这个问题是代码上线一段时间后在生产暴露出来的，被刷单。</li>\n</ol>\n<h6 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h6><blockquote>\n</blockquote>\n<ol>\n<li>内购沙盒地址：SANDBOX_CERTIFICATE_URL = <a class=\"link\" href=\"https://sandbox.itunes.apple.com/verifyReceipt\">https://sandbox.itunes.apple.com/verifyReceipt<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>正式地址：    BUY_CERTIFICATE_URL = <a class=\"link\" href=\"https://buy.itunes.apple.com/verifyReceipt\">https://buy.itunes.apple.com/verifyReceipt<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> receiptData app 端传来的交易数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> userId 用户ID</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Order <span class=\"title\">iosInnerBuy</span><span class=\"params\">(String receiptData, String userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用于记录是沙盒测试支付还是实际用户购买支付，可用于以后对账</span></span><br><span class=\"line\">        String payChannel = <span class=\"string\">&quot;sandbox&quot;</span>;</span><br><span class=\"line\">        String result = OkHttpUtil.sendHttpPost(SANDBOX_CERTIFICATE_URL, <span class=\"string\">&quot;&#123;\\&quot;receipt-data\\&quot;:\\&quot;&quot;</span> + receiptData + <span class=\"string\">&quot;\\&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        JSONObject obj = JSONObject.parseObject(result);</span><br><span class=\"line\">        <span class=\"comment\">// 如果沙箱环境没有成功，调用正式环境处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.getInteger(<span class=\"string\">&quot;status&quot;</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            payChannel = <span class=\"string\">&quot;formal&quot;</span>;</span><br><span class=\"line\">            result = OkHttpUtil.sendHttpPost(BUY_CERTIFICATE_URL, <span class=\"string\">&quot;&#123;\\&quot;receipt-data\\&quot;:\\&quot;&quot;</span> + receiptData + <span class=\"string\">&quot;\\&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String productId = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        JSONObject jsonArry = JSONObject.parseObject(result);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonArry == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;参数有误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JSONObject map = (JSONObject) jsonArry.get(<span class=\"string\">&quot;receipt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;参数有误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JSONArray inApp = (JSONArray) map.get(<span class=\"string\">&quot;in_app&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inApp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;参数有误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inApp.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; inApp.size(); i++) &#123;</span><br><span class=\"line\">                JSONObject json = inApp.getJSONObject(i);</span><br><span class=\"line\">                productId = (String) json.get(<span class=\"string\">&quot;product_id&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(productId)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;product_id 为空，返回结果为:&#123;&#125;&quot;</span>, result);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamsException(Code.FAILED, <span class=\"string\">&quot;product_id 不能为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 具体的业务逻辑...</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"被恶意攻击\"><a href=\"#被恶意攻击\" class=\"headerlink\" title=\"被恶意攻击\"></a>被恶意攻击</h6><ol>\n<li>起因</li>\n</ol>\n<p>因为版本时间比较紧张，各个开发和测试的时间都很短，导致在开发和测试环境没有暴露出来被刷单的问题。今天数据分析师突然说有异常充值订单，（和钱有关的还是要进行代码审核，多方确认才能上生产的）进行排查后发现是因为有人用支付成功的 receipt-data 来进行多次请求（应该是写了脚本进行连续访问）因为当时代码没有加入苹果支付返回的唯一ID transaction_id（这里确实是代码问题，正常情况是必须加上这些参数的）。导致重复充值问题。当时已经下班了才发现的（肯定回不去了），立马进行了修复，异常订单问题还没有讨论。</p>\n<ol start=\"2\">\n<li>解决</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 首先给充值接口添加 redis 分布式锁，防止脚本恶意频繁刷单。接口的加密校验也做了处理。</span><br><span class=\"line\">2. 保存 Apple 验证返回的 transaction_id，校验获取到的这个值是唯一的，和 product_id 在同一层数据结构中。</span><br><span class=\"line\">3. 对异常用户做一些处理，纠正被刷的订单。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个解决也都相对简单，就是在创建订单前先用 transaction_id 检查以下有没有订单，如果有的话就直接抛出相应的异常告知调用方。<br>如果没有的话，则创建订单，保存对应的 transaction_id，进行数据校验。</p>\n</blockquote>\n<h5 id=\"微信-app-支付\"><a href=\"#微信-app-支付\" class=\"headerlink\" title=\"微信 app 支付\"></a>微信 app 支付</h5><blockquote>\n<p>推荐参考 <a class=\"link\" href=\"https://github.com/binarywang\">https://github.com/binarywang<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>微信支付我们在生活中使用也比较多，流程也相对比较清晰，并且官方提供的文档都是中文的，所以比较容易一点。微信支付一般涉及到 APP 拉起支付，h5 支付，JSAPI 支付，Native 支付这几种，具体描述<a class=\"link\" href=\"https://pay.weixin.qq.com/wiki/doc/api/index.html\">官网<i class=\"fas fa-external-link-alt\"></i></a>看起来比较清晰，也更加详细，这里先看下 <a class=\"link\" href=\"https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1\">APP 支付<i class=\"fas fa-external-link-alt\"></i></a>，在自己 APP 中集成微信支付。</p>\n<h6 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h6><ol>\n<li>选择要购买的商品，调用 APP 自己的服务生成订单和支付数据，加签后返回给客户端。</li>\n<li>客户端校验服务端返回的参数，拉起微信支付。</li>\n<li>输入密码进行支付，生成支付信息。</li>\n</ol>\n<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h6><ol>\n<li>前后端验签的时候特别容易出错，这里要仔细看文档。</li>\n</ol>\n<h6 id=\"相关代码-1\"><a href=\"#相关代码-1\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 统一预下单接口</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> jsonParam</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> WxPayException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@RequestMapping(&quot;/unifiedOrder&quot;)</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">unifiedOrder</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject jsonParam,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   HttpServletRequest request)</span> <span class=\"keyword\">throws</span> WxPayException </span>&#123;</span><br><span class=\"line\">       ResponseMsg responseMsg = <span class=\"keyword\">new</span> ResponseMsg(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">       <span class=\"comment\">// 1. 根据自己业务校验参数</span></span><br><span class=\"line\">       <span class=\"comment\">// 2. 创建订单</span></span><br><span class=\"line\">       WxPayUnifiedOrderRequest orderRequest = <span class=\"keyword\">new</span> WxPayUnifiedOrderRequest();</span><br><span class=\"line\">       <span class=\"comment\">//商品描述</span></span><br><span class=\"line\">       orderRequest.setBody(<span class=\"string\">&quot;some desc&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//商户订单号</span></span><br><span class=\"line\">       orderRequest.setOutTradeNo(order.getOrderId());</span><br><span class=\"line\">       <span class=\"comment\">//订单总金额，单位为分</span></span><br><span class=\"line\">       orderRequest.setTotalFee(Item.getPrice());</span><br><span class=\"line\">       <span class=\"comment\">//终端IP</span></span><br><span class=\"line\">       orderRequest.setSpbillCreateIp(request.getRemoteAddr());</span><br><span class=\"line\">       <span class=\"comment\">//指定支付方式 no_credit--可限制用户不能使用信用卡支付</span></span><br><span class=\"line\">       orderRequest.setLimitPay(<span class=\"string\">&quot;no_credit&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//交易类型</span></span><br><span class=\"line\">       orderRequest.setTradeType(<span class=\"string\">&quot;APP&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//用户的 openid</span></span><br><span class=\"line\">       orderRequest.setOpenid(user.getOpenidApp());</span><br><span class=\"line\">      </span><br><span class=\"line\">       WxPayUnifiedOrderResult result = <span class=\"keyword\">this</span>.wxAppPayService.unifiedOrder(orderRequest);</span><br><span class=\"line\">       HashMap&lt;String, String&gt; param = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;appid&quot;</span>, result.getAppid());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;partnerid&quot;</span>, result.getMchId());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;prepayid&quot;</span>, result.getPrepayId());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;package&quot;</span>, <span class=\"string\">&quot;Sign=WXPay&quot;</span>);</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;noncestr&quot;</span>, result.getNonceStr());</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis() / <span class=\"number\">1000</span>));</span><br><span class=\"line\">       <span class=\"keyword\">final</span> WxPayAppOrderResult pay = WxPayAppOrderResult.builder()</span><br><span class=\"line\">               .sign(SignUtils.createSign(param, <span class=\"keyword\">null</span>, properties.getMchKey(), <span class=\"keyword\">new</span> String[]&#123;&#125;))</span><br><span class=\"line\">               .prepayId(result.getPrepayId())</span><br><span class=\"line\">               .partnerId(result.getMchId())</span><br><span class=\"line\">               .appId(result.getAppid())</span><br><span class=\"line\">               .timeStamp(param.get(<span class=\"string\">&quot;timestamp&quot;</span>))</span><br><span class=\"line\">               .nonceStr(result.getNonceStr())</span><br><span class=\"line\">               .packageValue(<span class=\"string\">&quot;Sign=WXPay&quot;</span>)</span><br><span class=\"line\">               .rechargeOrderId(order.getRechargeOrderId())</span><br><span class=\"line\">               .build();</span><br><span class=\"line\">       responseMsg.setData(pay);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> responseMsg;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>加签方法：在 <a class=\"link\" href=\"https://github.com/binarywang\">https://github.com/binarywang<i class=\"fas fa-external-link-alt\"></i></a> 加到本地后可以直接使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 微信支付签名算法(详见:https://pay.weixin.qq.com/wiki/doc/api/tools/cash_coupon.php?chapter=4_3).</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> params        参数信息</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> signType      签名类型，如果为空，则默认为MD5</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> signKey       签名Key</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> ignoredParams 签名时需要忽略的特殊参数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> 签名字符串 string</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createSign</span><span class=\"params\">(Map&lt;String, String&gt; params, String signType, String signKey, String[] ignoredParams)</span> </span>&#123;</span><br><span class=\"line\">    SortedMap&lt;String, String&gt; sortedMap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;(params);</span><br><span class=\"line\"></span><br><span class=\"line\">    StringBuilder toSign = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String key : sortedMap.keySet()) &#123;</span><br><span class=\"line\">      String value = params.get(key);</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> shouldSign = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(value) &amp;&amp; !ArrayUtils.contains(ignoredParams, key)</span><br><span class=\"line\">        &amp;&amp; !Lists.newArrayList(<span class=\"string\">&quot;sign&quot;</span>, <span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;xmlString&quot;</span>, <span class=\"string\">&quot;xmlDoc&quot;</span>, <span class=\"string\">&quot;couponList&quot;</span>).contains(key)) &#123;</span><br><span class=\"line\">        shouldSign = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (shouldSign) &#123;</span><br><span class=\"line\">        toSign.append(key).append(<span class=\"string\">&quot;=&quot;</span>).append(value).append(<span class=\"string\">&quot;&amp;&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toSign.append(<span class=\"string\">&quot;key=&quot;</span>).append(signKey);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WxPayConstants.SignType.HMAC_SHA256.equals(signType)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> me.chanjar.weixin.common.util.SignUtils.createHmacSha256Sign(toSign.toString(), signKey);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> DigestUtils.md5Hex(toSign.toString()).toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>加签返回给 APP 后进行验证拉起支付，这里得特别小心加签前后的参数大小写，很容易出现问题。以上就是微信 APP 支付。</p>\n<hr>\n<center>沉淀</center>"},{"title":"Linux-shell","date":"2020-01-02T16:15:01.000Z","_content":"\n![Photo by deleted on wallhaven.cc](/linux-shell.png)\n\n\nshell 是用户和 Linux 系统交互的一个应用程序，就像 Windows 操作系统可以用过界面进行交互。shell 脚本就是通过 shell 来执行的，就像 Java 程序执行在 JVM 上类似。类似 Java 虚拟机，Linux 下也有很多的 shell 程序，但是最常用的就是 bash，因为其使用简单，并且是免费的，所以是 Linux 的默认 shell。\n\n<!--more-->\n\n#### shell script\n\n##### hello world\n\n任何语言都离不开一个 hello world ，现在感受下 shell 的第一个脚本。\n```bash\n#!/bin/bash\necho \"hello world\"\n```\n一般 shell 脚本命名都是以 .sh 来写的，这是一个约定俗成的写法，这样别人在看到 .sh 结尾的文件就知道是一个 shell 脚本，当然想以其他结尾也是可以的。\n\n> #!\n> 这个是告诉系统这个脚本使用哪个 shell 来执行。\n> echo\n> 向窗口输出文本\n\n##### 变量\n\n规则\n> 1. 只能使用数字，字母，下划线，且不能以数字开头\n> 2. 变量名区分大小写\n> 3. 变量赋值通过（=）号，且不能有空格\n\n使用\n```bash\n[root@jihe shell]# a=1\n[root@jihe shell]# echo $a\n1\n[root@jihe shell]# echo ${a}\n1\n[root@jihe shell]# echo $ab\n\n[root@jihe shell]# echo ${a}b\n1b\n```\n\n###### 特殊变量\n\n**$?**\n\n接收上一天命令的返回状态码，上条命令执行成功是 0 ，失败为其他 1-255 之间的值。\n\n**$#**\n\n脚本执行的参数个数\n\n```bash\n#!/bin/bash\n$1\n$2\n$#\n```\n\n`$*`\n\n所有参数\n\n**$$**\n\n获取当前脚本的进程号，可以实现脚本自杀，或者使用 exit 退出。\n\n#### 循环和判断\n\n##### 循环\n\nshell 中也是 for 循环，但是格式区别于 Java 中的 for 循环，而且 shell 中 for 循环有多种写法，下面是比较容易记住的写法。\n\n打印 0 到 9\n```bash\n#!/bin/bash\nfor((i=0;i<10;1++))\ndo\necho \"i=\"$i\ndone\n```\n这样程序会打印 `i=0` 到  `i=9` 输出到窗口。`do` 作为循环体的开始，`done` 作为循环体的结束。\n\n##### 比较\n\ntest EXPR\n[ EXPR ] : 中括号和表达式之间有空格\n###### 整型\n\n`-gt` : 大于， [ $1 -gt $2 ] 或者 test $1 -gt $2 判断变量 1 大于 变量 2\n`-lt`：小于\n`-ge`：大于等于\n`-le`：小于等于\n`-eq`：等于\n`-ne`：不等于\n\n###### 字符串\n\n`=`：等于，判断变量是否为空 [ \"$str\" = \"\" ] 或者 [ -z $str ]\n`!=`：不等于\n\n\n##### 判断\n\n类似 Java 中的 if，而且是以 fi 作为判断的结尾\n\nif [condition 1]\nthen\n    first tree\nelif [conditin 2]\n    second tree\nelse \n    third tree\nfi\n\n```bash\n#!/bin/bash\nnum=$1\nif [ $num -eq 1 ]\nthen\n        echo one\nelif [ $num -eq 2 ]\nthen\n        echo two\nelse\n        echo none\nfi\n```\n\n执行结果\n```bash\n[root@jihe shell]# ./if.sh 1\none\n[root@jihe shell]# ./if.sh 2\ntwo\n[root@jihe shell]# ./if.sh 3\nnone\n```\n\n\n#### 表达式\n\n`${}`：获取变量的值\n`$()`：等于 ``，会执行里面的命令，并且获取命令执行的结果\n`$[]`：可以对方括号里面的公式进行算术运算\n`$(())`：可以对双括号里面的公式进行算数运算\n\n\n#### 日期\n\n##### date\n\n显示当前时间\n```bash\ndate\n```\n\n##### 格式化\n\n```bash\n[root@jihe shell]# date +%Y-%m-%d\n2020-01-05\n```\n##### 获取时间戳\n\n```bash\n[root@jihe shell]# date +%s\n1578188573\n```\n\n##### 指定时间\n\n```bash\n# 获取前一天时间，按照指定格式输出\n[root@jihe shell]# date --date='1 days ago' +%Y-%m-%d\n2020-01-04\n# 获取后一天时间，按照指定格式输出\n[root@jihe shell]# date --date='-1 days ago' +%Y-%m-%d\n2020-01-06\n# 获取指定时间的前一天\n[root@jihe shell]# date --date='20191111 1 days ago' +%Y-%m-%d\n2019-11-10\n```\n\n#### 后台执行\n\n在后台执行脚本\n\n##### nohup\n不挂断的运行命令，忽略所有挂断（hangup）信号\n```bash\nnohup for.sh &\n```\nnohup 会忽略进程的挂断信号，也会在当前执行目录生成一个 nohup.out 日志文件。\n\n\n#### 标准输入，输出，重定向\n\n标准输入，输出，错误可以使用文件描述符 0，1，2 引用\n\n##### 重定向\n```bash\n# > 将输出结果重定向输出到 file 文件中\n# 1> 将输出的正确结果重定向到 file 文件中\n# >> 将输出的结果追加到 file 文件中，不做覆盖处理\nls >file 或者 ls 1>file (ls >>file)\n\n# 2> 将错误输出到 file 文件中，haha 是一个错误命令\nhaha 2>file \n```\n特殊\n\n```bash\n# 把输出信息直接丢失，既不保存也不打印到控制台\nls >/dev/null\n```\n\n#### 定时器\n\nLinux 下有专门执行定时任务的配置\n```bash\nvim /etc/crontab\n\n# 下面是 crontab 文件的内容\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\n\n# For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n\n# 在这里追加定时任务，都为 * 时为 1 分钟执行一次。root 为执行用户，后面跟脚本绝对路径。\n* * * * * root /usr/local/shell/crontab.sh\n\n```\ncrontab.sh\n脚本将文本内容输出到指定文件 cron.txt。\n```bash\n#!/bin/bash\necho \"hello world\" >>/usr/local/shell/cron.txt\n```\n查看 cron.txt 文件\n```bash\n# 实时输出内容\ntail -f cron.txt\n```\n\n\n***\n\n<center>美好的事即将发生</center>\n\n\n\n\n\n\n","source":"_posts/Linux-shell.md","raw":"---\ntitle: Linux-shell\ndate: 2020-01-03 00:15:01\ntags: Linux\ncategory: Linux\n---\n\n![Photo by deleted on wallhaven.cc](/linux-shell.png)\n\n\nshell 是用户和 Linux 系统交互的一个应用程序，就像 Windows 操作系统可以用过界面进行交互。shell 脚本就是通过 shell 来执行的，就像 Java 程序执行在 JVM 上类似。类似 Java 虚拟机，Linux 下也有很多的 shell 程序，但是最常用的就是 bash，因为其使用简单，并且是免费的，所以是 Linux 的默认 shell。\n\n<!--more-->\n\n#### shell script\n\n##### hello world\n\n任何语言都离不开一个 hello world ，现在感受下 shell 的第一个脚本。\n```bash\n#!/bin/bash\necho \"hello world\"\n```\n一般 shell 脚本命名都是以 .sh 来写的，这是一个约定俗成的写法，这样别人在看到 .sh 结尾的文件就知道是一个 shell 脚本，当然想以其他结尾也是可以的。\n\n> #!\n> 这个是告诉系统这个脚本使用哪个 shell 来执行。\n> echo\n> 向窗口输出文本\n\n##### 变量\n\n规则\n> 1. 只能使用数字，字母，下划线，且不能以数字开头\n> 2. 变量名区分大小写\n> 3. 变量赋值通过（=）号，且不能有空格\n\n使用\n```bash\n[root@jihe shell]# a=1\n[root@jihe shell]# echo $a\n1\n[root@jihe shell]# echo ${a}\n1\n[root@jihe shell]# echo $ab\n\n[root@jihe shell]# echo ${a}b\n1b\n```\n\n###### 特殊变量\n\n**$?**\n\n接收上一天命令的返回状态码，上条命令执行成功是 0 ，失败为其他 1-255 之间的值。\n\n**$#**\n\n脚本执行的参数个数\n\n```bash\n#!/bin/bash\n$1\n$2\n$#\n```\n\n`$*`\n\n所有参数\n\n**$$**\n\n获取当前脚本的进程号，可以实现脚本自杀，或者使用 exit 退出。\n\n#### 循环和判断\n\n##### 循环\n\nshell 中也是 for 循环，但是格式区别于 Java 中的 for 循环，而且 shell 中 for 循环有多种写法，下面是比较容易记住的写法。\n\n打印 0 到 9\n```bash\n#!/bin/bash\nfor((i=0;i<10;1++))\ndo\necho \"i=\"$i\ndone\n```\n这样程序会打印 `i=0` 到  `i=9` 输出到窗口。`do` 作为循环体的开始，`done` 作为循环体的结束。\n\n##### 比较\n\ntest EXPR\n[ EXPR ] : 中括号和表达式之间有空格\n###### 整型\n\n`-gt` : 大于， [ $1 -gt $2 ] 或者 test $1 -gt $2 判断变量 1 大于 变量 2\n`-lt`：小于\n`-ge`：大于等于\n`-le`：小于等于\n`-eq`：等于\n`-ne`：不等于\n\n###### 字符串\n\n`=`：等于，判断变量是否为空 [ \"$str\" = \"\" ] 或者 [ -z $str ]\n`!=`：不等于\n\n\n##### 判断\n\n类似 Java 中的 if，而且是以 fi 作为判断的结尾\n\nif [condition 1]\nthen\n    first tree\nelif [conditin 2]\n    second tree\nelse \n    third tree\nfi\n\n```bash\n#!/bin/bash\nnum=$1\nif [ $num -eq 1 ]\nthen\n        echo one\nelif [ $num -eq 2 ]\nthen\n        echo two\nelse\n        echo none\nfi\n```\n\n执行结果\n```bash\n[root@jihe shell]# ./if.sh 1\none\n[root@jihe shell]# ./if.sh 2\ntwo\n[root@jihe shell]# ./if.sh 3\nnone\n```\n\n\n#### 表达式\n\n`${}`：获取变量的值\n`$()`：等于 ``，会执行里面的命令，并且获取命令执行的结果\n`$[]`：可以对方括号里面的公式进行算术运算\n`$(())`：可以对双括号里面的公式进行算数运算\n\n\n#### 日期\n\n##### date\n\n显示当前时间\n```bash\ndate\n```\n\n##### 格式化\n\n```bash\n[root@jihe shell]# date +%Y-%m-%d\n2020-01-05\n```\n##### 获取时间戳\n\n```bash\n[root@jihe shell]# date +%s\n1578188573\n```\n\n##### 指定时间\n\n```bash\n# 获取前一天时间，按照指定格式输出\n[root@jihe shell]# date --date='1 days ago' +%Y-%m-%d\n2020-01-04\n# 获取后一天时间，按照指定格式输出\n[root@jihe shell]# date --date='-1 days ago' +%Y-%m-%d\n2020-01-06\n# 获取指定时间的前一天\n[root@jihe shell]# date --date='20191111 1 days ago' +%Y-%m-%d\n2019-11-10\n```\n\n#### 后台执行\n\n在后台执行脚本\n\n##### nohup\n不挂断的运行命令，忽略所有挂断（hangup）信号\n```bash\nnohup for.sh &\n```\nnohup 会忽略进程的挂断信号，也会在当前执行目录生成一个 nohup.out 日志文件。\n\n\n#### 标准输入，输出，重定向\n\n标准输入，输出，错误可以使用文件描述符 0，1，2 引用\n\n##### 重定向\n```bash\n# > 将输出结果重定向输出到 file 文件中\n# 1> 将输出的正确结果重定向到 file 文件中\n# >> 将输出的结果追加到 file 文件中，不做覆盖处理\nls >file 或者 ls 1>file (ls >>file)\n\n# 2> 将错误输出到 file 文件中，haha 是一个错误命令\nhaha 2>file \n```\n特殊\n\n```bash\n# 把输出信息直接丢失，既不保存也不打印到控制台\nls >/dev/null\n```\n\n#### 定时器\n\nLinux 下有专门执行定时任务的配置\n```bash\nvim /etc/crontab\n\n# 下面是 crontab 文件的内容\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\n\n# For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n\n# 在这里追加定时任务，都为 * 时为 1 分钟执行一次。root 为执行用户，后面跟脚本绝对路径。\n* * * * * root /usr/local/shell/crontab.sh\n\n```\ncrontab.sh\n脚本将文本内容输出到指定文件 cron.txt。\n```bash\n#!/bin/bash\necho \"hello world\" >>/usr/local/shell/cron.txt\n```\n查看 cron.txt 文件\n```bash\n# 实时输出内容\ntail -f cron.txt\n```\n\n\n***\n\n<center>美好的事即将发生</center>\n\n\n\n\n\n\n","slug":"Linux-shell","published":1,"updated":"2021-01-31T06:31:35.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeow70007rh1te8irfvfs","content":"<p><img src=\"/2020/01/03/Linux-shell/linux-shell.png\" alt=\"Photo by deleted on wallhaven.cc\"></p>\n<p>shell 是用户和 Linux 系统交互的一个应用程序，就像 Windows 操作系统可以用过界面进行交互。shell 脚本就是通过 shell 来执行的，就像 Java 程序执行在 JVM 上类似。类似 Java 虚拟机，Linux 下也有很多的 shell 程序，但是最常用的就是 bash，因为其使用简单，并且是免费的，所以是 Linux 的默认 shell。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"shell-script\"><a href=\"#shell-script\" class=\"headerlink\" title=\"shell script\"></a>shell script</h4><h5 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h5><p>任何语言都离不开一个 hello world ，现在感受下 shell 的第一个脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n<p>一般 shell 脚本命名都是以 .sh 来写的，这是一个约定俗成的写法，这样别人在看到 .sh 结尾的文件就知道是一个 shell 脚本，当然想以其他结尾也是可以的。</p>\n<blockquote>\n<p>#!<br>这个是告诉系统这个脚本使用哪个 shell 来执行。<br>echo<br>向窗口输出文本</p>\n</blockquote>\n<h5 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h5><p>规则</p>\n<blockquote>\n<ol>\n<li>只能使用数字，字母，下划线，且不能以数字开头</li>\n<li>变量名区分大小写</li>\n<li>变量赋值通过（=）号，且不能有空格</li>\n</ol>\n</blockquote>\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># a=1</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $&#123;a&#125;</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $ab</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $&#123;a&#125;b</span></span><br><span class=\"line\">1b</span><br></pre></td></tr></table></figure>\n<h6 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h6><p><strong>$?</strong></p>\n<p>接收上一天命令的返回状态码，上条命令执行成功是 0 ，失败为其他 1-255 之间的值。</p>\n<p><strong>$#</strong></p>\n<p>脚本执行的参数个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"variable\">$#</span></span><br></pre></td></tr></table></figure>\n<p><code>$*</code></p>\n<p>所有参数</p>\n<p><strong>$$</strong></p>\n<p>获取当前脚本的进程号，可以实现脚本自杀，或者使用 exit 退出。</p>\n<h4 id=\"循环和判断\"><a href=\"#循环和判断\" class=\"headerlink\" title=\"循环和判断\"></a>循环和判断</h4><h5 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h5><p>shell 中也是 for 循环，但是格式区别于 Java 中的 for 循环，而且 shell 中 for 循环有多种写法，下面是比较容易记住的写法。</p>\n<p>打印 0 到 9</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;10;1++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;i=&quot;</span><span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这样程序会打印 <code>i=0</code> 到  <code>i=9</code> 输出到窗口。<code>do</code> 作为循环体的开始，<code>done</code> 作为循环体的结束。</p>\n<h5 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h5><p>test EXPR<br>[ EXPR ] : 中括号和表达式之间有空格</p>\n<h6 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h6><p><code>-gt</code> : 大于， [ $1 -gt $2 ] 或者 test $1 -gt $2 判断变量 1 大于 变量 2<br><code>-lt</code>：小于<br><code>-ge</code>：大于等于<br><code>-le</code>：小于等于<br><code>-eq</code>：等于<br><code>-ne</code>：不等于</p>\n<h6 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h6><p><code>=</code>：等于，判断变量是否为空 [ “$str” = “” ] 或者 [ -z $str ]<br><code>!=</code>：不等于</p>\n<h5 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h5><p>类似 Java 中的 if，而且是以 fi 作为判断的结尾</p>\n<p>if [condition 1]<br>then<br>    first tree<br>elif [conditin 2]<br>    second tree<br>else<br>    third tree<br>fi</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">num=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$num</span> -eq 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> one</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$num</span> -eq 2 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> two</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> none</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># ./if.sh 1</span></span><br><span class=\"line\">one</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># ./if.sh 2</span></span><br><span class=\"line\">two</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># ./if.sh 3</span></span><br><span class=\"line\">none</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><p><code>$&#123;&#125;</code>：获取变量的值<br><code>$()</code>：等于 ``，会执行里面的命令，并且获取命令执行的结果<br><code>$[]</code>：可以对方括号里面的公式进行算术运算<br><code>$(())</code>：可以对双括号里面的公式进行算数运算</p>\n<h4 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h4><h5 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h5><p>显示当前时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n<h5 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date +%Y-%m-%d</span></span><br><span class=\"line\">2020-01-05</span><br></pre></td></tr></table></figure>\n<h5 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\"获取时间戳\"></a>获取时间戳</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date +%s</span></span><br><span class=\"line\">1578188573</span><br></pre></td></tr></table></figure>\n<h5 id=\"指定时间\"><a href=\"#指定时间\" class=\"headerlink\" title=\"指定时间\"></a>指定时间</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取前一天时间，按照指定格式输出</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date --date=&#x27;1 days ago&#x27; +%Y-%m-%d</span></span><br><span class=\"line\">2020-01-04</span><br><span class=\"line\"><span class=\"comment\"># 获取后一天时间，按照指定格式输出</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date --date=&#x27;-1 days ago&#x27; +%Y-%m-%d</span></span><br><span class=\"line\">2020-01-06</span><br><span class=\"line\"><span class=\"comment\"># 获取指定时间的前一天</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date --date=&#x27;20191111 1 days ago&#x27; +%Y-%m-%d</span></span><br><span class=\"line\">2019-11-10</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台执行\"><a href=\"#后台执行\" class=\"headerlink\" title=\"后台执行\"></a>后台执行</h4><p>在后台执行脚本</p>\n<h5 id=\"nohup\"><a href=\"#nohup\" class=\"headerlink\" title=\"nohup\"></a>nohup</h5><p>不挂断的运行命令，忽略所有挂断（hangup）信号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup for.sh &amp;</span><br></pre></td></tr></table></figure>\n<p>nohup 会忽略进程的挂断信号，也会在当前执行目录生成一个 nohup.out 日志文件。</p>\n<h4 id=\"标准输入，输出，重定向\"><a href=\"#标准输入，输出，重定向\" class=\"headerlink\" title=\"标准输入，输出，重定向\"></a>标准输入，输出，重定向</h4><p>标准输入，输出，错误可以使用文件描述符 0，1，2 引用</p>\n<h5 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &gt; 将输出结果重定向输出到 file 文件中</span></span><br><span class=\"line\"><span class=\"comment\"># 1&gt; 将输出的正确结果重定向到 file 文件中</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt; 将输出的结果追加到 file 文件中，不做覆盖处理</span></span><br><span class=\"line\">ls &gt;file 或者 ls 1&gt;file (ls &gt;&gt;file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2&gt; 将错误输出到 file 文件中，haha 是一个错误命令</span></span><br><span class=\"line\">haha 2&gt;file </span><br></pre></td></tr></table></figure>\n<p>特殊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把输出信息直接丢失，既不保存也不打印到控制台</span></span><br><span class=\"line\">ls &gt;/dev/null</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><p>Linux 下有专门执行定时任务的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/crontab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面是 crontab 文件的内容</span></span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For details see man 4 crontabs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在这里追加定时任务，都为 * 时为 1 分钟执行一次。root 为执行用户，后面跟脚本绝对路径。</span></span><br><span class=\"line\">* * * * * root /usr/<span class=\"built_in\">local</span>/shell/crontab.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>crontab.sh<br>脚本将文本内容输出到指定文件 cron.txt。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span> &gt;&gt;/usr/<span class=\"built_in\">local</span>/shell/cron.txt</span><br></pre></td></tr></table></figure>\n<p>查看 cron.txt 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实时输出内容</span></span><br><span class=\"line\">tail -f cron.txt</span><br></pre></td></tr></table></figure>\n\n<hr>\n<center>美好的事即将发生</center>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2020/01/03/Linux-shell/linux-shell.png\" alt=\"Photo by deleted on wallhaven.cc\"></p>\n<p>shell 是用户和 Linux 系统交互的一个应用程序，就像 Windows 操作系统可以用过界面进行交互。shell 脚本就是通过 shell 来执行的，就像 Java 程序执行在 JVM 上类似。类似 Java 虚拟机，Linux 下也有很多的 shell 程序，但是最常用的就是 bash，因为其使用简单，并且是免费的，所以是 Linux 的默认 shell。</p>","more":"<h4 id=\"shell-script\"><a href=\"#shell-script\" class=\"headerlink\" title=\"shell script\"></a>shell script</h4><h5 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h5><p>任何语言都离不开一个 hello world ，现在感受下 shell 的第一个脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n<p>一般 shell 脚本命名都是以 .sh 来写的，这是一个约定俗成的写法，这样别人在看到 .sh 结尾的文件就知道是一个 shell 脚本，当然想以其他结尾也是可以的。</p>\n<blockquote>\n<p>#!<br>这个是告诉系统这个脚本使用哪个 shell 来执行。<br>echo<br>向窗口输出文本</p>\n</blockquote>\n<h5 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h5><p>规则</p>\n<blockquote>\n<ol>\n<li>只能使用数字，字母，下划线，且不能以数字开头</li>\n<li>变量名区分大小写</li>\n<li>变量赋值通过（=）号，且不能有空格</li>\n</ol>\n</blockquote>\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># a=1</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $a</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $&#123;a&#125;</span></span><br><span class=\"line\">1</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $ab</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># echo $&#123;a&#125;b</span></span><br><span class=\"line\">1b</span><br></pre></td></tr></table></figure>\n<h6 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h6><p><strong>$?</strong></p>\n<p>接收上一天命令的返回状态码，上条命令执行成功是 0 ，失败为其他 1-255 之间的值。</p>\n<p><strong>$#</strong></p>\n<p>脚本执行的参数个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"variable\">$#</span></span><br></pre></td></tr></table></figure>\n<p><code>$*</code></p>\n<p>所有参数</p>\n<p><strong>$$</strong></p>\n<p>获取当前脚本的进程号，可以实现脚本自杀，或者使用 exit 退出。</p>\n<h4 id=\"循环和判断\"><a href=\"#循环和判断\" class=\"headerlink\" title=\"循环和判断\"></a>循环和判断</h4><h5 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h5><p>shell 中也是 for 循环，但是格式区别于 Java 中的 for 循环，而且 shell 中 for 循环有多种写法，下面是比较容易记住的写法。</p>\n<p>打印 0 到 9</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;10;1++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;i=&quot;</span><span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这样程序会打印 <code>i=0</code> 到  <code>i=9</code> 输出到窗口。<code>do</code> 作为循环体的开始，<code>done</code> 作为循环体的结束。</p>\n<h5 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h5><p>test EXPR<br>[ EXPR ] : 中括号和表达式之间有空格</p>\n<h6 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h6><p><code>-gt</code> : 大于， [ $1 -gt $2 ] 或者 test $1 -gt $2 判断变量 1 大于 变量 2<br><code>-lt</code>：小于<br><code>-ge</code>：大于等于<br><code>-le</code>：小于等于<br><code>-eq</code>：等于<br><code>-ne</code>：不等于</p>\n<h6 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h6><p><code>=</code>：等于，判断变量是否为空 [ “$str” = “” ] 或者 [ -z $str ]<br><code>!=</code>：不等于</p>\n<h5 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h5><p>类似 Java 中的 if，而且是以 fi 作为判断的结尾</p>\n<p>if [condition 1]<br>then<br>    first tree<br>elif [conditin 2]<br>    second tree<br>else<br>    third tree<br>fi</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">num=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$num</span> -eq 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> one</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$num</span> -eq 2 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> two</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> none</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># ./if.sh 1</span></span><br><span class=\"line\">one</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># ./if.sh 2</span></span><br><span class=\"line\">two</span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># ./if.sh 3</span></span><br><span class=\"line\">none</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><p><code>$&#123;&#125;</code>：获取变量的值<br><code>$()</code>：等于 ``，会执行里面的命令，并且获取命令执行的结果<br><code>$[]</code>：可以对方括号里面的公式进行算术运算<br><code>$(())</code>：可以对双括号里面的公式进行算数运算</p>\n<h4 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h4><h5 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h5><p>显示当前时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date</span><br></pre></td></tr></table></figure>\n<h5 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date +%Y-%m-%d</span></span><br><span class=\"line\">2020-01-05</span><br></pre></td></tr></table></figure>\n<h5 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\"获取时间戳\"></a>获取时间戳</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date +%s</span></span><br><span class=\"line\">1578188573</span><br></pre></td></tr></table></figure>\n<h5 id=\"指定时间\"><a href=\"#指定时间\" class=\"headerlink\" title=\"指定时间\"></a>指定时间</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取前一天时间，按照指定格式输出</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date --date=&#x27;1 days ago&#x27; +%Y-%m-%d</span></span><br><span class=\"line\">2020-01-04</span><br><span class=\"line\"><span class=\"comment\"># 获取后一天时间，按照指定格式输出</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date --date=&#x27;-1 days ago&#x27; +%Y-%m-%d</span></span><br><span class=\"line\">2020-01-06</span><br><span class=\"line\"><span class=\"comment\"># 获取指定时间的前一天</span></span><br><span class=\"line\">[root@jihe shell]<span class=\"comment\"># date --date=&#x27;20191111 1 days ago&#x27; +%Y-%m-%d</span></span><br><span class=\"line\">2019-11-10</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台执行\"><a href=\"#后台执行\" class=\"headerlink\" title=\"后台执行\"></a>后台执行</h4><p>在后台执行脚本</p>\n<h5 id=\"nohup\"><a href=\"#nohup\" class=\"headerlink\" title=\"nohup\"></a>nohup</h5><p>不挂断的运行命令，忽略所有挂断（hangup）信号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup for.sh &amp;</span><br></pre></td></tr></table></figure>\n<p>nohup 会忽略进程的挂断信号，也会在当前执行目录生成一个 nohup.out 日志文件。</p>\n<h4 id=\"标准输入，输出，重定向\"><a href=\"#标准输入，输出，重定向\" class=\"headerlink\" title=\"标准输入，输出，重定向\"></a>标准输入，输出，重定向</h4><p>标准输入，输出，错误可以使用文件描述符 0，1，2 引用</p>\n<h5 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &gt; 将输出结果重定向输出到 file 文件中</span></span><br><span class=\"line\"><span class=\"comment\"># 1&gt; 将输出的正确结果重定向到 file 文件中</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt; 将输出的结果追加到 file 文件中，不做覆盖处理</span></span><br><span class=\"line\">ls &gt;file 或者 ls 1&gt;file (ls &gt;&gt;file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2&gt; 将错误输出到 file 文件中，haha 是一个错误命令</span></span><br><span class=\"line\">haha 2&gt;file </span><br></pre></td></tr></table></figure>\n<p>特殊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把输出信息直接丢失，既不保存也不打印到控制台</span></span><br><span class=\"line\">ls &gt;/dev/null</span><br></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><p>Linux 下有专门执行定时任务的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/crontab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面是 crontab 文件的内容</span></span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For details see man 4 crontabs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在这里追加定时任务，都为 * 时为 1 分钟执行一次。root 为执行用户，后面跟脚本绝对路径。</span></span><br><span class=\"line\">* * * * * root /usr/<span class=\"built_in\">local</span>/shell/crontab.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>crontab.sh<br>脚本将文本内容输出到指定文件 cron.txt。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span> &gt;&gt;/usr/<span class=\"built_in\">local</span>/shell/cron.txt</span><br></pre></td></tr></table></figure>\n<p>查看 cron.txt 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实时输出内容</span></span><br><span class=\"line\">tail -f cron.txt</span><br></pre></td></tr></table></figure>\n\n<hr>\n<center>美好的事即将发生</center>"},{"title":"Linux-常用命令","date":"2020-01-01T15:17:14.000Z","_content":"\n![Photo by kejsirajbek on wallhaven.cc](/linux.png)\n\n\nLinux 是服务端最常用的操作系统，也是范围最广的，都是通过命令来交互的，记录些常用命令，这里会一直追加，年底了，回家的诱惑越来越强。\n<!--more-->\n\n#### 基础命令\n\n\n1. 远程复制\n\n **scp**\n\n```bash\n# 复制文件到远程\nscp 文件 192.168.31.107:/usr/local/\n```\n\n静默复制目录到远程主机\n\n```bash\n# -r 表示目录，-q 静默复制\nscp -rq /目录名 192.168.31.107:/usr/local/\n```\n\n2. 权限\n\n说明\n\n> 使用命令 ll 就可以清晰的查看 Linux 文件目录权限。\n\n![文件目录权限](/Linux-权限.png)\n\n具体的命令执行后：\n```bash\ndrwxr-xr-x. 2 root root  4096 May 11  2019 bin\ndrwxr-xr-x. 2 root root  4096 May 11  2019 etc\ndrwxr-xr-x. 2 root root  4096 May 11  2019 games\n-rw-r--r--. 1 root root 13871 Dec 16 11:38 jihe.sh\ndrwxr-xr-x. 2 root root  4096 May 11  2019 include\ndrwxr-xr-x. 2 root root  4096 May 11  2019 lib\n```\n比较有意思的是，以上 `rwx` 表示的权限也可以用数字来描述：\nr=4,w=2,x=1；如果想设置可读可执行：r + x = 5\n\n\n设置权限\n\n**chmod**\n\n```bash\n# 给当前用户设置可执行权限\nchmod +x jihe.sh\n# 给所有用户最大权限（可读可写可执行）\nchmod 777 jihe.sh\n# 递归添加权限\nchmod -R 777 bin\n\n```\n\n2. 查看文件\n\n**cat**\n\n```bash\n# 文件合并 - 把 file1 和 file2 合并输出到 file3\ncat file1 file2 > file3\n# 显示行号\ncat -b file1\n\n```\n\n**more**\n\n```bash\n# 分页显示大文件 - 空格下一页\nmore jihe.sh\n\n```\n\n3. 解压\n\n**tar**\n\n```bash\n# 压缩 - 把目录下所有 txt 文件打包\ntar -zcvf jihe.tar.gz *.txt\n# 解压\ntar -zxvf jihe.tar.gz\n```\n参数说明\n\n> -z 是否使用 gzip 解压缩\n> -c 创建压缩文件（create）\n> -x 解压压缩文件\n> -v 压缩过程显示文件\n> -f 使用档案名，此参数为最后一个参数，后面只能接档案名\n\n4. 文件大小\n\n**du**\n\n```bash\n# 全部目录及其子目录每个档案所占磁盘空间\ndu -a \n# 全部目录及其子目录所占磁盘空间\ndu -h \n# 对应目录及其子目录所占空间\ndu -ch 目录\n# 总大小\ndu -sh\n```\n\n5. 管道\n\n**|**\n\n管道命令使用 `|` 作为界定符号，管道命令需要结合其他命令一块使用。\n\n```bash\n# 输出 jihe.txt 中包含 abc 的行。（区分大小写，包含空格必须加引号 \"a bc\"）\ncat jihe.txt | grep abc\n# 输出 jihe.txt 文件中包含 abc 的行（忽略大小写）\ncat jihe.txt | grep -i abc\n# 输出 jihe.txt 文件中不包含 abc 的行\ncat jihe.txt | grep -v abc\n\n```\n\n6. 查看\n\n**which**\n\n```bash\n# 查找 $PATH 设置命令及安装文件目录所在位置\nwhich ll\n\n```\n\n7. 输出及显示\n\n**echo**\n输出内容\n```bash \n# 输出文本，一般有特殊字符建议加双引号\necho \"hello world\"\n# 输出环境变量\necho $JAVA_HOME\n\n```\n**export**\n\n设置或者显示环境变量\n```bash\n# 列出当前黄静变量值\nexport -p\n# 设置临时环境变量\nexport  变量（$JAVA_HOME）\n\n```\n\n8. yum\n应用包管理，类似安卓平台上的安卓应用市场，iOS 平台 AppStore 等应用中心\n\n```bash\n# 安装软件 -y 忽略在安装中确认的操作，直接默认 yes\nyum install `-y` 包名\n# 升级\nyum update 报名\n# 删除\nyum remove 报名\n# 清除缓存\nyum clean all\n\n```\n\n9. 操作历史\n\n**history**\n保留了最近执行的命令记录，默认保留 1000 条\n历史清单从 0 开始编号到最大值\n```bash\n# 显示最近 n 条命令\nhistory 10\n# 清除所有的历史记录\nhistory -c\n# 保存历史记录到文本\nhistory -w jihe.txt\n```\n\n\n#### 高级功能\n\n1. 系统状态\n\n**ps**\n\n查看处于活动状态的服务进程\n```bash\nps -ef | grep 进程名[tomcat]\n\n# 查看端口\nss -ntl\n```\n\n**netstat**\n\n查看端口号等信息\n\n```bash\nnetstat -anp | grep 端口号[8080]\n```\n\n**top**\n动态显示当前系统运行情况，类似 windows 中任务管理器\n```bash\n# 显示命令执行的全路径\ntop -c \n# 指定用户名\ntop -u\n# 指定进程\ntop -p \n# 按进程的 CPU 使用率排序\ntop P\n# 按进程的内存使用率排序\ntop M\n\n```\n\n**df**\n显示磁盘使用率\n\n```bash\ndf -h\n```\n\n**who**\n显示当前登录用户\n```bash\nwho\n\n```\n\n**uname**\n查看系统信息\n```bash\nuname -a\n```\n\n**free**\n查看内存和交换空间使用情况\n```bash\n# 单个命令显示的是字节，以 M/G 为单位显示\nfree -m/g\n\n```\n\n2. 关机重启\n\n**reboot**\n重启\n\n```bash\n# 立刻重启\nreboot -h now \n```\n\n**poweroff**\n\n关机\n```bash\npoweroff\n```\n\n3. 查看系统\n\n**lscpu**\n```bash\n# 查看系统 cpu 信息\nlscpu\n```\n\n***\n\n<center>越来越好</center>\n\n\n\n\n","source":"_posts/Linux.md","raw":"---\ntitle: Linux-常用命令\ndate: 2020-01-01 23:17:14\ntags: Linux\ncategory: Linux\n---\n\n![Photo by kejsirajbek on wallhaven.cc](/linux.png)\n\n\nLinux 是服务端最常用的操作系统，也是范围最广的，都是通过命令来交互的，记录些常用命令，这里会一直追加，年底了，回家的诱惑越来越强。\n<!--more-->\n\n#### 基础命令\n\n\n1. 远程复制\n\n **scp**\n\n```bash\n# 复制文件到远程\nscp 文件 192.168.31.107:/usr/local/\n```\n\n静默复制目录到远程主机\n\n```bash\n# -r 表示目录，-q 静默复制\nscp -rq /目录名 192.168.31.107:/usr/local/\n```\n\n2. 权限\n\n说明\n\n> 使用命令 ll 就可以清晰的查看 Linux 文件目录权限。\n\n![文件目录权限](/Linux-权限.png)\n\n具体的命令执行后：\n```bash\ndrwxr-xr-x. 2 root root  4096 May 11  2019 bin\ndrwxr-xr-x. 2 root root  4096 May 11  2019 etc\ndrwxr-xr-x. 2 root root  4096 May 11  2019 games\n-rw-r--r--. 1 root root 13871 Dec 16 11:38 jihe.sh\ndrwxr-xr-x. 2 root root  4096 May 11  2019 include\ndrwxr-xr-x. 2 root root  4096 May 11  2019 lib\n```\n比较有意思的是，以上 `rwx` 表示的权限也可以用数字来描述：\nr=4,w=2,x=1；如果想设置可读可执行：r + x = 5\n\n\n设置权限\n\n**chmod**\n\n```bash\n# 给当前用户设置可执行权限\nchmod +x jihe.sh\n# 给所有用户最大权限（可读可写可执行）\nchmod 777 jihe.sh\n# 递归添加权限\nchmod -R 777 bin\n\n```\n\n2. 查看文件\n\n**cat**\n\n```bash\n# 文件合并 - 把 file1 和 file2 合并输出到 file3\ncat file1 file2 > file3\n# 显示行号\ncat -b file1\n\n```\n\n**more**\n\n```bash\n# 分页显示大文件 - 空格下一页\nmore jihe.sh\n\n```\n\n3. 解压\n\n**tar**\n\n```bash\n# 压缩 - 把目录下所有 txt 文件打包\ntar -zcvf jihe.tar.gz *.txt\n# 解压\ntar -zxvf jihe.tar.gz\n```\n参数说明\n\n> -z 是否使用 gzip 解压缩\n> -c 创建压缩文件（create）\n> -x 解压压缩文件\n> -v 压缩过程显示文件\n> -f 使用档案名，此参数为最后一个参数，后面只能接档案名\n\n4. 文件大小\n\n**du**\n\n```bash\n# 全部目录及其子目录每个档案所占磁盘空间\ndu -a \n# 全部目录及其子目录所占磁盘空间\ndu -h \n# 对应目录及其子目录所占空间\ndu -ch 目录\n# 总大小\ndu -sh\n```\n\n5. 管道\n\n**|**\n\n管道命令使用 `|` 作为界定符号，管道命令需要结合其他命令一块使用。\n\n```bash\n# 输出 jihe.txt 中包含 abc 的行。（区分大小写，包含空格必须加引号 \"a bc\"）\ncat jihe.txt | grep abc\n# 输出 jihe.txt 文件中包含 abc 的行（忽略大小写）\ncat jihe.txt | grep -i abc\n# 输出 jihe.txt 文件中不包含 abc 的行\ncat jihe.txt | grep -v abc\n\n```\n\n6. 查看\n\n**which**\n\n```bash\n# 查找 $PATH 设置命令及安装文件目录所在位置\nwhich ll\n\n```\n\n7. 输出及显示\n\n**echo**\n输出内容\n```bash \n# 输出文本，一般有特殊字符建议加双引号\necho \"hello world\"\n# 输出环境变量\necho $JAVA_HOME\n\n```\n**export**\n\n设置或者显示环境变量\n```bash\n# 列出当前黄静变量值\nexport -p\n# 设置临时环境变量\nexport  变量（$JAVA_HOME）\n\n```\n\n8. yum\n应用包管理，类似安卓平台上的安卓应用市场，iOS 平台 AppStore 等应用中心\n\n```bash\n# 安装软件 -y 忽略在安装中确认的操作，直接默认 yes\nyum install `-y` 包名\n# 升级\nyum update 报名\n# 删除\nyum remove 报名\n# 清除缓存\nyum clean all\n\n```\n\n9. 操作历史\n\n**history**\n保留了最近执行的命令记录，默认保留 1000 条\n历史清单从 0 开始编号到最大值\n```bash\n# 显示最近 n 条命令\nhistory 10\n# 清除所有的历史记录\nhistory -c\n# 保存历史记录到文本\nhistory -w jihe.txt\n```\n\n\n#### 高级功能\n\n1. 系统状态\n\n**ps**\n\n查看处于活动状态的服务进程\n```bash\nps -ef | grep 进程名[tomcat]\n\n# 查看端口\nss -ntl\n```\n\n**netstat**\n\n查看端口号等信息\n\n```bash\nnetstat -anp | grep 端口号[8080]\n```\n\n**top**\n动态显示当前系统运行情况，类似 windows 中任务管理器\n```bash\n# 显示命令执行的全路径\ntop -c \n# 指定用户名\ntop -u\n# 指定进程\ntop -p \n# 按进程的 CPU 使用率排序\ntop P\n# 按进程的内存使用率排序\ntop M\n\n```\n\n**df**\n显示磁盘使用率\n\n```bash\ndf -h\n```\n\n**who**\n显示当前登录用户\n```bash\nwho\n\n```\n\n**uname**\n查看系统信息\n```bash\nuname -a\n```\n\n**free**\n查看内存和交换空间使用情况\n```bash\n# 单个命令显示的是字节，以 M/G 为单位显示\nfree -m/g\n\n```\n\n2. 关机重启\n\n**reboot**\n重启\n\n```bash\n# 立刻重启\nreboot -h now \n```\n\n**poweroff**\n\n关机\n```bash\npoweroff\n```\n\n3. 查看系统\n\n**lscpu**\n```bash\n# 查看系统 cpu 信息\nlscpu\n```\n\n***\n\n<center>越来越好</center>\n\n\n\n\n","slug":"Linux","published":1,"updated":"2021-01-31T06:31:35.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeow80008rh1tg62g5se9","content":"<p><img src=\"/2020/01/01/Linux/linux.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>Linux 是服务端最常用的操作系统，也是范围最广的，都是通过命令来交互的，记录些常用命令，这里会一直追加，年底了，回家的诱惑越来越强。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h4><ol>\n<li>远程复制</li>\n</ol>\n<p> <strong>scp</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制文件到远程</span></span><br><span class=\"line\">scp 文件 192.168.31.107:/usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n<p>静默复制目录到远程主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -r 表示目录，-q 静默复制</span></span><br><span class=\"line\">scp -rq /目录名 192.168.31.107:/usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>权限</li>\n</ol>\n<p>说明</p>\n<blockquote>\n<p>使用命令 ll 就可以清晰的查看 Linux 文件目录权限。</p>\n</blockquote>\n<p><img src=\"/2020/01/01/Linux/Linux-%E6%9D%83%E9%99%90.png\" alt=\"文件目录权限\"></p>\n<p>具体的命令执行后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 bin</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 etc</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 games</span><br><span class=\"line\">-rw-r--r--. 1 root root 13871 Dec 16 11:38 jihe.sh</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 include</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 lib</span><br></pre></td></tr></table></figure>\n<p>比较有意思的是，以上 <code>rwx</code> 表示的权限也可以用数字来描述：<br>r=4,w=2,x=1；如果想设置可读可执行：r + x = 5</p>\n<p>设置权限</p>\n<p><strong>chmod</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给当前用户设置可执行权限</span></span><br><span class=\"line\">chmod +x jihe.sh</span><br><span class=\"line\"><span class=\"comment\"># 给所有用户最大权限（可读可写可执行）</span></span><br><span class=\"line\">chmod 777 jihe.sh</span><br><span class=\"line\"><span class=\"comment\"># 递归添加权限</span></span><br><span class=\"line\">chmod -R 777 bin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查看文件</li>\n</ol>\n<p><strong>cat</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件合并 - 把 file1 和 file2 合并输出到 file3</span></span><br><span class=\"line\">cat file1 file2 &gt; file3</span><br><span class=\"line\"><span class=\"comment\"># 显示行号</span></span><br><span class=\"line\">cat -b file1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>more</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分页显示大文件 - 空格下一页</span></span><br><span class=\"line\">more jihe.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>解压</li>\n</ol>\n<p><strong>tar</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩 - 把目录下所有 txt 文件打包</span></span><br><span class=\"line\">tar -zcvf jihe.tar.gz *.txt</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf jihe.tar.gz</span><br></pre></td></tr></table></figure>\n<p>参数说明</p>\n<blockquote>\n<p>-z 是否使用 gzip 解压缩<br>-c 创建压缩文件（create）<br>-x 解压压缩文件<br>-v 压缩过程显示文件<br>-f 使用档案名，此参数为最后一个参数，后面只能接档案名</p>\n</blockquote>\n<ol start=\"4\">\n<li>文件大小</li>\n</ol>\n<p><strong>du</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全部目录及其子目录每个档案所占磁盘空间</span></span><br><span class=\"line\">du -a </span><br><span class=\"line\"><span class=\"comment\"># 全部目录及其子目录所占磁盘空间</span></span><br><span class=\"line\">du -h </span><br><span class=\"line\"><span class=\"comment\"># 对应目录及其子目录所占空间</span></span><br><span class=\"line\">du -ch 目录</span><br><span class=\"line\"><span class=\"comment\"># 总大小</span></span><br><span class=\"line\">du -sh</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>管道</li>\n</ol>\n<p><strong>|</strong></p>\n<p>管道命令使用 <code>|</code> 作为界定符号，管道命令需要结合其他命令一块使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出 jihe.txt 中包含 abc 的行。（区分大小写，包含空格必须加引号 &quot;a bc&quot;）</span></span><br><span class=\"line\">cat jihe.txt | grep abc</span><br><span class=\"line\"><span class=\"comment\"># 输出 jihe.txt 文件中包含 abc 的行（忽略大小写）</span></span><br><span class=\"line\">cat jihe.txt | grep -i abc</span><br><span class=\"line\"><span class=\"comment\"># 输出 jihe.txt 文件中不包含 abc 的行</span></span><br><span class=\"line\">cat jihe.txt | grep -v abc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>查看</li>\n</ol>\n<p><strong>which</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找 $PATH 设置命令及安装文件目录所在位置</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> ll</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>输出及显示</li>\n</ol>\n<p><strong>echo</strong><br>输出内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出文本，一般有特殊字符建议加双引号</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>export</strong></p>\n<p>设置或者显示环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前黄静变量值</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> -p</span><br><span class=\"line\"><span class=\"comment\"># 设置临时环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span>  变量（<span class=\"variable\">$JAVA_HOME</span>）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>yum<br>应用包管理，类似安卓平台上的安卓应用市场，iOS 平台 AppStore 等应用中心</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装软件 -y 忽略在安装中确认的操作，直接默认 yes</span></span><br><span class=\"line\">yum install `-y` 包名</span><br><span class=\"line\"><span class=\"comment\"># 升级</span></span><br><span class=\"line\">yum update 报名</span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">yum remove 报名</span><br><span class=\"line\"><span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>操作历史</li>\n</ol>\n<p><strong>history</strong><br>保留了最近执行的命令记录，默认保留 1000 条<br>历史清单从 0 开始编号到最大值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示最近 n 条命令</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> 10</span><br><span class=\"line\"><span class=\"comment\"># 清除所有的历史记录</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> -c</span><br><span class=\"line\"><span class=\"comment\"># 保存历史记录到文本</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> -w jihe.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高级功能\"><a href=\"#高级功能\" class=\"headerlink\" title=\"高级功能\"></a>高级功能</h4><ol>\n<li>系统状态</li>\n</ol>\n<p><strong>ps</strong></p>\n<p>查看处于活动状态的服务进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep 进程名[tomcat]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看端口</span></span><br><span class=\"line\">ss -ntl</span><br></pre></td></tr></table></figure>\n<p><strong>netstat</strong></p>\n<p>查看端口号等信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp | grep 端口号[8080]</span><br></pre></td></tr></table></figure>\n<p><strong>top</strong><br>动态显示当前系统运行情况，类似 windows 中任务管理器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示命令执行的全路径</span></span><br><span class=\"line\">top -c </span><br><span class=\"line\"><span class=\"comment\"># 指定用户名</span></span><br><span class=\"line\">top -u</span><br><span class=\"line\"><span class=\"comment\"># 指定进程</span></span><br><span class=\"line\">top -p </span><br><span class=\"line\"><span class=\"comment\"># 按进程的 CPU 使用率排序</span></span><br><span class=\"line\">top P</span><br><span class=\"line\"><span class=\"comment\"># 按进程的内存使用率排序</span></span><br><span class=\"line\">top M</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>df</strong><br>显示磁盘使用率</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n<p><strong>who</strong><br>显示当前登录用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">who</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>uname</strong><br>查看系统信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n<p><strong>free</strong><br>查看内存和交换空间使用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单个命令显示的是字节，以 M/G 为单位显示</span></span><br><span class=\"line\">free -m/g</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>关机重启</li>\n</ol>\n<p><strong>reboot</strong><br>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 立刻重启</span></span><br><span class=\"line\">reboot -h now </span><br></pre></td></tr></table></figure>\n<p><strong>poweroff</strong></p>\n<p>关机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poweroff</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看系统</li>\n</ol>\n<p><strong>lscpu</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统 cpu 信息</span></span><br><span class=\"line\">lscpu</span><br></pre></td></tr></table></figure>\n<hr>\n<center>越来越好</center>\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2020/01/01/Linux/linux.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>Linux 是服务端最常用的操作系统，也是范围最广的，都是通过命令来交互的，记录些常用命令，这里会一直追加，年底了，回家的诱惑越来越强。</p>","more":"<h4 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h4><ol>\n<li>远程复制</li>\n</ol>\n<p> <strong>scp</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制文件到远程</span></span><br><span class=\"line\">scp 文件 192.168.31.107:/usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n<p>静默复制目录到远程主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -r 表示目录，-q 静默复制</span></span><br><span class=\"line\">scp -rq /目录名 192.168.31.107:/usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>权限</li>\n</ol>\n<p>说明</p>\n<blockquote>\n<p>使用命令 ll 就可以清晰的查看 Linux 文件目录权限。</p>\n</blockquote>\n<p><img src=\"/2020/01/01/Linux/Linux-%E6%9D%83%E9%99%90.png\" alt=\"文件目录权限\"></p>\n<p>具体的命令执行后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 bin</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 etc</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 games</span><br><span class=\"line\">-rw-r--r--. 1 root root 13871 Dec 16 11:38 jihe.sh</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 include</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 May 11  2019 lib</span><br></pre></td></tr></table></figure>\n<p>比较有意思的是，以上 <code>rwx</code> 表示的权限也可以用数字来描述：<br>r=4,w=2,x=1；如果想设置可读可执行：r + x = 5</p>\n<p>设置权限</p>\n<p><strong>chmod</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给当前用户设置可执行权限</span></span><br><span class=\"line\">chmod +x jihe.sh</span><br><span class=\"line\"><span class=\"comment\"># 给所有用户最大权限（可读可写可执行）</span></span><br><span class=\"line\">chmod 777 jihe.sh</span><br><span class=\"line\"><span class=\"comment\"># 递归添加权限</span></span><br><span class=\"line\">chmod -R 777 bin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查看文件</li>\n</ol>\n<p><strong>cat</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件合并 - 把 file1 和 file2 合并输出到 file3</span></span><br><span class=\"line\">cat file1 file2 &gt; file3</span><br><span class=\"line\"><span class=\"comment\"># 显示行号</span></span><br><span class=\"line\">cat -b file1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>more</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分页显示大文件 - 空格下一页</span></span><br><span class=\"line\">more jihe.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>解压</li>\n</ol>\n<p><strong>tar</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩 - 把目录下所有 txt 文件打包</span></span><br><span class=\"line\">tar -zcvf jihe.tar.gz *.txt</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf jihe.tar.gz</span><br></pre></td></tr></table></figure>\n<p>参数说明</p>\n<blockquote>\n<p>-z 是否使用 gzip 解压缩<br>-c 创建压缩文件（create）<br>-x 解压压缩文件<br>-v 压缩过程显示文件<br>-f 使用档案名，此参数为最后一个参数，后面只能接档案名</p>\n</blockquote>\n<ol start=\"4\">\n<li>文件大小</li>\n</ol>\n<p><strong>du</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全部目录及其子目录每个档案所占磁盘空间</span></span><br><span class=\"line\">du -a </span><br><span class=\"line\"><span class=\"comment\"># 全部目录及其子目录所占磁盘空间</span></span><br><span class=\"line\">du -h </span><br><span class=\"line\"><span class=\"comment\"># 对应目录及其子目录所占空间</span></span><br><span class=\"line\">du -ch 目录</span><br><span class=\"line\"><span class=\"comment\"># 总大小</span></span><br><span class=\"line\">du -sh</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>管道</li>\n</ol>\n<p><strong>|</strong></p>\n<p>管道命令使用 <code>|</code> 作为界定符号，管道命令需要结合其他命令一块使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出 jihe.txt 中包含 abc 的行。（区分大小写，包含空格必须加引号 &quot;a bc&quot;）</span></span><br><span class=\"line\">cat jihe.txt | grep abc</span><br><span class=\"line\"><span class=\"comment\"># 输出 jihe.txt 文件中包含 abc 的行（忽略大小写）</span></span><br><span class=\"line\">cat jihe.txt | grep -i abc</span><br><span class=\"line\"><span class=\"comment\"># 输出 jihe.txt 文件中不包含 abc 的行</span></span><br><span class=\"line\">cat jihe.txt | grep -v abc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>查看</li>\n</ol>\n<p><strong>which</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找 $PATH 设置命令及安装文件目录所在位置</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> ll</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>输出及显示</li>\n</ol>\n<p><strong>echo</strong><br>输出内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出文本，一般有特殊字符建议加双引号</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>export</strong></p>\n<p>设置或者显示环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前黄静变量值</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> -p</span><br><span class=\"line\"><span class=\"comment\"># 设置临时环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span>  变量（<span class=\"variable\">$JAVA_HOME</span>）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>yum<br>应用包管理，类似安卓平台上的安卓应用市场，iOS 平台 AppStore 等应用中心</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装软件 -y 忽略在安装中确认的操作，直接默认 yes</span></span><br><span class=\"line\">yum install `-y` 包名</span><br><span class=\"line\"><span class=\"comment\"># 升级</span></span><br><span class=\"line\">yum update 报名</span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">yum remove 报名</span><br><span class=\"line\"><span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>操作历史</li>\n</ol>\n<p><strong>history</strong><br>保留了最近执行的命令记录，默认保留 1000 条<br>历史清单从 0 开始编号到最大值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示最近 n 条命令</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> 10</span><br><span class=\"line\"><span class=\"comment\"># 清除所有的历史记录</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> -c</span><br><span class=\"line\"><span class=\"comment\"># 保存历史记录到文本</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> -w jihe.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高级功能\"><a href=\"#高级功能\" class=\"headerlink\" title=\"高级功能\"></a>高级功能</h4><ol>\n<li>系统状态</li>\n</ol>\n<p><strong>ps</strong></p>\n<p>查看处于活动状态的服务进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep 进程名[tomcat]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看端口</span></span><br><span class=\"line\">ss -ntl</span><br></pre></td></tr></table></figure>\n<p><strong>netstat</strong></p>\n<p>查看端口号等信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp | grep 端口号[8080]</span><br></pre></td></tr></table></figure>\n<p><strong>top</strong><br>动态显示当前系统运行情况，类似 windows 中任务管理器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示命令执行的全路径</span></span><br><span class=\"line\">top -c </span><br><span class=\"line\"><span class=\"comment\"># 指定用户名</span></span><br><span class=\"line\">top -u</span><br><span class=\"line\"><span class=\"comment\"># 指定进程</span></span><br><span class=\"line\">top -p </span><br><span class=\"line\"><span class=\"comment\"># 按进程的 CPU 使用率排序</span></span><br><span class=\"line\">top P</span><br><span class=\"line\"><span class=\"comment\"># 按进程的内存使用率排序</span></span><br><span class=\"line\">top M</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>df</strong><br>显示磁盘使用率</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n<p><strong>who</strong><br>显示当前登录用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">who</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>uname</strong><br>查看系统信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n<p><strong>free</strong><br>查看内存和交换空间使用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单个命令显示的是字节，以 M/G 为单位显示</span></span><br><span class=\"line\">free -m/g</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>关机重启</li>\n</ol>\n<p><strong>reboot</strong><br>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 立刻重启</span></span><br><span class=\"line\">reboot -h now </span><br></pre></td></tr></table></figure>\n<p><strong>poweroff</strong></p>\n<p>关机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poweroff</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看系统</li>\n</ol>\n<p><strong>lscpu</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统 cpu 信息</span></span><br><span class=\"line\">lscpu</span><br></pre></td></tr></table></figure>\n<hr>\n<center>越来越好</center>"},{"title":"RabbitMQ安装和使用","date":"2019-09-04T16:16:09.000Z","_content":"\n![Photo by Vadim Sadovski on Unsplash](RabbitMQ安装和使用/rabbitmq.png)\n\n作为消息中间件，MQ （Message Queue） 在系统中有至关重要的作用，在高并发场景下，MQ 异步处理请求，缓解系统高峰期压力。在系统之间的调用中解耦，降低各个系统之间的依赖，提交系统的可扩展性。在一写复杂业务处理时，进行异步处理，类似乐观锁，及时返回给用户操作状态，至于业务逻辑通知 MQ 之后在进行处理，提高用户体验，也提高了服务器的处理能力。\n<!--more-->\n\n\n#### 安装\n\n|  系统    |   版本   | \n| ---- | ---- | ---- |\n| CenterOS |  7.6       |  \n|   RabbitMq  | 3.6.10    | \n\n因为 RabbitMQ 是 erlang 实现的，所以先要安装 erlang 环境。\n\n```bash\n# 没有 wget 命令的先安装 wget\nyum -y install wget\n# 下载\nwget http://www.rabbitmq.com/releases/erlang/erlang-19.0.4-1.el7.centos.x86_64.rpm\n\n# 升级包\nrpm -ivh erlang-19.0.4-1.el7.centos.x86_64.rpm\n\n# 安装\nyum -y install erlang\n\n# 下载 rabbitmq\nwget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el6.noarch.rpm\n\n# 安装 mq\nyum -y install rabbitmq-server-3.6.6-1.el6.noarch.rpm\n\n```\n\n在安装过程中碰到了缺少一些依赖包的情况，但是 Google 上都有解决方案，下载安装后可以解决。\n\n#### 使用\n\n##### 启动\n```bash\ncd /usr/sbin\nservice rabbitmq-server start\n# 查看进程\nps -ef | grep rabbitmq \n```\n\n##### 后台运行\n```bash\nrabbitmq-server -detached\n```\n\n##### 开机启动\n```bash\nchkconfig rabbitmq-server on\n```\n##### 安装 web 管理插件\n```bash\nrabbitmq-plugins enable rabbitmq_management\n\n```\n访问： http://ip:15672 就可以进入到管理页面了\n\n##### 创建用户\n\nrabbitmq 有个默认的 guest/guest 用户，但是只能在 localhost 下访问，所以要创建一个用户来可以进行远程访问\n\n```bash\n# 创建用户\nabbitmqctl add_user admin admin\n# 授予权限\nrabbitmqctl set_user_tags admin administrator\n# 分配权限\nrabbitmqctl add_vhost admin\n\nrabbitmqctl set_permissions -p admin admin \".*\" \".*\" \".*\"\n\n```\n\n\n##### 关键字\n\n1. Broker：可以理解成 rabbitmq 服务。\n2. vhost:  虚拟主机，一个 broker 可以创建多个 vhost，用作权限分离。\n3. Producer：消息生产者，消息的来源。\n4. Consumer：消息消费者，负责消费生产者生产的消息。\n5. Exchange：交换机，可以看作是一个消息的中转站。\n6. Queue：队列，消息的载体，消息会被投递到一个或者多个队列中。\n7. Binding：绑定，按照一定规则绑定交换机和队列。\n8. Routing Key：路由key，交换机根据这个关键字投递到对应的队列。\n9. Channel：通道，在 client 端每个链接，可以建立多个通道。\n\n#### 模式\n\n##### 简单队列\n\n生产者将消息推到队列，消费者从队列消费消息。一个生产者对应一个消费者。\n\n###### work 模式\n\n一个生产者对应多个消费者，但是一个消息只能被一个消费者获取。\n\n1. 创建一个 Direct 交换机\n``` java\n@Configuration\npublic class ExchangeConfig {\n\n    @Bean\n    public DirectExchange directExchange(){\n        // params\n        // 1. name:交换机名字\n        // 2. durable:持久化，当为 true 时，在 mq 重启之后会重新加载此交换机\n        // 3. autoDelete:自动删除，当交换机长时间不使用时，自动删除此交换机\n        return new DirectExchange(RabbitMqConfig.EXCHANGE_TEST,\n                true, false);\n    }\n}\n```\n2. 配置\n``` java\n@Configuration\npublic class RabbitMqConfig {\n\n    public static final String EXCHANGE_TEST = \"exchange_test\";\n    public static final String FIRST_QUEUE = \"first_queue\";\n    public static final String SECOND_QUEUE = \"second_queue\";\n\n    /** 队列key1*/\n    public static final String FIRST_ROUTING_KEY = \"first_routing_key\";\n    /** 队列key2*/\n    public static final String SECOND_ROUTING_KEY = \"second_routing_key\";\n\n    private final ConnectionFactory connectionFactory;\n    private final ExchangeConfig exchangeConfig;\n    private final QueueConfig queueConfig;\n\n\n    public RabbitMqConfig(ConnectionFactory connectionFactory, ExchangeConfig exchangeConfig,\n                          QueueConfig queueConfig) {\n        this.connectionFactory = connectionFactory;\n        this.exchangeConfig = exchangeConfig;\n        this.queueConfig = queueConfig;\n    }\n\n    @Bean\n    public SimpleMessageListenerContainer simpleMessageListenerContainer(){\n        SimpleMessageListenerContainer simpleMessageListenerContainer = new SimpleMessageListenerContainer(connectionFactory);\n        simpleMessageListenerContainer.addQueues(queueConfig.firstQueue());\n        simpleMessageListenerContainer.setExposeListenerChannel(true);\n        simpleMessageListenerContainer.setMaxConcurrentConsumers(5);\n        simpleMessageListenerContainer.setConcurrentConsumers(1);\n        //设置确认模式手工确认\n        simpleMessageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);\n        return simpleMessageListenerContainer;\n    }\n\n    @Bean\n    public RabbitTemplate rabbitTemplate() {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setConfirmCallback(msgSendConfirmCallBack());\n        return template;\n    }\n\n    @Bean\n    public AckCallback msgSendConfirmCallBack(){\n        return new AckCallback();\n    }\n\n\n    /**\n     * 根据指定的 key 将具体的队列绑定到 direct 交换机\n     */\n    @Bean\n    public Binding firstBinding() {\n        return BindingBuilder.bind(queueConfig.firstQueue())\n                             .to(exchangeConfig.directExchange())\n                             .with(RabbitMqConfig.FIRST_ROUTING_KEY);\n    }\n    @Bean\n    public Binding secondBinding() {\n        return BindingBuilder.bind(queueConfig.secondQueue())\n                             .to(exchangeConfig.directExchange())\n                             .with(RabbitMqConfig.SECOND_ROUTING_KEY);\n    }\n}\n```\n3. 队列\n```java\n@Configuration\npublic class QueueConfig {\n\n    @Bean\n    public Queue firstQueue() {\n        // params\n        // 1. name:队列名称\n        // 2. durable:持久化，当为 true 时，在 mq 重启之后此队列自动加载\n        // 3. exclusive:排他队列，当为 true 时，只有队列声明者才能调用\n        // 4. autoDelete:自动删除，当为 true 时，自动删除长时间不适用的队列\n        return new Queue(RabbitMqConfig.FIRST_QUEUE,\n                true,false,false);\n    }\n\n    @Bean\n    public Queue secondQueue() {\n        return new Queue(RabbitMqConfig.SECOND_QUEUE,\n                true, false, false);\n    }\n}\n```\n4. 回调\n```java\n@Slf4j\npublic class AckCallback implements RabbitTemplate.ConfirmCallback {\n    @Override\n    public void confirm(CorrelationData correlationData, boolean ack, String cause) {\n        log.info(\"AckCallback 回调，ID:{}\",correlationData);\n        if (ack) {\n            log.info(\"消息消费成功\");\n        }else {\n            log.info(\"消息消费失败，原因：{}\",cause);\n        }\n    }\n}\n```\n消息消费完之后会有回调\n\n5. 生产者\n```java\n@Test\npublic void sender() {\n    CorrelationData correlationData = new CorrelationData(\"123456789\");\n    String msg = \"第一次发送消息\";\n    rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TEST,\n            RabbitMqConfig.SECOND_ROUTING_KEY,msg,correlationData);\n}\n```\n我这里直接用 JUnit 进行测试\n\n6. 消费费者\n```java\n@Component\npublic class MqConsumer {\n    // 监听的队列名称，链接工厂实例\n    @RabbitListener(queues = {RabbitMqConfig.SECOND_QUEUE, RabbitMqConfig.FIRST_QUEUE},\n            containerFactory = \"rabbitListenerContainerFactory\")\n    public void handlerMessage(String msg) {\n        System.out.println(\"消费成功\" + msg);\n    }\n}\n```\n\n在 Direct 交换机中，一个交换机可以绑定多个队列，通过不同的路由 key 来指定消息发送到对应的队列中进行消费。当消费者启动时，会自动监听消费相应的消息。\n\n\n##### Fanout 交换机（订阅模式）\n\n订阅模式类似公众号，推送一条消息之后，关注者都可以收到这天推送。\n\n1. 枚举类\n\n交换机配置枚举类\n``` java\n@Getter\n@AllArgsConstructor\npublic enum MqExchangeEnum {\n\n    FANOUT_EXCHANGE_TEST(\"fanout_exchange_test\", \"fanout交换机\");\n\n\n    private String key;\n    private String desc;\n}\n```\n\n队列枚举类\n\n```java\n@Getter\n@AllArgsConstructor\npublic enum MqQueueEnum {\n\n    FANOUT_QUEUE_A(\"fanout_queue_a\",\"fanout交换机队列1\"),\n    FANOUT_QUEUE_B(\"fanout_queue_b\", \"fanout交换机队列2\");\n\n    private String key;\n    private String desc;\n}\n```\n\n交换机配置\n``` java \n@Configuration\npublic class FanoutExchangeConfig {\n\n\n    @Bean\n    public FanoutExchange fanoutExchange() {\n        return new FanoutExchange(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),\n                true,false);\n    }\n\n}\n```\n2. 绑定\n```java\n@Bean\n    public Binding fanBindingA() {\n        return BindingBuilder.bind(queueConfig.fanoutQueueA()).to(fanoutExchangeConfig.fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanBindingB() {\n        return BindingBuilder.bind(queueConfig.fanoutQueueB()).to(fanoutExchangeConfig.fanoutExchange());\n```\n\n3. 发送消息\n```java \n@Test\n    public void fanoutSender() {\n        for (int i = 0; i < 20; i++) {\n            try {\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            CorrelationData correlationData = new CorrelationData(i + \"消息\");\n            String msg = \"fanout exchange first test, time: \" + System.currentTimeMillis() + \" . msg num: \" + i;\n            rabbitTemplate.convertAndSend(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),\"\",msg,correlationData);\n        }\n    }\n```\n\n4. 消费消息\n监听相应的队列，进行消息处理。\n``` java\n@Component\n@RabbitListener(queues = {\"fanout_queue_a\", \"fanout_queue_b\"})\npublic class FanoutConsumer {\n\n    @RabbitHandler\n    public void process(String msg) {\n        System.out.println(\"fanout exchange 消息内容：\" + msg);\n    }\n\n}\n```\nfanout 交换机推送消息到所有绑定到它的队列，这里指定具体的路由也是不会生效的\n\n\n##### Topic 交换机（匹配模式）\n\ntopic 交换机绑定队列之后，可以根据路由 key 来匹配具体的队列，进行消息消费，以通配符的方式绑定到相应的队列，生产者发送相应的路由后，会按照规则匹配到具体的队列\n\n1. 交换机配置\n\n```java\n@Configuration\npublic class TopicExchangeConfig {\n\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey());\n    }\n}\n```\n\n2. 队列\n```java\n@Bean\n    public Queue topicQueueA() {\n        return new Queue(MqQueueEnum.TOPIC_QUEUE_A.getKey(),\n                true, false, false);\n    }\n\n@Bean\npublic Queue topicQueueB() {\n    return new Queue(MqQueueEnum.TOPIC_QUEUE_B.getKey(),\n            true, false, false);\n}\n```\n\n3. 路由\n\n> `#` 表示 零个或者多个单词，匹配任何字符， 以 # 作为路由，topic 交换机的工作模式会和 fanout 交换机工作模式相同\n> *   表示一个单词\n```java\n@Bean\n    public Binding topicBindingA() {\n        return BindingBuilder.bind(queueConfig.topicQueueA())\n                .to(topicExchangeConfig.topicExchange()).with(\"#.user.#\");\n    }\n\n@Bean\npublic Binding topicBindingB() {\n    return BindingBuilder.bind(queueConfig.topicQueueB())\n            .to(topicExchangeConfig.topicExchange()).with(\"topic.#\");\n}\n```\n\n4. 生产者\n```java\n@Test\npublic void topicSender() {\n    for (int i = 0; i < 20; i++) {\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        String msg = \"top message:\" + i;\n        rabbitTemplate.convertAndSend(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey(), \"topic.user\", msg);\n    }\n}\n```\n\n5. 消费者\n\n```java\n@Component\npublic class TopicConsumer {\n\n    @RabbitListener(queues = \"topic_queue_a\")\n    public void topicConsumerOne(String msg) {\n        System.out.println(\"topic_queue_a 1 消费\" + msg);\n    }\n\n    @RabbitListener(queues = \"topic_queue_b\")\n    public void topicConTow(String tow) {\n        System.out.println(\"topic_queue_b 2 消费\" + tow);\n    }\n}\n```\n参考[链接](https://blog.csdn.net/zhuzhezhuzhe1/article/details/80454956)\n参考[RabbitMq教程](https://www.kancloud.cn/digest/rabbitmq-for-java/122041)\n\n***\n\n<center>When life gives you lemons,make Lemonade</center>\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/RabbitMQ安装和使用.md","raw":"---\ntitle: RabbitMQ安装和使用\ndate: 2019-09-05 00:16:09\ntags: RabbitMQ\ncategory: MQ\n---\n\n![Photo by Vadim Sadovski on Unsplash](RabbitMQ安装和使用/rabbitmq.png)\n\n作为消息中间件，MQ （Message Queue） 在系统中有至关重要的作用，在高并发场景下，MQ 异步处理请求，缓解系统高峰期压力。在系统之间的调用中解耦，降低各个系统之间的依赖，提交系统的可扩展性。在一写复杂业务处理时，进行异步处理，类似乐观锁，及时返回给用户操作状态，至于业务逻辑通知 MQ 之后在进行处理，提高用户体验，也提高了服务器的处理能力。\n<!--more-->\n\n\n#### 安装\n\n|  系统    |   版本   | \n| ---- | ---- | ---- |\n| CenterOS |  7.6       |  \n|   RabbitMq  | 3.6.10    | \n\n因为 RabbitMQ 是 erlang 实现的，所以先要安装 erlang 环境。\n\n```bash\n# 没有 wget 命令的先安装 wget\nyum -y install wget\n# 下载\nwget http://www.rabbitmq.com/releases/erlang/erlang-19.0.4-1.el7.centos.x86_64.rpm\n\n# 升级包\nrpm -ivh erlang-19.0.4-1.el7.centos.x86_64.rpm\n\n# 安装\nyum -y install erlang\n\n# 下载 rabbitmq\nwget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el6.noarch.rpm\n\n# 安装 mq\nyum -y install rabbitmq-server-3.6.6-1.el6.noarch.rpm\n\n```\n\n在安装过程中碰到了缺少一些依赖包的情况，但是 Google 上都有解决方案，下载安装后可以解决。\n\n#### 使用\n\n##### 启动\n```bash\ncd /usr/sbin\nservice rabbitmq-server start\n# 查看进程\nps -ef | grep rabbitmq \n```\n\n##### 后台运行\n```bash\nrabbitmq-server -detached\n```\n\n##### 开机启动\n```bash\nchkconfig rabbitmq-server on\n```\n##### 安装 web 管理插件\n```bash\nrabbitmq-plugins enable rabbitmq_management\n\n```\n访问： http://ip:15672 就可以进入到管理页面了\n\n##### 创建用户\n\nrabbitmq 有个默认的 guest/guest 用户，但是只能在 localhost 下访问，所以要创建一个用户来可以进行远程访问\n\n```bash\n# 创建用户\nabbitmqctl add_user admin admin\n# 授予权限\nrabbitmqctl set_user_tags admin administrator\n# 分配权限\nrabbitmqctl add_vhost admin\n\nrabbitmqctl set_permissions -p admin admin \".*\" \".*\" \".*\"\n\n```\n\n\n##### 关键字\n\n1. Broker：可以理解成 rabbitmq 服务。\n2. vhost:  虚拟主机，一个 broker 可以创建多个 vhost，用作权限分离。\n3. Producer：消息生产者，消息的来源。\n4. Consumer：消息消费者，负责消费生产者生产的消息。\n5. Exchange：交换机，可以看作是一个消息的中转站。\n6. Queue：队列，消息的载体，消息会被投递到一个或者多个队列中。\n7. Binding：绑定，按照一定规则绑定交换机和队列。\n8. Routing Key：路由key，交换机根据这个关键字投递到对应的队列。\n9. Channel：通道，在 client 端每个链接，可以建立多个通道。\n\n#### 模式\n\n##### 简单队列\n\n生产者将消息推到队列，消费者从队列消费消息。一个生产者对应一个消费者。\n\n###### work 模式\n\n一个生产者对应多个消费者，但是一个消息只能被一个消费者获取。\n\n1. 创建一个 Direct 交换机\n``` java\n@Configuration\npublic class ExchangeConfig {\n\n    @Bean\n    public DirectExchange directExchange(){\n        // params\n        // 1. name:交换机名字\n        // 2. durable:持久化，当为 true 时，在 mq 重启之后会重新加载此交换机\n        // 3. autoDelete:自动删除，当交换机长时间不使用时，自动删除此交换机\n        return new DirectExchange(RabbitMqConfig.EXCHANGE_TEST,\n                true, false);\n    }\n}\n```\n2. 配置\n``` java\n@Configuration\npublic class RabbitMqConfig {\n\n    public static final String EXCHANGE_TEST = \"exchange_test\";\n    public static final String FIRST_QUEUE = \"first_queue\";\n    public static final String SECOND_QUEUE = \"second_queue\";\n\n    /** 队列key1*/\n    public static final String FIRST_ROUTING_KEY = \"first_routing_key\";\n    /** 队列key2*/\n    public static final String SECOND_ROUTING_KEY = \"second_routing_key\";\n\n    private final ConnectionFactory connectionFactory;\n    private final ExchangeConfig exchangeConfig;\n    private final QueueConfig queueConfig;\n\n\n    public RabbitMqConfig(ConnectionFactory connectionFactory, ExchangeConfig exchangeConfig,\n                          QueueConfig queueConfig) {\n        this.connectionFactory = connectionFactory;\n        this.exchangeConfig = exchangeConfig;\n        this.queueConfig = queueConfig;\n    }\n\n    @Bean\n    public SimpleMessageListenerContainer simpleMessageListenerContainer(){\n        SimpleMessageListenerContainer simpleMessageListenerContainer = new SimpleMessageListenerContainer(connectionFactory);\n        simpleMessageListenerContainer.addQueues(queueConfig.firstQueue());\n        simpleMessageListenerContainer.setExposeListenerChannel(true);\n        simpleMessageListenerContainer.setMaxConcurrentConsumers(5);\n        simpleMessageListenerContainer.setConcurrentConsumers(1);\n        //设置确认模式手工确认\n        simpleMessageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);\n        return simpleMessageListenerContainer;\n    }\n\n    @Bean\n    public RabbitTemplate rabbitTemplate() {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setConfirmCallback(msgSendConfirmCallBack());\n        return template;\n    }\n\n    @Bean\n    public AckCallback msgSendConfirmCallBack(){\n        return new AckCallback();\n    }\n\n\n    /**\n     * 根据指定的 key 将具体的队列绑定到 direct 交换机\n     */\n    @Bean\n    public Binding firstBinding() {\n        return BindingBuilder.bind(queueConfig.firstQueue())\n                             .to(exchangeConfig.directExchange())\n                             .with(RabbitMqConfig.FIRST_ROUTING_KEY);\n    }\n    @Bean\n    public Binding secondBinding() {\n        return BindingBuilder.bind(queueConfig.secondQueue())\n                             .to(exchangeConfig.directExchange())\n                             .with(RabbitMqConfig.SECOND_ROUTING_KEY);\n    }\n}\n```\n3. 队列\n```java\n@Configuration\npublic class QueueConfig {\n\n    @Bean\n    public Queue firstQueue() {\n        // params\n        // 1. name:队列名称\n        // 2. durable:持久化，当为 true 时，在 mq 重启之后此队列自动加载\n        // 3. exclusive:排他队列，当为 true 时，只有队列声明者才能调用\n        // 4. autoDelete:自动删除，当为 true 时，自动删除长时间不适用的队列\n        return new Queue(RabbitMqConfig.FIRST_QUEUE,\n                true,false,false);\n    }\n\n    @Bean\n    public Queue secondQueue() {\n        return new Queue(RabbitMqConfig.SECOND_QUEUE,\n                true, false, false);\n    }\n}\n```\n4. 回调\n```java\n@Slf4j\npublic class AckCallback implements RabbitTemplate.ConfirmCallback {\n    @Override\n    public void confirm(CorrelationData correlationData, boolean ack, String cause) {\n        log.info(\"AckCallback 回调，ID:{}\",correlationData);\n        if (ack) {\n            log.info(\"消息消费成功\");\n        }else {\n            log.info(\"消息消费失败，原因：{}\",cause);\n        }\n    }\n}\n```\n消息消费完之后会有回调\n\n5. 生产者\n```java\n@Test\npublic void sender() {\n    CorrelationData correlationData = new CorrelationData(\"123456789\");\n    String msg = \"第一次发送消息\";\n    rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TEST,\n            RabbitMqConfig.SECOND_ROUTING_KEY,msg,correlationData);\n}\n```\n我这里直接用 JUnit 进行测试\n\n6. 消费费者\n```java\n@Component\npublic class MqConsumer {\n    // 监听的队列名称，链接工厂实例\n    @RabbitListener(queues = {RabbitMqConfig.SECOND_QUEUE, RabbitMqConfig.FIRST_QUEUE},\n            containerFactory = \"rabbitListenerContainerFactory\")\n    public void handlerMessage(String msg) {\n        System.out.println(\"消费成功\" + msg);\n    }\n}\n```\n\n在 Direct 交换机中，一个交换机可以绑定多个队列，通过不同的路由 key 来指定消息发送到对应的队列中进行消费。当消费者启动时，会自动监听消费相应的消息。\n\n\n##### Fanout 交换机（订阅模式）\n\n订阅模式类似公众号，推送一条消息之后，关注者都可以收到这天推送。\n\n1. 枚举类\n\n交换机配置枚举类\n``` java\n@Getter\n@AllArgsConstructor\npublic enum MqExchangeEnum {\n\n    FANOUT_EXCHANGE_TEST(\"fanout_exchange_test\", \"fanout交换机\");\n\n\n    private String key;\n    private String desc;\n}\n```\n\n队列枚举类\n\n```java\n@Getter\n@AllArgsConstructor\npublic enum MqQueueEnum {\n\n    FANOUT_QUEUE_A(\"fanout_queue_a\",\"fanout交换机队列1\"),\n    FANOUT_QUEUE_B(\"fanout_queue_b\", \"fanout交换机队列2\");\n\n    private String key;\n    private String desc;\n}\n```\n\n交换机配置\n``` java \n@Configuration\npublic class FanoutExchangeConfig {\n\n\n    @Bean\n    public FanoutExchange fanoutExchange() {\n        return new FanoutExchange(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),\n                true,false);\n    }\n\n}\n```\n2. 绑定\n```java\n@Bean\n    public Binding fanBindingA() {\n        return BindingBuilder.bind(queueConfig.fanoutQueueA()).to(fanoutExchangeConfig.fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanBindingB() {\n        return BindingBuilder.bind(queueConfig.fanoutQueueB()).to(fanoutExchangeConfig.fanoutExchange());\n```\n\n3. 发送消息\n```java \n@Test\n    public void fanoutSender() {\n        for (int i = 0; i < 20; i++) {\n            try {\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            CorrelationData correlationData = new CorrelationData(i + \"消息\");\n            String msg = \"fanout exchange first test, time: \" + System.currentTimeMillis() + \" . msg num: \" + i;\n            rabbitTemplate.convertAndSend(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),\"\",msg,correlationData);\n        }\n    }\n```\n\n4. 消费消息\n监听相应的队列，进行消息处理。\n``` java\n@Component\n@RabbitListener(queues = {\"fanout_queue_a\", \"fanout_queue_b\"})\npublic class FanoutConsumer {\n\n    @RabbitHandler\n    public void process(String msg) {\n        System.out.println(\"fanout exchange 消息内容：\" + msg);\n    }\n\n}\n```\nfanout 交换机推送消息到所有绑定到它的队列，这里指定具体的路由也是不会生效的\n\n\n##### Topic 交换机（匹配模式）\n\ntopic 交换机绑定队列之后，可以根据路由 key 来匹配具体的队列，进行消息消费，以通配符的方式绑定到相应的队列，生产者发送相应的路由后，会按照规则匹配到具体的队列\n\n1. 交换机配置\n\n```java\n@Configuration\npublic class TopicExchangeConfig {\n\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey());\n    }\n}\n```\n\n2. 队列\n```java\n@Bean\n    public Queue topicQueueA() {\n        return new Queue(MqQueueEnum.TOPIC_QUEUE_A.getKey(),\n                true, false, false);\n    }\n\n@Bean\npublic Queue topicQueueB() {\n    return new Queue(MqQueueEnum.TOPIC_QUEUE_B.getKey(),\n            true, false, false);\n}\n```\n\n3. 路由\n\n> `#` 表示 零个或者多个单词，匹配任何字符， 以 # 作为路由，topic 交换机的工作模式会和 fanout 交换机工作模式相同\n> *   表示一个单词\n```java\n@Bean\n    public Binding topicBindingA() {\n        return BindingBuilder.bind(queueConfig.topicQueueA())\n                .to(topicExchangeConfig.topicExchange()).with(\"#.user.#\");\n    }\n\n@Bean\npublic Binding topicBindingB() {\n    return BindingBuilder.bind(queueConfig.topicQueueB())\n            .to(topicExchangeConfig.topicExchange()).with(\"topic.#\");\n}\n```\n\n4. 生产者\n```java\n@Test\npublic void topicSender() {\n    for (int i = 0; i < 20; i++) {\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        String msg = \"top message:\" + i;\n        rabbitTemplate.convertAndSend(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey(), \"topic.user\", msg);\n    }\n}\n```\n\n5. 消费者\n\n```java\n@Component\npublic class TopicConsumer {\n\n    @RabbitListener(queues = \"topic_queue_a\")\n    public void topicConsumerOne(String msg) {\n        System.out.println(\"topic_queue_a 1 消费\" + msg);\n    }\n\n    @RabbitListener(queues = \"topic_queue_b\")\n    public void topicConTow(String tow) {\n        System.out.println(\"topic_queue_b 2 消费\" + tow);\n    }\n}\n```\n参考[链接](https://blog.csdn.net/zhuzhezhuzhe1/article/details/80454956)\n参考[RabbitMq教程](https://www.kancloud.cn/digest/rabbitmq-for-java/122041)\n\n***\n\n<center>When life gives you lemons,make Lemonade</center>\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"RabbitMQ安装和使用","published":1,"updated":"2021-01-31T06:31:35.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeow90009rh1t1hls0x82","content":"<p><img src=\"/2019/09/05/RabbitMQ%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/rabbitmq.png\" alt=\"Photo by Vadim Sadovski on Unsplash\"></p>\n<p>作为消息中间件，MQ （Message Queue） 在系统中有至关重要的作用，在高并发场景下，MQ 异步处理请求，缓解系统高峰期压力。在系统之间的调用中解耦，降低各个系统之间的依赖，提交系统的可扩展性。在一写复杂业务处理时，进行异步处理，类似乐观锁，及时返回给用户操作状态，至于业务逻辑通知 MQ 之后在进行处理，提高用户体验，也提高了服务器的处理能力。</p>\n<a id=\"more\"></a>\n\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>|  系统    |   版本   |<br>| —- | —- | —- |<br>| CenterOS |  7.6       |<br>|   RabbitMq  | 3.6.10    | </p>\n<p>因为 RabbitMQ 是 erlang 实现的，所以先要安装 erlang 环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 没有 wget 命令的先安装 wget</span></span><br><span class=\"line\">yum -y install wget</span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget http://www.rabbitmq.com/releases/erlang/erlang-19.0.4-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级包</span></span><br><span class=\"line\">rpm -ivh erlang-19.0.4-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum -y install erlang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 rabbitmq</span></span><br><span class=\"line\">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el6.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 mq</span></span><br><span class=\"line\">yum -y install rabbitmq-server-3.6.6-1.el6.noarch.rpm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在安装过程中碰到了缺少一些依赖包的情况，但是 Google 上都有解决方案，下载安装后可以解决。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/sbin</span><br><span class=\"line\">service rabbitmq-server start</span><br><span class=\"line\"><span class=\"comment\"># 查看进程</span></span><br><span class=\"line\">ps -ef | grep rabbitmq </span><br></pre></td></tr></table></figure>\n<h5 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached</span><br></pre></td></tr></table></figure>\n<h5 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装-web-管理插件\"><a href=\"#安装-web-管理插件\" class=\"headerlink\" title=\"安装 web 管理插件\"></a>安装 web 管理插件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>访问： <a class=\"link\" href=\"http://ip:15672/\">http://ip:15672<i class=\"fas fa-external-link-alt\"></i></a> 就可以进入到管理页面了</p>\n<h5 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h5><p>rabbitmq 有个默认的 guest/guest 用户，但是只能在 localhost 下访问，所以要创建一个用户来可以进行远程访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">abbitmqctl add_user admin admin</span><br><span class=\"line\"><span class=\"comment\"># 授予权限</span></span><br><span class=\"line\">rabbitmqctl set_user_tags admin administrator</span><br><span class=\"line\"><span class=\"comment\"># 分配权限</span></span><br><span class=\"line\">rabbitmqctl add_vhost admin</span><br><span class=\"line\"></span><br><span class=\"line\">rabbitmqctl set_permissions -p admin admin <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h5><ol>\n<li>Broker：可以理解成 rabbitmq 服务。</li>\n<li>vhost:  虚拟主机，一个 broker 可以创建多个 vhost，用作权限分离。</li>\n<li>Producer：消息生产者，消息的来源。</li>\n<li>Consumer：消息消费者，负责消费生产者生产的消息。</li>\n<li>Exchange：交换机，可以看作是一个消息的中转站。</li>\n<li>Queue：队列，消息的载体，消息会被投递到一个或者多个队列中。</li>\n<li>Binding：绑定，按照一定规则绑定交换机和队列。</li>\n<li>Routing Key：路由key，交换机根据这个关键字投递到对应的队列。</li>\n<li>Channel：通道，在 client 端每个链接，可以建立多个通道。</li>\n</ol>\n<h4 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h4><h5 id=\"简单队列\"><a href=\"#简单队列\" class=\"headerlink\" title=\"简单队列\"></a>简单队列</h5><p>生产者将消息推到队列，消费者从队列消费消息。一个生产者对应一个消费者。</p>\n<h6 id=\"work-模式\"><a href=\"#work-模式\" class=\"headerlink\" title=\"work 模式\"></a>work 模式</h6><p>一个生产者对应多个消费者，但是一个消息只能被一个消费者获取。</p>\n<ol>\n<li><p>创建一个 Direct 交换机</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// params</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. name:交换机名字</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. durable:持久化，当为 true 时，在 mq 重启之后会重新加载此交换机</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. autoDelete:自动删除，当交换机长时间不使用时，自动删除此交换机</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(RabbitMqConfig.EXCHANGE_TEST,</span><br><span class=\"line\">                <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMqConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXCHANGE_TEST = <span class=\"string\">&quot;exchange_test&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FIRST_QUEUE = <span class=\"string\">&quot;first_queue&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SECOND_QUEUE = <span class=\"string\">&quot;second_queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 队列key1*/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FIRST_ROUTING_KEY = <span class=\"string\">&quot;first_routing_key&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 队列key2*/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SECOND_ROUTING_KEY = <span class=\"string\">&quot;second_routing_key&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConnectionFactory connectionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExchangeConfig exchangeConfig;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> QueueConfig queueConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RabbitMqConfig</span><span class=\"params\">(ConnectionFactory connectionFactory, ExchangeConfig exchangeConfig,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          QueueConfig queueConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.connectionFactory = connectionFactory;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.exchangeConfig = exchangeConfig;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queueConfig = queueConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SimpleMessageListenerContainer <span class=\"title\">simpleMessageListenerContainer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        SimpleMessageListenerContainer simpleMessageListenerContainer = <span class=\"keyword\">new</span> SimpleMessageListenerContainer(connectionFactory);</span><br><span class=\"line\">        simpleMessageListenerContainer.addQueues(queueConfig.firstQueue());</span><br><span class=\"line\">        simpleMessageListenerContainer.setExposeListenerChannel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        simpleMessageListenerContainer.setMaxConcurrentConsumers(<span class=\"number\">5</span>);</span><br><span class=\"line\">        simpleMessageListenerContainer.setConcurrentConsumers(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置确认模式手工确认</span></span><br><span class=\"line\">        simpleMessageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> simpleMessageListenerContainer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RabbitTemplate template = <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory);</span><br><span class=\"line\">        template.setConfirmCallback(msgSendConfirmCallBack());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AckCallback <span class=\"title\">msgSendConfirmCallBack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AckCallback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据指定的 key 将具体的队列绑定到 direct 交换机</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">firstBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.firstQueue())</span><br><span class=\"line\">                             .to(exchangeConfig.directExchange())</span><br><span class=\"line\">                             .with(RabbitMqConfig.FIRST_ROUTING_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">secondBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.secondQueue())</span><br><span class=\"line\">                             .to(exchangeConfig.directExchange())</span><br><span class=\"line\">                             .with(RabbitMqConfig.SECOND_ROUTING_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">firstQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// params</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. name:队列名称</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. durable:持久化，当为 true 时，在 mq 重启之后此队列自动加载</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. exclusive:排他队列，当为 true 时，只有队列声明者才能调用</span></span><br><span class=\"line\">        <span class=\"comment\">// 4. autoDelete:自动删除，当为 true 时，自动删除长时间不适用的队列</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(RabbitMqConfig.FIRST_QUEUE,</span><br><span class=\"line\">                <span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">secondQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(RabbitMqConfig.SECOND_QUEUE,</span><br><span class=\"line\">                <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AckCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ConfirmCallback</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">confirm</span><span class=\"params\">(CorrelationData correlationData, <span class=\"keyword\">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AckCallback 回调，ID:&#123;&#125;&quot;</span>,correlationData);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ack) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;消息消费成功&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;消息消费失败，原因：&#123;&#125;&quot;</span>,cause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>消息消费完之后会有回调</p>\n</li>\n<li><p>生产者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CorrelationData correlationData = <span class=\"keyword\">new</span> CorrelationData(<span class=\"string\">&quot;123456789&quot;</span>);</span><br><span class=\"line\">    String msg = <span class=\"string\">&quot;第一次发送消息&quot;</span>;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TEST,</span><br><span class=\"line\">            RabbitMqConfig.SECOND_ROUTING_KEY,msg,correlationData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我这里直接用 JUnit 进行测试</p>\n</li>\n<li><p>消费费者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MqConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听的队列名称，链接工厂实例</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &#123;RabbitMqConfig.SECOND_QUEUE, RabbitMqConfig.FIRST_QUEUE&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">            containerFactory = &quot;rabbitListenerContainerFactory&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerMessage</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费成功&quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Direct 交换机中，一个交换机可以绑定多个队列，通过不同的路由 key 来指定消息发送到对应的队列中进行消费。当消费者启动时，会自动监听消费相应的消息。</p>\n</li>\n</ol>\n<h5 id=\"Fanout-交换机（订阅模式）\"><a href=\"#Fanout-交换机（订阅模式）\" class=\"headerlink\" title=\"Fanout 交换机（订阅模式）\"></a>Fanout 交换机（订阅模式）</h5><p>订阅模式类似公众号，推送一条消息之后，关注者都可以收到这天推送。</p>\n<ol>\n<li>枚举类</li>\n</ol>\n<p>交换机配置枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqExchangeEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    FANOUT_EXCHANGE_TEST(<span class=\"string\">&quot;fanout_exchange_test&quot;</span>, <span class=\"string\">&quot;fanout交换机&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>队列枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqQueueEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    FANOUT_QUEUE_A(<span class=\"string\">&quot;fanout_queue_a&quot;</span>,<span class=\"string\">&quot;fanout交换机队列1&quot;</span>),</span><br><span class=\"line\">    FANOUT_QUEUE_B(<span class=\"string\">&quot;fanout_queue_b&quot;</span>, <span class=\"string\">&quot;fanout交换机队列2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>交换机配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>绑定<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanBindingA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.fanoutQueueA()).to(fanoutExchangeConfig.fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanBindingB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.fanoutQueueB()).to(fanoutExchangeConfig.fanoutExchange());</span><br></pre></td></tr></table></figure></li>\n<li>发送消息<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutSender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            CorrelationData correlationData = <span class=\"keyword\">new</span> CorrelationData(i + <span class=\"string\">&quot;消息&quot;</span>);</span><br><span class=\"line\">            String msg = <span class=\"string\">&quot;fanout exchange first test, time: &quot;</span> + System.currentTimeMillis() + <span class=\"string\">&quot; . msg num: &quot;</span> + i;</span><br><span class=\"line\">            rabbitTemplate.convertAndSend(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),<span class=\"string\">&quot;&quot;</span>,msg,correlationData);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>消费消息<br>监听相应的队列，进行消息处理。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener(queues = &#123;&quot;fanout_queue_a&quot;, &quot;fanout_queue_b&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;fanout exchange 消息内容：&quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfanout 交换机推送消息到所有绑定到它的队列，这里指定具体的路由也是不会生效的</li>\n</ol>\n<h5 id=\"Topic-交换机（匹配模式）\"><a href=\"#Topic-交换机（匹配模式）\" class=\"headerlink\" title=\"Topic 交换机（匹配模式）\"></a>Topic 交换机（匹配模式）</h5><p>topic 交换机绑定队列之后，可以根据路由 key 来匹配具体的队列，进行消息消费，以通配符的方式绑定到相应的队列，生产者发送相应的路由后，会按照规则匹配到具体的队列</p>\n<ol>\n<li>交换机配置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>队列<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(MqQueueEnum.TOPIC_QUEUE_A.getKey(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(MqQueueEnum.TOPIC_QUEUE_B.getKey(),</span><br><span class=\"line\">            <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>路由</li>\n</ol>\n<blockquote>\n<p><code>#</code> 表示 零个或者多个单词，匹配任何字符， 以 # 作为路由，topic 交换机的工作模式会和 fanout 交换机工作模式相同</p>\n<ul>\n<li>  表示一个单词</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.topicQueueA())</span><br><span class=\"line\">                .to(topicExchangeConfig.topicExchange()).with(<span class=\"string\">&quot;#.user.#&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.topicQueueB())</span><br><span class=\"line\">            .to(topicExchangeConfig.topicExchange()).with(<span class=\"string\">&quot;topic.#&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>生产者<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topicSender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String msg = <span class=\"string\">&quot;top message:&quot;</span> + i;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey(), <span class=\"string\">&quot;topic.user&quot;</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>消费者</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;topic_queue_a&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topicConsumerOne</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;topic_queue_a 1 消费&quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;topic_queue_b&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topicConTow</span><span class=\"params\">(String tow)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;topic_queue_b 2 消费&quot;</span> + tow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考<a class=\"link\" href=\"https://blog.csdn.net/zhuzhezhuzhe1/article/details/80454956\">链接<i class=\"fas fa-external-link-alt\"></i></a><br>参考<a class=\"link\" href=\"https://www.kancloud.cn/digest/rabbitmq-for-java/122041\">RabbitMq教程<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>When life gives you lemons,make Lemonade</center>\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/09/05/RabbitMQ%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/rabbitmq.png\" alt=\"Photo by Vadim Sadovski on Unsplash\"></p>\n<p>作为消息中间件，MQ （Message Queue） 在系统中有至关重要的作用，在高并发场景下，MQ 异步处理请求，缓解系统高峰期压力。在系统之间的调用中解耦，降低各个系统之间的依赖，提交系统的可扩展性。在一写复杂业务处理时，进行异步处理，类似乐观锁，及时返回给用户操作状态，至于业务逻辑通知 MQ 之后在进行处理，提高用户体验，也提高了服务器的处理能力。</p>","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>|  系统    |   版本   |<br>| —- | —- | —- |<br>| CenterOS |  7.6       |<br>|   RabbitMq  | 3.6.10    | </p>\n<p>因为 RabbitMQ 是 erlang 实现的，所以先要安装 erlang 环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 没有 wget 命令的先安装 wget</span></span><br><span class=\"line\">yum -y install wget</span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget http://www.rabbitmq.com/releases/erlang/erlang-19.0.4-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级包</span></span><br><span class=\"line\">rpm -ivh erlang-19.0.4-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum -y install erlang</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 rabbitmq</span></span><br><span class=\"line\">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el6.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 mq</span></span><br><span class=\"line\">yum -y install rabbitmq-server-3.6.6-1.el6.noarch.rpm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在安装过程中碰到了缺少一些依赖包的情况，但是 Google 上都有解决方案，下载安装后可以解决。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/sbin</span><br><span class=\"line\">service rabbitmq-server start</span><br><span class=\"line\"><span class=\"comment\"># 查看进程</span></span><br><span class=\"line\">ps -ef | grep rabbitmq </span><br></pre></td></tr></table></figure>\n<h5 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached</span><br></pre></td></tr></table></figure>\n<h5 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装-web-管理插件\"><a href=\"#安装-web-管理插件\" class=\"headerlink\" title=\"安装 web 管理插件\"></a>安装 web 管理插件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>访问： <a class=\"link\" href=\"http://ip:15672/\">http://ip:15672<i class=\"fas fa-external-link-alt\"></i></a> 就可以进入到管理页面了</p>\n<h5 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h5><p>rabbitmq 有个默认的 guest/guest 用户，但是只能在 localhost 下访问，所以要创建一个用户来可以进行远程访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">abbitmqctl add_user admin admin</span><br><span class=\"line\"><span class=\"comment\"># 授予权限</span></span><br><span class=\"line\">rabbitmqctl set_user_tags admin administrator</span><br><span class=\"line\"><span class=\"comment\"># 分配权限</span></span><br><span class=\"line\">rabbitmqctl add_vhost admin</span><br><span class=\"line\"></span><br><span class=\"line\">rabbitmqctl set_permissions -p admin admin <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h5><ol>\n<li>Broker：可以理解成 rabbitmq 服务。</li>\n<li>vhost:  虚拟主机，一个 broker 可以创建多个 vhost，用作权限分离。</li>\n<li>Producer：消息生产者，消息的来源。</li>\n<li>Consumer：消息消费者，负责消费生产者生产的消息。</li>\n<li>Exchange：交换机，可以看作是一个消息的中转站。</li>\n<li>Queue：队列，消息的载体，消息会被投递到一个或者多个队列中。</li>\n<li>Binding：绑定，按照一定规则绑定交换机和队列。</li>\n<li>Routing Key：路由key，交换机根据这个关键字投递到对应的队列。</li>\n<li>Channel：通道，在 client 端每个链接，可以建立多个通道。</li>\n</ol>\n<h4 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h4><h5 id=\"简单队列\"><a href=\"#简单队列\" class=\"headerlink\" title=\"简单队列\"></a>简单队列</h5><p>生产者将消息推到队列，消费者从队列消费消息。一个生产者对应一个消费者。</p>\n<h6 id=\"work-模式\"><a href=\"#work-模式\" class=\"headerlink\" title=\"work 模式\"></a>work 模式</h6><p>一个生产者对应多个消费者，但是一个消息只能被一个消费者获取。</p>\n<ol>\n<li><p>创建一个 Direct 交换机</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// params</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. name:交换机名字</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. durable:持久化，当为 true 时，在 mq 重启之后会重新加载此交换机</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. autoDelete:自动删除，当交换机长时间不使用时，自动删除此交换机</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(RabbitMqConfig.EXCHANGE_TEST,</span><br><span class=\"line\">                <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMqConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXCHANGE_TEST = <span class=\"string\">&quot;exchange_test&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FIRST_QUEUE = <span class=\"string\">&quot;first_queue&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SECOND_QUEUE = <span class=\"string\">&quot;second_queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 队列key1*/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FIRST_ROUTING_KEY = <span class=\"string\">&quot;first_routing_key&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 队列key2*/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SECOND_ROUTING_KEY = <span class=\"string\">&quot;second_routing_key&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConnectionFactory connectionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExchangeConfig exchangeConfig;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> QueueConfig queueConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RabbitMqConfig</span><span class=\"params\">(ConnectionFactory connectionFactory, ExchangeConfig exchangeConfig,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          QueueConfig queueConfig)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.connectionFactory = connectionFactory;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.exchangeConfig = exchangeConfig;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queueConfig = queueConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SimpleMessageListenerContainer <span class=\"title\">simpleMessageListenerContainer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        SimpleMessageListenerContainer simpleMessageListenerContainer = <span class=\"keyword\">new</span> SimpleMessageListenerContainer(connectionFactory);</span><br><span class=\"line\">        simpleMessageListenerContainer.addQueues(queueConfig.firstQueue());</span><br><span class=\"line\">        simpleMessageListenerContainer.setExposeListenerChannel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        simpleMessageListenerContainer.setMaxConcurrentConsumers(<span class=\"number\">5</span>);</span><br><span class=\"line\">        simpleMessageListenerContainer.setConcurrentConsumers(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置确认模式手工确认</span></span><br><span class=\"line\">        simpleMessageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> simpleMessageListenerContainer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title\">rabbitTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RabbitTemplate template = <span class=\"keyword\">new</span> RabbitTemplate(connectionFactory);</span><br><span class=\"line\">        template.setConfirmCallback(msgSendConfirmCallBack());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AckCallback <span class=\"title\">msgSendConfirmCallBack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AckCallback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据指定的 key 将具体的队列绑定到 direct 交换机</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">firstBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.firstQueue())</span><br><span class=\"line\">                             .to(exchangeConfig.directExchange())</span><br><span class=\"line\">                             .with(RabbitMqConfig.FIRST_ROUTING_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">secondBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.secondQueue())</span><br><span class=\"line\">                             .to(exchangeConfig.directExchange())</span><br><span class=\"line\">                             .with(RabbitMqConfig.SECOND_ROUTING_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">firstQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// params</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. name:队列名称</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. durable:持久化，当为 true 时，在 mq 重启之后此队列自动加载</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. exclusive:排他队列，当为 true 时，只有队列声明者才能调用</span></span><br><span class=\"line\">        <span class=\"comment\">// 4. autoDelete:自动删除，当为 true 时，自动删除长时间不适用的队列</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(RabbitMqConfig.FIRST_QUEUE,</span><br><span class=\"line\">                <span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">secondQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(RabbitMqConfig.SECOND_QUEUE,</span><br><span class=\"line\">                <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AckCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">RabbitTemplate</span>.<span class=\"title\">ConfirmCallback</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">confirm</span><span class=\"params\">(CorrelationData correlationData, <span class=\"keyword\">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AckCallback 回调，ID:&#123;&#125;&quot;</span>,correlationData);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ack) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;消息消费成功&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;消息消费失败，原因：&#123;&#125;&quot;</span>,cause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>消息消费完之后会有回调</p>\n</li>\n<li><p>生产者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CorrelationData correlationData = <span class=\"keyword\">new</span> CorrelationData(<span class=\"string\">&quot;123456789&quot;</span>);</span><br><span class=\"line\">    String msg = <span class=\"string\">&quot;第一次发送消息&quot;</span>;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TEST,</span><br><span class=\"line\">            RabbitMqConfig.SECOND_ROUTING_KEY,msg,correlationData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我这里直接用 JUnit 进行测试</p>\n</li>\n<li><p>消费费者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MqConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听的队列名称，链接工厂实例</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &#123;RabbitMqConfig.SECOND_QUEUE, RabbitMqConfig.FIRST_QUEUE&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">            containerFactory = &quot;rabbitListenerContainerFactory&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerMessage</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费成功&quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Direct 交换机中，一个交换机可以绑定多个队列，通过不同的路由 key 来指定消息发送到对应的队列中进行消费。当消费者启动时，会自动监听消费相应的消息。</p>\n</li>\n</ol>\n<h5 id=\"Fanout-交换机（订阅模式）\"><a href=\"#Fanout-交换机（订阅模式）\" class=\"headerlink\" title=\"Fanout 交换机（订阅模式）\"></a>Fanout 交换机（订阅模式）</h5><p>订阅模式类似公众号，推送一条消息之后，关注者都可以收到这天推送。</p>\n<ol>\n<li>枚举类</li>\n</ol>\n<p>交换机配置枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqExchangeEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    FANOUT_EXCHANGE_TEST(<span class=\"string\">&quot;fanout_exchange_test&quot;</span>, <span class=\"string\">&quot;fanout交换机&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>队列枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqQueueEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    FANOUT_QUEUE_A(<span class=\"string\">&quot;fanout_queue_a&quot;</span>,<span class=\"string\">&quot;fanout交换机队列1&quot;</span>),</span><br><span class=\"line\">    FANOUT_QUEUE_B(<span class=\"string\">&quot;fanout_queue_b&quot;</span>, <span class=\"string\">&quot;fanout交换机队列2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>交换机配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>绑定<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanBindingA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.fanoutQueueA()).to(fanoutExchangeConfig.fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanBindingB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.fanoutQueueB()).to(fanoutExchangeConfig.fanoutExchange());</span><br></pre></td></tr></table></figure></li>\n<li>发送消息<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutSender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            CorrelationData correlationData = <span class=\"keyword\">new</span> CorrelationData(i + <span class=\"string\">&quot;消息&quot;</span>);</span><br><span class=\"line\">            String msg = <span class=\"string\">&quot;fanout exchange first test, time: &quot;</span> + System.currentTimeMillis() + <span class=\"string\">&quot; . msg num: &quot;</span> + i;</span><br><span class=\"line\">            rabbitTemplate.convertAndSend(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),<span class=\"string\">&quot;&quot;</span>,msg,correlationData);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>消费消息<br>监听相应的队列，进行消息处理。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener(queues = &#123;&quot;fanout_queue_a&quot;, &quot;fanout_queue_b&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;fanout exchange 消息内容：&quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfanout 交换机推送消息到所有绑定到它的队列，这里指定具体的路由也是不会生效的</li>\n</ol>\n<h5 id=\"Topic-交换机（匹配模式）\"><a href=\"#Topic-交换机（匹配模式）\" class=\"headerlink\" title=\"Topic 交换机（匹配模式）\"></a>Topic 交换机（匹配模式）</h5><p>topic 交换机绑定队列之后，可以根据路由 key 来匹配具体的队列，进行消息消费，以通配符的方式绑定到相应的队列，生产者发送相应的路由后，会按照规则匹配到具体的队列</p>\n<ol>\n<li>交换机配置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>队列<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(MqQueueEnum.TOPIC_QUEUE_A.getKey(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueueB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(MqQueueEnum.TOPIC_QUEUE_B.getKey(),</span><br><span class=\"line\">            <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>路由</li>\n</ol>\n<blockquote>\n<p><code>#</code> 表示 零个或者多个单词，匹配任何字符， 以 # 作为路由，topic 交换机的工作模式会和 fanout 交换机工作模式相同</p>\n<ul>\n<li>  表示一个单词</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.topicQueueA())</span><br><span class=\"line\">                .to(topicExchangeConfig.topicExchange()).with(<span class=\"string\">&quot;#.user.#&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBindingB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.topicQueueB())</span><br><span class=\"line\">            .to(topicExchangeConfig.topicExchange()).with(<span class=\"string\">&quot;topic.#&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>生产者<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topicSender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String msg = <span class=\"string\">&quot;top message:&quot;</span> + i;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey(), <span class=\"string\">&quot;topic.user&quot;</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>消费者</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;topic_queue_a&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topicConsumerOne</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;topic_queue_a 1 消费&quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;topic_queue_b&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">topicConTow</span><span class=\"params\">(String tow)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;topic_queue_b 2 消费&quot;</span> + tow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考<a class=\"link\" href=\"https://blog.csdn.net/zhuzhezhuzhe1/article/details/80454956\">链接<i class=\"fas fa-external-link-alt\"></i></a><br>参考<a class=\"link\" href=\"https://www.kancloud.cn/digest/rabbitmq-for-java/122041\">RabbitMq教程<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>When life gives you lemons,make Lemonade</center>"},{"title":"docker安装MySQL","date":"2019-04-09T14:46:42.000Z","_content":"\n\n![](docker安装MySQL/mysql.png)\n\n\n自从接触到 docker 之后，就想把所有组件都安装在上面，方便后面使用。今天开始折腾安装 MySQL，虽然目前公司项目使用 MySQL 非常少，但是我很喜欢 MySQL，哈哈。\n\n<!-- more -->\n\n##### 拉取镜像\n\n``` bash\n# 拉去最新版的 mysql\nsudo docker pull mysql\n\n```\n\n使用以上命令拉取最新版 MySQL\n\n##### 启动 MySQL\n\n``` bash\ndocker run -p 3306:3306 --name mysql-ck -v /usr/local/mysql/conf:/etc/mysql/conf.d -v /usr/local/mysql/logs:/logs -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7\n\n# -p 将 3306 端口映射到本机 3306 端口\n# --name 后面跟 MySQL 别名\n# -v MySQL 数据保存路径：/usr/local/mysql/conf:/etc/mysql/conf.d   将本机 /usr/local/mysql/conf 映射到 docker 的 /etc/mysql/conf.d 目录\n# -e 设置初始密码\n# -d 后台运行\n```\n启动 MySQL 成功之后，容器会返回一个 id 类似 `6d2b3575b78f67481300d01cd65ca47a2a1868f448f2a53bb68d7b056f7ef23d`\n\n\n##### 进入 MySQL\n\n``` bash\n# 进入\nsudo docker exec -it mysql bash\n# 登录\nroot@6d2b3575b78f:/# mysql -uroot -proot\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.15 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n\n```\n\n##### 客户端安装\n\n建议到[官网](https://www.navicat.com.cn/products/)下载 navicat 客户端，当然条件允许的建议购买正版产品，实在不行就先下载下来，有半个月的试用期，体验一般，个人觉得他们家的产品用起来很不错。下载后解压，直接启动即可使用。\n\n此时就进入到我们熟悉的客户端了，接下来的操作就和在物理机上的操作是一样的了。虽然公司项目可能接触 MySQL 会很少，但是 MySQL 依然是很多公司数据存储不可替代的部分，所以嘛，好好学习，天天向上。\n\n今天没有加班，下班早早就溜了，最近加班比较多，希望程序狗们都能天天没 bug ,天天早下班。\n\n***\n\n<center>道理都懂，但做不到</center>\n\n\n","source":"_posts/docker安装MySQL.md","raw":"---\ntitle: docker安装MySQL\ndate: 2019-04-09 22:46:42\ntags: [docker,mysql]\ncategory: [docker,mysql]\n---\n\n\n![](docker安装MySQL/mysql.png)\n\n\n自从接触到 docker 之后，就想把所有组件都安装在上面，方便后面使用。今天开始折腾安装 MySQL，虽然目前公司项目使用 MySQL 非常少，但是我很喜欢 MySQL，哈哈。\n\n<!-- more -->\n\n##### 拉取镜像\n\n``` bash\n# 拉去最新版的 mysql\nsudo docker pull mysql\n\n```\n\n使用以上命令拉取最新版 MySQL\n\n##### 启动 MySQL\n\n``` bash\ndocker run -p 3306:3306 --name mysql-ck -v /usr/local/mysql/conf:/etc/mysql/conf.d -v /usr/local/mysql/logs:/logs -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7\n\n# -p 将 3306 端口映射到本机 3306 端口\n# --name 后面跟 MySQL 别名\n# -v MySQL 数据保存路径：/usr/local/mysql/conf:/etc/mysql/conf.d   将本机 /usr/local/mysql/conf 映射到 docker 的 /etc/mysql/conf.d 目录\n# -e 设置初始密码\n# -d 后台运行\n```\n启动 MySQL 成功之后，容器会返回一个 id 类似 `6d2b3575b78f67481300d01cd65ca47a2a1868f448f2a53bb68d7b056f7ef23d`\n\n\n##### 进入 MySQL\n\n``` bash\n# 进入\nsudo docker exec -it mysql bash\n# 登录\nroot@6d2b3575b78f:/# mysql -uroot -proot\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.15 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n\n```\n\n##### 客户端安装\n\n建议到[官网](https://www.navicat.com.cn/products/)下载 navicat 客户端，当然条件允许的建议购买正版产品，实在不行就先下载下来，有半个月的试用期，体验一般，个人觉得他们家的产品用起来很不错。下载后解压，直接启动即可使用。\n\n此时就进入到我们熟悉的客户端了，接下来的操作就和在物理机上的操作是一样的了。虽然公司项目可能接触 MySQL 会很少，但是 MySQL 依然是很多公司数据存储不可替代的部分，所以嘛，好好学习，天天向上。\n\n今天没有加班，下班早早就溜了，最近加班比较多，希望程序狗们都能天天没 bug ,天天早下班。\n\n***\n\n<center>道理都懂，但做不到</center>\n\n\n","slug":"docker安装MySQL","published":1,"updated":"2021-01-31T06:31:35.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowa000drh1t5ep72v49","content":"<p><img src=\"/2019/04/09/docker%E5%AE%89%E8%A3%85MySQL/mysql.png\"></p>\n<p>自从接触到 docker 之后，就想把所有组件都安装在上面，方便后面使用。今天开始折腾安装 MySQL，虽然目前公司项目使用 MySQL 非常少，但是我很喜欢 MySQL，哈哈。</p>\n<a id=\"more\"></a>\n\n<h5 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉去最新版的 mysql</span></span><br><span class=\"line\">sudo docker pull mysql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用以上命令拉取最新版 MySQL</p>\n<h5 id=\"启动-MySQL\"><a href=\"#启动-MySQL\" class=\"headerlink\" title=\"启动 MySQL\"></a>启动 MySQL</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3306:3306 --name mysql-ck -v /usr/<span class=\"built_in\">local</span>/mysql/conf:/etc/mysql/conf.d -v /usr/<span class=\"built_in\">local</span>/mysql/logs:/logs -v /usr/<span class=\"built_in\">local</span>/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -p 将 3306 端口映射到本机 3306 端口</span></span><br><span class=\"line\"><span class=\"comment\"># --name 后面跟 MySQL 别名</span></span><br><span class=\"line\"><span class=\"comment\"># -v MySQL 数据保存路径：/usr/local/mysql/conf:/etc/mysql/conf.d   将本机 /usr/local/mysql/conf 映射到 docker 的 /etc/mysql/conf.d 目录</span></span><br><span class=\"line\"><span class=\"comment\"># -e 设置初始密码</span></span><br><span class=\"line\"><span class=\"comment\"># -d 后台运行</span></span><br></pre></td></tr></table></figure>\n<p>启动 MySQL 成功之后，容器会返回一个 id 类似 <code>6d2b3575b78f67481300d01cd65ca47a2a1868f448f2a53bb68d7b056f7ef23d</code></p>\n<h5 id=\"进入-MySQL\"><a href=\"#进入-MySQL\" class=\"headerlink\" title=\"进入 MySQL\"></a>进入 MySQL</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it mysql bash</span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">root@6d2b3575b78f:/<span class=\"comment\"># mysql -uroot -proot</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 8</span><br><span class=\"line\">Server version: 8.0.15 MySQL Community Server - GPL</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">&#x27;help;&#x27;</span> or <span class=\"string\">&#x27;\\h&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">&#x27;\\c&#x27;</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h5><p>建议到<a class=\"link\" href=\"https://www.navicat.com.cn/products/\">官网<i class=\"fas fa-external-link-alt\"></i></a>下载 navicat 客户端，当然条件允许的建议购买正版产品，实在不行就先下载下来，有半个月的试用期，体验一般，个人觉得他们家的产品用起来很不错。下载后解压，直接启动即可使用。</p>\n<p>此时就进入到我们熟悉的客户端了，接下来的操作就和在物理机上的操作是一样的了。虽然公司项目可能接触 MySQL 会很少，但是 MySQL 依然是很多公司数据存储不可替代的部分，所以嘛，好好学习，天天向上。</p>\n<p>今天没有加班，下班早早就溜了，最近加班比较多，希望程序狗们都能天天没 bug ,天天早下班。</p>\n<hr>\n<center>道理都懂，但做不到</center>\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/04/09/docker%E5%AE%89%E8%A3%85MySQL/mysql.png\"></p>\n<p>自从接触到 docker 之后，就想把所有组件都安装在上面，方便后面使用。今天开始折腾安装 MySQL，虽然目前公司项目使用 MySQL 非常少，但是我很喜欢 MySQL，哈哈。</p>","more":"<h5 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉去最新版的 mysql</span></span><br><span class=\"line\">sudo docker pull mysql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用以上命令拉取最新版 MySQL</p>\n<h5 id=\"启动-MySQL\"><a href=\"#启动-MySQL\" class=\"headerlink\" title=\"启动 MySQL\"></a>启动 MySQL</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3306:3306 --name mysql-ck -v /usr/<span class=\"built_in\">local</span>/mysql/conf:/etc/mysql/conf.d -v /usr/<span class=\"built_in\">local</span>/mysql/logs:/logs -v /usr/<span class=\"built_in\">local</span>/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -p 将 3306 端口映射到本机 3306 端口</span></span><br><span class=\"line\"><span class=\"comment\"># --name 后面跟 MySQL 别名</span></span><br><span class=\"line\"><span class=\"comment\"># -v MySQL 数据保存路径：/usr/local/mysql/conf:/etc/mysql/conf.d   将本机 /usr/local/mysql/conf 映射到 docker 的 /etc/mysql/conf.d 目录</span></span><br><span class=\"line\"><span class=\"comment\"># -e 设置初始密码</span></span><br><span class=\"line\"><span class=\"comment\"># -d 后台运行</span></span><br></pre></td></tr></table></figure>\n<p>启动 MySQL 成功之后，容器会返回一个 id 类似 <code>6d2b3575b78f67481300d01cd65ca47a2a1868f448f2a53bb68d7b056f7ef23d</code></p>\n<h5 id=\"进入-MySQL\"><a href=\"#进入-MySQL\" class=\"headerlink\" title=\"进入 MySQL\"></a>进入 MySQL</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it mysql bash</span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">root@6d2b3575b78f:/<span class=\"comment\"># mysql -uroot -proot</span></span><br><span class=\"line\">mysql: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 8</span><br><span class=\"line\">Server version: 8.0.15 MySQL Community Server - GPL</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">&#x27;help;&#x27;</span> or <span class=\"string\">&#x27;\\h&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">&#x27;\\c&#x27;</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h5><p>建议到<a class=\"link\" href=\"https://www.navicat.com.cn/products/\">官网<i class=\"fas fa-external-link-alt\"></i></a>下载 navicat 客户端，当然条件允许的建议购买正版产品，实在不行就先下载下来，有半个月的试用期，体验一般，个人觉得他们家的产品用起来很不错。下载后解压，直接启动即可使用。</p>\n<p>此时就进入到我们熟悉的客户端了，接下来的操作就和在物理机上的操作是一样的了。虽然公司项目可能接触 MySQL 会很少，但是 MySQL 依然是很多公司数据存储不可替代的部分，所以嘛，好好学习，天天向上。</p>\n<p>今天没有加班，下班早早就溜了，最近加班比较多，希望程序狗们都能天天没 bug ,天天早下班。</p>\n<hr>\n<center>道理都懂，但做不到</center>"},{"title":"docker安装mongodb","date":"2019-03-19T15:19:44.000Z","photos":[],"_content":"\n![](docker安装mongodb/mongo.png)\n\nmongodb 是一款很优秀的开源 nosql 数据库，它内部以 json 作为存储格式，在数据存储方面有很大的收缩性。因为前几天折腾 docker，这里记录一下在 docker 部署 mongdb 的步骤和简单的使用方法，其实之前接触 nosql 最多的就是 redis，目前公司大量使用 mongodb,在这里记录一些关键点，方便回顾。\n\n<!-- more -->\n\n|    ev  |  version    |   \n| ---- | ---- |  \n|   docker   |  18.09.3-ce    |       \n|    os  |  Mangaro 18.0.1    |       \n|    mongodb  |    v4.0.6  |       \n\n关于 docker 的安装，如果是 Manjaro 的话，请在[这里](https://fengzhu.top/2019/03/17/manjaro%E5%AE%89%E8%A3%85/#more)参考，如果是其他系统的话， Google 应该有很多好的博客可以参考。\n#### 安装 mongodb\n\n``` bash\nsudo docker pull mongo\n```\n\n等待下载完成之后，查看 docker 容器中镜像情况\n\n``` bash\nsudo docker pull mongo\n```\n等待 mongo 下载完成之后，进行配置\n\n``` bash\n# 启动 mongo    --auth 有此参数的话，在连接时需要用户名密码\nsudo docker run -d -p 27017:27017 -v /home/chenkui/database/mongodb/config:/data/configdb -v /home/chenkui/database/mongodb/data:/data/db --name mongo docker.io/mongo --auth\n\n# 启动 mongo (容器创建成功之后启动 mongo 命令)\nsudo docker start mongo\n\n# 停止 mongo\nsudo docker stop mongo\n\n# 删除 mongo\nsudo docker rm mongo\n# 进入 mongo bash,创建 admin 账户\nsudo docker exec -it mongo bash\n# 在 shell 中创建用户和密码\ndb.createUser({user:\"admin\",pwd:\"admin\",roles:[{role:\"userAdminAnyDatabase\",db:\"admin\"}]});\n# 退出刚刚的bash \nexit\n# 进入 mongo\nsudo docker exec -it mongo mongo admin\n# 用 admin 登录\ndb.auth(\"admin\",\"admin\");\n# 进入数据库，没有则创建\nuse test\n# 创建管理用户\ndb.createUser({ user: 'test', pwd:'test', roles: [ {role:\"readWrite\",db:\"test\"}]});\n# 验证\ndb.auth(\"test\",\"test\");\n\n```\n\n启动成功之后查看 mongo 运行情况\n\n``` bash\nsudo docker ps -a\n```\n\n到这里，mongodb 在 docker 中的安装就完成了，以上安装步骤在 Google 上有很多可以参考，我也是参考大神们的笔记之后做的总结。安装好之后建议安装 mongodb 客户端[robo3T](https://robomongo.org/)可以更直观的看到数据的格式和存储的方式。我有个习惯就是在接触到一些新技术时先不会去纠结它的一些具体细节，我先会做个简单的例子自己跑一边，看一遍到底是怎么回事，和自己已经会的东西相比，有什么异同，这样的话会比较容易上手，当然这只是个建议，每个人都有自己的方式去学习新东西。下面我会按照我的思路来看一遍 mongo 的操作过程。\n\n#### springboot 集成 mongodb\n\n这里使用 spring boot 是因为用它的话能最快的搭建一个框架，来使用 mongo，至于 spring boot 工程如何搭建 Google 上有很多教程可以参考。主要引入 mongodb 坐标。\n``` xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-mongodb</artifactId>\n        </dependency>\n```\n#### CRUD\n\nmongodb 不像关系型数据库，对于字段的完整性要求很高，通俗点讲的话它的存储结构完全自由，只要是格式正确的数据都能存储在里面，但是在实际开发中，每个数据库中表的数据会是一类数据，比如说 User 表中就是存储用户信息，不可能把订单信息也放在里面，这样就会造成数据的混乱，在实际开发中，每个表也都会有自己对应的 Javabean，它的字段也取决于这个 Javabean。\n\n##### 新增记录\n\n实体类 （省略一些导包路径）\n``` java \n@Document(collection = \"user\")\n@Data\npublic class User {\n\n    @Id\n    private String id;\n\n    private String userName; // 姓名\n    private Integer age; // 年龄\n    private String sex; // 性别\n}\n```\n测试\n``` java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MongoTest {\n\n    @Autowired\n    private MongoTemplate template;\n\n    /**\n     * 测试新增\n     */\n    @Test\n    public void testInsert() {\n        User user = new User();\n        user.setUserName(\"jihe\");\n        user.setAge(18);\n        user.setSex(\"男\");\n        template.insert(user);\n    }\n}\n```\n配置文件\n\n``` yml\nspring:\n  data:\n    mongodb:\n      host: localhost\n      uri: mongodb://localhost:27017/mongo\n      password: root\n      database: mongo\n      port: 27017\n      username: root\n```\nmongo 的使用很简单，在操作上和关系型数据库很相似，简单的操作还是很容易上手的。\n\n##### 删除记录\n\n``` java\n    /**\n     * 删除数据\n     */\n    @Test\n    public void testDelete() {\n        Query query = new Query(new Criteria(\"userName\").is(\"jihe\"));\n        DeleteResult remove = template.remove(query, User.class);\n        System.out.println(remove.getDeletedCount());\n    }\n```\n配置和上面的一样，通过用户名删除用户信息\n\n##### 修改记录\n\n``` java\n    /**\n     * 修改记录\n     */\n    @Test\n    public void testUpdate() {\n        Query query = new Query(new Criteria(\"userName\").is(\"jihe\"));\n        Update update = new Update();\n        update.set(\"age\", 20);\n        UpdateResult updateResult = template.updateFirst(query, update, User.class);\n        System.out.println(updateResult.getModifiedCount());\n    }\n```\n修改用户名为 jihe 的用户年龄为 20 岁\n\n##### 查找记录\n\n``` java\n    /**\n     * 查找\n     */\n    @Test\n    public void testFindByUserName() {\n        Query query = new Query(new Criteria(\"userName\").is(\"jihe\"));\n        User one = template.findOne(query, User.class);\n        System.out.println(one);\n    }\n```\n\n以上就是关于 mongo 的最基础简单的增删改查，在入门使用方面来讲 mongo 还是很容易接受的，尤其是接触过关系型数据库之后来使用它的话，这里简单记录一下，后面还会记录更多关于 mongo 的使用和一些在具体项目中的应用。\n\n***\n\n<center>能成为一个人的骄傲</center>\n","source":"_posts/docker安装mongodb.md","raw":"---\ntitle: docker安装mongodb\ndate: 2019-03-19 23:19:44\ntags: [docker,mongo]\ncategory: [docker,mongo]\nphotos:   \n---\n\n![](docker安装mongodb/mongo.png)\n\nmongodb 是一款很优秀的开源 nosql 数据库，它内部以 json 作为存储格式，在数据存储方面有很大的收缩性。因为前几天折腾 docker，这里记录一下在 docker 部署 mongdb 的步骤和简单的使用方法，其实之前接触 nosql 最多的就是 redis，目前公司大量使用 mongodb,在这里记录一些关键点，方便回顾。\n\n<!-- more -->\n\n|    ev  |  version    |   \n| ---- | ---- |  \n|   docker   |  18.09.3-ce    |       \n|    os  |  Mangaro 18.0.1    |       \n|    mongodb  |    v4.0.6  |       \n\n关于 docker 的安装，如果是 Manjaro 的话，请在[这里](https://fengzhu.top/2019/03/17/manjaro%E5%AE%89%E8%A3%85/#more)参考，如果是其他系统的话， Google 应该有很多好的博客可以参考。\n#### 安装 mongodb\n\n``` bash\nsudo docker pull mongo\n```\n\n等待下载完成之后，查看 docker 容器中镜像情况\n\n``` bash\nsudo docker pull mongo\n```\n等待 mongo 下载完成之后，进行配置\n\n``` bash\n# 启动 mongo    --auth 有此参数的话，在连接时需要用户名密码\nsudo docker run -d -p 27017:27017 -v /home/chenkui/database/mongodb/config:/data/configdb -v /home/chenkui/database/mongodb/data:/data/db --name mongo docker.io/mongo --auth\n\n# 启动 mongo (容器创建成功之后启动 mongo 命令)\nsudo docker start mongo\n\n# 停止 mongo\nsudo docker stop mongo\n\n# 删除 mongo\nsudo docker rm mongo\n# 进入 mongo bash,创建 admin 账户\nsudo docker exec -it mongo bash\n# 在 shell 中创建用户和密码\ndb.createUser({user:\"admin\",pwd:\"admin\",roles:[{role:\"userAdminAnyDatabase\",db:\"admin\"}]});\n# 退出刚刚的bash \nexit\n# 进入 mongo\nsudo docker exec -it mongo mongo admin\n# 用 admin 登录\ndb.auth(\"admin\",\"admin\");\n# 进入数据库，没有则创建\nuse test\n# 创建管理用户\ndb.createUser({ user: 'test', pwd:'test', roles: [ {role:\"readWrite\",db:\"test\"}]});\n# 验证\ndb.auth(\"test\",\"test\");\n\n```\n\n启动成功之后查看 mongo 运行情况\n\n``` bash\nsudo docker ps -a\n```\n\n到这里，mongodb 在 docker 中的安装就完成了，以上安装步骤在 Google 上有很多可以参考，我也是参考大神们的笔记之后做的总结。安装好之后建议安装 mongodb 客户端[robo3T](https://robomongo.org/)可以更直观的看到数据的格式和存储的方式。我有个习惯就是在接触到一些新技术时先不会去纠结它的一些具体细节，我先会做个简单的例子自己跑一边，看一遍到底是怎么回事，和自己已经会的东西相比，有什么异同，这样的话会比较容易上手，当然这只是个建议，每个人都有自己的方式去学习新东西。下面我会按照我的思路来看一遍 mongo 的操作过程。\n\n#### springboot 集成 mongodb\n\n这里使用 spring boot 是因为用它的话能最快的搭建一个框架，来使用 mongo，至于 spring boot 工程如何搭建 Google 上有很多教程可以参考。主要引入 mongodb 坐标。\n``` xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-mongodb</artifactId>\n        </dependency>\n```\n#### CRUD\n\nmongodb 不像关系型数据库，对于字段的完整性要求很高，通俗点讲的话它的存储结构完全自由，只要是格式正确的数据都能存储在里面，但是在实际开发中，每个数据库中表的数据会是一类数据，比如说 User 表中就是存储用户信息，不可能把订单信息也放在里面，这样就会造成数据的混乱，在实际开发中，每个表也都会有自己对应的 Javabean，它的字段也取决于这个 Javabean。\n\n##### 新增记录\n\n实体类 （省略一些导包路径）\n``` java \n@Document(collection = \"user\")\n@Data\npublic class User {\n\n    @Id\n    private String id;\n\n    private String userName; // 姓名\n    private Integer age; // 年龄\n    private String sex; // 性别\n}\n```\n测试\n``` java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MongoTest {\n\n    @Autowired\n    private MongoTemplate template;\n\n    /**\n     * 测试新增\n     */\n    @Test\n    public void testInsert() {\n        User user = new User();\n        user.setUserName(\"jihe\");\n        user.setAge(18);\n        user.setSex(\"男\");\n        template.insert(user);\n    }\n}\n```\n配置文件\n\n``` yml\nspring:\n  data:\n    mongodb:\n      host: localhost\n      uri: mongodb://localhost:27017/mongo\n      password: root\n      database: mongo\n      port: 27017\n      username: root\n```\nmongo 的使用很简单，在操作上和关系型数据库很相似，简单的操作还是很容易上手的。\n\n##### 删除记录\n\n``` java\n    /**\n     * 删除数据\n     */\n    @Test\n    public void testDelete() {\n        Query query = new Query(new Criteria(\"userName\").is(\"jihe\"));\n        DeleteResult remove = template.remove(query, User.class);\n        System.out.println(remove.getDeletedCount());\n    }\n```\n配置和上面的一样，通过用户名删除用户信息\n\n##### 修改记录\n\n``` java\n    /**\n     * 修改记录\n     */\n    @Test\n    public void testUpdate() {\n        Query query = new Query(new Criteria(\"userName\").is(\"jihe\"));\n        Update update = new Update();\n        update.set(\"age\", 20);\n        UpdateResult updateResult = template.updateFirst(query, update, User.class);\n        System.out.println(updateResult.getModifiedCount());\n    }\n```\n修改用户名为 jihe 的用户年龄为 20 岁\n\n##### 查找记录\n\n``` java\n    /**\n     * 查找\n     */\n    @Test\n    public void testFindByUserName() {\n        Query query = new Query(new Criteria(\"userName\").is(\"jihe\"));\n        User one = template.findOne(query, User.class);\n        System.out.println(one);\n    }\n```\n\n以上就是关于 mongo 的最基础简单的增删改查，在入门使用方面来讲 mongo 还是很容易接受的，尤其是接触过关系型数据库之后来使用它的话，这里简单记录一下，后面还会记录更多关于 mongo 的使用和一些在具体项目中的应用。\n\n***\n\n<center>能成为一个人的骄傲</center>\n","slug":"docker安装mongodb","published":1,"updated":"2021-01-31T06:31:35.751Z","comments":1,"layout":"post","link":"","_id":"ckkkzeowb000erh1tepk0bc4l","content":"<p><img src=\"/2019/03/19/docker%E5%AE%89%E8%A3%85mongodb/mongo.png\"></p>\n<p>mongodb 是一款很优秀的开源 nosql 数据库，它内部以 json 作为存储格式，在数据存储方面有很大的收缩性。因为前几天折腾 docker，这里记录一下在 docker 部署 mongdb 的步骤和简单的使用方法，其实之前接触 nosql 最多的就是 redis，目前公司大量使用 mongodb,在这里记录一些关键点，方便回顾。</p>\n<a id=\"more\"></a>\n\n<table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker</td>\n<td>18.09.3-ce</td>\n</tr>\n<tr>\n<td>os</td>\n<td>Mangaro 18.0.1</td>\n</tr>\n<tr>\n<td>mongodb</td>\n<td>v4.0.6</td>\n</tr>\n</tbody></table>\n<p>关于 docker 的安装，如果是 Manjaro 的话，请在<a class=\"link\" href=\"https://fengzhu.top/2019/03/17/manjaro%E5%AE%89%E8%A3%85/#more\">这里<i class=\"fas fa-external-link-alt\"></i></a>参考，如果是其他系统的话， Google 应该有很多好的博客可以参考。</p>\n<h4 id=\"安装-mongodb\"><a href=\"#安装-mongodb\" class=\"headerlink\" title=\"安装 mongodb\"></a>安装 mongodb</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull mongo</span><br></pre></td></tr></table></figure>\n<p>等待下载完成之后，查看 docker 容器中镜像情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull mongo</span><br></pre></td></tr></table></figure>\n<p>等待 mongo 下载完成之后，进行配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 mongo    --auth 有此参数的话，在连接时需要用户名密码</span></span><br><span class=\"line\">sudo docker run -d -p 27017:27017 -v /home/chenkui/database/mongodb/config:/data/configdb -v /home/chenkui/database/mongodb/data:/data/db --name mongo docker.io/mongo --auth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 mongo (容器创建成功之后启动 mongo 命令)</span></span><br><span class=\"line\">sudo docker start mongo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 mongo</span></span><br><span class=\"line\">sudo docker stop mongo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 mongo</span></span><br><span class=\"line\">sudo docker rm mongo</span><br><span class=\"line\"><span class=\"comment\"># 进入 mongo bash,创建 admin 账户</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it mongo bash</span><br><span class=\"line\"><span class=\"comment\"># 在 shell 中创建用户和密码</span></span><br><span class=\"line\">db.createUser(&#123;user:<span class=\"string\">&quot;admin&quot;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&quot;admin&quot;</span>,roles:[&#123;role:<span class=\"string\">&quot;userAdminAnyDatabase&quot;</span>,db:<span class=\"string\">&quot;admin&quot;</span>&#125;]&#125;);</span><br><span class=\"line\"><span class=\"comment\"># 退出刚刚的bash </span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># 进入 mongo</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it mongo mongo admin</span><br><span class=\"line\"><span class=\"comment\"># 用 admin 登录</span></span><br><span class=\"line\">db.auth(<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\"># 进入数据库，没有则创建</span></span><br><span class=\"line\">use <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 创建管理用户</span></span><br><span class=\"line\">db.createUser(&#123; user: <span class=\"string\">&#x27;test&#x27;</span>, <span class=\"built_in\">pwd</span>:<span class=\"string\">&#x27;test&#x27;</span>, roles: [ &#123;role:<span class=\"string\">&quot;readWrite&quot;</span>,db:<span class=\"string\">&quot;test&quot;</span>&#125;]&#125;);</span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">db.auth(<span class=\"string\">&quot;test&quot;</span>,<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>启动成功之后查看 mongo 运行情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n<p>到这里，mongodb 在 docker 中的安装就完成了，以上安装步骤在 Google 上有很多可以参考，我也是参考大神们的笔记之后做的总结。安装好之后建议安装 mongodb 客户端<a class=\"link\" href=\"https://robomongo.org/\">robo3T<i class=\"fas fa-external-link-alt\"></i></a>可以更直观的看到数据的格式和存储的方式。我有个习惯就是在接触到一些新技术时先不会去纠结它的一些具体细节，我先会做个简单的例子自己跑一边，看一遍到底是怎么回事，和自己已经会的东西相比，有什么异同，这样的话会比较容易上手，当然这只是个建议，每个人都有自己的方式去学习新东西。下面我会按照我的思路来看一遍 mongo 的操作过程。</p>\n<h4 id=\"springboot-集成-mongodb\"><a href=\"#springboot-集成-mongodb\" class=\"headerlink\" title=\"springboot 集成 mongodb\"></a>springboot 集成 mongodb</h4><p>这里使用 spring boot 是因为用它的话能最快的搭建一个框架，来使用 mongo，至于 spring boot 工程如何搭建 Google 上有很多教程可以参考。主要引入 mongodb 坐标。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h4><p>mongodb 不像关系型数据库，对于字段的完整性要求很高，通俗点讲的话它的存储结构完全自由，只要是格式正确的数据都能存储在里面，但是在实际开发中，每个数据库中表的数据会是一类数据，比如说 User 表中就是存储用户信息，不可能把订单信息也放在里面，这样就会造成数据的混乱，在实际开发中，每个表也都会有自己对应的 Javabean，它的字段也取决于这个 Javabean。</p>\n<h5 id=\"新增记录\"><a href=\"#新增记录\" class=\"headerlink\" title=\"新增记录\"></a>新增记录</h5><p>实体类 （省略一些导包路径）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Document(collection = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName; <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age; <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex; <span class=\"comment\">// 性别</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试新增</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setUserName(<span class=\"string\">&quot;jihe&quot;</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">        user.setSex(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">        template.insert(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://localhost:27017/mongo</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n<p>mongo 的使用很简单，在操作上和关系型数据库很相似，简单的操作还是很容易上手的。</p>\n<h5 id=\"删除记录\"><a href=\"#删除记录\" class=\"headerlink\" title=\"删除记录\"></a>删除记录</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDelete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Query query = <span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;userName&quot;</span>).is(<span class=\"string\">&quot;jihe&quot;</span>));</span><br><span class=\"line\">    DeleteResult remove = template.remove(query, User.class);</span><br><span class=\"line\">    System.out.println(remove.getDeletedCount());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置和上面的一样，通过用户名删除用户信息</p>\n<h5 id=\"修改记录\"><a href=\"#修改记录\" class=\"headerlink\" title=\"修改记录\"></a>修改记录</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改记录</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Query query = <span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;userName&quot;</span>).is(<span class=\"string\">&quot;jihe&quot;</span>));</span><br><span class=\"line\">    Update update = <span class=\"keyword\">new</span> Update();</span><br><span class=\"line\">    update.set(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    UpdateResult updateResult = template.updateFirst(query, update, User.class);</span><br><span class=\"line\">    System.out.println(updateResult.getModifiedCount());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改用户名为 jihe 的用户年龄为 20 岁</p>\n<h5 id=\"查找记录\"><a href=\"#查找记录\" class=\"headerlink\" title=\"查找记录\"></a>查找记录</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindByUserName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Query query = <span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;userName&quot;</span>).is(<span class=\"string\">&quot;jihe&quot;</span>));</span><br><span class=\"line\">    User one = template.findOne(query, User.class);</span><br><span class=\"line\">    System.out.println(one);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是关于 mongo 的最基础简单的增删改查，在入门使用方面来讲 mongo 还是很容易接受的，尤其是接触过关系型数据库之后来使用它的话，这里简单记录一下，后面还会记录更多关于 mongo 的使用和一些在具体项目中的应用。</p>\n<hr>\n<center>能成为一个人的骄傲</center>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/03/19/docker%E5%AE%89%E8%A3%85mongodb/mongo.png\"></p>\n<p>mongodb 是一款很优秀的开源 nosql 数据库，它内部以 json 作为存储格式，在数据存储方面有很大的收缩性。因为前几天折腾 docker，这里记录一下在 docker 部署 mongdb 的步骤和简单的使用方法，其实之前接触 nosql 最多的就是 redis，目前公司大量使用 mongodb,在这里记录一些关键点，方便回顾。</p>","more":"<table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker</td>\n<td>18.09.3-ce</td>\n</tr>\n<tr>\n<td>os</td>\n<td>Mangaro 18.0.1</td>\n</tr>\n<tr>\n<td>mongodb</td>\n<td>v4.0.6</td>\n</tr>\n</tbody></table>\n<p>关于 docker 的安装，如果是 Manjaro 的话，请在<a class=\"link\" href=\"https://fengzhu.top/2019/03/17/manjaro%E5%AE%89%E8%A3%85/#more\">这里<i class=\"fas fa-external-link-alt\"></i></a>参考，如果是其他系统的话， Google 应该有很多好的博客可以参考。</p>\n<h4 id=\"安装-mongodb\"><a href=\"#安装-mongodb\" class=\"headerlink\" title=\"安装 mongodb\"></a>安装 mongodb</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull mongo</span><br></pre></td></tr></table></figure>\n<p>等待下载完成之后，查看 docker 容器中镜像情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull mongo</span><br></pre></td></tr></table></figure>\n<p>等待 mongo 下载完成之后，进行配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 mongo    --auth 有此参数的话，在连接时需要用户名密码</span></span><br><span class=\"line\">sudo docker run -d -p 27017:27017 -v /home/chenkui/database/mongodb/config:/data/configdb -v /home/chenkui/database/mongodb/data:/data/db --name mongo docker.io/mongo --auth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 mongo (容器创建成功之后启动 mongo 命令)</span></span><br><span class=\"line\">sudo docker start mongo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 mongo</span></span><br><span class=\"line\">sudo docker stop mongo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 mongo</span></span><br><span class=\"line\">sudo docker rm mongo</span><br><span class=\"line\"><span class=\"comment\"># 进入 mongo bash,创建 admin 账户</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it mongo bash</span><br><span class=\"line\"><span class=\"comment\"># 在 shell 中创建用户和密码</span></span><br><span class=\"line\">db.createUser(&#123;user:<span class=\"string\">&quot;admin&quot;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&quot;admin&quot;</span>,roles:[&#123;role:<span class=\"string\">&quot;userAdminAnyDatabase&quot;</span>,db:<span class=\"string\">&quot;admin&quot;</span>&#125;]&#125;);</span><br><span class=\"line\"><span class=\"comment\"># 退出刚刚的bash </span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># 进入 mongo</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it mongo mongo admin</span><br><span class=\"line\"><span class=\"comment\"># 用 admin 登录</span></span><br><span class=\"line\">db.auth(<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\"># 进入数据库，没有则创建</span></span><br><span class=\"line\">use <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 创建管理用户</span></span><br><span class=\"line\">db.createUser(&#123; user: <span class=\"string\">&#x27;test&#x27;</span>, <span class=\"built_in\">pwd</span>:<span class=\"string\">&#x27;test&#x27;</span>, roles: [ &#123;role:<span class=\"string\">&quot;readWrite&quot;</span>,db:<span class=\"string\">&quot;test&quot;</span>&#125;]&#125;);</span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">db.auth(<span class=\"string\">&quot;test&quot;</span>,<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>启动成功之后查看 mongo 运行情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n<p>到这里，mongodb 在 docker 中的安装就完成了，以上安装步骤在 Google 上有很多可以参考，我也是参考大神们的笔记之后做的总结。安装好之后建议安装 mongodb 客户端<a class=\"link\" href=\"https://robomongo.org/\">robo3T<i class=\"fas fa-external-link-alt\"></i></a>可以更直观的看到数据的格式和存储的方式。我有个习惯就是在接触到一些新技术时先不会去纠结它的一些具体细节，我先会做个简单的例子自己跑一边，看一遍到底是怎么回事，和自己已经会的东西相比，有什么异同，这样的话会比较容易上手，当然这只是个建议，每个人都有自己的方式去学习新东西。下面我会按照我的思路来看一遍 mongo 的操作过程。</p>\n<h4 id=\"springboot-集成-mongodb\"><a href=\"#springboot-集成-mongodb\" class=\"headerlink\" title=\"springboot 集成 mongodb\"></a>springboot 集成 mongodb</h4><p>这里使用 spring boot 是因为用它的话能最快的搭建一个框架，来使用 mongo，至于 spring boot 工程如何搭建 Google 上有很多教程可以参考。主要引入 mongodb 坐标。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h4><p>mongodb 不像关系型数据库，对于字段的完整性要求很高，通俗点讲的话它的存储结构完全自由，只要是格式正确的数据都能存储在里面，但是在实际开发中，每个数据库中表的数据会是一类数据，比如说 User 表中就是存储用户信息，不可能把订单信息也放在里面，这样就会造成数据的混乱，在实际开发中，每个表也都会有自己对应的 Javabean，它的字段也取决于这个 Javabean。</p>\n<h5 id=\"新增记录\"><a href=\"#新增记录\" class=\"headerlink\" title=\"新增记录\"></a>新增记录</h5><p>实体类 （省略一些导包路径）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Document(collection = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName; <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age; <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex; <span class=\"comment\">// 性别</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试新增</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setUserName(<span class=\"string\">&quot;jihe&quot;</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">        user.setSex(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">        template.insert(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://localhost:27017/mongo</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n<p>mongo 的使用很简单，在操作上和关系型数据库很相似，简单的操作还是很容易上手的。</p>\n<h5 id=\"删除记录\"><a href=\"#删除记录\" class=\"headerlink\" title=\"删除记录\"></a>删除记录</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDelete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Query query = <span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;userName&quot;</span>).is(<span class=\"string\">&quot;jihe&quot;</span>));</span><br><span class=\"line\">    DeleteResult remove = template.remove(query, User.class);</span><br><span class=\"line\">    System.out.println(remove.getDeletedCount());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置和上面的一样，通过用户名删除用户信息</p>\n<h5 id=\"修改记录\"><a href=\"#修改记录\" class=\"headerlink\" title=\"修改记录\"></a>修改记录</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 修改记录</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Query query = <span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;userName&quot;</span>).is(<span class=\"string\">&quot;jihe&quot;</span>));</span><br><span class=\"line\">    Update update = <span class=\"keyword\">new</span> Update();</span><br><span class=\"line\">    update.set(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    UpdateResult updateResult = template.updateFirst(query, update, User.class);</span><br><span class=\"line\">    System.out.println(updateResult.getModifiedCount());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改用户名为 jihe 的用户年龄为 20 岁</p>\n<h5 id=\"查找记录\"><a href=\"#查找记录\" class=\"headerlink\" title=\"查找记录\"></a>查找记录</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindByUserName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Query query = <span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;userName&quot;</span>).is(<span class=\"string\">&quot;jihe&quot;</span>));</span><br><span class=\"line\">    User one = template.findOne(query, User.class);</span><br><span class=\"line\">    System.out.println(one);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是关于 mongo 的最基础简单的增删改查，在入门使用方面来讲 mongo 还是很容易接受的，尤其是接触过关系型数据库之后来使用它的话，这里简单记录一下，后面还会记录更多关于 mongo 的使用和一些在具体项目中的应用。</p>\n<hr>\n<center>能成为一个人的骄傲</center>"},{"title":"java-fragment-knowledge","date":"2019-12-15T03:18:01.000Z","_content":"\n![Photo by vinc on wallhaven.cc](/java-konwlege.png)\n\n\n记录 Java 中一些有趣但是容易忽略的碎片知识。\n\n<!--more-->\n\n### 碎片\n\n#### 时间戳\n\nSystem.currentTimeMillis() 和 System.nanoTime()。前者精度不及后者精度高，一般高精度时间获取使用后者。这里有个具体[测试](https://blog.csdn.net/elky1982/article/details/4677365)\n\n\n<center></center>\n\n","source":"_posts/java-fragment-knowledge.md","raw":"---\ntitle: java-fragment-knowledge\ndate: 2019-12-15 11:18:01\ntags: Java\ncategory: Java\n---\n\n![Photo by vinc on wallhaven.cc](/java-konwlege.png)\n\n\n记录 Java 中一些有趣但是容易忽略的碎片知识。\n\n<!--more-->\n\n### 碎片\n\n#### 时间戳\n\nSystem.currentTimeMillis() 和 System.nanoTime()。前者精度不及后者精度高，一般高精度时间获取使用后者。这里有个具体[测试](https://blog.csdn.net/elky1982/article/details/4677365)\n\n\n<center></center>\n\n","slug":"java-fragment-knowledge","published":1,"updated":"2021-01-31T06:31:35.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowd000irh1t3dsl1gvg","content":"<p><img src=\"/2019/12/15/java-fragment-knowledge/java-konwlege.png\" alt=\"Photo by vinc on wallhaven.cc\"></p>\n<p>记录 Java 中一些有趣但是容易忽略的碎片知识。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"碎片\"><a href=\"#碎片\" class=\"headerlink\" title=\"碎片\"></a>碎片</h3><h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><p>System.currentTimeMillis() 和 System.nanoTime()。前者精度不及后者精度高，一般高精度时间获取使用后者。这里有个具体<a class=\"link\" href=\"https://blog.csdn.net/elky1982/article/details/4677365\">测试<i class=\"fas fa-external-link-alt\"></i></a></p>\n<center></center>\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/12/15/java-fragment-knowledge/java-konwlege.png\" alt=\"Photo by vinc on wallhaven.cc\"></p>\n<p>记录 Java 中一些有趣但是容易忽略的碎片知识。</p>","more":"<h3 id=\"碎片\"><a href=\"#碎片\" class=\"headerlink\" title=\"碎片\"></a>碎片</h3><h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><p>System.currentTimeMillis() 和 System.nanoTime()。前者精度不及后者精度高，一般高精度时间获取使用后者。这里有个具体<a class=\"link\" href=\"https://blog.csdn.net/elky1982/article/details/4677365\">测试<i class=\"fas fa-external-link-alt\"></i></a></p>\n<center></center>"},{"title":"jvm-class文件结构","date":"2019-05-05T12:36:37.000Z","_content":"\n![](jvm-class文件结构/class.png)\n\n最近 manjaro 又更新挂了，算了，不折腾了，考虑真香 windows 了。（如果不忙的话还是很喜欢折腾的，但是最近手头也比较忙就先不换回去了）今年是准备偏向底层的学习，现在新技术层出不穷，让人眼花缭乱。有时候会很浮躁，担心学到的东西过不了多久就会被抛弃。也是瑟瑟发抖。不过看了很多大佬写的东西，都会有一个结论，就是偏底层技术永远是新技术的支撑，那些枯燥乏味的知识才是生命力最强的技术。\n\n<!-- more -->\n\n我们都知道 Java 程序要运行的话，需要编译然后才能运行。Java 文件经过编译器编译之后会生产 class 文件，一般打开都是乱码的，建议使用 notepad++ 插件 HEX-editor 来进行查看字节码文件，打开文件就会看到一堆十六进制的代码，不过这样一堆代码也是有规可循的。\n\n#### 文件基本组成\n\n##### Java 魔数\n\n这个相信学习 Java 的都会知道，JVM 如何知道这个文件是 class 文件呢，就是根据文件最开头的 4 个字节来判断的，这 4 个字节很有意思，分别是 `ca fe ba be` 咖啡贝比，都是十六进制数组成的，不知道当年 Java 之父想到这个时是多开心的...。当然，验证完是一个字节码文件之后还会验证很多东西，比如版本，全限定名，常量等等。否则会抛异常。\n\n##### 主次版本号\n\n跟在魔数后面的就是 Java 的 主次版本号，Java 语言都是向下兼容的，如果低版本跑在高版本的 JVM 就会抛错处出来。\n\n##### 常量池计数器\n\n在版本号后面会有 2 个字节的计数器，顾名思义，是用来记录当前 class 常量池大小计数器。\n\n##### 常量池\n\n常量池可以理解为整个文件的 `元数据`，就像是一个文件，文件名叫什么，什么时候创建的，文件多大，文件类型是什么。常量池包含了类的属性，方法，接口等一些类的描述信息。\n\n***\n以上就是对 class 文件基础信息的简单总结，这个会持续更新，我也在学习中，希望大家能在使用 Java 时，可以知其然，并知其所以然。（如果有问题，大佬们请多多指正）\n\n***\n\n#### 代码分析\n\n##### .java 文件\n\n我写了一个很简单的类，来大概分析下 class 文件的对应关系。\n\n```java\npublic class ClassStructure extends Thread implements Serializable {\n    private int i = 0;\n    private static int a = 1;\n\n    public void inc() {\n        i++;\n    }\n\n    public int add() {\n        return i + a;\n    }\n\n    public void test() {\n        try {\n            i = 1;\n        } catch (Exception e) {\n            a = 2;\n        }\n    }\n}\n```\n\n首先使用 `javac ClassStructure.java` 编译文件，正常情况下会生成一个 ClassStructure.class 文件，然后使用  `javap -v ClassStructure.class` 命令查看文件信息，会生成下面的内容\n\n```bash\n\nG:\\jvm\\src\\main\\java\\com\\jihe\\jvm\\test>javap -v ClassStructure.class\nClassfile /G:/jvm/src/main/java/com/jihe/jvm/test/ClassStructure.class\n  Last modified 2019-5-21; size 617 bytes\n  MD5 checksum e664b24bf12decb3e4ff2dbcf2857a55\n  Compiled from \"ClassStructure.java\"\npublic class com.jihe.jvm.test.ClassStructure extends java.lang.Thread implements java.io.Serializable\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #6.#24         // java/lang/Thread.\"<init>\":()V\n   #2 = Fieldref           #5.#25         // com/jihe/jvm/test/ClassStructure.i:I\n   #3 = Fieldref           #5.#26         // com/jihe/jvm/test/ClassStructure.a:I\n   #4 = Class              #27            // java/lang/Exception\n   #5 = Class              #28            // com/jihe/jvm/test/ClassStructure\n   #6 = Class              #29            // java/lang/Thread\n   #7 = Class              #30            // java/io/Serializable\n   #8 = Utf8               i\n   #9 = Utf8               I\n  #10 = Utf8               a\n  #11 = Utf8               <init>\n  #12 = Utf8               ()V\n  #13 = Utf8               Code\n  #14 = Utf8               LineNumberTable\n  #15 = Utf8               inc\n  #16 = Utf8               add\n  #17 = Utf8               ()I\n  #18 = Utf8               test\n  #19 = Utf8               StackMapTable\n  #20 = Class              #27            // java/lang/Exception\n  #21 = Utf8               <clinit>\n  #22 = Utf8               SourceFile\n  #23 = Utf8               ClassStructure.java\n  #24 = NameAndType        #11:#12        // \"<init>\":()V\n  #25 = NameAndType        #8:#9          // i:I\n  #26 = NameAndType        #10:#9         // a:I\n  #27 = Utf8               java/lang/Exception\n  #28 = Utf8               com/jihe/jvm/test/ClassStructure\n  #29 = Utf8               java/lang/Thread\n  #30 = Utf8               java/io/Serializable\n{\n  public com.jihe.jvm.test.ClassStructure();                   // 构造器\n    descriptor: ()                                             // 方法参数等描述\n    flags: ACC_PUBLIC                                          // 访问标志\n    Code:                                                         \n      stack=2, locals=1, args_size=1                         \n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Thread.\"<init>\":()V\n         4: aload_0\n         5: iconst_0\n         6: putfield      #2                  // Field i:I\n         9: return\n      LineNumberTable:\n        line 10: 0\n        line 12: 4\n\n  public void inc();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=3, locals=1, args_size=1\n         0: aload_0\n         1: dup\n         2: getfield      #2                  // Field i:I\n         5: iconst_1\n         6: iadd\n         7: putfield      #2                  // Field i:I\n        10: return\n      LineNumberTable:\n        line 16: 0\n        line 17: 10\n\n  public int add();\n    descriptor: ()I\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: aload_0\n         1: getfield      #2                  // Field i:I\n         4: getstatic     #3                  // Field a:I\n         7: iadd\n         8: ireturn\n      LineNumberTable:\n        line 20: 0\n\n  public void test();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=2, args_size=1\n         0: aload_0\n         1: iconst_1\n         2: putfield      #2                  // Field i:I\n         5: goto          13\n         8: astore_1\n         9: iconst_2\n        10: putstatic     #3                  // Field a:I\n        13: return\n      Exception table:\n         from    to  target type\n             0     5     8   Class java/lang/Exception\n      LineNumberTable:\n        line 25: 0\n        line 28: 5\n        line 26: 8\n        line 27: 9\n        line 29: 13\n      StackMapTable: number_of_entries = 2\n        frame_type = 72 /* same_locals_1_stack_item */\n          stack = [ class java/lang/Exception ]\n        frame_type = 4 /* same */\n\n  static {};                                 // 静态变量初始化方法\n    descriptor: ()V\n    flags: ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: iconst_1\n         1: putstatic     #3                  // Field a:I\n         4: return\n      LineNumberTable:\n        line 13: 0\n}\nSourceFile: \"ClassStructure.java\"\n\n```\n\n其实在这里看的话已经很明了了，在一些代码后面还有相应的注释，我们都知道一个类对象创建是在调用其构造方法的时候，那先从构造器开始看起。\n在我注释构造器的地方就是这个类的构造方法，入口从 `invokespecial #1` 开始，它后面指向了 `#1`， 在常量池 `Constant pool` 中找到 `#1`：\n\n|  编号说明    |   编号   |   注释   |\n| ---- | ---- | ---- |\n| #1 = Methodref     |  #6.#24       |    // java/lang/Thread.\"<init>\":()V  |\n|   Methodref 方法的符号引用   | 指向的常量池编号     |  注释，#6 号和 #24 注释   |\n\n在 class 中是按照编号的形式查找的，一级指向一级，常量池中保存了整个类的一些结构定义，相当于一个 `元数据` 部分。今年准备好好回归到底层部分，对 Java 底层部分进行比较深入的了解，字节码文件是熟悉的陌生人之一，所以 class 也是我学习的开始。\n\n##### 异常表\n\n上面的类中 test 方法有一个异常处理。下面是代码部分\n``` java\n 23 public void test() {\n 24       try {\n 25           i = 1;\n 26       } catch (Exception e) {\n 27           a = 2;\n 28       }\n 29   }\n```\n\n使用 javap -v 命令可以看到如下异常表\n``` java\nException table:\n         from    to  target type\n             0     5     8   Class java/lang/Exception\n      LineNumberTable:\n        line 25: 0\n        line 28: 5\n        line 26: 8\n        line 27: 9\n        line 29: 13\n```\n这个异常表对应到具体的代码大概是这样的：\n1. from 0: 对应下面的 LineNumberTable(LNT) ，`line 25: 0 ` 0 对应的是源代码第 25 行，回到上面 Java 源代码可以看到我原本代码行数 `25           i = 1;` 行，就是异常开始。\n2. to 5: 这里和上面也是一样的，对应到 LNT 是 28 行，异常从 28 行出结束。\n3. target 8: 对应到具体源代码行是第 26 行，也就是具体的目标类型， Exception\n上面就是异常表大概的对应关系。如果没有异常表将会导致 debug 断点时会出现问题，打印错误日志不会有行号。\n\n看到一句很有意思的话：you are my exception.\n\n***\n\n<center>不忘初心，方得始终</center>\n                ","source":"_posts/jvm-class文件结构.md","raw":"---\ntitle: jvm-class文件结构\ndate: 2019-05-05 20:36:37\ntags: Java\ncategory: Java\n---\n\n![](jvm-class文件结构/class.png)\n\n最近 manjaro 又更新挂了，算了，不折腾了，考虑真香 windows 了。（如果不忙的话还是很喜欢折腾的，但是最近手头也比较忙就先不换回去了）今年是准备偏向底层的学习，现在新技术层出不穷，让人眼花缭乱。有时候会很浮躁，担心学到的东西过不了多久就会被抛弃。也是瑟瑟发抖。不过看了很多大佬写的东西，都会有一个结论，就是偏底层技术永远是新技术的支撑，那些枯燥乏味的知识才是生命力最强的技术。\n\n<!-- more -->\n\n我们都知道 Java 程序要运行的话，需要编译然后才能运行。Java 文件经过编译器编译之后会生产 class 文件，一般打开都是乱码的，建议使用 notepad++ 插件 HEX-editor 来进行查看字节码文件，打开文件就会看到一堆十六进制的代码，不过这样一堆代码也是有规可循的。\n\n#### 文件基本组成\n\n##### Java 魔数\n\n这个相信学习 Java 的都会知道，JVM 如何知道这个文件是 class 文件呢，就是根据文件最开头的 4 个字节来判断的，这 4 个字节很有意思，分别是 `ca fe ba be` 咖啡贝比，都是十六进制数组成的，不知道当年 Java 之父想到这个时是多开心的...。当然，验证完是一个字节码文件之后还会验证很多东西，比如版本，全限定名，常量等等。否则会抛异常。\n\n##### 主次版本号\n\n跟在魔数后面的就是 Java 的 主次版本号，Java 语言都是向下兼容的，如果低版本跑在高版本的 JVM 就会抛错处出来。\n\n##### 常量池计数器\n\n在版本号后面会有 2 个字节的计数器，顾名思义，是用来记录当前 class 常量池大小计数器。\n\n##### 常量池\n\n常量池可以理解为整个文件的 `元数据`，就像是一个文件，文件名叫什么，什么时候创建的，文件多大，文件类型是什么。常量池包含了类的属性，方法，接口等一些类的描述信息。\n\n***\n以上就是对 class 文件基础信息的简单总结，这个会持续更新，我也在学习中，希望大家能在使用 Java 时，可以知其然，并知其所以然。（如果有问题，大佬们请多多指正）\n\n***\n\n#### 代码分析\n\n##### .java 文件\n\n我写了一个很简单的类，来大概分析下 class 文件的对应关系。\n\n```java\npublic class ClassStructure extends Thread implements Serializable {\n    private int i = 0;\n    private static int a = 1;\n\n    public void inc() {\n        i++;\n    }\n\n    public int add() {\n        return i + a;\n    }\n\n    public void test() {\n        try {\n            i = 1;\n        } catch (Exception e) {\n            a = 2;\n        }\n    }\n}\n```\n\n首先使用 `javac ClassStructure.java` 编译文件，正常情况下会生成一个 ClassStructure.class 文件，然后使用  `javap -v ClassStructure.class` 命令查看文件信息，会生成下面的内容\n\n```bash\n\nG:\\jvm\\src\\main\\java\\com\\jihe\\jvm\\test>javap -v ClassStructure.class\nClassfile /G:/jvm/src/main/java/com/jihe/jvm/test/ClassStructure.class\n  Last modified 2019-5-21; size 617 bytes\n  MD5 checksum e664b24bf12decb3e4ff2dbcf2857a55\n  Compiled from \"ClassStructure.java\"\npublic class com.jihe.jvm.test.ClassStructure extends java.lang.Thread implements java.io.Serializable\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #6.#24         // java/lang/Thread.\"<init>\":()V\n   #2 = Fieldref           #5.#25         // com/jihe/jvm/test/ClassStructure.i:I\n   #3 = Fieldref           #5.#26         // com/jihe/jvm/test/ClassStructure.a:I\n   #4 = Class              #27            // java/lang/Exception\n   #5 = Class              #28            // com/jihe/jvm/test/ClassStructure\n   #6 = Class              #29            // java/lang/Thread\n   #7 = Class              #30            // java/io/Serializable\n   #8 = Utf8               i\n   #9 = Utf8               I\n  #10 = Utf8               a\n  #11 = Utf8               <init>\n  #12 = Utf8               ()V\n  #13 = Utf8               Code\n  #14 = Utf8               LineNumberTable\n  #15 = Utf8               inc\n  #16 = Utf8               add\n  #17 = Utf8               ()I\n  #18 = Utf8               test\n  #19 = Utf8               StackMapTable\n  #20 = Class              #27            // java/lang/Exception\n  #21 = Utf8               <clinit>\n  #22 = Utf8               SourceFile\n  #23 = Utf8               ClassStructure.java\n  #24 = NameAndType        #11:#12        // \"<init>\":()V\n  #25 = NameAndType        #8:#9          // i:I\n  #26 = NameAndType        #10:#9         // a:I\n  #27 = Utf8               java/lang/Exception\n  #28 = Utf8               com/jihe/jvm/test/ClassStructure\n  #29 = Utf8               java/lang/Thread\n  #30 = Utf8               java/io/Serializable\n{\n  public com.jihe.jvm.test.ClassStructure();                   // 构造器\n    descriptor: ()                                             // 方法参数等描述\n    flags: ACC_PUBLIC                                          // 访问标志\n    Code:                                                         \n      stack=2, locals=1, args_size=1                         \n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Thread.\"<init>\":()V\n         4: aload_0\n         5: iconst_0\n         6: putfield      #2                  // Field i:I\n         9: return\n      LineNumberTable:\n        line 10: 0\n        line 12: 4\n\n  public void inc();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=3, locals=1, args_size=1\n         0: aload_0\n         1: dup\n         2: getfield      #2                  // Field i:I\n         5: iconst_1\n         6: iadd\n         7: putfield      #2                  // Field i:I\n        10: return\n      LineNumberTable:\n        line 16: 0\n        line 17: 10\n\n  public int add();\n    descriptor: ()I\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: aload_0\n         1: getfield      #2                  // Field i:I\n         4: getstatic     #3                  // Field a:I\n         7: iadd\n         8: ireturn\n      LineNumberTable:\n        line 20: 0\n\n  public void test();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=2, args_size=1\n         0: aload_0\n         1: iconst_1\n         2: putfield      #2                  // Field i:I\n         5: goto          13\n         8: astore_1\n         9: iconst_2\n        10: putstatic     #3                  // Field a:I\n        13: return\n      Exception table:\n         from    to  target type\n             0     5     8   Class java/lang/Exception\n      LineNumberTable:\n        line 25: 0\n        line 28: 5\n        line 26: 8\n        line 27: 9\n        line 29: 13\n      StackMapTable: number_of_entries = 2\n        frame_type = 72 /* same_locals_1_stack_item */\n          stack = [ class java/lang/Exception ]\n        frame_type = 4 /* same */\n\n  static {};                                 // 静态变量初始化方法\n    descriptor: ()V\n    flags: ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: iconst_1\n         1: putstatic     #3                  // Field a:I\n         4: return\n      LineNumberTable:\n        line 13: 0\n}\nSourceFile: \"ClassStructure.java\"\n\n```\n\n其实在这里看的话已经很明了了，在一些代码后面还有相应的注释，我们都知道一个类对象创建是在调用其构造方法的时候，那先从构造器开始看起。\n在我注释构造器的地方就是这个类的构造方法，入口从 `invokespecial #1` 开始，它后面指向了 `#1`， 在常量池 `Constant pool` 中找到 `#1`：\n\n|  编号说明    |   编号   |   注释   |\n| ---- | ---- | ---- |\n| #1 = Methodref     |  #6.#24       |    // java/lang/Thread.\"<init>\":()V  |\n|   Methodref 方法的符号引用   | 指向的常量池编号     |  注释，#6 号和 #24 注释   |\n\n在 class 中是按照编号的形式查找的，一级指向一级，常量池中保存了整个类的一些结构定义，相当于一个 `元数据` 部分。今年准备好好回归到底层部分，对 Java 底层部分进行比较深入的了解，字节码文件是熟悉的陌生人之一，所以 class 也是我学习的开始。\n\n##### 异常表\n\n上面的类中 test 方法有一个异常处理。下面是代码部分\n``` java\n 23 public void test() {\n 24       try {\n 25           i = 1;\n 26       } catch (Exception e) {\n 27           a = 2;\n 28       }\n 29   }\n```\n\n使用 javap -v 命令可以看到如下异常表\n``` java\nException table:\n         from    to  target type\n             0     5     8   Class java/lang/Exception\n      LineNumberTable:\n        line 25: 0\n        line 28: 5\n        line 26: 8\n        line 27: 9\n        line 29: 13\n```\n这个异常表对应到具体的代码大概是这样的：\n1. from 0: 对应下面的 LineNumberTable(LNT) ，`line 25: 0 ` 0 对应的是源代码第 25 行，回到上面 Java 源代码可以看到我原本代码行数 `25           i = 1;` 行，就是异常开始。\n2. to 5: 这里和上面也是一样的，对应到 LNT 是 28 行，异常从 28 行出结束。\n3. target 8: 对应到具体源代码行是第 26 行，也就是具体的目标类型， Exception\n上面就是异常表大概的对应关系。如果没有异常表将会导致 debug 断点时会出现问题，打印错误日志不会有行号。\n\n看到一句很有意思的话：you are my exception.\n\n***\n\n<center>不忘初心，方得始终</center>\n                ","slug":"jvm-class文件结构","published":1,"updated":"2021-01-31T06:31:35.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowe000krh1tfdvo8zvm","content":"<p><img src=\"/2019/05/05/jvm-class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/class.png\"></p>\n<p>最近 manjaro 又更新挂了，算了，不折腾了，考虑真香 windows 了。（如果不忙的话还是很喜欢折腾的，但是最近手头也比较忙就先不换回去了）今年是准备偏向底层的学习，现在新技术层出不穷，让人眼花缭乱。有时候会很浮躁，担心学到的东西过不了多久就会被抛弃。也是瑟瑟发抖。不过看了很多大佬写的东西，都会有一个结论，就是偏底层技术永远是新技术的支撑，那些枯燥乏味的知识才是生命力最强的技术。</p>\n<a id=\"more\"></a>\n\n<p>我们都知道 Java 程序要运行的话，需要编译然后才能运行。Java 文件经过编译器编译之后会生产 class 文件，一般打开都是乱码的，建议使用 notepad++ 插件 HEX-editor 来进行查看字节码文件，打开文件就会看到一堆十六进制的代码，不过这样一堆代码也是有规可循的。</p>\n<h4 id=\"文件基本组成\"><a href=\"#文件基本组成\" class=\"headerlink\" title=\"文件基本组成\"></a>文件基本组成</h4><h5 id=\"Java-魔数\"><a href=\"#Java-魔数\" class=\"headerlink\" title=\"Java 魔数\"></a>Java 魔数</h5><p>这个相信学习 Java 的都会知道，JVM 如何知道这个文件是 class 文件呢，就是根据文件最开头的 4 个字节来判断的，这 4 个字节很有意思，分别是 <code>ca fe ba be</code> 咖啡贝比，都是十六进制数组成的，不知道当年 Java 之父想到这个时是多开心的…。当然，验证完是一个字节码文件之后还会验证很多东西，比如版本，全限定名，常量等等。否则会抛异常。</p>\n<h5 id=\"主次版本号\"><a href=\"#主次版本号\" class=\"headerlink\" title=\"主次版本号\"></a>主次版本号</h5><p>跟在魔数后面的就是 Java 的 主次版本号，Java 语言都是向下兼容的，如果低版本跑在高版本的 JVM 就会抛错处出来。</p>\n<h5 id=\"常量池计数器\"><a href=\"#常量池计数器\" class=\"headerlink\" title=\"常量池计数器\"></a>常量池计数器</h5><p>在版本号后面会有 2 个字节的计数器，顾名思义，是用来记录当前 class 常量池大小计数器。</p>\n<h5 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h5><p>常量池可以理解为整个文件的 <code>元数据</code>，就像是一个文件，文件名叫什么，什么时候创建的，文件多大，文件类型是什么。常量池包含了类的属性，方法，接口等一些类的描述信息。</p>\n<hr>\n<p>以上就是对 class 文件基础信息的简单总结，这个会持续更新，我也在学习中，希望大家能在使用 Java 时，可以知其然，并知其所以然。（如果有问题，大佬们请多多指正）</p>\n<hr>\n<h4 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h4><h5 id=\"java-文件\"><a href=\"#java-文件\" class=\"headerlink\" title=\".java 文件\"></a>.java 文件</h5><p>我写了一个很简单的类，来大概分析下 class 文件的对应关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassStructure</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            i = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            a = <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先使用 <code>javac ClassStructure.java</code> 编译文件，正常情况下会生成一个 ClassStructure.class 文件，然后使用  <code>javap -v ClassStructure.class</code> 命令查看文件信息，会生成下面的内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">G:\\jvm\\src\\main\\java\\com\\jihe\\jvm\\<span class=\"built_in\">test</span>&gt;javap -v ClassStructure.class</span><br><span class=\"line\">Classfile /G:/jvm/src/main/java/com/jihe/jvm/<span class=\"built_in\">test</span>/ClassStructure.class</span><br><span class=\"line\">  Last modified 2019-5-21; size 617 bytes</span><br><span class=\"line\">  MD5 checksum e664b24bf12decb3e4ff2dbcf2857a55</span><br><span class=\"line\">  Compiled from <span class=\"string\">&quot;ClassStructure.java&quot;</span></span><br><span class=\"line\">public class com.jihe.jvm.test.ClassStructure extends java.lang.Thread implements java.io.Serializable</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   <span class=\"comment\">#1 = Methodref          #6.#24         // java/lang/Thread.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">   <span class=\"comment\">#2 = Fieldref           #5.#25         // com/jihe/jvm/test/ClassStructure.i:I</span></span><br><span class=\"line\">   <span class=\"comment\">#3 = Fieldref           #5.#26         // com/jihe/jvm/test/ClassStructure.a:I</span></span><br><span class=\"line\">   <span class=\"comment\">#4 = Class              #27            // java/lang/Exception</span></span><br><span class=\"line\">   <span class=\"comment\">#5 = Class              #28            // com/jihe/jvm/test/ClassStructure</span></span><br><span class=\"line\">   <span class=\"comment\">#6 = Class              #29            // java/lang/Thread</span></span><br><span class=\"line\">   <span class=\"comment\">#7 = Class              #30            // java/io/Serializable</span></span><br><span class=\"line\">   <span class=\"comment\">#8 = Utf8               i</span></span><br><span class=\"line\">   <span class=\"comment\">#9 = Utf8               I</span></span><br><span class=\"line\">  <span class=\"comment\">#10 = Utf8               a</span></span><br><span class=\"line\">  <span class=\"comment\">#11 = Utf8               &lt;init&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#12 = Utf8               ()V</span></span><br><span class=\"line\">  <span class=\"comment\">#13 = Utf8               Code</span></span><br><span class=\"line\">  <span class=\"comment\">#14 = Utf8               LineNumberTable</span></span><br><span class=\"line\">  <span class=\"comment\">#15 = Utf8               inc</span></span><br><span class=\"line\">  <span class=\"comment\">#16 = Utf8               add</span></span><br><span class=\"line\">  <span class=\"comment\">#17 = Utf8               ()I</span></span><br><span class=\"line\">  <span class=\"comment\">#18 = Utf8               test</span></span><br><span class=\"line\">  <span class=\"comment\">#19 = Utf8               StackMapTable</span></span><br><span class=\"line\">  <span class=\"comment\">#20 = Class              #27            // java/lang/Exception</span></span><br><span class=\"line\">  <span class=\"comment\">#21 = Utf8               &lt;clinit&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#22 = Utf8               SourceFile</span></span><br><span class=\"line\">  <span class=\"comment\">#23 = Utf8               ClassStructure.java</span></span><br><span class=\"line\">  <span class=\"comment\">#24 = NameAndType        #11:#12        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">  <span class=\"comment\">#25 = NameAndType        #8:#9          // i:I</span></span><br><span class=\"line\">  <span class=\"comment\">#26 = NameAndType        #10:#9         // a:I</span></span><br><span class=\"line\">  <span class=\"comment\">#27 = Utf8               java/lang/Exception</span></span><br><span class=\"line\">  <span class=\"comment\">#28 = Utf8               com/jihe/jvm/test/ClassStructure</span></span><br><span class=\"line\">  <span class=\"comment\">#29 = Utf8               java/lang/Thread</span></span><br><span class=\"line\">  <span class=\"comment\">#30 = Utf8               java/io/Serializable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.jihe.jvm.test.ClassStructure();                   // 构造器</span><br><span class=\"line\">    descriptor: ()                                             // 方法参数等描述</span><br><span class=\"line\">    flags: ACC_PUBLIC                                          // 访问标志</span><br><span class=\"line\">    Code:                                                         </span><br><span class=\"line\">      stack=2, locals=1, args_size=1                         </span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial <span class=\"comment\">#1                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">         4: aload_0</span><br><span class=\"line\">         5: iconst_0</span><br><span class=\"line\">         6: putfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         9: <span class=\"built_in\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 10: 0</span><br><span class=\"line\">        line 12: 4</span><br><span class=\"line\"></span><br><span class=\"line\">  public void inc();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=3, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: dup</span><br><span class=\"line\">         2: getfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         5: iconst_1</span><br><span class=\"line\">         6: iadd</span><br><span class=\"line\">         7: putfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">        10: <span class=\"built_in\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 16: 0</span><br><span class=\"line\">        line 17: 10</span><br><span class=\"line\"></span><br><span class=\"line\">  public int add();</span><br><span class=\"line\">    descriptor: ()I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: getfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         4: getstatic     <span class=\"comment\">#3                  // Field a:I</span></span><br><span class=\"line\">         7: iadd</span><br><span class=\"line\">         8: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 20: 0</span><br><span class=\"line\"></span><br><span class=\"line\">  public void <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: iconst_1</span><br><span class=\"line\">         2: putfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         5: goto          13</span><br><span class=\"line\">         8: astore_1</span><br><span class=\"line\">         9: iconst_2</span><br><span class=\"line\">        10: putstatic     <span class=\"comment\">#3                  // Field a:I</span></span><br><span class=\"line\">        13: <span class=\"built_in\">return</span></span><br><span class=\"line\">      Exception table:</span><br><span class=\"line\">         from    to  target <span class=\"built_in\">type</span></span><br><span class=\"line\">             0     5     8   Class java/lang/Exception</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 25: 0</span><br><span class=\"line\">        line 28: 5</span><br><span class=\"line\">        line 26: 8</span><br><span class=\"line\">        line 27: 9</span><br><span class=\"line\">        line 29: 13</span><br><span class=\"line\">      StackMapTable: number_of_entries = 2</span><br><span class=\"line\">        frame_type = 72 /* same_locals_1_stack_item */</span><br><span class=\"line\">          stack = [ class java/lang/Exception ]</span><br><span class=\"line\">        frame_type = 4 /* same */</span><br><span class=\"line\"></span><br><span class=\"line\">  static &#123;&#125;;                                 // 静态变量初始化方法</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=0, args_size=0</span><br><span class=\"line\">         0: iconst_1</span><br><span class=\"line\">         1: putstatic     <span class=\"comment\">#3                  // Field a:I</span></span><br><span class=\"line\">         4: <span class=\"built_in\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 13: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: <span class=\"string\">&quot;ClassStructure.java&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其实在这里看的话已经很明了了，在一些代码后面还有相应的注释，我们都知道一个类对象创建是在调用其构造方法的时候，那先从构造器开始看起。<br>在我注释构造器的地方就是这个类的构造方法，入口从 <code>invokespecial #1</code> 开始，它后面指向了 <code>#1</code>， 在常量池 <code>Constant pool</code> 中找到 <code>#1</code>：</p>\n<table>\n<thead>\n<tr>\n<th>编号说明</th>\n<th>编号</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#1 = Methodref</td>\n<td>#6.#24</td>\n<td>// java/lang/Thread.”<init>“:()V</init></td>\n</tr>\n<tr>\n<td>Methodref 方法的符号引用</td>\n<td>指向的常量池编号</td>\n<td>注释，#6 号和 #24 注释</td>\n</tr>\n</tbody></table>\n<p>在 class 中是按照编号的形式查找的，一级指向一级，常量池中保存了整个类的一些结构定义，相当于一个 <code>元数据</code> 部分。今年准备好好回归到底层部分，对 Java 底层部分进行比较深入的了解，字节码文件是熟悉的陌生人之一，所以 class 也是我学习的开始。</p>\n<h5 id=\"异常表\"><a href=\"#异常表\" class=\"headerlink\" title=\"异常表\"></a>异常表</h5><p>上面的类中 test 方法有一个异常处理。下面是代码部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">23</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"number\">24</span>       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"number\">25</span>           i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">26</span>       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"><span class=\"number\">27</span>           a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"number\">28</span>       &#125;</span><br><span class=\"line\"><span class=\"number\">29</span>   &#125;</span><br></pre></td></tr></table></figure>\n<p>使用 javap -v 命令可以看到如下异常表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception table:</span><br><span class=\"line\">         from    to  target type</span><br><span class=\"line\">             <span class=\"number\">0</span>     <span class=\"number\">5</span>     <span class=\"number\">8</span>   Class java/lang/Exception</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">25</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">28</span>: <span class=\"number\">5</span></span><br><span class=\"line\">        line <span class=\"number\">26</span>: <span class=\"number\">8</span></span><br><span class=\"line\">        line <span class=\"number\">27</span>: <span class=\"number\">9</span></span><br><span class=\"line\">        line <span class=\"number\">29</span>: <span class=\"number\">13</span></span><br></pre></td></tr></table></figure>\n<p>这个异常表对应到具体的代码大概是这样的：</p>\n<ol>\n<li>from 0: 对应下面的 LineNumberTable(LNT) ，<code>line 25: 0 </code> 0 对应的是源代码第 25 行，回到上面 Java 源代码可以看到我原本代码行数 <code>25           i = 1;</code> 行，就是异常开始。</li>\n<li>to 5: 这里和上面也是一样的，对应到 LNT 是 28 行，异常从 28 行出结束。</li>\n<li>target 8: 对应到具体源代码行是第 26 行，也就是具体的目标类型， Exception<br>上面就是异常表大概的对应关系。如果没有异常表将会导致 debug 断点时会出现问题，打印错误日志不会有行号。</li>\n</ol>\n<p>看到一句很有意思的话：you are my exception.</p>\n<hr>\n<center>不忘初心，方得始终</center>\n                ","site":{"data":{}},"excerpt":"<p><img src=\"/2019/05/05/jvm-class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/class.png\"></p>\n<p>最近 manjaro 又更新挂了，算了，不折腾了，考虑真香 windows 了。（如果不忙的话还是很喜欢折腾的，但是最近手头也比较忙就先不换回去了）今年是准备偏向底层的学习，现在新技术层出不穷，让人眼花缭乱。有时候会很浮躁，担心学到的东西过不了多久就会被抛弃。也是瑟瑟发抖。不过看了很多大佬写的东西，都会有一个结论，就是偏底层技术永远是新技术的支撑，那些枯燥乏味的知识才是生命力最强的技术。</p>","more":"<p>我们都知道 Java 程序要运行的话，需要编译然后才能运行。Java 文件经过编译器编译之后会生产 class 文件，一般打开都是乱码的，建议使用 notepad++ 插件 HEX-editor 来进行查看字节码文件，打开文件就会看到一堆十六进制的代码，不过这样一堆代码也是有规可循的。</p>\n<h4 id=\"文件基本组成\"><a href=\"#文件基本组成\" class=\"headerlink\" title=\"文件基本组成\"></a>文件基本组成</h4><h5 id=\"Java-魔数\"><a href=\"#Java-魔数\" class=\"headerlink\" title=\"Java 魔数\"></a>Java 魔数</h5><p>这个相信学习 Java 的都会知道，JVM 如何知道这个文件是 class 文件呢，就是根据文件最开头的 4 个字节来判断的，这 4 个字节很有意思，分别是 <code>ca fe ba be</code> 咖啡贝比，都是十六进制数组成的，不知道当年 Java 之父想到这个时是多开心的…。当然，验证完是一个字节码文件之后还会验证很多东西，比如版本，全限定名，常量等等。否则会抛异常。</p>\n<h5 id=\"主次版本号\"><a href=\"#主次版本号\" class=\"headerlink\" title=\"主次版本号\"></a>主次版本号</h5><p>跟在魔数后面的就是 Java 的 主次版本号，Java 语言都是向下兼容的，如果低版本跑在高版本的 JVM 就会抛错处出来。</p>\n<h5 id=\"常量池计数器\"><a href=\"#常量池计数器\" class=\"headerlink\" title=\"常量池计数器\"></a>常量池计数器</h5><p>在版本号后面会有 2 个字节的计数器，顾名思义，是用来记录当前 class 常量池大小计数器。</p>\n<h5 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h5><p>常量池可以理解为整个文件的 <code>元数据</code>，就像是一个文件，文件名叫什么，什么时候创建的，文件多大，文件类型是什么。常量池包含了类的属性，方法，接口等一些类的描述信息。</p>\n<hr>\n<p>以上就是对 class 文件基础信息的简单总结，这个会持续更新，我也在学习中，希望大家能在使用 Java 时，可以知其然，并知其所以然。（如果有问题，大佬们请多多指正）</p>\n<hr>\n<h4 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h4><h5 id=\"java-文件\"><a href=\"#java-文件\" class=\"headerlink\" title=\".java 文件\"></a>.java 文件</h5><p>我写了一个很简单的类，来大概分析下 class 文件的对应关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassStructure</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i + a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            i = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            a = <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先使用 <code>javac ClassStructure.java</code> 编译文件，正常情况下会生成一个 ClassStructure.class 文件，然后使用  <code>javap -v ClassStructure.class</code> 命令查看文件信息，会生成下面的内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">G:\\jvm\\src\\main\\java\\com\\jihe\\jvm\\<span class=\"built_in\">test</span>&gt;javap -v ClassStructure.class</span><br><span class=\"line\">Classfile /G:/jvm/src/main/java/com/jihe/jvm/<span class=\"built_in\">test</span>/ClassStructure.class</span><br><span class=\"line\">  Last modified 2019-5-21; size 617 bytes</span><br><span class=\"line\">  MD5 checksum e664b24bf12decb3e4ff2dbcf2857a55</span><br><span class=\"line\">  Compiled from <span class=\"string\">&quot;ClassStructure.java&quot;</span></span><br><span class=\"line\">public class com.jihe.jvm.test.ClassStructure extends java.lang.Thread implements java.io.Serializable</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   <span class=\"comment\">#1 = Methodref          #6.#24         // java/lang/Thread.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">   <span class=\"comment\">#2 = Fieldref           #5.#25         // com/jihe/jvm/test/ClassStructure.i:I</span></span><br><span class=\"line\">   <span class=\"comment\">#3 = Fieldref           #5.#26         // com/jihe/jvm/test/ClassStructure.a:I</span></span><br><span class=\"line\">   <span class=\"comment\">#4 = Class              #27            // java/lang/Exception</span></span><br><span class=\"line\">   <span class=\"comment\">#5 = Class              #28            // com/jihe/jvm/test/ClassStructure</span></span><br><span class=\"line\">   <span class=\"comment\">#6 = Class              #29            // java/lang/Thread</span></span><br><span class=\"line\">   <span class=\"comment\">#7 = Class              #30            // java/io/Serializable</span></span><br><span class=\"line\">   <span class=\"comment\">#8 = Utf8               i</span></span><br><span class=\"line\">   <span class=\"comment\">#9 = Utf8               I</span></span><br><span class=\"line\">  <span class=\"comment\">#10 = Utf8               a</span></span><br><span class=\"line\">  <span class=\"comment\">#11 = Utf8               &lt;init&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#12 = Utf8               ()V</span></span><br><span class=\"line\">  <span class=\"comment\">#13 = Utf8               Code</span></span><br><span class=\"line\">  <span class=\"comment\">#14 = Utf8               LineNumberTable</span></span><br><span class=\"line\">  <span class=\"comment\">#15 = Utf8               inc</span></span><br><span class=\"line\">  <span class=\"comment\">#16 = Utf8               add</span></span><br><span class=\"line\">  <span class=\"comment\">#17 = Utf8               ()I</span></span><br><span class=\"line\">  <span class=\"comment\">#18 = Utf8               test</span></span><br><span class=\"line\">  <span class=\"comment\">#19 = Utf8               StackMapTable</span></span><br><span class=\"line\">  <span class=\"comment\">#20 = Class              #27            // java/lang/Exception</span></span><br><span class=\"line\">  <span class=\"comment\">#21 = Utf8               &lt;clinit&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">#22 = Utf8               SourceFile</span></span><br><span class=\"line\">  <span class=\"comment\">#23 = Utf8               ClassStructure.java</span></span><br><span class=\"line\">  <span class=\"comment\">#24 = NameAndType        #11:#12        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">  <span class=\"comment\">#25 = NameAndType        #8:#9          // i:I</span></span><br><span class=\"line\">  <span class=\"comment\">#26 = NameAndType        #10:#9         // a:I</span></span><br><span class=\"line\">  <span class=\"comment\">#27 = Utf8               java/lang/Exception</span></span><br><span class=\"line\">  <span class=\"comment\">#28 = Utf8               com/jihe/jvm/test/ClassStructure</span></span><br><span class=\"line\">  <span class=\"comment\">#29 = Utf8               java/lang/Thread</span></span><br><span class=\"line\">  <span class=\"comment\">#30 = Utf8               java/io/Serializable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.jihe.jvm.test.ClassStructure();                   // 构造器</span><br><span class=\"line\">    descriptor: ()                                             // 方法参数等描述</span><br><span class=\"line\">    flags: ACC_PUBLIC                                          // 访问标志</span><br><span class=\"line\">    Code:                                                         </span><br><span class=\"line\">      stack=2, locals=1, args_size=1                         </span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial <span class=\"comment\">#1                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">         4: aload_0</span><br><span class=\"line\">         5: iconst_0</span><br><span class=\"line\">         6: putfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         9: <span class=\"built_in\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 10: 0</span><br><span class=\"line\">        line 12: 4</span><br><span class=\"line\"></span><br><span class=\"line\">  public void inc();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=3, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: dup</span><br><span class=\"line\">         2: getfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         5: iconst_1</span><br><span class=\"line\">         6: iadd</span><br><span class=\"line\">         7: putfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">        10: <span class=\"built_in\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 16: 0</span><br><span class=\"line\">        line 17: 10</span><br><span class=\"line\"></span><br><span class=\"line\">  public int add();</span><br><span class=\"line\">    descriptor: ()I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: getfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         4: getstatic     <span class=\"comment\">#3                  // Field a:I</span></span><br><span class=\"line\">         7: iadd</span><br><span class=\"line\">         8: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 20: 0</span><br><span class=\"line\"></span><br><span class=\"line\">  public void <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: iconst_1</span><br><span class=\"line\">         2: putfield      <span class=\"comment\">#2                  // Field i:I</span></span><br><span class=\"line\">         5: goto          13</span><br><span class=\"line\">         8: astore_1</span><br><span class=\"line\">         9: iconst_2</span><br><span class=\"line\">        10: putstatic     <span class=\"comment\">#3                  // Field a:I</span></span><br><span class=\"line\">        13: <span class=\"built_in\">return</span></span><br><span class=\"line\">      Exception table:</span><br><span class=\"line\">         from    to  target <span class=\"built_in\">type</span></span><br><span class=\"line\">             0     5     8   Class java/lang/Exception</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 25: 0</span><br><span class=\"line\">        line 28: 5</span><br><span class=\"line\">        line 26: 8</span><br><span class=\"line\">        line 27: 9</span><br><span class=\"line\">        line 29: 13</span><br><span class=\"line\">      StackMapTable: number_of_entries = 2</span><br><span class=\"line\">        frame_type = 72 /* same_locals_1_stack_item */</span><br><span class=\"line\">          stack = [ class java/lang/Exception ]</span><br><span class=\"line\">        frame_type = 4 /* same */</span><br><span class=\"line\"></span><br><span class=\"line\">  static &#123;&#125;;                                 // 静态变量初始化方法</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=0, args_size=0</span><br><span class=\"line\">         0: iconst_1</span><br><span class=\"line\">         1: putstatic     <span class=\"comment\">#3                  // Field a:I</span></span><br><span class=\"line\">         4: <span class=\"built_in\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 13: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: <span class=\"string\">&quot;ClassStructure.java&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其实在这里看的话已经很明了了，在一些代码后面还有相应的注释，我们都知道一个类对象创建是在调用其构造方法的时候，那先从构造器开始看起。<br>在我注释构造器的地方就是这个类的构造方法，入口从 <code>invokespecial #1</code> 开始，它后面指向了 <code>#1</code>， 在常量池 <code>Constant pool</code> 中找到 <code>#1</code>：</p>\n<table>\n<thead>\n<tr>\n<th>编号说明</th>\n<th>编号</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#1 = Methodref</td>\n<td>#6.#24</td>\n<td>// java/lang/Thread.”<init>“:()V</init></td>\n</tr>\n<tr>\n<td>Methodref 方法的符号引用</td>\n<td>指向的常量池编号</td>\n<td>注释，#6 号和 #24 注释</td>\n</tr>\n</tbody></table>\n<p>在 class 中是按照编号的形式查找的，一级指向一级，常量池中保存了整个类的一些结构定义，相当于一个 <code>元数据</code> 部分。今年准备好好回归到底层部分，对 Java 底层部分进行比较深入的了解，字节码文件是熟悉的陌生人之一，所以 class 也是我学习的开始。</p>\n<h5 id=\"异常表\"><a href=\"#异常表\" class=\"headerlink\" title=\"异常表\"></a>异常表</h5><p>上面的类中 test 方法有一个异常处理。下面是代码部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">23</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"number\">24</span>       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"number\">25</span>           i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">26</span>       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"><span class=\"number\">27</span>           a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"number\">28</span>       &#125;</span><br><span class=\"line\"><span class=\"number\">29</span>   &#125;</span><br></pre></td></tr></table></figure>\n<p>使用 javap -v 命令可以看到如下异常表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception table:</span><br><span class=\"line\">         from    to  target type</span><br><span class=\"line\">             <span class=\"number\">0</span>     <span class=\"number\">5</span>     <span class=\"number\">8</span>   Class java/lang/Exception</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">25</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">28</span>: <span class=\"number\">5</span></span><br><span class=\"line\">        line <span class=\"number\">26</span>: <span class=\"number\">8</span></span><br><span class=\"line\">        line <span class=\"number\">27</span>: <span class=\"number\">9</span></span><br><span class=\"line\">        line <span class=\"number\">29</span>: <span class=\"number\">13</span></span><br></pre></td></tr></table></figure>\n<p>这个异常表对应到具体的代码大概是这样的：</p>\n<ol>\n<li>from 0: 对应下面的 LineNumberTable(LNT) ，<code>line 25: 0 </code> 0 对应的是源代码第 25 行，回到上面 Java 源代码可以看到我原本代码行数 <code>25           i = 1;</code> 行，就是异常开始。</li>\n<li>to 5: 这里和上面也是一样的，对应到 LNT 是 28 行，异常从 28 行出结束。</li>\n<li>target 8: 对应到具体源代码行是第 26 行，也就是具体的目标类型， Exception<br>上面就是异常表大概的对应关系。如果没有异常表将会导致 debug 断点时会出现问题，打印错误日志不会有行号。</li>\n</ol>\n<p>看到一句很有意思的话：you are my exception.</p>\n<hr>\n<center>不忘初心，方得始终</center>"},{"title":"manjaro安装","date":"2019-03-17T09:52:15.000Z","_content":"\n![](manjaro安装/manjaro.png)\n\n### manjaro 配置和软件安装\n\n一般做开发的话使用 Linux 是躲不开的，在学校的时候挺喜欢折腾，但也是局限于在虚拟机安装各种版本的 Linux 系统，但是有些 win 上必须应用软件在 Linux 找不到代替版，就一直只是当做服务器的角色，没有用在实际使用中，直到去年碰到 manjaro，就把常驻多年的 win 换成了 manjaro，使用起来很方便，应用软件基本都有了，安装过程也很简单，类 win 操作，这里也只是记录下配置和一些必要软件的安装命令，以防我哪天作死搞挂重装....o‿≖✧\n\n<!-- more -->\n\n> manjaro 安装比较简单，建议使用 [rufus](https://rufus.ie/)，还有 [manjaro](https://manjaro.org/) 官网地址。\n\n#### 配置\n\n**更新中国源**\n\n```\nsudo pacman-mirrors -i -c China -m rank\n## 弹出后选择清华或者中科大源\n```\n\n**配置 AUR 源**\n\n```\n[archlinuxcn]\n# SigLevel = Optional TrustedOnly\nSigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n\n[arch4edu]\nSigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/$arch\n```\n\n**更新并选择最快的源列表**\n\n```\nsudo pacman-mirrors -g \n```\n\n**更新数据源**\n\n```\nsudo pacman -Syy && sudo pacman -S archlinuxcn-keyring\n```\n\n#### 安装常用软件\n\n**安装 yaourt**\n\n```\nsudo pacman -S yaourt\n```\n**安装 拼音**\n\n```\n##### 安装搜狗输入法\nsudo pacman -S fcitx-im\nsudo pacman -S fcitx-configtool\nsudo pacman -S fcitx-sogoupinyin\n\n添加输入法配置文件 sudo vim ~/.xprofile\n\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\n\n\n如果安装失败的话执行下面的方式安装\nsudo yaourt sogou\n```\n\n**安装 chrome**\n\n```\nsudo pacman -S google-chrome\n```\n\n**安装深度截图**\n\n```\nsudo pacman -S deepin-screenshot\n```\n\n**安装 TIM**\n\n```\nsudo pacman -S deepin-wine-tim\n```\n\n**安装网易云音乐**\n\n```\nsudo pacman -S netease-cloud-music\n```\n\n**安装 pdf 阅读器**\n\n```\nsudo yaourt foxit\n```\n\n**安装下载工具**\n\n```\nsudo yaourt -S uget \n```\n\n**安装 zsh**\n\n```\n#最新版本已经默认安装了。\nsudo pacman -S zsh\n# 安装oh-my-zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n# 更换默认的shell\nchsh -s /bin/zsh\n```\n**安装 wechat**\n\n```\nsudo pacman -S electronic-wechat\t\n```\n\n**安装 git**\n\n```\nsudo pacman -S git\n```\n\n**安装 wps**\n\n```\nsudo pacman -S wps-office\n\n```\n\n**安装护眼软件**\n\n```\nsudo pacman -S xflux-gui-git\n```\n\n**安装 vscode**\n\n```\nsudo pacman -S visual-studio-code-bin\n```\n\n**安装 JDK**\n\n```\nsudo pacman -S jdk8\n### 配置环境变量\nexport JAVA_HOME=/usr/lib/jvm/default\nexport JRE_HOME=${JAVA_HOEM}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib \n```\n\n**卸载 JDK**\n```\npacman -R jdk8\n```\n\n**安装　idea**\n\n```\n在官网下载安装包解压\ntar　-zxcf　ideaxxx.tar.gz\n进到　./bin　目录执行文件\n./idea.sh\n完成安装\n```\n\n**安装 svn 客户端 kdesvn**\n```\nsudo pacman -S kdesvn\n```\n**安装 mongodb**\n``` bash\n$ yay -S mongodb\n## 配置\n$ sudo vim /etc/mongodb.conf # 编辑 mongodb 数据库路径\n\nsudo chmod  u=rw /home/mj/mongodb  #  设置读写权限\nsudo chown -R mongodb:  /home/mj/mongodb  # 更改用户\n\n```\n**安装 docker**\n``` bash\nsudo pacman -S docker\n\nsudo systemctl start docker.service # 启动服务 \n\nsudo systemctl enable docker.service # 设置 docker 自启动\n\n```\n\n\n**安装 ss**\n\n```\nsudo pacman -S shadowsocks-qt5\n```\n\n**配置 switchyomega**\n\n```\n### 下载\nhttps://github.com/FelisCatus/SwitchyOmega/releases \n配置方式网上有很多博客\n\n```\n\n**pacman 命令**\n\n```\npacman -S  软件名   #安装\npacman -Syu    #更新\npacman -R 软件名    #移除\n```\n\n#### other\n\n**设置　ll 命令**\n\n``` bash\n编辑　~/.bashrc\n$ vim ~/.bashrc\nalias rm='rm -i'\nalias cp='cp -i'\nalias mv='mv -i'\nalias ll='ls -i'\n保存生效　\n$ source ~/.bashrc\n```\n\n**设置主目录为英文**\n\n``` bash\n$ sudo pacman -S xdg-user-dirs-gtk\n$ export LANG=en_US\n$ xdg-user-dirs-gtk-update\n$ #然后会有个窗口提示语言更改，更新名称即可\n$ export LANG=zh_CN.UTF-8\n$ #然后重启电脑如果提示语言更改，保留旧的名称即可\n```\n\n**设置环境变量**\n\n``` bash\nexport PATH=/usr/local/...\n```\n\n**安装 flash player**\n\n```bash\n# 安装好之后重启浏览器就可以正常访问了\nyaourt -S flashplugin pepper-flash\n```\n\n**远程连接服务器**\n```bash\n# 使用 ssh 连接\nssh username@hostaddress\n```\n补充 ing...\n\n***\n\n<center>秋天来了，老家落叶的样子又错过了。最怕提及的是，深秋早晨的白霜更有奶奶的背影</center>","source":"_posts/manjaro安装.md","raw":"---\ntitle: manjaro安装\ndate: 2019-03-17 17:52:15\ncategory: OS\ntags: manjaro\n\n---\n\n![](manjaro安装/manjaro.png)\n\n### manjaro 配置和软件安装\n\n一般做开发的话使用 Linux 是躲不开的，在学校的时候挺喜欢折腾，但也是局限于在虚拟机安装各种版本的 Linux 系统，但是有些 win 上必须应用软件在 Linux 找不到代替版，就一直只是当做服务器的角色，没有用在实际使用中，直到去年碰到 manjaro，就把常驻多年的 win 换成了 manjaro，使用起来很方便，应用软件基本都有了，安装过程也很简单，类 win 操作，这里也只是记录下配置和一些必要软件的安装命令，以防我哪天作死搞挂重装....o‿≖✧\n\n<!-- more -->\n\n> manjaro 安装比较简单，建议使用 [rufus](https://rufus.ie/)，还有 [manjaro](https://manjaro.org/) 官网地址。\n\n#### 配置\n\n**更新中国源**\n\n```\nsudo pacman-mirrors -i -c China -m rank\n## 弹出后选择清华或者中科大源\n```\n\n**配置 AUR 源**\n\n```\n[archlinuxcn]\n# SigLevel = Optional TrustedOnly\nSigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n\n[arch4edu]\nSigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/$arch\n```\n\n**更新并选择最快的源列表**\n\n```\nsudo pacman-mirrors -g \n```\n\n**更新数据源**\n\n```\nsudo pacman -Syy && sudo pacman -S archlinuxcn-keyring\n```\n\n#### 安装常用软件\n\n**安装 yaourt**\n\n```\nsudo pacman -S yaourt\n```\n**安装 拼音**\n\n```\n##### 安装搜狗输入法\nsudo pacman -S fcitx-im\nsudo pacman -S fcitx-configtool\nsudo pacman -S fcitx-sogoupinyin\n\n添加输入法配置文件 sudo vim ~/.xprofile\n\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\n\n\n如果安装失败的话执行下面的方式安装\nsudo yaourt sogou\n```\n\n**安装 chrome**\n\n```\nsudo pacman -S google-chrome\n```\n\n**安装深度截图**\n\n```\nsudo pacman -S deepin-screenshot\n```\n\n**安装 TIM**\n\n```\nsudo pacman -S deepin-wine-tim\n```\n\n**安装网易云音乐**\n\n```\nsudo pacman -S netease-cloud-music\n```\n\n**安装 pdf 阅读器**\n\n```\nsudo yaourt foxit\n```\n\n**安装下载工具**\n\n```\nsudo yaourt -S uget \n```\n\n**安装 zsh**\n\n```\n#最新版本已经默认安装了。\nsudo pacman -S zsh\n# 安装oh-my-zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n# 更换默认的shell\nchsh -s /bin/zsh\n```\n**安装 wechat**\n\n```\nsudo pacman -S electronic-wechat\t\n```\n\n**安装 git**\n\n```\nsudo pacman -S git\n```\n\n**安装 wps**\n\n```\nsudo pacman -S wps-office\n\n```\n\n**安装护眼软件**\n\n```\nsudo pacman -S xflux-gui-git\n```\n\n**安装 vscode**\n\n```\nsudo pacman -S visual-studio-code-bin\n```\n\n**安装 JDK**\n\n```\nsudo pacman -S jdk8\n### 配置环境变量\nexport JAVA_HOME=/usr/lib/jvm/default\nexport JRE_HOME=${JAVA_HOEM}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib \n```\n\n**卸载 JDK**\n```\npacman -R jdk8\n```\n\n**安装　idea**\n\n```\n在官网下载安装包解压\ntar　-zxcf　ideaxxx.tar.gz\n进到　./bin　目录执行文件\n./idea.sh\n完成安装\n```\n\n**安装 svn 客户端 kdesvn**\n```\nsudo pacman -S kdesvn\n```\n**安装 mongodb**\n``` bash\n$ yay -S mongodb\n## 配置\n$ sudo vim /etc/mongodb.conf # 编辑 mongodb 数据库路径\n\nsudo chmod  u=rw /home/mj/mongodb  #  设置读写权限\nsudo chown -R mongodb:  /home/mj/mongodb  # 更改用户\n\n```\n**安装 docker**\n``` bash\nsudo pacman -S docker\n\nsudo systemctl start docker.service # 启动服务 \n\nsudo systemctl enable docker.service # 设置 docker 自启动\n\n```\n\n\n**安装 ss**\n\n```\nsudo pacman -S shadowsocks-qt5\n```\n\n**配置 switchyomega**\n\n```\n### 下载\nhttps://github.com/FelisCatus/SwitchyOmega/releases \n配置方式网上有很多博客\n\n```\n\n**pacman 命令**\n\n```\npacman -S  软件名   #安装\npacman -Syu    #更新\npacman -R 软件名    #移除\n```\n\n#### other\n\n**设置　ll 命令**\n\n``` bash\n编辑　~/.bashrc\n$ vim ~/.bashrc\nalias rm='rm -i'\nalias cp='cp -i'\nalias mv='mv -i'\nalias ll='ls -i'\n保存生效　\n$ source ~/.bashrc\n```\n\n**设置主目录为英文**\n\n``` bash\n$ sudo pacman -S xdg-user-dirs-gtk\n$ export LANG=en_US\n$ xdg-user-dirs-gtk-update\n$ #然后会有个窗口提示语言更改，更新名称即可\n$ export LANG=zh_CN.UTF-8\n$ #然后重启电脑如果提示语言更改，保留旧的名称即可\n```\n\n**设置环境变量**\n\n``` bash\nexport PATH=/usr/local/...\n```\n\n**安装 flash player**\n\n```bash\n# 安装好之后重启浏览器就可以正常访问了\nyaourt -S flashplugin pepper-flash\n```\n\n**远程连接服务器**\n```bash\n# 使用 ssh 连接\nssh username@hostaddress\n```\n补充 ing...\n\n***\n\n<center>秋天来了，老家落叶的样子又错过了。最怕提及的是，深秋早晨的白霜更有奶奶的背影</center>","slug":"manjaro安装","published":1,"updated":"2021-01-31T06:31:35.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowg000prh1tbkz817mh","content":"<p><img src=\"/2019/03/17/manjaro%E5%AE%89%E8%A3%85/manjaro.png\"></p>\n<h3 id=\"manjaro-配置和软件安装\"><a href=\"#manjaro-配置和软件安装\" class=\"headerlink\" title=\"manjaro 配置和软件安装\"></a>manjaro 配置和软件安装</h3><p>一般做开发的话使用 Linux 是躲不开的，在学校的时候挺喜欢折腾，但也是局限于在虚拟机安装各种版本的 Linux 系统，但是有些 win 上必须应用软件在 Linux 找不到代替版，就一直只是当做服务器的角色，没有用在实际使用中，直到去年碰到 manjaro，就把常驻多年的 win 换成了 manjaro，使用起来很方便，应用软件基本都有了，安装过程也很简单，类 win 操作，这里也只是记录下配置和一些必要软件的安装命令，以防我哪天作死搞挂重装….o‿≖✧</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>manjaro 安装比较简单，建议使用 <a class=\"link\" href=\"https://rufus.ie/\">rufus<i class=\"fas fa-external-link-alt\"></i></a>，还有 <a class=\"link\" href=\"https://manjaro.org/\">manjaro<i class=\"fas fa-external-link-alt\"></i></a> 官网地址。</p>\n</blockquote>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p><strong>更新中国源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -i -c China -m rank</span><br><span class=\"line\">## 弹出后选择清华或者中科大源</span><br></pre></td></tr></table></figure>\n<p><strong>配置 AUR 源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\"># SigLevel &#x3D; Optional TrustedOnly</span><br><span class=\"line\">SigLevel &#x3D; Never</span><br><span class=\"line\">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br><span class=\"line\"></span><br><span class=\"line\">[arch4edu]</span><br><span class=\"line\">SigLevel &#x3D; Never</span><br><span class=\"line\">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;arch4edu&#x2F;$arch</span><br></pre></td></tr></table></figure>\n<p><strong>更新并选择最快的源列表</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -g </span><br></pre></td></tr></table></figure>\n<p><strong>更新数据源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件\"></a>安装常用软件</h4><p><strong>安装 yaourt</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure>\n<p><strong>安装 拼音</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##### 安装搜狗输入法</span><br><span class=\"line\">sudo pacman -S fcitx-im</span><br><span class=\"line\">sudo pacman -S fcitx-configtool</span><br><span class=\"line\">sudo pacman -S fcitx-sogoupinyin</span><br><span class=\"line\"></span><br><span class=\"line\">添加输入法配置文件 sudo vim ~&#x2F;.xprofile</span><br><span class=\"line\"></span><br><span class=\"line\">export GTK_IM_MODULE&#x3D;fcitx</span><br><span class=\"line\">export QT_IM_MODULE&#x3D;fcitx</span><br><span class=\"line\">export XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">如果安装失败的话执行下面的方式安装</span><br><span class=\"line\">sudo yaourt sogou</span><br></pre></td></tr></table></figure>\n<p><strong>安装 chrome</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure>\n<p><strong>安装深度截图</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S deepin-screenshot</span><br></pre></td></tr></table></figure>\n<p><strong>安装 TIM</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S deepin-wine-tim</span><br></pre></td></tr></table></figure>\n<p><strong>安装网易云音乐</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>\n<p><strong>安装 pdf 阅读器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yaourt foxit</span><br></pre></td></tr></table></figure>\n<p><strong>安装下载工具</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yaourt -S uget </span><br></pre></td></tr></table></figure>\n<p><strong>安装 zsh</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#最新版本已经默认安装了。</span><br><span class=\"line\">sudo pacman -S zsh</span><br><span class=\"line\"># 安装oh-my-zsh</span><br><span class=\"line\">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class=\"line\"># 更换默认的shell</span><br><span class=\"line\">chsh -s &#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure>\n<p><strong>安装 wechat</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S electronic-wechat\t</span><br></pre></td></tr></table></figure>\n<p><strong>安装 git</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S git</span><br></pre></td></tr></table></figure>\n<p><strong>安装 wps</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wps-office</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>安装护眼软件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S xflux-gui-git</span><br></pre></td></tr></table></figure>\n<p><strong>安装 vscode</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>\n<p><strong>安装 JDK</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S jdk8</span><br><span class=\"line\">### 配置环境变量</span><br><span class=\"line\">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;default</span><br><span class=\"line\">export JRE_HOME&#x3D;$&#123;JAVA_HOEM&#125;&#x2F;jre</span><br><span class=\"line\">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib </span><br></pre></td></tr></table></figure>\n<p><strong>卸载 JDK</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -R jdk8</span><br></pre></td></tr></table></figure>\n<p><strong>安装　idea</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在官网下载安装包解压</span><br><span class=\"line\">tar　-zxcf　ideaxxx.tar.gz</span><br><span class=\"line\">进到　.&#x2F;bin　目录执行文件</span><br><span class=\"line\">.&#x2F;idea.sh</span><br><span class=\"line\">完成安装</span><br></pre></td></tr></table></figure>\n<p><strong>安装 svn 客户端 kdesvn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S kdesvn</span><br></pre></td></tr></table></figure>\n<p><strong>安装 mongodb</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yay -S mongodb</span><br><span class=\"line\"><span class=\"comment\">## 配置</span></span><br><span class=\"line\">$ sudo vim /etc/mongodb.conf <span class=\"comment\"># 编辑 mongodb 数据库路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod  u=rw /home/mj/mongodb  <span class=\"comment\">#  设置读写权限</span></span><br><span class=\"line\">sudo chown -R mongodb:  /home/mj/mongodb  <span class=\"comment\"># 更改用户</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>安装 docker</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S docker</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start docker.service <span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker.service <span class=\"comment\"># 设置 docker 自启动</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>安装 ss</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S shadowsocks-qt5</span><br></pre></td></tr></table></figure>\n<p><strong>配置 switchyomega</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 下载</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FelisCatus&#x2F;SwitchyOmega&#x2F;releases </span><br><span class=\"line\">配置方式网上有很多博客</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>pacman 命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S  软件名   #安装</span><br><span class=\"line\">pacman -Syu    #更新</span><br><span class=\"line\">pacman -R 软件名    #移除</span><br></pre></td></tr></table></figure>\n<h4 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h4><p><strong>设置　ll 命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑　~/.bashrc</span><br><span class=\"line\">$ vim ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">&#x27;rm -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">&#x27;cp -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">&#x27;mv -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">&#x27;ls -i&#x27;</span></span><br><span class=\"line\">保存生效　</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p><strong>设置主目录为英文</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S xdg-user-dirs-gtk</span><br><span class=\"line\">$ <span class=\"built_in\">export</span> LANG=en_US</span><br><span class=\"line\">$ xdg-user-dirs-gtk-update</span><br><span class=\"line\">$ <span class=\"comment\">#然后会有个窗口提示语言更改，更新名称即可</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> LANG=zh_CN.UTF-8</span><br><span class=\"line\">$ <span class=\"comment\">#然后重启电脑如果提示语言更改，保留旧的名称即可</span></span><br></pre></td></tr></table></figure>\n<p><strong>设置环境变量</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/...</span><br></pre></td></tr></table></figure>\n<p><strong>安装 flash player</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装好之后重启浏览器就可以正常访问了</span></span><br><span class=\"line\">yaourt -S flashplugin pepper-flash</span><br></pre></td></tr></table></figure>\n<p><strong>远程连接服务器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 ssh 连接</span></span><br><span class=\"line\">ssh username@hostaddress</span><br></pre></td></tr></table></figure>\n<p>补充 ing…</p>\n<hr>\n<center>秋天来了，老家落叶的样子又错过了。最怕提及的是，深秋早晨的白霜更有奶奶的背影</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/03/17/manjaro%E5%AE%89%E8%A3%85/manjaro.png\"></p>\n<h3 id=\"manjaro-配置和软件安装\"><a href=\"#manjaro-配置和软件安装\" class=\"headerlink\" title=\"manjaro 配置和软件安装\"></a>manjaro 配置和软件安装</h3><p>一般做开发的话使用 Linux 是躲不开的，在学校的时候挺喜欢折腾，但也是局限于在虚拟机安装各种版本的 Linux 系统，但是有些 win 上必须应用软件在 Linux 找不到代替版，就一直只是当做服务器的角色，没有用在实际使用中，直到去年碰到 manjaro，就把常驻多年的 win 换成了 manjaro，使用起来很方便，应用软件基本都有了，安装过程也很简单，类 win 操作，这里也只是记录下配置和一些必要软件的安装命令，以防我哪天作死搞挂重装….o‿≖✧</p>","more":"<blockquote>\n<p>manjaro 安装比较简单，建议使用 <a class=\"link\" href=\"https://rufus.ie/\">rufus<i class=\"fas fa-external-link-alt\"></i></a>，还有 <a class=\"link\" href=\"https://manjaro.org/\">manjaro<i class=\"fas fa-external-link-alt\"></i></a> 官网地址。</p>\n</blockquote>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p><strong>更新中国源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -i -c China -m rank</span><br><span class=\"line\">## 弹出后选择清华或者中科大源</span><br></pre></td></tr></table></figure>\n<p><strong>配置 AUR 源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\"># SigLevel &#x3D; Optional TrustedOnly</span><br><span class=\"line\">SigLevel &#x3D; Never</span><br><span class=\"line\">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br><span class=\"line\"></span><br><span class=\"line\">[arch4edu]</span><br><span class=\"line\">SigLevel &#x3D; Never</span><br><span class=\"line\">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;arch4edu&#x2F;$arch</span><br></pre></td></tr></table></figure>\n<p><strong>更新并选择最快的源列表</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -g </span><br></pre></td></tr></table></figure>\n<p><strong>更新数据源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件\"></a>安装常用软件</h4><p><strong>安装 yaourt</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure>\n<p><strong>安装 拼音</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##### 安装搜狗输入法</span><br><span class=\"line\">sudo pacman -S fcitx-im</span><br><span class=\"line\">sudo pacman -S fcitx-configtool</span><br><span class=\"line\">sudo pacman -S fcitx-sogoupinyin</span><br><span class=\"line\"></span><br><span class=\"line\">添加输入法配置文件 sudo vim ~&#x2F;.xprofile</span><br><span class=\"line\"></span><br><span class=\"line\">export GTK_IM_MODULE&#x3D;fcitx</span><br><span class=\"line\">export QT_IM_MODULE&#x3D;fcitx</span><br><span class=\"line\">export XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">如果安装失败的话执行下面的方式安装</span><br><span class=\"line\">sudo yaourt sogou</span><br></pre></td></tr></table></figure>\n<p><strong>安装 chrome</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure>\n<p><strong>安装深度截图</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S deepin-screenshot</span><br></pre></td></tr></table></figure>\n<p><strong>安装 TIM</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S deepin-wine-tim</span><br></pre></td></tr></table></figure>\n<p><strong>安装网易云音乐</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>\n<p><strong>安装 pdf 阅读器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yaourt foxit</span><br></pre></td></tr></table></figure>\n<p><strong>安装下载工具</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yaourt -S uget </span><br></pre></td></tr></table></figure>\n<p><strong>安装 zsh</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#最新版本已经默认安装了。</span><br><span class=\"line\">sudo pacman -S zsh</span><br><span class=\"line\"># 安装oh-my-zsh</span><br><span class=\"line\">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class=\"line\"># 更换默认的shell</span><br><span class=\"line\">chsh -s &#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure>\n<p><strong>安装 wechat</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S electronic-wechat\t</span><br></pre></td></tr></table></figure>\n<p><strong>安装 git</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S git</span><br></pre></td></tr></table></figure>\n<p><strong>安装 wps</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wps-office</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>安装护眼软件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S xflux-gui-git</span><br></pre></td></tr></table></figure>\n<p><strong>安装 vscode</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>\n<p><strong>安装 JDK</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S jdk8</span><br><span class=\"line\">### 配置环境变量</span><br><span class=\"line\">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;default</span><br><span class=\"line\">export JRE_HOME&#x3D;$&#123;JAVA_HOEM&#125;&#x2F;jre</span><br><span class=\"line\">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib </span><br></pre></td></tr></table></figure>\n<p><strong>卸载 JDK</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -R jdk8</span><br></pre></td></tr></table></figure>\n<p><strong>安装　idea</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在官网下载安装包解压</span><br><span class=\"line\">tar　-zxcf　ideaxxx.tar.gz</span><br><span class=\"line\">进到　.&#x2F;bin　目录执行文件</span><br><span class=\"line\">.&#x2F;idea.sh</span><br><span class=\"line\">完成安装</span><br></pre></td></tr></table></figure>\n<p><strong>安装 svn 客户端 kdesvn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S kdesvn</span><br></pre></td></tr></table></figure>\n<p><strong>安装 mongodb</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yay -S mongodb</span><br><span class=\"line\"><span class=\"comment\">## 配置</span></span><br><span class=\"line\">$ sudo vim /etc/mongodb.conf <span class=\"comment\"># 编辑 mongodb 数据库路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod  u=rw /home/mj/mongodb  <span class=\"comment\">#  设置读写权限</span></span><br><span class=\"line\">sudo chown -R mongodb:  /home/mj/mongodb  <span class=\"comment\"># 更改用户</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>安装 docker</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S docker</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start docker.service <span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker.service <span class=\"comment\"># 设置 docker 自启动</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>安装 ss</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S shadowsocks-qt5</span><br></pre></td></tr></table></figure>\n<p><strong>配置 switchyomega</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 下载</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FelisCatus&#x2F;SwitchyOmega&#x2F;releases </span><br><span class=\"line\">配置方式网上有很多博客</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>pacman 命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S  软件名   #安装</span><br><span class=\"line\">pacman -Syu    #更新</span><br><span class=\"line\">pacman -R 软件名    #移除</span><br></pre></td></tr></table></figure>\n<h4 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h4><p><strong>设置　ll 命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑　~/.bashrc</span><br><span class=\"line\">$ vim ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">&#x27;rm -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> cp=<span class=\"string\">&#x27;cp -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mv=<span class=\"string\">&#x27;mv -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">&#x27;ls -i&#x27;</span></span><br><span class=\"line\">保存生效　</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p><strong>设置主目录为英文</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S xdg-user-dirs-gtk</span><br><span class=\"line\">$ <span class=\"built_in\">export</span> LANG=en_US</span><br><span class=\"line\">$ xdg-user-dirs-gtk-update</span><br><span class=\"line\">$ <span class=\"comment\">#然后会有个窗口提示语言更改，更新名称即可</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> LANG=zh_CN.UTF-8</span><br><span class=\"line\">$ <span class=\"comment\">#然后重启电脑如果提示语言更改，保留旧的名称即可</span></span><br></pre></td></tr></table></figure>\n<p><strong>设置环境变量</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/...</span><br></pre></td></tr></table></figure>\n<p><strong>安装 flash player</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装好之后重启浏览器就可以正常访问了</span></span><br><span class=\"line\">yaourt -S flashplugin pepper-flash</span><br></pre></td></tr></table></figure>\n<p><strong>远程连接服务器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 ssh 连接</span></span><br><span class=\"line\">ssh username@hostaddress</span><br></pre></td></tr></table></figure>\n<p>补充 ing…</p>\n<hr>\n<center>秋天来了，老家落叶的样子又错过了。最怕提及的是，深秋早晨的白霜更有奶奶的背影</center>"},{"title":"manjaro编译openjdk","date":"2019-04-09T15:01:53.000Z","_content":"\n![](manjaro编译openjdk/openjdk.png)\n\n刚接触到 Java 时就被一些陌生的英文缩写吓到了，什么 jdk,jre,jvm 等等。但是随着后面对它的了解越多，对这些基础的概念越来越清晰，对这些概念也有了一些认识。 jdk 就是我们经常使用的开发工具包，它不仅包含 jre,还包含了编译器等其他基础包，而 jre 则是 Java 代码运行的最小环境。而 jvm 则是 Java 虚拟机， “一处编译，到处运行” 就是因为这位大佬的存在。从学习开始到现在一直都和它们间接接触，但是对它们的了解还是有很大的局限，今天拉了 openjdk 的源码准备好好研究一下。\n\n<!-- more -->\n#### 环境\n\n|    ev  |  version    |   \n| ---- | ---- |    \n|    os  |  Mangaro 18.0.1    |       \n|    openjdk  |    jdk8u  |      \n|boot jdk| 1.8.0_202|\n\n\n\n#### 安装依赖\n\n下载 mercurial 来克隆 jdk 代码\n\n``` bash\nsudo pacman -S mercurial\n\n```\n\n克隆代码到指定目录\n``` bash\n# 先进入到要放目标目录\nsudo hg clone http://hg.openjdk.java.net/jdk8u/jdk8u/\n```\n当然也可以在官网下载代码，官网[地址](http://hg.openjdk.java.net/jdk8u/jdk8u/)在这里，进去之后左侧有 gz 的包，直接下载。我选择的是第一种方式，直接在仓库克隆代码到本地。\n\n#### 编译\n\n##### README\n先看下 README 文件，这个里面已经有详细的说明\n``` bash\ncat ./README\n\nREADME:\n  This file should be located at the top of the OpenJDK Mercurial root\n  repository. A full OpenJDK repository set (forest) should also include\n  the following 6 nested repositories:\n    \"jdk\", \"hotspot\", \"langtools\", \"corba\", \"jaxws\"  and \"jaxp\".\n\n  The root repository can be obtained with something like:\n    hg clone http://hg.openjdk.java.net/jdk8/jdk8 openjdk8\n  \n  You can run the get_source.sh script located in the root repository to get\n  the other needed repositories:\n    cd openjdk8 && sh ./get_source.sh\n\n  People unfamiliar with Mercurial should read the first few chapters of\n  the Mercurial book: http://hgbook.red-bean.com/read/\n\n  See http://openjdk.java.net/ for more information about OpenJDK.\n\nSimple Build Instructions:\n  \n  0. Get the necessary system software/packages installed on your system, see\n     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html\n\n  1. If you don't have a jdk7u7 or newer jdk, download and install it from\n     http://java.sun.com/javase/downloads/index.jsp\n     Add the /bin directory of this installation to your PATH environment\n     variable.\n\n  2. Configure the build:\n       bash ./configure\n  \n  3. Build the OpenJDK:\n       make all\n     The resulting JDK image should be found in build/*/images/j2sdk-image\n\nwhere make is GNU make 3.81 or newer, /usr/bin/make on Linux usually\nis 3.81 or newer. Note that on Solaris, GNU make is called \"gmake\".\n\nComplete details are available in the file:\n     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html\n\n```\n那就按照 README 文件的步骤来执行编译\n\n##### Getting the Source\n``` bash\n# 进入目录\ncd jdk8u\n# 执行脚本,拉取所有代码\nbash ./get_source.sh\n\n```\n下载完成之后目录结构是这样\n``` bash \n-rw-r--r--  1 root root   1522  4月 14 17:11 ASSEMBLY_EXCEPTION\ndrwxr-xr-x  6 root root   4096  4月 14 17:11 common\n-rw-r--r--  1 root root   1588  4月 14 17:11 configure\ndrwxr-xr-x  6 root root   4096  4月 14 17:56 corba\n-rw-r--r--  1 root root   3107  4月 14 17:11 get_source.sh\ndrwxr-xr-x  8 root root   4096  4月 14 18:06 hotspot\ndrwxr-xr-x  7 root root   4096  4月 14 17:15 jaxp\ndrwxr-xr-x  7 root root   4096  4月 14 17:15 jaxws\ndrwxr-xr-x  7 root root   4096  4月 14 18:46 jdk\ndrwxr-xr-x  7 root root   4096  4月 14 18:04 langtools\n-rw-r--r--  1 root root  19274  4月 14 17:11 LICENSE\ndrwxr-xr-x  6 root root   4096  4月 14 17:11 make\n-rw-r--r--  1 root root   6232  4月 14 17:11 Makefile\ndrwxr-xr-x 13 root root   4096  4月 14 17:27 nashorn\n-rw-r--r--  1 root root   1549  4月 14 17:11 README\n-rw-r--r--  1 root root 129333  4月 14 17:11 README-builds.html\ndrwxr-xr-x  3 root root   4096  4月 14 17:11 test\n-rw-r--r--  1 root root 152511  4月 14 17:11 THIRD_PARTY_README\n\n```\n不过下载代码的时候我遇到了多次中断回滚，如果发生中断，会有警告在终端提醒， **上面的脚本可以重复拉取。如果有更新的话会自动拉取最新代码**。\n\n##### Building\n``` bash \n# 这一步会检查你的 /usr/bin 下的的命令是否齐全，如果缺少会抛错误出来，提示缺少某个命令，只需要安装再次执行就好\nbash ./configure\n\n# 如果有以下信息打印出来，说明第一步已经执行完成\nA new configuration has been successfully created in\n/usr/local/jdk8u/build/linux-x86_64-normal-server-release\nusing default settings.\n\nConfiguration summary:\n* Debug level:    release\n* JDK variant:    normal\n* JVM variants:   server\n* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64\n\nTools summary:\n* Boot JDK:       java version \"1.8.0_202\" Java(TM) SE Runtime Environment (build 1.8.0_202-b08) Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)  (at /usr/lib/jvm/default)\n* Toolchain:      gcc (GNU Compiler Collection)\n* C Compiler:     Version 8.2.1 (at /usr/bin/gcc)\n* C++ Compiler:   Version 8.2.1 (at /usr/bin/g++)\n\nBuild performance summary:\n* Cores to use:   7\n* Memory limit:   7859 MB\n\n```\n编译\n\n``` bash\nmake all\n```\n\n##### 完成\n\n编译完成之后会打印下面的信息\n``` bash\n----- Build times -------\nStart 2019-04-14 22:26:22\nEnd   2019-04-14 22:36:39\n00:00:18 corba\n00:00:14 demos\n00:02:26 docs\n00:03:32 hotspot\n00:00:18 images\n00:00:13 jaxp\n00:00:17 jaxws\n00:02:16 jdk\n00:00:25 langtools\n00:00:17 nashorn\n00:10:17 TOTAL\n-------------------------\nFinished building OpenJDK for target 'all'\n```\n编译时会出现各种问题，可能是依赖版本，或者是包下载不下来导致问题，还有写是因为配置文件设置的问题。下面是我碰到的几个问题\n\n##### 设置环境变量\n\n现在已经拥有一个自己的 jdk 了，设置环境变量使用起来。\n\n先在 jdk8u/build/linux-x86_64-normal-server-release/images 下找到 j2sdk-image 目录，这个就是编译好的 jdk，把它复制到自己的 java 目录下，然后设置环境变量。 \n``` bash\n# 先卸载之前配置的 bootjdk 之后然后设置新的\n# 设置环境变量\nsudo vim /etc/profile\n# JDK\nexport JAVA_HOME=/usr/local/java\nexport JRE_HOME=${JAVA_HOEM}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib \n\n```\n重启配置文件\n source /etc/profile\n\n现在 java 环境变量已经设置好了，输入 java -version 可以查看到环境下面信息，而且还有**自己的机器名**在上面，开心一分钟\n``` bash\n➜  ~ java -version\nopenjdk version \"1.8.0-internal\"\nOpenJDK Runtime Environment (build 1.8.0-internal-chenkui_2019_04_14_22_21-b00)\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\n```\n\n##### 问题\n\n在编译时出现的 \n\n```\nWarning: ××× ‘int readdir_r(DIR*, dirent*, dirent**)’ is deprecated (declared at /usr/include/dirent.h:183) [-Wdeprecated-declarations] ×××\n```\n解决方案\n``` bash\ncd /usr/local/jdk8u/hotspot/make/linux/makefiles\nvim ./gcc.make\n# 编辑 gcc.make\n# 找到 WARNINGS_ARE_ERRORS = -Werror 修改为\nWARNINGS_ARE_ERRORS = -Wno-all\n\n# WARNING_FLAGS = -Wno-deprecated-declarations -Wno-unused-parameter -Wno-sign-compare -Wno-error 修改为\n\nWARNING_FLAGS = -w\n\n```\n参考[链接](https://blog.csdn.net/desiyonan/article/details/80802066) 这个问题是解决最没有头绪的一个，不过在编译的过程中要仔细看报错信息，这样方便 Google 时能准确的找到问题所在。现在就可以愉快的调试源码来玩一下了。\n\n\n#### the end\n记得第一次接触 Java 时，在命令行打印出 `hello world` 时真的很疑惑，就这么一个东西，能有什么用。但是随着一点一点的了解，慢慢发现它的强大之处。每天能进步一点，一年后看今天碰到的问题，其实也不难解决，不积跬步无以至千里，要加油啊！！！  ∩▂∩\n\n官网提供的编译[文档](http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html)\n\n***\n\n<center>我最爱海南，每个地方都有挥之不去的记忆</center>","source":"_posts/manjaro编译openjdk.md","raw":"---\ntitle: manjaro编译openjdk\ndate: 2019-04-09 23:01:53\ntags: openjdk\ncategory: openjdk\n---\n\n![](manjaro编译openjdk/openjdk.png)\n\n刚接触到 Java 时就被一些陌生的英文缩写吓到了，什么 jdk,jre,jvm 等等。但是随着后面对它的了解越多，对这些基础的概念越来越清晰，对这些概念也有了一些认识。 jdk 就是我们经常使用的开发工具包，它不仅包含 jre,还包含了编译器等其他基础包，而 jre 则是 Java 代码运行的最小环境。而 jvm 则是 Java 虚拟机， “一处编译，到处运行” 就是因为这位大佬的存在。从学习开始到现在一直都和它们间接接触，但是对它们的了解还是有很大的局限，今天拉了 openjdk 的源码准备好好研究一下。\n\n<!-- more -->\n#### 环境\n\n|    ev  |  version    |   \n| ---- | ---- |    \n|    os  |  Mangaro 18.0.1    |       \n|    openjdk  |    jdk8u  |      \n|boot jdk| 1.8.0_202|\n\n\n\n#### 安装依赖\n\n下载 mercurial 来克隆 jdk 代码\n\n``` bash\nsudo pacman -S mercurial\n\n```\n\n克隆代码到指定目录\n``` bash\n# 先进入到要放目标目录\nsudo hg clone http://hg.openjdk.java.net/jdk8u/jdk8u/\n```\n当然也可以在官网下载代码，官网[地址](http://hg.openjdk.java.net/jdk8u/jdk8u/)在这里，进去之后左侧有 gz 的包，直接下载。我选择的是第一种方式，直接在仓库克隆代码到本地。\n\n#### 编译\n\n##### README\n先看下 README 文件，这个里面已经有详细的说明\n``` bash\ncat ./README\n\nREADME:\n  This file should be located at the top of the OpenJDK Mercurial root\n  repository. A full OpenJDK repository set (forest) should also include\n  the following 6 nested repositories:\n    \"jdk\", \"hotspot\", \"langtools\", \"corba\", \"jaxws\"  and \"jaxp\".\n\n  The root repository can be obtained with something like:\n    hg clone http://hg.openjdk.java.net/jdk8/jdk8 openjdk8\n  \n  You can run the get_source.sh script located in the root repository to get\n  the other needed repositories:\n    cd openjdk8 && sh ./get_source.sh\n\n  People unfamiliar with Mercurial should read the first few chapters of\n  the Mercurial book: http://hgbook.red-bean.com/read/\n\n  See http://openjdk.java.net/ for more information about OpenJDK.\n\nSimple Build Instructions:\n  \n  0. Get the necessary system software/packages installed on your system, see\n     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html\n\n  1. If you don't have a jdk7u7 or newer jdk, download and install it from\n     http://java.sun.com/javase/downloads/index.jsp\n     Add the /bin directory of this installation to your PATH environment\n     variable.\n\n  2. Configure the build:\n       bash ./configure\n  \n  3. Build the OpenJDK:\n       make all\n     The resulting JDK image should be found in build/*/images/j2sdk-image\n\nwhere make is GNU make 3.81 or newer, /usr/bin/make on Linux usually\nis 3.81 or newer. Note that on Solaris, GNU make is called \"gmake\".\n\nComplete details are available in the file:\n     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html\n\n```\n那就按照 README 文件的步骤来执行编译\n\n##### Getting the Source\n``` bash\n# 进入目录\ncd jdk8u\n# 执行脚本,拉取所有代码\nbash ./get_source.sh\n\n```\n下载完成之后目录结构是这样\n``` bash \n-rw-r--r--  1 root root   1522  4月 14 17:11 ASSEMBLY_EXCEPTION\ndrwxr-xr-x  6 root root   4096  4月 14 17:11 common\n-rw-r--r--  1 root root   1588  4月 14 17:11 configure\ndrwxr-xr-x  6 root root   4096  4月 14 17:56 corba\n-rw-r--r--  1 root root   3107  4月 14 17:11 get_source.sh\ndrwxr-xr-x  8 root root   4096  4月 14 18:06 hotspot\ndrwxr-xr-x  7 root root   4096  4月 14 17:15 jaxp\ndrwxr-xr-x  7 root root   4096  4月 14 17:15 jaxws\ndrwxr-xr-x  7 root root   4096  4月 14 18:46 jdk\ndrwxr-xr-x  7 root root   4096  4月 14 18:04 langtools\n-rw-r--r--  1 root root  19274  4月 14 17:11 LICENSE\ndrwxr-xr-x  6 root root   4096  4月 14 17:11 make\n-rw-r--r--  1 root root   6232  4月 14 17:11 Makefile\ndrwxr-xr-x 13 root root   4096  4月 14 17:27 nashorn\n-rw-r--r--  1 root root   1549  4月 14 17:11 README\n-rw-r--r--  1 root root 129333  4月 14 17:11 README-builds.html\ndrwxr-xr-x  3 root root   4096  4月 14 17:11 test\n-rw-r--r--  1 root root 152511  4月 14 17:11 THIRD_PARTY_README\n\n```\n不过下载代码的时候我遇到了多次中断回滚，如果发生中断，会有警告在终端提醒， **上面的脚本可以重复拉取。如果有更新的话会自动拉取最新代码**。\n\n##### Building\n``` bash \n# 这一步会检查你的 /usr/bin 下的的命令是否齐全，如果缺少会抛错误出来，提示缺少某个命令，只需要安装再次执行就好\nbash ./configure\n\n# 如果有以下信息打印出来，说明第一步已经执行完成\nA new configuration has been successfully created in\n/usr/local/jdk8u/build/linux-x86_64-normal-server-release\nusing default settings.\n\nConfiguration summary:\n* Debug level:    release\n* JDK variant:    normal\n* JVM variants:   server\n* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64\n\nTools summary:\n* Boot JDK:       java version \"1.8.0_202\" Java(TM) SE Runtime Environment (build 1.8.0_202-b08) Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)  (at /usr/lib/jvm/default)\n* Toolchain:      gcc (GNU Compiler Collection)\n* C Compiler:     Version 8.2.1 (at /usr/bin/gcc)\n* C++ Compiler:   Version 8.2.1 (at /usr/bin/g++)\n\nBuild performance summary:\n* Cores to use:   7\n* Memory limit:   7859 MB\n\n```\n编译\n\n``` bash\nmake all\n```\n\n##### 完成\n\n编译完成之后会打印下面的信息\n``` bash\n----- Build times -------\nStart 2019-04-14 22:26:22\nEnd   2019-04-14 22:36:39\n00:00:18 corba\n00:00:14 demos\n00:02:26 docs\n00:03:32 hotspot\n00:00:18 images\n00:00:13 jaxp\n00:00:17 jaxws\n00:02:16 jdk\n00:00:25 langtools\n00:00:17 nashorn\n00:10:17 TOTAL\n-------------------------\nFinished building OpenJDK for target 'all'\n```\n编译时会出现各种问题，可能是依赖版本，或者是包下载不下来导致问题，还有写是因为配置文件设置的问题。下面是我碰到的几个问题\n\n##### 设置环境变量\n\n现在已经拥有一个自己的 jdk 了，设置环境变量使用起来。\n\n先在 jdk8u/build/linux-x86_64-normal-server-release/images 下找到 j2sdk-image 目录，这个就是编译好的 jdk，把它复制到自己的 java 目录下，然后设置环境变量。 \n``` bash\n# 先卸载之前配置的 bootjdk 之后然后设置新的\n# 设置环境变量\nsudo vim /etc/profile\n# JDK\nexport JAVA_HOME=/usr/local/java\nexport JRE_HOME=${JAVA_HOEM}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib \n\n```\n重启配置文件\n source /etc/profile\n\n现在 java 环境变量已经设置好了，输入 java -version 可以查看到环境下面信息，而且还有**自己的机器名**在上面，开心一分钟\n``` bash\n➜  ~ java -version\nopenjdk version \"1.8.0-internal\"\nOpenJDK Runtime Environment (build 1.8.0-internal-chenkui_2019_04_14_22_21-b00)\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\n```\n\n##### 问题\n\n在编译时出现的 \n\n```\nWarning: ××× ‘int readdir_r(DIR*, dirent*, dirent**)’ is deprecated (declared at /usr/include/dirent.h:183) [-Wdeprecated-declarations] ×××\n```\n解决方案\n``` bash\ncd /usr/local/jdk8u/hotspot/make/linux/makefiles\nvim ./gcc.make\n# 编辑 gcc.make\n# 找到 WARNINGS_ARE_ERRORS = -Werror 修改为\nWARNINGS_ARE_ERRORS = -Wno-all\n\n# WARNING_FLAGS = -Wno-deprecated-declarations -Wno-unused-parameter -Wno-sign-compare -Wno-error 修改为\n\nWARNING_FLAGS = -w\n\n```\n参考[链接](https://blog.csdn.net/desiyonan/article/details/80802066) 这个问题是解决最没有头绪的一个，不过在编译的过程中要仔细看报错信息，这样方便 Google 时能准确的找到问题所在。现在就可以愉快的调试源码来玩一下了。\n\n\n#### the end\n记得第一次接触 Java 时，在命令行打印出 `hello world` 时真的很疑惑，就这么一个东西，能有什么用。但是随着一点一点的了解，慢慢发现它的强大之处。每天能进步一点，一年后看今天碰到的问题，其实也不难解决，不积跬步无以至千里，要加油啊！！！  ∩▂∩\n\n官网提供的编译[文档](http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html)\n\n***\n\n<center>我最爱海南，每个地方都有挥之不去的记忆</center>","slug":"manjaro编译openjdk","published":1,"updated":"2021-01-31T06:31:35.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowi000rrh1tftrqeoh5","content":"<p><img src=\"/2019/04/09/manjaro%E7%BC%96%E8%AF%91openjdk/openjdk.png\"></p>\n<p>刚接触到 Java 时就被一些陌生的英文缩写吓到了，什么 jdk,jre,jvm 等等。但是随着后面对它的了解越多，对这些基础的概念越来越清晰，对这些概念也有了一些认识。 jdk 就是我们经常使用的开发工具包，它不仅包含 jre,还包含了编译器等其他基础包，而 jre 则是 Java 代码运行的最小环境。而 jvm 则是 Java 虚拟机， “一处编译，到处运行” 就是因为这位大佬的存在。从学习开始到现在一直都和它们间接接触，但是对它们的了解还是有很大的局限，今天拉了 openjdk 的源码准备好好研究一下。</p>\n<a id=\"more\"></a>\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os</td>\n<td>Mangaro 18.0.1</td>\n</tr>\n<tr>\n<td>openjdk</td>\n<td>jdk8u</td>\n</tr>\n<tr>\n<td>boot jdk</td>\n<td>1.8.0_202</td>\n</tr>\n</tbody></table>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><p>下载 mercurial 来克隆 jdk 代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S mercurial</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>克隆代码到指定目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先进入到要放目标目录</span></span><br><span class=\"line\">sudo hg <span class=\"built_in\">clone</span> http://hg.openjdk.java.net/jdk8u/jdk8u/</span><br></pre></td></tr></table></figure>\n<p>当然也可以在官网下载代码，官网<a class=\"link\" href=\"http://hg.openjdk.java.net/jdk8u/jdk8u/\">地址<i class=\"fas fa-external-link-alt\"></i></a>在这里，进去之后左侧有 gz 的包，直接下载。我选择的是第一种方式，直接在仓库克隆代码到本地。</p>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><h5 id=\"README\"><a href=\"#README\" class=\"headerlink\" title=\"README\"></a>README</h5><p>先看下 README 文件，这个里面已经有详细的说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./README</span><br><span class=\"line\"></span><br><span class=\"line\">README:</span><br><span class=\"line\">  This file should be located at the top of the OpenJDK Mercurial root</span><br><span class=\"line\">  repository. A full OpenJDK repository <span class=\"built_in\">set</span> (forest) should also include</span><br><span class=\"line\">  the following 6 nested repositories:</span><br><span class=\"line\">    <span class=\"string\">&quot;jdk&quot;</span>, <span class=\"string\">&quot;hotspot&quot;</span>, <span class=\"string\">&quot;langtools&quot;</span>, <span class=\"string\">&quot;corba&quot;</span>, <span class=\"string\">&quot;jaxws&quot;</span>  and <span class=\"string\">&quot;jaxp&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">  The root repository can be obtained with something like:</span><br><span class=\"line\">    hg <span class=\"built_in\">clone</span> http://hg.openjdk.java.net/jdk8/jdk8 openjdk8</span><br><span class=\"line\">  </span><br><span class=\"line\">  You can run the get_source.sh script located <span class=\"keyword\">in</span> the root repository to get</span><br><span class=\"line\">  the other needed repositories:</span><br><span class=\"line\">    <span class=\"built_in\">cd</span> openjdk8 &amp;&amp; sh ./get_source.sh</span><br><span class=\"line\"></span><br><span class=\"line\">  People unfamiliar with Mercurial should <span class=\"built_in\">read</span> the first few chapters of</span><br><span class=\"line\">  the Mercurial book: http://hgbook.red-bean.com/<span class=\"built_in\">read</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">  See http://openjdk.java.net/ <span class=\"keyword\">for</span> more information about OpenJDK.</span><br><span class=\"line\"></span><br><span class=\"line\">Simple Build Instructions:</span><br><span class=\"line\">  </span><br><span class=\"line\">  0. Get the necessary system software/packages installed on your system, see</span><br><span class=\"line\">     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html</span><br><span class=\"line\"></span><br><span class=\"line\">  1. If you don<span class=\"string\">&#x27;t have a jdk7u7 or newer jdk, download and install it from</span></span><br><span class=\"line\"><span class=\"string\">     http://java.sun.com/javase/downloads/index.jsp</span></span><br><span class=\"line\"><span class=\"string\">     Add the /bin directory of this installation to your PATH environment</span></span><br><span class=\"line\"><span class=\"string\">     variable.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  2. Configure the build:</span></span><br><span class=\"line\"><span class=\"string\">       bash ./configure</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">  3. Build the OpenJDK:</span></span><br><span class=\"line\"><span class=\"string\">       make all</span></span><br><span class=\"line\"><span class=\"string\">     The resulting JDK image should be found in build/*/images/j2sdk-image</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">where make is GNU make 3.81 or newer, /usr/bin/make on Linux usually</span></span><br><span class=\"line\"><span class=\"string\">is 3.81 or newer. Note that on Solaris, GNU make is called &quot;gmake&quot;.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Complete details are available in the file:</span></span><br><span class=\"line\"><span class=\"string\">     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>那就按照 README 文件的步骤来执行编译</p>\n<h5 id=\"Getting-the-Source\"><a href=\"#Getting-the-Source\" class=\"headerlink\" title=\"Getting the Source\"></a>Getting the Source</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> jdk8u</span><br><span class=\"line\"><span class=\"comment\"># 执行脚本,拉取所有代码</span></span><br><span class=\"line\">bash ./get_source.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下载完成之后目录结构是这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--  1 root root   1522  4月 14 17:11 ASSEMBLY_EXCEPTION</span><br><span class=\"line\">drwxr-xr-x  6 root root   4096  4月 14 17:11 common</span><br><span class=\"line\">-rw-r--r--  1 root root   1588  4月 14 17:11 configure</span><br><span class=\"line\">drwxr-xr-x  6 root root   4096  4月 14 17:56 corba</span><br><span class=\"line\">-rw-r--r--  1 root root   3107  4月 14 17:11 get_source.sh</span><br><span class=\"line\">drwxr-xr-x  8 root root   4096  4月 14 18:06 hotspot</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 17:15 jaxp</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 17:15 jaxws</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 18:46 jdk</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 18:04 langtools</span><br><span class=\"line\">-rw-r--r--  1 root root  19274  4月 14 17:11 LICENSE</span><br><span class=\"line\">drwxr-xr-x  6 root root   4096  4月 14 17:11 make</span><br><span class=\"line\">-rw-r--r--  1 root root   6232  4月 14 17:11 Makefile</span><br><span class=\"line\">drwxr-xr-x 13 root root   4096  4月 14 17:27 nashorn</span><br><span class=\"line\">-rw-r--r--  1 root root   1549  4月 14 17:11 README</span><br><span class=\"line\">-rw-r--r--  1 root root 129333  4月 14 17:11 README-builds.html</span><br><span class=\"line\">drwxr-xr-x  3 root root   4096  4月 14 17:11 <span class=\"built_in\">test</span></span><br><span class=\"line\">-rw-r--r--  1 root root 152511  4月 14 17:11 THIRD_PARTY_README</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>不过下载代码的时候我遇到了多次中断回滚，如果发生中断，会有警告在终端提醒， <strong>上面的脚本可以重复拉取。如果有更新的话会自动拉取最新代码</strong>。</p>\n<h5 id=\"Building\"><a href=\"#Building\" class=\"headerlink\" title=\"Building\"></a>Building</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这一步会检查你的 /usr/bin 下的的命令是否齐全，如果缺少会抛错误出来，提示缺少某个命令，只需要安装再次执行就好</span></span><br><span class=\"line\">bash ./configure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有以下信息打印出来，说明第一步已经执行完成</span></span><br><span class=\"line\">A new configuration has been successfully created <span class=\"keyword\">in</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/jdk8u/build/linux-x86_64-normal-server-release</span><br><span class=\"line\">using default settings.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    release</span><br><span class=\"line\">* JDK variant:    normal</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       java version <span class=\"string\">&quot;1.8.0_202&quot;</span> Java(TM) SE Runtime Environment (build 1.8.0_202-b08) Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)  (at /usr/lib/jvm/default)</span><br><span class=\"line\">* Toolchain:      gcc (GNU Compiler Collection)</span><br><span class=\"line\">* C Compiler:     Version 8.2.1 (at /usr/bin/gcc)</span><br><span class=\"line\">* C++ Compiler:   Version 8.2.1 (at /usr/bin/g++)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   7</span><br><span class=\"line\">* Memory <span class=\"built_in\">limit</span>:   7859 MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n<h5 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h5><p>编译完成之后会打印下面的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----- Build <span class=\"built_in\">times</span> -------</span><br><span class=\"line\">Start 2019-04-14 22:26:22</span><br><span class=\"line\">End   2019-04-14 22:36:39</span><br><span class=\"line\">00:00:18 corba</span><br><span class=\"line\">00:00:14 demos</span><br><span class=\"line\">00:02:26 docs</span><br><span class=\"line\">00:03:32 hotspot</span><br><span class=\"line\">00:00:18 images</span><br><span class=\"line\">00:00:13 jaxp</span><br><span class=\"line\">00:00:17 jaxws</span><br><span class=\"line\">00:02:16 jdk</span><br><span class=\"line\">00:00:25 langtools</span><br><span class=\"line\">00:00:17 nashorn</span><br><span class=\"line\">00:10:17 TOTAL</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">Finished building OpenJDK <span class=\"keyword\">for</span> target <span class=\"string\">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>编译时会出现各种问题，可能是依赖版本，或者是包下载不下来导致问题，还有写是因为配置文件设置的问题。下面是我碰到的几个问题</p>\n<h5 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h5><p>现在已经拥有一个自己的 jdk 了，设置环境变量使用起来。</p>\n<p>先在 jdk8u/build/linux-x86_64-normal-server-release/images 下找到 j2sdk-image 目录，这个就是编译好的 jdk，把它复制到自己的 java 目录下，然后设置环境变量。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先卸载之前配置的 bootjdk 之后然后设置新的</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># JDK</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java</span><br><span class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$&#123;JAVA_HOEM&#125;</span>/jre</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib:<span class=\"variable\">$&#123;JRE_HOME&#125;</span>/lib </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重启配置文件<br> source /etc/profile</p>\n<p>现在 java 环境变量已经设置好了，输入 java -version 可以查看到环境下面信息，而且还有<strong>自己的机器名</strong>在上面，开心一分钟</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ java -version</span><br><span class=\"line\">openjdk version <span class=\"string\">&quot;1.8.0-internal&quot;</span></span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0-internal-chenkui_2019_04_14_22_21-b00)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>在编译时出现的 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: ××× ‘int readdir_r(DIR*, dirent*, dirent**)’ is deprecated (declared at &#x2F;usr&#x2F;include&#x2F;dirent.h:183) [-Wdeprecated-declarations] ×××</span><br></pre></td></tr></table></figure>\n<p>解决方案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/jdk8u/hotspot/make/linux/makefiles</span><br><span class=\"line\">vim ./gcc.make</span><br><span class=\"line\"><span class=\"comment\"># 编辑 gcc.make</span></span><br><span class=\"line\"><span class=\"comment\"># 找到 WARNINGS_ARE_ERRORS = -Werror 修改为</span></span><br><span class=\"line\">WARNINGS_ARE_ERRORS = -Wno-all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WARNING_FLAGS = -Wno-deprecated-declarations -Wno-unused-parameter -Wno-sign-compare -Wno-error 修改为</span></span><br><span class=\"line\"></span><br><span class=\"line\">WARNING_FLAGS = -w</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考<a class=\"link\" href=\"https://blog.csdn.net/desiyonan/article/details/80802066\">链接<i class=\"fas fa-external-link-alt\"></i></a> 这个问题是解决最没有头绪的一个，不过在编译的过程中要仔细看报错信息，这样方便 Google 时能准确的找到问题所在。现在就可以愉快的调试源码来玩一下了。</p>\n<h4 id=\"the-end\"><a href=\"#the-end\" class=\"headerlink\" title=\"the end\"></a>the end</h4><p>记得第一次接触 Java 时，在命令行打印出 <code>hello world</code> 时真的很疑惑，就这么一个东西，能有什么用。但是随着一点一点的了解，慢慢发现它的强大之处。每天能进步一点，一年后看今天碰到的问题，其实也不难解决，不积跬步无以至千里，要加油啊！！！  ∩▂∩</p>\n<p>官网提供的编译<a class=\"link\" href=\"http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html\">文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>我最爱海南，每个地方都有挥之不去的记忆</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/04/09/manjaro%E7%BC%96%E8%AF%91openjdk/openjdk.png\"></p>\n<p>刚接触到 Java 时就被一些陌生的英文缩写吓到了，什么 jdk,jre,jvm 等等。但是随着后面对它的了解越多，对这些基础的概念越来越清晰，对这些概念也有了一些认识。 jdk 就是我们经常使用的开发工具包，它不仅包含 jre,还包含了编译器等其他基础包，而 jre 则是 Java 代码运行的最小环境。而 jvm 则是 Java 虚拟机， “一处编译，到处运行” 就是因为这位大佬的存在。从学习开始到现在一直都和它们间接接触，但是对它们的了解还是有很大的局限，今天拉了 openjdk 的源码准备好好研究一下。</p>","more":"<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os</td>\n<td>Mangaro 18.0.1</td>\n</tr>\n<tr>\n<td>openjdk</td>\n<td>jdk8u</td>\n</tr>\n<tr>\n<td>boot jdk</td>\n<td>1.8.0_202</td>\n</tr>\n</tbody></table>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><p>下载 mercurial 来克隆 jdk 代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S mercurial</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>克隆代码到指定目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先进入到要放目标目录</span></span><br><span class=\"line\">sudo hg <span class=\"built_in\">clone</span> http://hg.openjdk.java.net/jdk8u/jdk8u/</span><br></pre></td></tr></table></figure>\n<p>当然也可以在官网下载代码，官网<a class=\"link\" href=\"http://hg.openjdk.java.net/jdk8u/jdk8u/\">地址<i class=\"fas fa-external-link-alt\"></i></a>在这里，进去之后左侧有 gz 的包，直接下载。我选择的是第一种方式，直接在仓库克隆代码到本地。</p>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><h5 id=\"README\"><a href=\"#README\" class=\"headerlink\" title=\"README\"></a>README</h5><p>先看下 README 文件，这个里面已经有详细的说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./README</span><br><span class=\"line\"></span><br><span class=\"line\">README:</span><br><span class=\"line\">  This file should be located at the top of the OpenJDK Mercurial root</span><br><span class=\"line\">  repository. A full OpenJDK repository <span class=\"built_in\">set</span> (forest) should also include</span><br><span class=\"line\">  the following 6 nested repositories:</span><br><span class=\"line\">    <span class=\"string\">&quot;jdk&quot;</span>, <span class=\"string\">&quot;hotspot&quot;</span>, <span class=\"string\">&quot;langtools&quot;</span>, <span class=\"string\">&quot;corba&quot;</span>, <span class=\"string\">&quot;jaxws&quot;</span>  and <span class=\"string\">&quot;jaxp&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">  The root repository can be obtained with something like:</span><br><span class=\"line\">    hg <span class=\"built_in\">clone</span> http://hg.openjdk.java.net/jdk8/jdk8 openjdk8</span><br><span class=\"line\">  </span><br><span class=\"line\">  You can run the get_source.sh script located <span class=\"keyword\">in</span> the root repository to get</span><br><span class=\"line\">  the other needed repositories:</span><br><span class=\"line\">    <span class=\"built_in\">cd</span> openjdk8 &amp;&amp; sh ./get_source.sh</span><br><span class=\"line\"></span><br><span class=\"line\">  People unfamiliar with Mercurial should <span class=\"built_in\">read</span> the first few chapters of</span><br><span class=\"line\">  the Mercurial book: http://hgbook.red-bean.com/<span class=\"built_in\">read</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">  See http://openjdk.java.net/ <span class=\"keyword\">for</span> more information about OpenJDK.</span><br><span class=\"line\"></span><br><span class=\"line\">Simple Build Instructions:</span><br><span class=\"line\">  </span><br><span class=\"line\">  0. Get the necessary system software/packages installed on your system, see</span><br><span class=\"line\">     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html</span><br><span class=\"line\"></span><br><span class=\"line\">  1. If you don<span class=\"string\">&#x27;t have a jdk7u7 or newer jdk, download and install it from</span></span><br><span class=\"line\"><span class=\"string\">     http://java.sun.com/javase/downloads/index.jsp</span></span><br><span class=\"line\"><span class=\"string\">     Add the /bin directory of this installation to your PATH environment</span></span><br><span class=\"line\"><span class=\"string\">     variable.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  2. Configure the build:</span></span><br><span class=\"line\"><span class=\"string\">       bash ./configure</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">  3. Build the OpenJDK:</span></span><br><span class=\"line\"><span class=\"string\">       make all</span></span><br><span class=\"line\"><span class=\"string\">     The resulting JDK image should be found in build/*/images/j2sdk-image</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">where make is GNU make 3.81 or newer, /usr/bin/make on Linux usually</span></span><br><span class=\"line\"><span class=\"string\">is 3.81 or newer. Note that on Solaris, GNU make is called &quot;gmake&quot;.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Complete details are available in the file:</span></span><br><span class=\"line\"><span class=\"string\">     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>那就按照 README 文件的步骤来执行编译</p>\n<h5 id=\"Getting-the-Source\"><a href=\"#Getting-the-Source\" class=\"headerlink\" title=\"Getting the Source\"></a>Getting the Source</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> jdk8u</span><br><span class=\"line\"><span class=\"comment\"># 执行脚本,拉取所有代码</span></span><br><span class=\"line\">bash ./get_source.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下载完成之后目录结构是这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--  1 root root   1522  4月 14 17:11 ASSEMBLY_EXCEPTION</span><br><span class=\"line\">drwxr-xr-x  6 root root   4096  4月 14 17:11 common</span><br><span class=\"line\">-rw-r--r--  1 root root   1588  4月 14 17:11 configure</span><br><span class=\"line\">drwxr-xr-x  6 root root   4096  4月 14 17:56 corba</span><br><span class=\"line\">-rw-r--r--  1 root root   3107  4月 14 17:11 get_source.sh</span><br><span class=\"line\">drwxr-xr-x  8 root root   4096  4月 14 18:06 hotspot</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 17:15 jaxp</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 17:15 jaxws</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 18:46 jdk</span><br><span class=\"line\">drwxr-xr-x  7 root root   4096  4月 14 18:04 langtools</span><br><span class=\"line\">-rw-r--r--  1 root root  19274  4月 14 17:11 LICENSE</span><br><span class=\"line\">drwxr-xr-x  6 root root   4096  4月 14 17:11 make</span><br><span class=\"line\">-rw-r--r--  1 root root   6232  4月 14 17:11 Makefile</span><br><span class=\"line\">drwxr-xr-x 13 root root   4096  4月 14 17:27 nashorn</span><br><span class=\"line\">-rw-r--r--  1 root root   1549  4月 14 17:11 README</span><br><span class=\"line\">-rw-r--r--  1 root root 129333  4月 14 17:11 README-builds.html</span><br><span class=\"line\">drwxr-xr-x  3 root root   4096  4月 14 17:11 <span class=\"built_in\">test</span></span><br><span class=\"line\">-rw-r--r--  1 root root 152511  4月 14 17:11 THIRD_PARTY_README</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>不过下载代码的时候我遇到了多次中断回滚，如果发生中断，会有警告在终端提醒， <strong>上面的脚本可以重复拉取。如果有更新的话会自动拉取最新代码</strong>。</p>\n<h5 id=\"Building\"><a href=\"#Building\" class=\"headerlink\" title=\"Building\"></a>Building</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这一步会检查你的 /usr/bin 下的的命令是否齐全，如果缺少会抛错误出来，提示缺少某个命令，只需要安装再次执行就好</span></span><br><span class=\"line\">bash ./configure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有以下信息打印出来，说明第一步已经执行完成</span></span><br><span class=\"line\">A new configuration has been successfully created <span class=\"keyword\">in</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/jdk8u/build/linux-x86_64-normal-server-release</span><br><span class=\"line\">using default settings.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    release</span><br><span class=\"line\">* JDK variant:    normal</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       java version <span class=\"string\">&quot;1.8.0_202&quot;</span> Java(TM) SE Runtime Environment (build 1.8.0_202-b08) Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)  (at /usr/lib/jvm/default)</span><br><span class=\"line\">* Toolchain:      gcc (GNU Compiler Collection)</span><br><span class=\"line\">* C Compiler:     Version 8.2.1 (at /usr/bin/gcc)</span><br><span class=\"line\">* C++ Compiler:   Version 8.2.1 (at /usr/bin/g++)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   7</span><br><span class=\"line\">* Memory <span class=\"built_in\">limit</span>:   7859 MB</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n<h5 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h5><p>编译完成之后会打印下面的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----- Build <span class=\"built_in\">times</span> -------</span><br><span class=\"line\">Start 2019-04-14 22:26:22</span><br><span class=\"line\">End   2019-04-14 22:36:39</span><br><span class=\"line\">00:00:18 corba</span><br><span class=\"line\">00:00:14 demos</span><br><span class=\"line\">00:02:26 docs</span><br><span class=\"line\">00:03:32 hotspot</span><br><span class=\"line\">00:00:18 images</span><br><span class=\"line\">00:00:13 jaxp</span><br><span class=\"line\">00:00:17 jaxws</span><br><span class=\"line\">00:02:16 jdk</span><br><span class=\"line\">00:00:25 langtools</span><br><span class=\"line\">00:00:17 nashorn</span><br><span class=\"line\">00:10:17 TOTAL</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">Finished building OpenJDK <span class=\"keyword\">for</span> target <span class=\"string\">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>编译时会出现各种问题，可能是依赖版本，或者是包下载不下来导致问题，还有写是因为配置文件设置的问题。下面是我碰到的几个问题</p>\n<h5 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h5><p>现在已经拥有一个自己的 jdk 了，设置环境变量使用起来。</p>\n<p>先在 jdk8u/build/linux-x86_64-normal-server-release/images 下找到 j2sdk-image 目录，这个就是编译好的 jdk，把它复制到自己的 java 目录下，然后设置环境变量。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先卸载之前配置的 bootjdk 之后然后设置新的</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># JDK</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/java</span><br><span class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$&#123;JAVA_HOEM&#125;</span>/jre</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib:<span class=\"variable\">$&#123;JRE_HOME&#125;</span>/lib </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重启配置文件<br> source /etc/profile</p>\n<p>现在 java 环境变量已经设置好了，输入 java -version 可以查看到环境下面信息，而且还有<strong>自己的机器名</strong>在上面，开心一分钟</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ java -version</span><br><span class=\"line\">openjdk version <span class=\"string\">&quot;1.8.0-internal&quot;</span></span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0-internal-chenkui_2019_04_14_22_21-b00)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)</span><br></pre></td></tr></table></figure>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>在编译时出现的 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: ××× ‘int readdir_r(DIR*, dirent*, dirent**)’ is deprecated (declared at &#x2F;usr&#x2F;include&#x2F;dirent.h:183) [-Wdeprecated-declarations] ×××</span><br></pre></td></tr></table></figure>\n<p>解决方案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/jdk8u/hotspot/make/linux/makefiles</span><br><span class=\"line\">vim ./gcc.make</span><br><span class=\"line\"><span class=\"comment\"># 编辑 gcc.make</span></span><br><span class=\"line\"><span class=\"comment\"># 找到 WARNINGS_ARE_ERRORS = -Werror 修改为</span></span><br><span class=\"line\">WARNINGS_ARE_ERRORS = -Wno-all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WARNING_FLAGS = -Wno-deprecated-declarations -Wno-unused-parameter -Wno-sign-compare -Wno-error 修改为</span></span><br><span class=\"line\"></span><br><span class=\"line\">WARNING_FLAGS = -w</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考<a class=\"link\" href=\"https://blog.csdn.net/desiyonan/article/details/80802066\">链接<i class=\"fas fa-external-link-alt\"></i></a> 这个问题是解决最没有头绪的一个，不过在编译的过程中要仔细看报错信息，这样方便 Google 时能准确的找到问题所在。现在就可以愉快的调试源码来玩一下了。</p>\n<h4 id=\"the-end\"><a href=\"#the-end\" class=\"headerlink\" title=\"the end\"></a>the end</h4><p>记得第一次接触 Java 时，在命令行打印出 <code>hello world</code> 时真的很疑惑，就这么一个东西，能有什么用。但是随着一点一点的了解，慢慢发现它的强大之处。每天能进步一点，一年后看今天碰到的问题，其实也不难解决，不积跬步无以至千里，要加油啊！！！  ∩▂∩</p>\n<p>官网提供的编译<a class=\"link\" href=\"http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html\">文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>我最爱海南，每个地方都有挥之不去的记忆</center>"},{"title":"manjaro输入密码卡死问题","date":"2019-04-24T15:01:19.000Z","_content":"\n![年轻才不怕](manjaro输入密码卡死问题/密码卡死.png)\n\n\n最近玩 manjaro 还是听开心的，该有的软件都有了，用起来也挺方便的。事故发生在一次更新之后，我第二天晚上打开电脑输入密码，卡死在输密码的界面...（嗯...小问题，开启重启。我太天真了，还是没有解决问题）因为最近比较忙，手头也没有多余的电脑，就搁置了几天。最近查了各种资料，问了一些大佬，终于解决了问题。\n\n<!-- more -->\n\n#### 环境\n\n|    ev  |  version    |   \n| ---- | ---- |    \n|    os  |  Mangaro 18.0.4    |       \n|    Kernel |    x86_64 Linux 4.19.34-1-MANJARO   |      \n|DE| KDE 5.56.0 / Plasma 5.15.4 |\n|GPU|Mesa DRI Intel(R) Haswell Mobile |\n\n#### 问题定位\n\nGoogle 了很多同学碰到的问题，说卡死是双显卡导致的，因为我也是双显卡，所以准备先在这里排除问题。首先 CTRL + ALT + F3 进入到 tty3 终端。使用 root 登录之后就有问题了，所有的命令都报错\n\n``` bash\n## 报错信息\n# ll\n-bash: 口口口口口\n```\n基本所有命令都不能使用，很难受。后面请教了一些大佬说应该是环境变量的问题，后面的`口口口口` 应该是中文不支持原因，实际应该是下面的情况\n\n``` bash\n## 报错信息\n-bash: 未找到命令\n```\n#### 环境变量\n\n上面的问题终于有了眉目，命令不存在应该是环境变量导致的，所以先要设置环境变量\n\n``` bash\n# 编辑环境变量\n$ /usr/bin/vim /etc/profile\n# 添加下面的值\nexport PATH=/usr/local/sbin:/usr/local/bin:/bin\n# 重启\nsource /etc/profile\n```\n\n到这里所有的命令应该就可以使用了。\n\n#### 更新显卡依赖\n\n``` bash\npacman -S virtualgl lib32-virtualgl lib32-primus primus\n```\n\n更新完成之后\n\n``` bash\nreboot\n```\n重启之后，终于进去了...切还是那样熟悉 。\n\n***\n<center>白马非马</center>\n","source":"_posts/manjaro输入密码卡死问题.md","raw":"---\ntitle: manjaro输入密码卡死问题\ndate: 2019-04-24 23:01:19\ntags: manjaro\ncategory: manjaro\n---\n\n![年轻才不怕](manjaro输入密码卡死问题/密码卡死.png)\n\n\n最近玩 manjaro 还是听开心的，该有的软件都有了，用起来也挺方便的。事故发生在一次更新之后，我第二天晚上打开电脑输入密码，卡死在输密码的界面...（嗯...小问题，开启重启。我太天真了，还是没有解决问题）因为最近比较忙，手头也没有多余的电脑，就搁置了几天。最近查了各种资料，问了一些大佬，终于解决了问题。\n\n<!-- more -->\n\n#### 环境\n\n|    ev  |  version    |   \n| ---- | ---- |    \n|    os  |  Mangaro 18.0.4    |       \n|    Kernel |    x86_64 Linux 4.19.34-1-MANJARO   |      \n|DE| KDE 5.56.0 / Plasma 5.15.4 |\n|GPU|Mesa DRI Intel(R) Haswell Mobile |\n\n#### 问题定位\n\nGoogle 了很多同学碰到的问题，说卡死是双显卡导致的，因为我也是双显卡，所以准备先在这里排除问题。首先 CTRL + ALT + F3 进入到 tty3 终端。使用 root 登录之后就有问题了，所有的命令都报错\n\n``` bash\n## 报错信息\n# ll\n-bash: 口口口口口\n```\n基本所有命令都不能使用，很难受。后面请教了一些大佬说应该是环境变量的问题，后面的`口口口口` 应该是中文不支持原因，实际应该是下面的情况\n\n``` bash\n## 报错信息\n-bash: 未找到命令\n```\n#### 环境变量\n\n上面的问题终于有了眉目，命令不存在应该是环境变量导致的，所以先要设置环境变量\n\n``` bash\n# 编辑环境变量\n$ /usr/bin/vim /etc/profile\n# 添加下面的值\nexport PATH=/usr/local/sbin:/usr/local/bin:/bin\n# 重启\nsource /etc/profile\n```\n\n到这里所有的命令应该就可以使用了。\n\n#### 更新显卡依赖\n\n``` bash\npacman -S virtualgl lib32-virtualgl lib32-primus primus\n```\n\n更新完成之后\n\n``` bash\nreboot\n```\n重启之后，终于进去了...切还是那样熟悉 。\n\n***\n<center>白马非马</center>\n","slug":"manjaro输入密码卡死问题","published":1,"updated":"2021-01-31T06:31:35.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowj000wrh1tbh6jfg70","content":"<p><img src=\"/2019/04/24/manjaro%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98/%E5%AF%86%E7%A0%81%E5%8D%A1%E6%AD%BB.png\" alt=\"年轻才不怕\"></p>\n<p>最近玩 manjaro 还是听开心的，该有的软件都有了，用起来也挺方便的。事故发生在一次更新之后，我第二天晚上打开电脑输入密码，卡死在输密码的界面…（嗯…小问题，开启重启。我太天真了，还是没有解决问题）因为最近比较忙，手头也没有多余的电脑，就搁置了几天。最近查了各种资料，问了一些大佬，终于解决了问题。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os</td>\n<td>Mangaro 18.0.4</td>\n</tr>\n<tr>\n<td>Kernel</td>\n<td>x86_64 Linux 4.19.34-1-MANJARO</td>\n</tr>\n<tr>\n<td>DE</td>\n<td>KDE 5.56.0 / Plasma 5.15.4</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>Mesa DRI Intel(R) Haswell Mobile</td>\n</tr>\n</tbody></table>\n<h4 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h4><p>Google 了很多同学碰到的问题，说卡死是双显卡导致的，因为我也是双显卡，所以准备先在这里排除问题。首先 CTRL + ALT + F3 进入到 tty3 终端。使用 root 登录之后就有问题了，所有的命令都报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 报错信息</span></span><br><span class=\"line\"><span class=\"comment\"># ll</span></span><br><span class=\"line\">-bash: 口口口口口</span><br></pre></td></tr></table></figure>\n<p>基本所有命令都不能使用，很难受。后面请教了一些大佬说应该是环境变量的问题，后面的<code>口口口口</code> 应该是中文不支持原因，实际应该是下面的情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 报错信息</span></span><br><span class=\"line\">-bash: 未找到命令</span><br></pre></td></tr></table></figure>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>上面的问题终于有了眉目，命令不存在应该是环境变量导致的，所以先要设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">$ /usr/bin/vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 添加下面的值</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/bin</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>到这里所有的命令应该就可以使用了。</p>\n<h4 id=\"更新显卡依赖\"><a href=\"#更新显卡依赖\" class=\"headerlink\" title=\"更新显卡依赖\"></a>更新显卡依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S virtualgl lib32-virtualgl lib32-primus primus</span><br></pre></td></tr></table></figure>\n<p>更新完成之后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>重启之后，终于进去了…切还是那样熟悉 。</p>\n<hr>\n<center>白马非马</center>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/04/24/manjaro%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98/%E5%AF%86%E7%A0%81%E5%8D%A1%E6%AD%BB.png\" alt=\"年轻才不怕\"></p>\n<p>最近玩 manjaro 还是听开心的，该有的软件都有了，用起来也挺方便的。事故发生在一次更新之后，我第二天晚上打开电脑输入密码，卡死在输密码的界面…（嗯…小问题，开启重启。我太天真了，还是没有解决问题）因为最近比较忙，手头也没有多余的电脑，就搁置了几天。最近查了各种资料，问了一些大佬，终于解决了问题。</p>","more":"<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os</td>\n<td>Mangaro 18.0.4</td>\n</tr>\n<tr>\n<td>Kernel</td>\n<td>x86_64 Linux 4.19.34-1-MANJARO</td>\n</tr>\n<tr>\n<td>DE</td>\n<td>KDE 5.56.0 / Plasma 5.15.4</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>Mesa DRI Intel(R) Haswell Mobile</td>\n</tr>\n</tbody></table>\n<h4 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h4><p>Google 了很多同学碰到的问题，说卡死是双显卡导致的，因为我也是双显卡，所以准备先在这里排除问题。首先 CTRL + ALT + F3 进入到 tty3 终端。使用 root 登录之后就有问题了，所有的命令都报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 报错信息</span></span><br><span class=\"line\"><span class=\"comment\"># ll</span></span><br><span class=\"line\">-bash: 口口口口口</span><br></pre></td></tr></table></figure>\n<p>基本所有命令都不能使用，很难受。后面请教了一些大佬说应该是环境变量的问题，后面的<code>口口口口</code> 应该是中文不支持原因，实际应该是下面的情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 报错信息</span></span><br><span class=\"line\">-bash: 未找到命令</span><br></pre></td></tr></table></figure>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>上面的问题终于有了眉目，命令不存在应该是环境变量导致的，所以先要设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">$ /usr/bin/vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 添加下面的值</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/bin</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>到这里所有的命令应该就可以使用了。</p>\n<h4 id=\"更新显卡依赖\"><a href=\"#更新显卡依赖\" class=\"headerlink\" title=\"更新显卡依赖\"></a>更新显卡依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S virtualgl lib32-virtualgl lib32-primus primus</span><br></pre></td></tr></table></figure>\n<p>更新完成之后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>重启之后，终于进去了…切还是那样熟悉 。</p>\n<hr>\n<center>白马非马</center>"},{"title":"mongo乐观锁","date":"2019-03-31T13:04:22.000Z","_content":"\n![](mongo乐观锁/mongoLock.png)\n\n前几天完了一下 mongo 的一些基础操作，在工作中遇到最多的就是 CRUD 这种操作，但是随着业务复杂度增加，访问数量增加之后，对系统的需求也会随之增加。我在业务中使用最多的就是乐观锁，主要原因是因\n\n<!-- more -->\n为乐观锁有一下几点好处：\n1. 在执行读操作时不会对数据进行加锁处理，这样提高了数据访问速度。\n2. mongo 本身不支持事物，所以没有像关系型数据库那样完善的锁机制。\n\n下面看下 mongo 是怎样实现乐观锁的，看下具体的乐观锁是如何实现对数据加锁的。\n\n###### 乐观锁\n乐观锁在读取数据时一般会认为数据没有被修改，所以在读的时候不会对数据加锁，但是在更新数据时会对其进行`加锁`,这里所谓的加锁一般是会设置一个版本号，在更新时看下这个版本号有没有变化，如果更新时版本号不一致，则说明数据已经被更新，当前更新操作不会被执行。\n下面是 mongo 中实现乐观锁的一些具体操作\n\n###### version\n在实体类中添加版本号\n``` java\n@Document(collection = \"user\")\n@Data\npublic class User {\n\n    @Version\n    private Long version; // 这里添加版本字段，并添加版本注解\n\n    @Id\n    private String id;\n\n    private String userName; // 姓名\n    private Integer age; // 年龄\n    private String sex; // 性别\n\n    public User(String userName,Integer age,String sex) {\n        this.setUserName(userName);\n        this.setSex(sex);\n        this.setAge(age);\n    }\n\n    public User() { }\n}\n\n```\n\n###### 测试\n配置好版本号之后进行测试\n\n``` java\n\n    @Test\n    public void optimisticLockTest() {\n\n        User user = template.insert(new User(\"feng\", 18, \"female\")); // 插入一条记录\n\n        User one = template.findOne(new Query(new Criteria(\"id\").is(user.getId())), User.class); // 将插入的记录查出来\n\n        one.setUserName(\"管你啊\"); // 给查出来的对象设置行名称\n\n        template.save(one); // 保存查出来的对象\n\n        template.save(user); // 这里再次保存之前的对象时会抛出 OptimisticLockingFailureException 异常\n\n    }\n\n```\n乐观锁使用比较简单，但是也很大程度的避免了在更新操作时的加锁问题，但是也会存在脏读等问题，以上就是 mongo 使用乐观锁的一些具体操作，这些在官网例子中也有说明，这里附上[官网连接](https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template.optimistic-locking) \n\n开始写东西不久，在很多表达方面可能不是很到位，但是会坚持下去的，这里也算是对自己进行约束的一个地方。我一直是一个不敢表达自我的人，希望在这里用书写的方式先把自己的东西写出来，能在回顾的时候不断提高自己。good luck...\n\n***\n\n<center>盖一处庭院，养一只大狗</center>","source":"_posts/mongo乐观锁.md","raw":"---\ntitle: mongo乐观锁\ndate: 2019-03-31 21:04:22\ntags: mongo\ncategory: mongo\n---\n\n![](mongo乐观锁/mongoLock.png)\n\n前几天完了一下 mongo 的一些基础操作，在工作中遇到最多的就是 CRUD 这种操作，但是随着业务复杂度增加，访问数量增加之后，对系统的需求也会随之增加。我在业务中使用最多的就是乐观锁，主要原因是因\n\n<!-- more -->\n为乐观锁有一下几点好处：\n1. 在执行读操作时不会对数据进行加锁处理，这样提高了数据访问速度。\n2. mongo 本身不支持事物，所以没有像关系型数据库那样完善的锁机制。\n\n下面看下 mongo 是怎样实现乐观锁的，看下具体的乐观锁是如何实现对数据加锁的。\n\n###### 乐观锁\n乐观锁在读取数据时一般会认为数据没有被修改，所以在读的时候不会对数据加锁，但是在更新数据时会对其进行`加锁`,这里所谓的加锁一般是会设置一个版本号，在更新时看下这个版本号有没有变化，如果更新时版本号不一致，则说明数据已经被更新，当前更新操作不会被执行。\n下面是 mongo 中实现乐观锁的一些具体操作\n\n###### version\n在实体类中添加版本号\n``` java\n@Document(collection = \"user\")\n@Data\npublic class User {\n\n    @Version\n    private Long version; // 这里添加版本字段，并添加版本注解\n\n    @Id\n    private String id;\n\n    private String userName; // 姓名\n    private Integer age; // 年龄\n    private String sex; // 性别\n\n    public User(String userName,Integer age,String sex) {\n        this.setUserName(userName);\n        this.setSex(sex);\n        this.setAge(age);\n    }\n\n    public User() { }\n}\n\n```\n\n###### 测试\n配置好版本号之后进行测试\n\n``` java\n\n    @Test\n    public void optimisticLockTest() {\n\n        User user = template.insert(new User(\"feng\", 18, \"female\")); // 插入一条记录\n\n        User one = template.findOne(new Query(new Criteria(\"id\").is(user.getId())), User.class); // 将插入的记录查出来\n\n        one.setUserName(\"管你啊\"); // 给查出来的对象设置行名称\n\n        template.save(one); // 保存查出来的对象\n\n        template.save(user); // 这里再次保存之前的对象时会抛出 OptimisticLockingFailureException 异常\n\n    }\n\n```\n乐观锁使用比较简单，但是也很大程度的避免了在更新操作时的加锁问题，但是也会存在脏读等问题，以上就是 mongo 使用乐观锁的一些具体操作，这些在官网例子中也有说明，这里附上[官网连接](https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template.optimistic-locking) \n\n开始写东西不久，在很多表达方面可能不是很到位，但是会坚持下去的，这里也算是对自己进行约束的一个地方。我一直是一个不敢表达自我的人，希望在这里用书写的方式先把自己的东西写出来，能在回顾的时候不断提高自己。good luck...\n\n***\n\n<center>盖一处庭院，养一只大狗</center>","slug":"mongo乐观锁","published":1,"updated":"2021-01-31T06:31:35.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowk000zrh1tbl1b0u7c","content":"<p><img src=\"/2019/03/31/mongo%E4%B9%90%E8%A7%82%E9%94%81/mongoLock.png\"></p>\n<p>前几天完了一下 mongo 的一些基础操作，在工作中遇到最多的就是 CRUD 这种操作，但是随着业务复杂度增加，访问数量增加之后，对系统的需求也会随之增加。我在业务中使用最多的就是乐观锁，主要原因是因</p>\n<a id=\"more\"></a>\n<p>为乐观锁有一下几点好处：</p>\n<ol>\n<li>在执行读操作时不会对数据进行加锁处理，这样提高了数据访问速度。</li>\n<li>mongo 本身不支持事物，所以没有像关系型数据库那样完善的锁机制。</li>\n</ol>\n<p>下面看下 mongo 是怎样实现乐观锁的，看下具体的乐观锁是如何实现对数据加锁的。</p>\n<h6 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h6><p>乐观锁在读取数据时一般会认为数据没有被修改，所以在读的时候不会对数据加锁，但是在更新数据时会对其进行<code>加锁</code>,这里所谓的加锁一般是会设置一个版本号，在更新时看下这个版本号有没有变化，如果更新时版本号不一致，则说明数据已经被更新，当前更新操作不会被执行。<br>下面是 mongo 中实现乐观锁的一些具体操作</p>\n<h6 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h6><p>在实体类中添加版本号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Document(collection = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Version</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long version; <span class=\"comment\">// 这里添加版本字段，并添加版本注解</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName; <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age; <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex; <span class=\"comment\">// 性别</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String userName,Integer age,String sex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setUserName(userName);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setSex(sex);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><p>配置好版本号之后进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">optimisticLockTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    User user = template.insert(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;feng&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;female&quot;</span>)); <span class=\"comment\">// 插入一条记录</span></span><br><span class=\"line\"></span><br><span class=\"line\">    User one = template.findOne(<span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;id&quot;</span>).is(user.getId())), User.class); <span class=\"comment\">// 将插入的记录查出来</span></span><br><span class=\"line\"></span><br><span class=\"line\">    one.setUserName(<span class=\"string\">&quot;管你啊&quot;</span>); <span class=\"comment\">// 给查出来的对象设置行名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    template.save(one); <span class=\"comment\">// 保存查出来的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    template.save(user); <span class=\"comment\">// 这里再次保存之前的对象时会抛出 OptimisticLockingFailureException 异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>乐观锁使用比较简单，但是也很大程度的避免了在更新操作时的加锁问题，但是也会存在脏读等问题，以上就是 mongo 使用乐观锁的一些具体操作，这些在官网例子中也有说明，这里附上<a class=\"link\" href=\"https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template.optimistic-locking\">官网连接<i class=\"fas fa-external-link-alt\"></i></a> </p>\n<p>开始写东西不久，在很多表达方面可能不是很到位，但是会坚持下去的，这里也算是对自己进行约束的一个地方。我一直是一个不敢表达自我的人，希望在这里用书写的方式先把自己的东西写出来，能在回顾的时候不断提高自己。good luck…</p>\n<hr>\n<center>盖一处庭院，养一只大狗</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/03/31/mongo%E4%B9%90%E8%A7%82%E9%94%81/mongoLock.png\"></p>\n<p>前几天完了一下 mongo 的一些基础操作，在工作中遇到最多的就是 CRUD 这种操作，但是随着业务复杂度增加，访问数量增加之后，对系统的需求也会随之增加。我在业务中使用最多的就是乐观锁，主要原因是因</p>","more":"<p>为乐观锁有一下几点好处：</p>\n<ol>\n<li>在执行读操作时不会对数据进行加锁处理，这样提高了数据访问速度。</li>\n<li>mongo 本身不支持事物，所以没有像关系型数据库那样完善的锁机制。</li>\n</ol>\n<p>下面看下 mongo 是怎样实现乐观锁的，看下具体的乐观锁是如何实现对数据加锁的。</p>\n<h6 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h6><p>乐观锁在读取数据时一般会认为数据没有被修改，所以在读的时候不会对数据加锁，但是在更新数据时会对其进行<code>加锁</code>,这里所谓的加锁一般是会设置一个版本号，在更新时看下这个版本号有没有变化，如果更新时版本号不一致，则说明数据已经被更新，当前更新操作不会被执行。<br>下面是 mongo 中实现乐观锁的一些具体操作</p>\n<h6 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h6><p>在实体类中添加版本号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Document(collection = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Version</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long version; <span class=\"comment\">// 这里添加版本字段，并添加版本注解</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName; <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age; <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex; <span class=\"comment\">// 性别</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String userName,Integer age,String sex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setUserName(userName);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setSex(sex);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><p>配置好版本号之后进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">optimisticLockTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    User user = template.insert(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;feng&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;female&quot;</span>)); <span class=\"comment\">// 插入一条记录</span></span><br><span class=\"line\"></span><br><span class=\"line\">    User one = template.findOne(<span class=\"keyword\">new</span> Query(<span class=\"keyword\">new</span> Criteria(<span class=\"string\">&quot;id&quot;</span>).is(user.getId())), User.class); <span class=\"comment\">// 将插入的记录查出来</span></span><br><span class=\"line\"></span><br><span class=\"line\">    one.setUserName(<span class=\"string\">&quot;管你啊&quot;</span>); <span class=\"comment\">// 给查出来的对象设置行名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    template.save(one); <span class=\"comment\">// 保存查出来的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    template.save(user); <span class=\"comment\">// 这里再次保存之前的对象时会抛出 OptimisticLockingFailureException 异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>乐观锁使用比较简单，但是也很大程度的避免了在更新操作时的加锁问题，但是也会存在脏读等问题，以上就是 mongo 使用乐观锁的一些具体操作，这些在官网例子中也有说明，这里附上<a class=\"link\" href=\"https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template.optimistic-locking\">官网连接<i class=\"fas fa-external-link-alt\"></i></a> </p>\n<p>开始写东西不久，在很多表达方面可能不是很到位，但是会坚持下去的，这里也算是对自己进行约束的一个地方。我一直是一个不敢表达自我的人，希望在这里用书写的方式先把自己的东西写出来，能在回顾的时候不断提高自己。good luck…</p>\n<hr>\n<center>盖一处庭院，养一只大狗</center>"},{"title":"mongo分片集群","date":"2019-11-12T14:59:17.000Z","_content":"\n![Photo by Unsplash](/replicaSet.png)\n\nmongdb 通过分片机制将数据分布在多台机器上面，实现了横向扩展。也支持了非常大数集和高吞吐量操作。mongodb 可以很好的利用机器的内存资源，内存越大，查询就会越快。mongo 对数据的结构没有其他限制，对开发者很友好，很适合迭代很快，表字段变化很多的场景。\n\n<!-- more -->\n\n##### 分片\n\nmongo 通过分片机制，将数据拆分后存储在不同机器上面。这样就可以存储更多的数据，并且能以很快的速度读取出来。mongo 原生就支持了分布式特性，在使用方面也是非常方便。下面先[下载](https://www.mongodb.org/dl/linux/x86_64)进行部署。\n\n###### 环境\n\n|    ev  |  version    |   \n| ---- | ---- |    \n|    os  | CentOS Linux release 7.6.1810 (Core)   |       \n|    mongo  |    mongodb-linux-x86_64-v4.0-latest  |   \n\n\n###### 配置服务搭建\n\n创建 3 台虚拟机，分别搭建 mongo 实例\n机器分配\n|    os  |  ip    |   \n| ---- | ---- |    \n|  centos7   | 192.168.31.107    |       \n|    centos7  |  192.168.31.107  |  \n|centos7|192.168.31.107 | \n\n1. 下载并安装\n```bash\n# 创建目录 /usr/local\nmkdir mongo\n# 解压到 mongo 目录\ntar -zxvf mongodb-linux-x86_64-v4.0-latest.gz\n```\n\n2. 配置文件\n先创建下面对应的文件夹\n\n```properties\n\nport = 27017                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/config/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/config/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/config/data                   #数据存放目录。默认： /data/db/\nreplSet=configs                                         #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nconfigsvr = true                                        ##设置是否是配置服务，默认端口27019，默认目录/data/configdb\n\n```\n\n3. 启动服务\n```bash\n\n/usr/local/mongo/bin/mongod -f /usr/local/mongo/conf/config.conf\n\n#启动成功\nabout to fork child process, waiting until server is ready for connections.\nforked process: 8982\nchild process started successfully, parent exiting\n```\n\n**备注**\n其他两台机器也按照以上方式同样配置\n\n\n4. 初始化副本集\n\n```json\n#config变量\nconfig = {\n    _id : \"configs\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27017\" },\n         {_id : 1, host : \"192.168.31.108:27017\" },\n         {_id : 2, host : \"192.168.31.109:27017\" }\n    ]\n }\n\n #初始化配置\nrs.initiate(config)\n```\nconfigs:配置文件中副本集名称\n\n\n###### 分片副本集\n\n**配置 shard1**\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard1.conf\n```\n\n```properties\n\nport = 27001                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/shard1/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/shard1/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/shard1/data                   #数据存放目录。默认： /data/db/\n\nreplSet=shard1                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nshardsvr = true                                         #设置是否分片，默认端口27018\n\n```\n\n2. 启动 shard1 服务\n\n按照相同的方式配置其他 2 台服务并启动\n\n```bash\nbin/mongod -f conf/shard1.conf \n```\n\n\n3. 初始化副本集\n进入 shell 命令行\n```bash\nmongo --port 27001\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard1\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27001\" },\n         {_id : 1, host : \"192.168.31.108:27001\" },\n         {_id : 2, host : \"192.168.31.109:27001\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n**配置 shard2**\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard2.conf\n```\n\n```properties\n\nport = 27002                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/shard2/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/shard2/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/shard2/data                   #数据存放目录。默认： /data/db/\n\nreplSet=shard2                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nshardsvr = true                                         #设置是否分片，默认端口27018\n\n```\n\n2. 启动 shard2 服务\n\n按照相同的方式配置其他 2 台服务并启动\n\n```bash\nbin/mongod -f conf/shard2.conf \n```\n\n\n3. 初始化副本集\n进入 shell 命令行\n```bash\nmongo --port 27002\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard2\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27002\" },\n         {_id : 1, host : \"192.168.31.108:27002\" },\n         {_id : 2, host : \"192.168.31.109:27002\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n**配置 shard3**\n\n配置 shard3\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard3.conf\n```\n\n```properties\n\nport = 27003                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/shard3/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/shard3/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/shard3/data                   #数据存放目录。默认： /data/db/\n\nreplSet=shard3                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nshardsvr = true                                         #设置是否分片，默认端口27018\n\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard3\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27003\" },\n         {_id : 1, host : \"192.168.31.108:27003\" },\n         {_id : 2, host : \"192.168.31.109:27003\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n2. 启动 shard3 服务\n\n按照相同的方式配置其他 2 台服务并启动\n\n```bash\nbin/mongod -f conf/shard3.conf \n```\n\n\n3. 初始化副本集\n进入 shell 命令行\n```bash\nmongo --port 27003\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard3\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27003\" },\n         {_id : 1, host : \"192.168.31.108:27003\" },\n         {_id : 2, host : \"192.168.31.109:27003\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n###### 配置路由服务\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard3.conf\n```\n\n```properties\n\nport = 28000                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/mongos/log/mongos.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/mongos/log/mongos.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\n#配置服务器，只能是一个或者3个。configs 是上面配置服务器副本集名字\nconfigdb = configs/192.168.31.107:27017,192.168.31.108:27017,192.168.31.109:27017\n\n```\n\n2. 启动\n使用 **mongos**命令启动\n```bash\nbin/mongos -f conf/mongos.conf\n```\n\n按照以上方式配置启动其他2台mongos服务\n\n3. 启动分片\n\n```bash\n#登录 mongos\nmongo --port 28000\n#使用admin数据库\nuse  admin\n#配置分片\nsh.addShard(\"shard1/192.168.31.107:27001,192.168.31.108:27001,192.168.31.109:27001\")\nsh.addShard(\"shard2/192.168.31.107:27002,192.168.31.108:27002,192.168.31.109:27002\")\nsh.addShard(\"shard3/192.168.31.107:27003,192.168.31.108:27003,192.168.31.109:27003\")\n#查看集群状态\nsh.status()\n```\n\n> 完成以上 mongo 分片部署就完成了，下面进行简单测试。\n\n###### 验证\n\n1. 指定分片库\n\n```bash\n# 切换到 admin 账户\nuse admin\n# 指定 testdb 分片生效\ndb.runCommand( { enablesharding :\"testdb\"});\n# 指定数据库里需要分片的集合和片键\ndb.runCommand( { shardcollection : \"testdb.user\",key : {id: 1} } )\n```\n指定 testdb 下 user 表数据进行分片处理，对 user 表插入数据测试\n\n```bash\n# 进入任意分片\nmongo --port 28000\n# 切换数据库\nuse testdb\n# 插入数据\nfor (var i=1;i<=100000;i++) db.user.insert({id:i,\"userId\":\"user\"+i})\n```\n使用 [studio 3T](https://studio3t.com/download/) 连接 mongo ，连接之后点击：\n> 1. 右键连接\n> 2. Curent Operations\n\n进入 Curent Operations 页面，就可以看到数据是写入到了不同的分片之上的。\n\n\nmongdb 对于快速迭代开发是一个非常不错的选择，因为在不断迭代变化的过程中既可以满足前期快速的迭代，也能抗住后期海量数据存储和并发访问问题。而且对开发者很友好，非关系型结构可以让开发按照需求快速调整数据结构，但是也有一个弊端，可能造成表结构数据混乱等情况。在横向扩展方面更是有非常大的优势，在未来潜力无限。[官方文档](https://docs.mongodb.com/manual/sharding/)\n\n***\n\n<center>mongo is not mango</center>\n","source":"_posts/mongo分片集群.md","raw":"---\ntitle: mongo分片集群\ndate: 2019-11-12 22:59:17\ntags: mongo\ncategory: mongo\n---\n\n![Photo by Unsplash](/replicaSet.png)\n\nmongdb 通过分片机制将数据分布在多台机器上面，实现了横向扩展。也支持了非常大数集和高吞吐量操作。mongodb 可以很好的利用机器的内存资源，内存越大，查询就会越快。mongo 对数据的结构没有其他限制，对开发者很友好，很适合迭代很快，表字段变化很多的场景。\n\n<!-- more -->\n\n##### 分片\n\nmongo 通过分片机制，将数据拆分后存储在不同机器上面。这样就可以存储更多的数据，并且能以很快的速度读取出来。mongo 原生就支持了分布式特性，在使用方面也是非常方便。下面先[下载](https://www.mongodb.org/dl/linux/x86_64)进行部署。\n\n###### 环境\n\n|    ev  |  version    |   \n| ---- | ---- |    \n|    os  | CentOS Linux release 7.6.1810 (Core)   |       \n|    mongo  |    mongodb-linux-x86_64-v4.0-latest  |   \n\n\n###### 配置服务搭建\n\n创建 3 台虚拟机，分别搭建 mongo 实例\n机器分配\n|    os  |  ip    |   \n| ---- | ---- |    \n|  centos7   | 192.168.31.107    |       \n|    centos7  |  192.168.31.107  |  \n|centos7|192.168.31.107 | \n\n1. 下载并安装\n```bash\n# 创建目录 /usr/local\nmkdir mongo\n# 解压到 mongo 目录\ntar -zxvf mongodb-linux-x86_64-v4.0-latest.gz\n```\n\n2. 配置文件\n先创建下面对应的文件夹\n\n```properties\n\nport = 27017                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/config/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/config/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/config/data                   #数据存放目录。默认： /data/db/\nreplSet=configs                                         #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nconfigsvr = true                                        ##设置是否是配置服务，默认端口27019，默认目录/data/configdb\n\n```\n\n3. 启动服务\n```bash\n\n/usr/local/mongo/bin/mongod -f /usr/local/mongo/conf/config.conf\n\n#启动成功\nabout to fork child process, waiting until server is ready for connections.\nforked process: 8982\nchild process started successfully, parent exiting\n```\n\n**备注**\n其他两台机器也按照以上方式同样配置\n\n\n4. 初始化副本集\n\n```json\n#config变量\nconfig = {\n    _id : \"configs\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27017\" },\n         {_id : 1, host : \"192.168.31.108:27017\" },\n         {_id : 2, host : \"192.168.31.109:27017\" }\n    ]\n }\n\n #初始化配置\nrs.initiate(config)\n```\nconfigs:配置文件中副本集名称\n\n\n###### 分片副本集\n\n**配置 shard1**\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard1.conf\n```\n\n```properties\n\nport = 27001                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/shard1/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/shard1/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/shard1/data                   #数据存放目录。默认： /data/db/\n\nreplSet=shard1                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nshardsvr = true                                         #设置是否分片，默认端口27018\n\n```\n\n2. 启动 shard1 服务\n\n按照相同的方式配置其他 2 台服务并启动\n\n```bash\nbin/mongod -f conf/shard1.conf \n```\n\n\n3. 初始化副本集\n进入 shell 命令行\n```bash\nmongo --port 27001\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard1\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27001\" },\n         {_id : 1, host : \"192.168.31.108:27001\" },\n         {_id : 2, host : \"192.168.31.109:27001\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n**配置 shard2**\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard2.conf\n```\n\n```properties\n\nport = 27002                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/shard2/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/shard2/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/shard2/data                   #数据存放目录。默认： /data/db/\n\nreplSet=shard2                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nshardsvr = true                                         #设置是否分片，默认端口27018\n\n```\n\n2. 启动 shard2 服务\n\n按照相同的方式配置其他 2 台服务并启动\n\n```bash\nbin/mongod -f conf/shard2.conf \n```\n\n\n3. 初始化副本集\n进入 shell 命令行\n```bash\nmongo --port 27002\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard2\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27002\" },\n         {_id : 1, host : \"192.168.31.108:27002\" },\n         {_id : 2, host : \"192.168.31.109:27002\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n**配置 shard3**\n\n配置 shard3\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard3.conf\n```\n\n```properties\n\nport = 27003                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/shard3/log/mongo.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/shard3/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\ndbpath = /usr/local/mongo/shard3/data                   #数据存放目录。默认： /data/db/\n\nreplSet=shard3                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。\nshardsvr = true                                         #设置是否分片，默认端口27018\n\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard3\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27003\" },\n         {_id : 1, host : \"192.168.31.108:27003\" },\n         {_id : 2, host : \"192.168.31.109:27003\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n2. 启动 shard3 服务\n\n按照相同的方式配置其他 2 台服务并启动\n\n```bash\nbin/mongod -f conf/shard3.conf \n```\n\n\n3. 初始化副本集\n进入 shell 命令行\n```bash\nmongo --port 27003\n```\n\n初始化\n```json\n#使用admin数据库\nuse admin\n#定义副本集配置，第三个节点的 \"arbiterOnly\":true 代表其为仲裁节点。\nconfig = {\n    _id : \"shard3\",\n     members : [\n         {_id : 0, host : \"192.168.31.107:27003\" },\n         {_id : 1, host : \"192.168.31.108:27003\" },\n         {_id : 2, host : \"192.168.31.109:27003\" }\n    ]\n }\n\n#初始化副本集配置\nrs.initiate(config);\n\n```\n\n###### 配置路由服务\n\n1. 配置文件\n\n创建配置文件\n```bash\nvim conf/shard3.conf\n```\n\n```properties\n\nport = 28000                                            #端口，默认 27017 \nbind_ip = 0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接\nmaxConns=2000                                           #最大连接数\nlogpath = /usr/local/mongo/mongos/log/mongos.log         #指定日志文件\nlogappend = true                                        #写日志的模式：设置为true为追加。默认是覆盖\npidfilepath = /usr/local/mongo/mongos/log/mongos.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省\nfork = true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false\n#配置服务器，只能是一个或者3个。configs 是上面配置服务器副本集名字\nconfigdb = configs/192.168.31.107:27017,192.168.31.108:27017,192.168.31.109:27017\n\n```\n\n2. 启动\n使用 **mongos**命令启动\n```bash\nbin/mongos -f conf/mongos.conf\n```\n\n按照以上方式配置启动其他2台mongos服务\n\n3. 启动分片\n\n```bash\n#登录 mongos\nmongo --port 28000\n#使用admin数据库\nuse  admin\n#配置分片\nsh.addShard(\"shard1/192.168.31.107:27001,192.168.31.108:27001,192.168.31.109:27001\")\nsh.addShard(\"shard2/192.168.31.107:27002,192.168.31.108:27002,192.168.31.109:27002\")\nsh.addShard(\"shard3/192.168.31.107:27003,192.168.31.108:27003,192.168.31.109:27003\")\n#查看集群状态\nsh.status()\n```\n\n> 完成以上 mongo 分片部署就完成了，下面进行简单测试。\n\n###### 验证\n\n1. 指定分片库\n\n```bash\n# 切换到 admin 账户\nuse admin\n# 指定 testdb 分片生效\ndb.runCommand( { enablesharding :\"testdb\"});\n# 指定数据库里需要分片的集合和片键\ndb.runCommand( { shardcollection : \"testdb.user\",key : {id: 1} } )\n```\n指定 testdb 下 user 表数据进行分片处理，对 user 表插入数据测试\n\n```bash\n# 进入任意分片\nmongo --port 28000\n# 切换数据库\nuse testdb\n# 插入数据\nfor (var i=1;i<=100000;i++) db.user.insert({id:i,\"userId\":\"user\"+i})\n```\n使用 [studio 3T](https://studio3t.com/download/) 连接 mongo ，连接之后点击：\n> 1. 右键连接\n> 2. Curent Operations\n\n进入 Curent Operations 页面，就可以看到数据是写入到了不同的分片之上的。\n\n\nmongdb 对于快速迭代开发是一个非常不错的选择，因为在不断迭代变化的过程中既可以满足前期快速的迭代，也能抗住后期海量数据存储和并发访问问题。而且对开发者很友好，非关系型结构可以让开发按照需求快速调整数据结构，但是也有一个弊端，可能造成表结构数据混乱等情况。在横向扩展方面更是有非常大的优势，在未来潜力无限。[官方文档](https://docs.mongodb.com/manual/sharding/)\n\n***\n\n<center>mongo is not mango</center>\n","slug":"mongo分片集群","published":1,"updated":"2021-01-31T06:31:35.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeown0013rh1tced9bpeq","content":"<p><img src=\"/2019/11/12/mongo%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/replicaSet.png\" alt=\"Photo by Unsplash\"></p>\n<p>mongdb 通过分片机制将数据分布在多台机器上面，实现了横向扩展。也支持了非常大数集和高吞吐量操作。mongodb 可以很好的利用机器的内存资源，内存越大，查询就会越快。mongo 对数据的结构没有其他限制，对开发者很友好，很适合迭代很快，表字段变化很多的场景。</p>\n<a id=\"more\"></a>\n\n<h5 id=\"分片\"><a href=\"#分片\" class=\"headerlink\" title=\"分片\"></a>分片</h5><p>mongo 通过分片机制，将数据拆分后存储在不同机器上面。这样就可以存储更多的数据，并且能以很快的速度读取出来。mongo 原生就支持了分布式特性，在使用方面也是非常方便。下面先<a class=\"link\" href=\"https://www.mongodb.org/dl/linux/x86_64\">下载<i class=\"fas fa-external-link-alt\"></i></a>进行部署。</p>\n<h6 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h6><table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>mongo</td>\n<td>mongodb-linux-x86_64-v4.0-latest</td>\n</tr>\n</tbody></table>\n<h6 id=\"配置服务搭建\"><a href=\"#配置服务搭建\" class=\"headerlink\" title=\"配置服务搭建\"></a>配置服务搭建</h6><p>创建 3 台虚拟机，分别搭建 mongo 实例<br>机器分配<br>|    os  |  ip    |<br>| —- | —- |<br>|  centos7   | 192.168.31.107    |<br>|    centos7  |  192.168.31.107  |<br>|centos7|192.168.31.107 | </p>\n<ol>\n<li>下载并安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录 /usr/local</span></span><br><span class=\"line\">mkdir mongo</span><br><span class=\"line\"><span class=\"comment\"># 解压到 mongo 目录</span></span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-v4.0-latest.gz</span><br></pre></td></tr></table></figure></li>\n<li>配置文件<br>先创建下面对应的文件夹</li>\n</ol>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27017                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/config/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/config/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/config/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">configs                                         #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">configsvr</span> = <span class=\"string\">true                                        ##设置是否是配置服务，默认端口27019，默认目录/data/configdb</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启动服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mongo/bin/mongod -f /usr/<span class=\"built_in\">local</span>/mongo/conf/config.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动成功</span></span><br><span class=\"line\">about to fork child process, waiting until server is ready <span class=\"keyword\">for</span> connections.</span><br><span class=\"line\">forked process: 8982</span><br><span class=\"line\">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>备注</strong><br>其他两台机器也按照以上方式同样配置</p>\n<ol start=\"4\">\n<li>初始化副本集</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#config变量</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;configs&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27017&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27017&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27017&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> #初始化配置</span><br><span class=\"line\">rs.initiate(config)</span><br></pre></td></tr></table></figure>\n<p>configs:配置文件中副本集名称</p>\n<h6 id=\"分片副本集\"><a href=\"#分片副本集\" class=\"headerlink\" title=\"分片副本集\"></a>分片副本集</h6><p><strong>配置 shard1</strong></p>\n<ol>\n<li>配置文件</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard1.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27001                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/shard1/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/shard1/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/shard1/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">shard1                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">shardsvr</span> = <span class=\"string\">true                                         #设置是否分片，默认端口27018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 shard1 服务</li>\n</ol>\n<p>按照相同的方式配置其他 2 台服务并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongod -f conf/shard1.conf </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>初始化副本集<br>进入 shell 命令行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo --port 27001</span><br></pre></td></tr></table></figure>\n初始化<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard1&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27001&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27001&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27001&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>配置 shard2</strong></p>\n<ol>\n<li>配置文件</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard2.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27002                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/shard2/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/shard2/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/shard2/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">shard2                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">shardsvr</span> = <span class=\"string\">true                                         #设置是否分片，默认端口27018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 shard2 服务</li>\n</ol>\n<p>按照相同的方式配置其他 2 台服务并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongod -f conf/shard2.conf </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>初始化副本集<br>进入 shell 命令行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo --port 27002</span><br></pre></td></tr></table></figure>\n初始化<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard2&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27002&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27002&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27002&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>配置 shard3</strong></p>\n<p>配置 shard3</p>\n<ol>\n<li>配置文件</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard3.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27003                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/shard3/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/shard3/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/shard3/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">shard3                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">shardsvr</span> = <span class=\"string\">true                                         #设置是否分片，默认端口27018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>初始化</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard3&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27003&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 shard3 服务</li>\n</ol>\n<p>按照相同的方式配置其他 2 台服务并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongod -f conf/shard3.conf </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>初始化副本集<br>进入 shell 命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo --port 27003</span><br></pre></td></tr></table></figure>\n<p>初始化</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard3&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27003&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"配置路由服务\"><a href=\"#配置路由服务\" class=\"headerlink\" title=\"配置路由服务\"></a>配置路由服务</h6></li>\n<li><p>配置文件</p>\n</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard3.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">28000                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/mongos/log/mongos.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/mongos/log/mongos.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"comment\">#配置服务器，只能是一个或者3个。configs 是上面配置服务器副本集名字</span></span><br><span class=\"line\"><span class=\"attr\">configdb</span> = <span class=\"string\">configs/192.168.31.107:27017,192.168.31.108:27017,192.168.31.109:27017</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>启动<br>使用 <strong>mongos</strong>命令启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongos -f conf/mongos.conf</span><br></pre></td></tr></table></figure>\n<p>按照以上方式配置启动其他2台mongos服务</p>\n</li>\n<li><p>启动分片</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#登录 mongos</span></span><br><span class=\"line\">mongo --port 28000</span><br><span class=\"line\"><span class=\"comment\">#使用admin数据库</span></span><br><span class=\"line\">use  admin</span><br><span class=\"line\"><span class=\"comment\">#配置分片</span></span><br><span class=\"line\">sh.addShard(<span class=\"string\">&quot;shard1/192.168.31.107:27001,192.168.31.108:27001,192.168.31.109:27001&quot;</span>)</span><br><span class=\"line\">sh.addShard(<span class=\"string\">&quot;shard2/192.168.31.107:27002,192.168.31.108:27002,192.168.31.109:27002&quot;</span>)</span><br><span class=\"line\">sh.addShard(<span class=\"string\">&quot;shard3/192.168.31.107:27003,192.168.31.108:27003,192.168.31.109:27003&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#查看集群状态</span></span><br><span class=\"line\">sh.status()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完成以上 mongo 分片部署就完成了，下面进行简单测试。</p>\n</blockquote>\n<h6 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h6><ol>\n<li>指定分片库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到 admin 账户</span></span><br><span class=\"line\">use admin</span><br><span class=\"line\"><span class=\"comment\"># 指定 testdb 分片生效</span></span><br><span class=\"line\">db.runCommand( &#123; enablesharding :<span class=\"string\">&quot;testdb&quot;</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\"># 指定数据库里需要分片的集合和片键</span></span><br><span class=\"line\">db.runCommand( &#123; shardcollection : <span class=\"string\">&quot;testdb.user&quot;</span>,key : &#123;id: 1&#125; &#125; )</span><br></pre></td></tr></table></figure>\n<p>指定 testdb 下 user 表数据进行分片处理，对 user 表插入数据测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入任意分片</span></span><br><span class=\"line\">mongo --port 28000</span><br><span class=\"line\"><span class=\"comment\"># 切换数据库</span></span><br><span class=\"line\">use testdb</span><br><span class=\"line\"><span class=\"comment\"># 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (var i=1;i&lt;=100000;i++) db.user.insert(&#123;id:i,<span class=\"string\">&quot;userId&quot;</span>:<span class=\"string\">&quot;user&quot;</span>+i&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 <a class=\"link\" href=\"https://studio3t.com/download/\">studio 3T<i class=\"fas fa-external-link-alt\"></i></a> 连接 mongo ，连接之后点击：</p>\n<blockquote>\n<ol>\n<li>右键连接</li>\n<li>Curent Operations</li>\n</ol>\n</blockquote>\n<p>进入 Curent Operations 页面，就可以看到数据是写入到了不同的分片之上的。</p>\n<p>mongdb 对于快速迭代开发是一个非常不错的选择，因为在不断迭代变化的过程中既可以满足前期快速的迭代，也能抗住后期海量数据存储和并发访问问题。而且对开发者很友好，非关系型结构可以让开发按照需求快速调整数据结构，但是也有一个弊端，可能造成表结构数据混乱等情况。在横向扩展方面更是有非常大的优势，在未来潜力无限。<a class=\"link\" href=\"https://docs.mongodb.com/manual/sharding/\">官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>mongo is not mango</center>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/11/12/mongo%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/replicaSet.png\" alt=\"Photo by Unsplash\"></p>\n<p>mongdb 通过分片机制将数据分布在多台机器上面，实现了横向扩展。也支持了非常大数集和高吞吐量操作。mongodb 可以很好的利用机器的内存资源，内存越大，查询就会越快。mongo 对数据的结构没有其他限制，对开发者很友好，很适合迭代很快，表字段变化很多的场景。</p>","more":"<h5 id=\"分片\"><a href=\"#分片\" class=\"headerlink\" title=\"分片\"></a>分片</h5><p>mongo 通过分片机制，将数据拆分后存储在不同机器上面。这样就可以存储更多的数据，并且能以很快的速度读取出来。mongo 原生就支持了分布式特性，在使用方面也是非常方便。下面先<a class=\"link\" href=\"https://www.mongodb.org/dl/linux/x86_64\">下载<i class=\"fas fa-external-link-alt\"></i></a>进行部署。</p>\n<h6 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h6><table>\n<thead>\n<tr>\n<th>ev</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>mongo</td>\n<td>mongodb-linux-x86_64-v4.0-latest</td>\n</tr>\n</tbody></table>\n<h6 id=\"配置服务搭建\"><a href=\"#配置服务搭建\" class=\"headerlink\" title=\"配置服务搭建\"></a>配置服务搭建</h6><p>创建 3 台虚拟机，分别搭建 mongo 实例<br>机器分配<br>|    os  |  ip    |<br>| —- | —- |<br>|  centos7   | 192.168.31.107    |<br>|    centos7  |  192.168.31.107  |<br>|centos7|192.168.31.107 | </p>\n<ol>\n<li>下载并安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录 /usr/local</span></span><br><span class=\"line\">mkdir mongo</span><br><span class=\"line\"><span class=\"comment\"># 解压到 mongo 目录</span></span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-v4.0-latest.gz</span><br></pre></td></tr></table></figure></li>\n<li>配置文件<br>先创建下面对应的文件夹</li>\n</ol>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27017                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/config/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/config/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/config/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">configs                                         #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">configsvr</span> = <span class=\"string\">true                                        ##设置是否是配置服务，默认端口27019，默认目录/data/configdb</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启动服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mongo/bin/mongod -f /usr/<span class=\"built_in\">local</span>/mongo/conf/config.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动成功</span></span><br><span class=\"line\">about to fork child process, waiting until server is ready <span class=\"keyword\">for</span> connections.</span><br><span class=\"line\">forked process: 8982</span><br><span class=\"line\">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>备注</strong><br>其他两台机器也按照以上方式同样配置</p>\n<ol start=\"4\">\n<li>初始化副本集</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#config变量</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;configs&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27017&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27017&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27017&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> #初始化配置</span><br><span class=\"line\">rs.initiate(config)</span><br></pre></td></tr></table></figure>\n<p>configs:配置文件中副本集名称</p>\n<h6 id=\"分片副本集\"><a href=\"#分片副本集\" class=\"headerlink\" title=\"分片副本集\"></a>分片副本集</h6><p><strong>配置 shard1</strong></p>\n<ol>\n<li>配置文件</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard1.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27001                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/shard1/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/shard1/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/shard1/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">shard1                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">shardsvr</span> = <span class=\"string\">true                                         #设置是否分片，默认端口27018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 shard1 服务</li>\n</ol>\n<p>按照相同的方式配置其他 2 台服务并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongod -f conf/shard1.conf </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>初始化副本集<br>进入 shell 命令行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo --port 27001</span><br></pre></td></tr></table></figure>\n初始化<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard1&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27001&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27001&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27001&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>配置 shard2</strong></p>\n<ol>\n<li>配置文件</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard2.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27002                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/shard2/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/shard2/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/shard2/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">shard2                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">shardsvr</span> = <span class=\"string\">true                                         #设置是否分片，默认端口27018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 shard2 服务</li>\n</ol>\n<p>按照相同的方式配置其他 2 台服务并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongod -f conf/shard2.conf </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>初始化副本集<br>进入 shell 命令行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo --port 27002</span><br></pre></td></tr></table></figure>\n初始化<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard2&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27002&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27002&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27002&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>配置 shard3</strong></p>\n<p>配置 shard3</p>\n<ol>\n<li>配置文件</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard3.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">27003                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/shard3/log/mongo.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/shard3/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"attr\">dbpath</span> = <span class=\"string\">/usr/local/mongo/shard3/data                   #数据存放目录。默认： /data/db/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">replSet</span>=<span class=\"string\">shard3                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class=\"line\"><span class=\"attr\">shardsvr</span> = <span class=\"string\">true                                         #设置是否分片，默认端口27018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>初始化</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard3&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27003&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动 shard3 服务</li>\n</ol>\n<p>按照相同的方式配置其他 2 台服务并启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongod -f conf/shard3.conf </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>初始化副本集<br>进入 shell 命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo --port 27003</span><br></pre></td></tr></table></figure>\n<p>初始化</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class=\"line\">config = &#123;</span><br><span class=\"line\">    _id : &quot;shard3&quot;,</span><br><span class=\"line\">     members : [</span><br><span class=\"line\">         &#123;_id : 0, host : &quot;192.168.31.107:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 1, host : &quot;192.168.31.108:27003&quot; &#125;,</span><br><span class=\"line\">         &#123;_id : 2, host : &quot;192.168.31.109:27003&quot; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化副本集配置</span><br><span class=\"line\">rs.initiate(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"配置路由服务\"><a href=\"#配置路由服务\" class=\"headerlink\" title=\"配置路由服务\"></a>配置路由服务</h6></li>\n<li><p>配置文件</p>\n</li>\n</ol>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/shard3.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"string\">28000                                            #端口，默认 27017 </span></span><br><span class=\"line\"><span class=\"attr\">bind_ip</span> = <span class=\"string\">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class=\"line\"><span class=\"attr\">maxConns</span>=<span class=\"string\">2000                                           #最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">logpath</span> = <span class=\"string\">/usr/local/mongo/mongos/log/mongos.log         #指定日志文件</span></span><br><span class=\"line\"><span class=\"attr\">logappend</span> = <span class=\"string\">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class=\"line\"><span class=\"attr\">pidfilepath</span> = <span class=\"string\">/usr/local/mongo/mongos/log/mongos.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class=\"line\"><span class=\"attr\">fork</span> = <span class=\"string\">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class=\"line\"><span class=\"comment\">#配置服务器，只能是一个或者3个。configs 是上面配置服务器副本集名字</span></span><br><span class=\"line\"><span class=\"attr\">configdb</span> = <span class=\"string\">configs/192.168.31.107:27017,192.168.31.108:27017,192.168.31.109:27017</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>启动<br>使用 <strong>mongos</strong>命令启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/mongos -f conf/mongos.conf</span><br></pre></td></tr></table></figure>\n<p>按照以上方式配置启动其他2台mongos服务</p>\n</li>\n<li><p>启动分片</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#登录 mongos</span></span><br><span class=\"line\">mongo --port 28000</span><br><span class=\"line\"><span class=\"comment\">#使用admin数据库</span></span><br><span class=\"line\">use  admin</span><br><span class=\"line\"><span class=\"comment\">#配置分片</span></span><br><span class=\"line\">sh.addShard(<span class=\"string\">&quot;shard1/192.168.31.107:27001,192.168.31.108:27001,192.168.31.109:27001&quot;</span>)</span><br><span class=\"line\">sh.addShard(<span class=\"string\">&quot;shard2/192.168.31.107:27002,192.168.31.108:27002,192.168.31.109:27002&quot;</span>)</span><br><span class=\"line\">sh.addShard(<span class=\"string\">&quot;shard3/192.168.31.107:27003,192.168.31.108:27003,192.168.31.109:27003&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#查看集群状态</span></span><br><span class=\"line\">sh.status()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完成以上 mongo 分片部署就完成了，下面进行简单测试。</p>\n</blockquote>\n<h6 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h6><ol>\n<li>指定分片库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到 admin 账户</span></span><br><span class=\"line\">use admin</span><br><span class=\"line\"><span class=\"comment\"># 指定 testdb 分片生效</span></span><br><span class=\"line\">db.runCommand( &#123; enablesharding :<span class=\"string\">&quot;testdb&quot;</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\"># 指定数据库里需要分片的集合和片键</span></span><br><span class=\"line\">db.runCommand( &#123; shardcollection : <span class=\"string\">&quot;testdb.user&quot;</span>,key : &#123;id: 1&#125; &#125; )</span><br></pre></td></tr></table></figure>\n<p>指定 testdb 下 user 表数据进行分片处理，对 user 表插入数据测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入任意分片</span></span><br><span class=\"line\">mongo --port 28000</span><br><span class=\"line\"><span class=\"comment\"># 切换数据库</span></span><br><span class=\"line\">use testdb</span><br><span class=\"line\"><span class=\"comment\"># 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (var i=1;i&lt;=100000;i++) db.user.insert(&#123;id:i,<span class=\"string\">&quot;userId&quot;</span>:<span class=\"string\">&quot;user&quot;</span>+i&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 <a class=\"link\" href=\"https://studio3t.com/download/\">studio 3T<i class=\"fas fa-external-link-alt\"></i></a> 连接 mongo ，连接之后点击：</p>\n<blockquote>\n<ol>\n<li>右键连接</li>\n<li>Curent Operations</li>\n</ol>\n</blockquote>\n<p>进入 Curent Operations 页面，就可以看到数据是写入到了不同的分片之上的。</p>\n<p>mongdb 对于快速迭代开发是一个非常不错的选择，因为在不断迭代变化的过程中既可以满足前期快速的迭代，也能抗住后期海量数据存储和并发访问问题。而且对开发者很友好，非关系型结构可以让开发按照需求快速调整数据结构，但是也有一个弊端，可能造成表结构数据混乱等情况。在横向扩展方面更是有非常大的优势，在未来潜力无限。<a class=\"link\" href=\"https://docs.mongodb.com/manual/sharding/\">官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>mongo is not mango</center>"},{"title":"mongo权限设置.md","date":"2019-03-28T15:45:33.000Z","photos":[],"_content":"\n![](mongo权限设置/mongoPower.png)\n\nmongodb 使用起来还是相对简单的，但是在权限设置时，遇到了几个小问题，以至于花了比较久的时间，在给 mongo 设置权限前首先要清楚几点：\n\n<!-- more -->\n\n1. mongo 默认是没有用户的。\n2. mongo 每个数据库由独立的用户来管理。\n因为 mongo 默认是没有用户的，所以首先要创建管理员用户，这里创建管理员用户时要进入 admin 数据库来设置\n\n\n``` bash\n# 进入 adimn 数据库\n> use admin\nswitched to db admin\n> db.createUser(\n   {\n     user: \"admin\", # admin 用户名\n     pwd: \"123456\", # 密码\n     roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ] # admin 此用户作用的目标数据库\n   }\n);\n# 此处创建成功 bash 会返回成功信息\n# 验证权限\n> db.auth(\"admin\",\"123456\");\n1 # 成功会返回1\n```\n至此，mongo 管理员用户已经创建成功了，现在退出 mongo ,在配置文件中开启验证\n\n``` conf\nauth=ture\n```\n重启 mongo\n\n创建 test 数据库，给此数据库创建 test 用户方能连接到此数据库\n\n``` bash\n# 有的话进入，没有则创建此库\n> use test\n> db.createUser(\n   {\n     user: \"test\",\n     pwd: \"123456\",\n     roles: [ { role: \"readWrite\", db: \"test\" } ]\n   }\n);\n\n```\n此时用户和关联的库已经创建好，在 robo3T 客户端就可以直接连接使用了。\n\n***\n\n<center>夜深人静的时候，世界才是自己的</center>","source":"_posts/mongo权限设置.md","raw":"---\ntitle: mongo权限设置.md\ndate: 2019-03-28 23:45:33\ntags: mongo\ncategory: mongo\nphotos: \n---\n\n![](mongo权限设置/mongoPower.png)\n\nmongodb 使用起来还是相对简单的，但是在权限设置时，遇到了几个小问题，以至于花了比较久的时间，在给 mongo 设置权限前首先要清楚几点：\n\n<!-- more -->\n\n1. mongo 默认是没有用户的。\n2. mongo 每个数据库由独立的用户来管理。\n因为 mongo 默认是没有用户的，所以首先要创建管理员用户，这里创建管理员用户时要进入 admin 数据库来设置\n\n\n``` bash\n# 进入 adimn 数据库\n> use admin\nswitched to db admin\n> db.createUser(\n   {\n     user: \"admin\", # admin 用户名\n     pwd: \"123456\", # 密码\n     roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ] # admin 此用户作用的目标数据库\n   }\n);\n# 此处创建成功 bash 会返回成功信息\n# 验证权限\n> db.auth(\"admin\",\"123456\");\n1 # 成功会返回1\n```\n至此，mongo 管理员用户已经创建成功了，现在退出 mongo ,在配置文件中开启验证\n\n``` conf\nauth=ture\n```\n重启 mongo\n\n创建 test 数据库，给此数据库创建 test 用户方能连接到此数据库\n\n``` bash\n# 有的话进入，没有则创建此库\n> use test\n> db.createUser(\n   {\n     user: \"test\",\n     pwd: \"123456\",\n     roles: [ { role: \"readWrite\", db: \"test\" } ]\n   }\n);\n\n```\n此时用户和关联的库已经创建好，在 robo3T 客户端就可以直接连接使用了。\n\n***\n\n<center>夜深人静的时候，世界才是自己的</center>","slug":"mongo权限设置","published":1,"updated":"2021-01-31T06:31:35.759Z","comments":1,"layout":"post","link":"","_id":"ckkkzeowo0016rh1t5u4jeg9x","content":"<p><img src=\"/2019/03/28/mongo%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/mongoPower.png\"></p>\n<p>mongodb 使用起来还是相对简单的，但是在权限设置时，遇到了几个小问题，以至于花了比较久的时间，在给 mongo 设置权限前首先要清楚几点：</p>\n<a id=\"more\"></a>\n\n<ol>\n<li>mongo 默认是没有用户的。</li>\n<li>mongo 每个数据库由独立的用户来管理。<br>因为 mongo 默认是没有用户的，所以首先要创建管理员用户，这里创建管理员用户时要进入 admin 数据库来设置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 adimn 数据库</span></span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\">&gt; db.createUser(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     user: <span class=\"string\">&quot;admin&quot;</span>, <span class=\"comment\"># admin 用户名</span></span><br><span class=\"line\">     <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;123456&quot;</span>, <span class=\"comment\"># 密码</span></span><br><span class=\"line\">     roles: [ &#123; role: <span class=\"string\">&quot;userAdminAnyDatabase&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span> &#125; ] <span class=\"comment\"># admin 此用户作用的目标数据库</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\"># 此处创建成功 bash 会返回成功信息</span></span><br><span class=\"line\"><span class=\"comment\"># 验证权限</span></span><br><span class=\"line\">&gt; db.auth(<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">1 <span class=\"comment\"># 成功会返回1</span></span><br></pre></td></tr></table></figure>\n<p>至此，mongo 管理员用户已经创建成功了，现在退出 mongo ,在配置文件中开启验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth&#x3D;ture</span><br></pre></td></tr></table></figure>\n<p>重启 mongo</p>\n<p>创建 test 数据库，给此数据库创建 test 用户方能连接到此数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 有的话进入，没有则创建此库</span></span><br><span class=\"line\">&gt; use <span class=\"built_in\">test</span></span><br><span class=\"line\">&gt; db.createUser(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     user: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">     <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">     roles: [ &#123; role: <span class=\"string\">&quot;readWrite&quot;</span>, db: <span class=\"string\">&quot;test&quot;</span> &#125; ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>此时用户和关联的库已经创建好，在 robo3T 客户端就可以直接连接使用了。</p>\n<hr>\n<center>夜深人静的时候，世界才是自己的</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/03/28/mongo%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/mongoPower.png\"></p>\n<p>mongodb 使用起来还是相对简单的，但是在权限设置时，遇到了几个小问题，以至于花了比较久的时间，在给 mongo 设置权限前首先要清楚几点：</p>","more":"<ol>\n<li>mongo 默认是没有用户的。</li>\n<li>mongo 每个数据库由独立的用户来管理。<br>因为 mongo 默认是没有用户的，所以首先要创建管理员用户，这里创建管理员用户时要进入 admin 数据库来设置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 adimn 数据库</span></span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\">&gt; db.createUser(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     user: <span class=\"string\">&quot;admin&quot;</span>, <span class=\"comment\"># admin 用户名</span></span><br><span class=\"line\">     <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;123456&quot;</span>, <span class=\"comment\"># 密码</span></span><br><span class=\"line\">     roles: [ &#123; role: <span class=\"string\">&quot;userAdminAnyDatabase&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span> &#125; ] <span class=\"comment\"># admin 此用户作用的目标数据库</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\"># 此处创建成功 bash 会返回成功信息</span></span><br><span class=\"line\"><span class=\"comment\"># 验证权限</span></span><br><span class=\"line\">&gt; db.auth(<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">1 <span class=\"comment\"># 成功会返回1</span></span><br></pre></td></tr></table></figure>\n<p>至此，mongo 管理员用户已经创建成功了，现在退出 mongo ,在配置文件中开启验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth&#x3D;ture</span><br></pre></td></tr></table></figure>\n<p>重启 mongo</p>\n<p>创建 test 数据库，给此数据库创建 test 用户方能连接到此数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 有的话进入，没有则创建此库</span></span><br><span class=\"line\">&gt; use <span class=\"built_in\">test</span></span><br><span class=\"line\">&gt; db.createUser(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     user: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">     <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">     roles: [ &#123; role: <span class=\"string\">&quot;readWrite&quot;</span>, db: <span class=\"string\">&quot;test&quot;</span> &#125; ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>此时用户和关联的库已经创建好，在 robo3T 客户端就可以直接连接使用了。</p>\n<hr>\n<center>夜深人静的时候，世界才是自己的</center>"},{"title":"mysql","date":"2020-01-18T14:16:51.000Z","_content":"\n![Photo by WoshWosh on wallhaven.cc](/mysql.png)\n\n\n趁着放假，准备系统的在理一理 MySQL 的知识，所以报名了极客时间上丁奇老师的课程，跟着大神又重新学习了一遍。现在学习东西喜欢记录下来，这样才有种确实学习了知识的感觉。^_^\n\n<!--more-->\n\n#### 结构\n\nMySQL 是由两大部分 server 部分和存储引擎构成的。而 server 部分主要由 连接器，分析器，优化器和执行器组成的，server 部分主要负责客户端的连接，SQL 语句的解析，优化以及执行。 存储引擎主要负责数存储，并且提供数据的读写接口。\n\n##### server\n\nMySQL 前置操作都在这里执行。\n\n###### 连接器\n\n负责管理客户端连接，权限的验证等操作。当验证通过一个用户名和密码之后，此后的操作都是依赖当前权限，也就是说当一个用户连接成功之后，即使管理员修改密码，但是他还是能完成操作。\n\n###### 分析器\n\n当用户通过连接器，SQL 到达之后，一般会先查询缓存（8.0 之前）。如果缓存中存在的话直接返回。没有的话则对 SQL 语句进行语法分析等动作。对于缓存不建议使用，因为当有表涉及到更新时，所有关于当前表的缓存会失效。除非是数据不经常变更的数据表。\n\n###### 优化器\n\n优化器主要是分析 SQL 语句怎样执行最优，然后生成执行方案。\n\n###### 执行器\n\n执行 SQL 语句，返回结果集。\n\n#### 日志系统\n\n##### redo log\n\n在 MySQL 语句更新过程中，如果每次都在磁盘找到相应记录，并且修改记录，写入磁盘的话，效率会很低。所以在执行过程中一些会将修改结果先保存在内存中，然后在 redo log 中记录当前的修改，当事务提交之后。服务在空闲的时候，或者日志空间不够时，在刷新 redo log 中 commit 的数据到磁盘中去。WAL （write-ahead logging）技术, 先写日志，在写磁盘。redo log 是存储引擎 InnoDB 独有的日志记录系统，它保证了在 MySQL 服务宕机之后保证数据不丢失。 可以通过设置参数 `innodb_flush_log_at_trx_commit=1` 保证每次 redo lod 都写在磁盘上，保证重启之后数据不丢失。\n\n##### binlog\n\nMySQL server 层提供的日志系统，支持所有引擎。bin log 是追加的形式写入的，不像 redo log 有大小限制。binlog有两种记录模式，statement格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。\n\n\n#### 事务\n\n在网上购物从确认商品，下订单，扣减库存，到付款成功。这是一个整体的操作。对于这个操作来说，如果有其中一步操作失败，那意味着在它之前的操作都要回滚。这就是一个事务。在这一系列操作中，要么都成功。要么都失败。\n\n事务特性：ACID，原子性（atomictity），一致性（consistency），隔离性（isolation），持久性（durablity）\n\n\n##### 隔离级别\n隔离级别越高，效率越低。\n\n###### 读未提交（read uncommitted）\n\n> 一个事务还没有提交，它的变更能别其他事务看到\n\n\n\n\n###### 读提交（read commit）\n\n> 事务提交之后，变更才能被其他事务看到\n\n\n###### 可重复读（repeatable read）\n\n> 事务启动之后，在事务提交之前，看到的数据和启动之前一致。没有提交的事务对其他事务不可见。\n\n\n###### 串行化（serialiable）\n\n> 对于同一行记录，写会加写锁，读会加读锁，当出现读写锁冲突时，必须等上个事务完成之后才能执行下一个事务。\n\n##### 开启\n```sql\n-- 开启\nbegin (start) transaction;\n-- 提交\ncommit;\n-- 回滚\nrollback;\n```\n或者设置参数\n```sql \n-- 0 关闭自动提交，查询也会自动开启，并且不会自动提交。一直持续到commit/rollback，或者断开连接。\nset autocommit=0\n```\n\n由于 MySQL MVCC 多版本并发控制，每个操作都会有相应的回滚操作保存下来，每个事务都会记录。当设置为自动提交时，连接成功就会执行 set autocommit=0 的操作，每个操作都会在事务中，如果时长连接就会导致意外长事务。**所以一般 set autocommit=1,显示开启事务**\n\n\n\n\n\n\n\n\n\n***\n<center></center>","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ndate: 2020-01-18 22:16:51\ntags: mysql\ncategory: mysql\n---\n\n![Photo by WoshWosh on wallhaven.cc](/mysql.png)\n\n\n趁着放假，准备系统的在理一理 MySQL 的知识，所以报名了极客时间上丁奇老师的课程，跟着大神又重新学习了一遍。现在学习东西喜欢记录下来，这样才有种确实学习了知识的感觉。^_^\n\n<!--more-->\n\n#### 结构\n\nMySQL 是由两大部分 server 部分和存储引擎构成的。而 server 部分主要由 连接器，分析器，优化器和执行器组成的，server 部分主要负责客户端的连接，SQL 语句的解析，优化以及执行。 存储引擎主要负责数存储，并且提供数据的读写接口。\n\n##### server\n\nMySQL 前置操作都在这里执行。\n\n###### 连接器\n\n负责管理客户端连接，权限的验证等操作。当验证通过一个用户名和密码之后，此后的操作都是依赖当前权限，也就是说当一个用户连接成功之后，即使管理员修改密码，但是他还是能完成操作。\n\n###### 分析器\n\n当用户通过连接器，SQL 到达之后，一般会先查询缓存（8.0 之前）。如果缓存中存在的话直接返回。没有的话则对 SQL 语句进行语法分析等动作。对于缓存不建议使用，因为当有表涉及到更新时，所有关于当前表的缓存会失效。除非是数据不经常变更的数据表。\n\n###### 优化器\n\n优化器主要是分析 SQL 语句怎样执行最优，然后生成执行方案。\n\n###### 执行器\n\n执行 SQL 语句，返回结果集。\n\n#### 日志系统\n\n##### redo log\n\n在 MySQL 语句更新过程中，如果每次都在磁盘找到相应记录，并且修改记录，写入磁盘的话，效率会很低。所以在执行过程中一些会将修改结果先保存在内存中，然后在 redo log 中记录当前的修改，当事务提交之后。服务在空闲的时候，或者日志空间不够时，在刷新 redo log 中 commit 的数据到磁盘中去。WAL （write-ahead logging）技术, 先写日志，在写磁盘。redo log 是存储引擎 InnoDB 独有的日志记录系统，它保证了在 MySQL 服务宕机之后保证数据不丢失。 可以通过设置参数 `innodb_flush_log_at_trx_commit=1` 保证每次 redo lod 都写在磁盘上，保证重启之后数据不丢失。\n\n##### binlog\n\nMySQL server 层提供的日志系统，支持所有引擎。bin log 是追加的形式写入的，不像 redo log 有大小限制。binlog有两种记录模式，statement格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。\n\n\n#### 事务\n\n在网上购物从确认商品，下订单，扣减库存，到付款成功。这是一个整体的操作。对于这个操作来说，如果有其中一步操作失败，那意味着在它之前的操作都要回滚。这就是一个事务。在这一系列操作中，要么都成功。要么都失败。\n\n事务特性：ACID，原子性（atomictity），一致性（consistency），隔离性（isolation），持久性（durablity）\n\n\n##### 隔离级别\n隔离级别越高，效率越低。\n\n###### 读未提交（read uncommitted）\n\n> 一个事务还没有提交，它的变更能别其他事务看到\n\n\n\n\n###### 读提交（read commit）\n\n> 事务提交之后，变更才能被其他事务看到\n\n\n###### 可重复读（repeatable read）\n\n> 事务启动之后，在事务提交之前，看到的数据和启动之前一致。没有提交的事务对其他事务不可见。\n\n\n###### 串行化（serialiable）\n\n> 对于同一行记录，写会加写锁，读会加读锁，当出现读写锁冲突时，必须等上个事务完成之后才能执行下一个事务。\n\n##### 开启\n```sql\n-- 开启\nbegin (start) transaction;\n-- 提交\ncommit;\n-- 回滚\nrollback;\n```\n或者设置参数\n```sql \n-- 0 关闭自动提交，查询也会自动开启，并且不会自动提交。一直持续到commit/rollback，或者断开连接。\nset autocommit=0\n```\n\n由于 MySQL MVCC 多版本并发控制，每个操作都会有相应的回滚操作保存下来，每个事务都会记录。当设置为自动提交时，连接成功就会执行 set autocommit=0 的操作，每个操作都会在事务中，如果时长连接就会导致意外长事务。**所以一般 set autocommit=1,显示开启事务**\n\n\n\n\n\n\n\n\n\n***\n<center></center>","slug":"mysql","published":1,"updated":"2021-01-31T06:31:35.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowp0018rh1t6tbs64u5","content":"<p><img src=\"/2020/01/18/mysql/mysql.png\" alt=\"Photo by WoshWosh on wallhaven.cc\"></p>\n<p>趁着放假，准备系统的在理一理 MySQL 的知识，所以报名了极客时间上丁奇老师的课程，跟着大神又重新学习了一遍。现在学习东西喜欢记录下来，这样才有种确实学习了知识的感觉。^_^</p>\n<a id=\"more\"></a>\n\n<h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>MySQL 是由两大部分 server 部分和存储引擎构成的。而 server 部分主要由 连接器，分析器，优化器和执行器组成的，server 部分主要负责客户端的连接，SQL 语句的解析，优化以及执行。 存储引擎主要负责数存储，并且提供数据的读写接口。</p>\n<h5 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h5><p>MySQL 前置操作都在这里执行。</p>\n<h6 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h6><p>负责管理客户端连接，权限的验证等操作。当验证通过一个用户名和密码之后，此后的操作都是依赖当前权限，也就是说当一个用户连接成功之后，即使管理员修改密码，但是他还是能完成操作。</p>\n<h6 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h6><p>当用户通过连接器，SQL 到达之后，一般会先查询缓存（8.0 之前）。如果缓存中存在的话直接返回。没有的话则对 SQL 语句进行语法分析等动作。对于缓存不建议使用，因为当有表涉及到更新时，所有关于当前表的缓存会失效。除非是数据不经常变更的数据表。</p>\n<h6 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h6><p>优化器主要是分析 SQL 语句怎样执行最优，然后生成执行方案。</p>\n<h6 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h6><p>执行 SQL 语句，返回结果集。</p>\n<h4 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h4><h5 id=\"redo-log\"><a href=\"#redo-log\" class=\"headerlink\" title=\"redo log\"></a>redo log</h5><p>在 MySQL 语句更新过程中，如果每次都在磁盘找到相应记录，并且修改记录，写入磁盘的话，效率会很低。所以在执行过程中一些会将修改结果先保存在内存中，然后在 redo log 中记录当前的修改，当事务提交之后。服务在空闲的时候，或者日志空间不够时，在刷新 redo log 中 commit 的数据到磁盘中去。WAL （write-ahead logging）技术, 先写日志，在写磁盘。redo log 是存储引擎 InnoDB 独有的日志记录系统，它保证了在 MySQL 服务宕机之后保证数据不丢失。 可以通过设置参数 <code>innodb_flush_log_at_trx_commit=1</code> 保证每次 redo lod 都写在磁盘上，保证重启之后数据不丢失。</p>\n<h5 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h5><p>MySQL server 层提供的日志系统，支持所有引擎。bin log 是追加的形式写入的，不像 redo log 有大小限制。binlog有两种记录模式，statement格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。</p>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>在网上购物从确认商品，下订单，扣减库存，到付款成功。这是一个整体的操作。对于这个操作来说，如果有其中一步操作失败，那意味着在它之前的操作都要回滚。这就是一个事务。在这一系列操作中，要么都成功。要么都失败。</p>\n<p>事务特性：ACID，原子性（atomictity），一致性（consistency），隔离性（isolation），持久性（durablity）</p>\n<h5 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h5><p>隔离级别越高，效率越低。</p>\n<h6 id=\"读未提交（read-uncommitted）\"><a href=\"#读未提交（read-uncommitted）\" class=\"headerlink\" title=\"读未提交（read uncommitted）\"></a>读未提交（read uncommitted）</h6><blockquote>\n<p>一个事务还没有提交，它的变更能别其他事务看到</p>\n</blockquote>\n<h6 id=\"读提交（read-commit）\"><a href=\"#读提交（read-commit）\" class=\"headerlink\" title=\"读提交（read commit）\"></a>读提交（read commit）</h6><blockquote>\n<p>事务提交之后，变更才能被其他事务看到</p>\n</blockquote>\n<h6 id=\"可重复读（repeatable-read）\"><a href=\"#可重复读（repeatable-read）\" class=\"headerlink\" title=\"可重复读（repeatable read）\"></a>可重复读（repeatable read）</h6><blockquote>\n<p>事务启动之后，在事务提交之前，看到的数据和启动之前一致。没有提交的事务对其他事务不可见。</p>\n</blockquote>\n<h6 id=\"串行化（serialiable）\"><a href=\"#串行化（serialiable）\" class=\"headerlink\" title=\"串行化（serialiable）\"></a>串行化（serialiable）</h6><blockquote>\n<p>对于同一行记录，写会加写锁，读会加读锁，当出现读写锁冲突时，必须等上个事务完成之后才能执行下一个事务。</p>\n</blockquote>\n<h5 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span> (<span class=\"keyword\">start</span>) transaction;</span><br><span class=\"line\"><span class=\"comment\">-- 提交</span></span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 回滚</span></span><br><span class=\"line\"><span class=\"keyword\">rollback</span>;</span><br></pre></td></tr></table></figure>\n<p>或者设置参数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 0 关闭自动提交，查询也会自动开启，并且不会自动提交。一直持续到commit/rollback，或者断开连接。</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autocommit<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>由于 MySQL MVCC 多版本并发控制，每个操作都会有相应的回滚操作保存下来，每个事务都会记录。当设置为自动提交时，连接成功就会执行 set autocommit=0 的操作，每个操作都会在事务中，如果时长连接就会导致意外长事务。<strong>所以一般 set autocommit=1,显示开启事务</strong></p>\n<hr>\n<center></center>","site":{"data":{}},"excerpt":"<p><img src=\"/2020/01/18/mysql/mysql.png\" alt=\"Photo by WoshWosh on wallhaven.cc\"></p>\n<p>趁着放假，准备系统的在理一理 MySQL 的知识，所以报名了极客时间上丁奇老师的课程，跟着大神又重新学习了一遍。现在学习东西喜欢记录下来，这样才有种确实学习了知识的感觉。^_^</p>","more":"<h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>MySQL 是由两大部分 server 部分和存储引擎构成的。而 server 部分主要由 连接器，分析器，优化器和执行器组成的，server 部分主要负责客户端的连接，SQL 语句的解析，优化以及执行。 存储引擎主要负责数存储，并且提供数据的读写接口。</p>\n<h5 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h5><p>MySQL 前置操作都在这里执行。</p>\n<h6 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h6><p>负责管理客户端连接，权限的验证等操作。当验证通过一个用户名和密码之后，此后的操作都是依赖当前权限，也就是说当一个用户连接成功之后，即使管理员修改密码，但是他还是能完成操作。</p>\n<h6 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h6><p>当用户通过连接器，SQL 到达之后，一般会先查询缓存（8.0 之前）。如果缓存中存在的话直接返回。没有的话则对 SQL 语句进行语法分析等动作。对于缓存不建议使用，因为当有表涉及到更新时，所有关于当前表的缓存会失效。除非是数据不经常变更的数据表。</p>\n<h6 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h6><p>优化器主要是分析 SQL 语句怎样执行最优，然后生成执行方案。</p>\n<h6 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h6><p>执行 SQL 语句，返回结果集。</p>\n<h4 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h4><h5 id=\"redo-log\"><a href=\"#redo-log\" class=\"headerlink\" title=\"redo log\"></a>redo log</h5><p>在 MySQL 语句更新过程中，如果每次都在磁盘找到相应记录，并且修改记录，写入磁盘的话，效率会很低。所以在执行过程中一些会将修改结果先保存在内存中，然后在 redo log 中记录当前的修改，当事务提交之后。服务在空闲的时候，或者日志空间不够时，在刷新 redo log 中 commit 的数据到磁盘中去。WAL （write-ahead logging）技术, 先写日志，在写磁盘。redo log 是存储引擎 InnoDB 独有的日志记录系统，它保证了在 MySQL 服务宕机之后保证数据不丢失。 可以通过设置参数 <code>innodb_flush_log_at_trx_commit=1</code> 保证每次 redo lod 都写在磁盘上，保证重启之后数据不丢失。</p>\n<h5 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h5><p>MySQL server 层提供的日志系统，支持所有引擎。bin log 是追加的形式写入的，不像 redo log 有大小限制。binlog有两种记录模式，statement格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。</p>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>在网上购物从确认商品，下订单，扣减库存，到付款成功。这是一个整体的操作。对于这个操作来说，如果有其中一步操作失败，那意味着在它之前的操作都要回滚。这就是一个事务。在这一系列操作中，要么都成功。要么都失败。</p>\n<p>事务特性：ACID，原子性（atomictity），一致性（consistency），隔离性（isolation），持久性（durablity）</p>\n<h5 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h5><p>隔离级别越高，效率越低。</p>\n<h6 id=\"读未提交（read-uncommitted）\"><a href=\"#读未提交（read-uncommitted）\" class=\"headerlink\" title=\"读未提交（read uncommitted）\"></a>读未提交（read uncommitted）</h6><blockquote>\n<p>一个事务还没有提交，它的变更能别其他事务看到</p>\n</blockquote>\n<h6 id=\"读提交（read-commit）\"><a href=\"#读提交（read-commit）\" class=\"headerlink\" title=\"读提交（read commit）\"></a>读提交（read commit）</h6><blockquote>\n<p>事务提交之后，变更才能被其他事务看到</p>\n</blockquote>\n<h6 id=\"可重复读（repeatable-read）\"><a href=\"#可重复读（repeatable-read）\" class=\"headerlink\" title=\"可重复读（repeatable read）\"></a>可重复读（repeatable read）</h6><blockquote>\n<p>事务启动之后，在事务提交之前，看到的数据和启动之前一致。没有提交的事务对其他事务不可见。</p>\n</blockquote>\n<h6 id=\"串行化（serialiable）\"><a href=\"#串行化（serialiable）\" class=\"headerlink\" title=\"串行化（serialiable）\"></a>串行化（serialiable）</h6><blockquote>\n<p>对于同一行记录，写会加写锁，读会加读锁，当出现读写锁冲突时，必须等上个事务完成之后才能执行下一个事务。</p>\n</blockquote>\n<h5 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span> (<span class=\"keyword\">start</span>) transaction;</span><br><span class=\"line\"><span class=\"comment\">-- 提交</span></span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 回滚</span></span><br><span class=\"line\"><span class=\"keyword\">rollback</span>;</span><br></pre></td></tr></table></figure>\n<p>或者设置参数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 0 关闭自动提交，查询也会自动开启，并且不会自动提交。一直持续到commit/rollback，或者断开连接。</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autocommit<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>由于 MySQL MVCC 多版本并发控制，每个操作都会有相应的回滚操作保存下来，每个事务都会记录。当设置为自动提交时，连接成功就会执行 set autocommit=0 的操作，每个操作都会在事务中，如果时长连接就会导致意外长事务。<strong>所以一般 set autocommit=1,显示开启事务</strong></p>\n<hr>\n<center></center>"},{"title":"netty","date":"2020-01-14T15:54:00.000Z","_content":"\n![Photo by deleted on wallhaven.cc](/netty.png)\n\n\n介绍\n1. 高性能，时间驱动，异步非阻塞\n2. 基于 NIO 的客户端，服务端编程框架\n3. 可靠的稳定性和伸缩性\n\n应用场景\n1. 高性能领域\n2. 多线程并发领域\n3. 异步通信领域\n\n\nJava IO 通信\n\nBIO 通信\n\n1. 一个客户端对应一个线程，当客户端个数增多时，服务端线程也随之增多，而线程对于服务端来说是一种有限资源。\n\n伪异步 IO 通信\n\n1. 线程池负责连接，当有大量请求进来时，也不会导致线程剧增而宕机。\n\nNIO 通信\n\n1. 缓冲区 buffer\n2. 通道 channel （支持同时可读可写）\n3. 多路复用器 selector\n\n\nAIO 通信\n\n1. 连接注册读写时间和回调函数\n2. 读写方法异步\n3. 主动通知程序\n\n\n\nNetty \n\n优点：\n1. API 简单\n2. 入门门槛低\n3. 性能高\n4. 成熟，稳定\n\n\n\n\n\nhttp: 半双工协议（）\nwebSocket：全双工协议\n","source":"_posts/netty-un.md","raw":"---\ntitle: netty\ndate: 2020-01-14 23:54:00\ntags: netty\ncategory: netty\n---\n\n![Photo by deleted on wallhaven.cc](/netty.png)\n\n\n介绍\n1. 高性能，时间驱动，异步非阻塞\n2. 基于 NIO 的客户端，服务端编程框架\n3. 可靠的稳定性和伸缩性\n\n应用场景\n1. 高性能领域\n2. 多线程并发领域\n3. 异步通信领域\n\n\nJava IO 通信\n\nBIO 通信\n\n1. 一个客户端对应一个线程，当客户端个数增多时，服务端线程也随之增多，而线程对于服务端来说是一种有限资源。\n\n伪异步 IO 通信\n\n1. 线程池负责连接，当有大量请求进来时，也不会导致线程剧增而宕机。\n\nNIO 通信\n\n1. 缓冲区 buffer\n2. 通道 channel （支持同时可读可写）\n3. 多路复用器 selector\n\n\nAIO 通信\n\n1. 连接注册读写时间和回调函数\n2. 读写方法异步\n3. 主动通知程序\n\n\n\nNetty \n\n优点：\n1. API 简单\n2. 入门门槛低\n3. 性能高\n4. 成熟，稳定\n\n\n\n\n\nhttp: 半双工协议（）\nwebSocket：全双工协议\n","slug":"netty-un","published":1,"updated":"2021-01-31T06:31:35.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowq001brh1tavvb654t","content":"<p><img src=\"/2020/01/14/netty-un/netty.png\" alt=\"Photo by deleted on wallhaven.cc\"></p>\n<p>介绍</p>\n<ol>\n<li>高性能，时间驱动，异步非阻塞</li>\n<li>基于 NIO 的客户端，服务端编程框架</li>\n<li>可靠的稳定性和伸缩性</li>\n</ol>\n<p>应用场景</p>\n<ol>\n<li>高性能领域</li>\n<li>多线程并发领域</li>\n<li>异步通信领域</li>\n</ol>\n<p>Java IO 通信</p>\n<p>BIO 通信</p>\n<ol>\n<li>一个客户端对应一个线程，当客户端个数增多时，服务端线程也随之增多，而线程对于服务端来说是一种有限资源。</li>\n</ol>\n<p>伪异步 IO 通信</p>\n<ol>\n<li>线程池负责连接，当有大量请求进来时，也不会导致线程剧增而宕机。</li>\n</ol>\n<p>NIO 通信</p>\n<ol>\n<li>缓冲区 buffer</li>\n<li>通道 channel （支持同时可读可写）</li>\n<li>多路复用器 selector</li>\n</ol>\n<p>AIO 通信</p>\n<ol>\n<li>连接注册读写时间和回调函数</li>\n<li>读写方法异步</li>\n<li>主动通知程序</li>\n</ol>\n<p>Netty </p>\n<p>优点：</p>\n<ol>\n<li>API 简单</li>\n<li>入门门槛低</li>\n<li>性能高</li>\n<li>成熟，稳定</li>\n</ol>\n<p>http: 半双工协议（）<br>webSocket：全双工协议</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2020/01/14/netty-un/netty.png\" alt=\"Photo by deleted on wallhaven.cc\"></p>\n<p>介绍</p>\n<ol>\n<li>高性能，时间驱动，异步非阻塞</li>\n<li>基于 NIO 的客户端，服务端编程框架</li>\n<li>可靠的稳定性和伸缩性</li>\n</ol>\n<p>应用场景</p>\n<ol>\n<li>高性能领域</li>\n<li>多线程并发领域</li>\n<li>异步通信领域</li>\n</ol>\n<p>Java IO 通信</p>\n<p>BIO 通信</p>\n<ol>\n<li>一个客户端对应一个线程，当客户端个数增多时，服务端线程也随之增多，而线程对于服务端来说是一种有限资源。</li>\n</ol>\n<p>伪异步 IO 通信</p>\n<ol>\n<li>线程池负责连接，当有大量请求进来时，也不会导致线程剧增而宕机。</li>\n</ol>\n<p>NIO 通信</p>\n<ol>\n<li>缓冲区 buffer</li>\n<li>通道 channel （支持同时可读可写）</li>\n<li>多路复用器 selector</li>\n</ol>\n<p>AIO 通信</p>\n<ol>\n<li>连接注册读写时间和回调函数</li>\n<li>读写方法异步</li>\n<li>主动通知程序</li>\n</ol>\n<p>Netty </p>\n<p>优点：</p>\n<ol>\n<li>API 简单</li>\n<li>入门门槛低</li>\n<li>性能高</li>\n<li>成熟，稳定</li>\n</ol>\n<p>http: 半双工协议（）<br>webSocket：全双工协议</p>\n"},{"title":"nginx安装和使用","date":"2019-11-25T15:25:00.000Z","_content":"\n![Photo by deleted on wallhaven.cc](/nginx.png)\n\nnginx 是互联网公司必不可少的一个中间件。它不仅性能好，而且资源占用极低。nginx [中文文档](http://www.nginx.cn/doc/)，[官方下载地址](http://nginx.org/en/download.html)\n\n<!--more-->\n\n\n#### 安装\n\n```bash\n# 安装 epel 源，如果 yum 安装时提示没有找到 nginx 的话\nyum install epel-release\n\nyum install nginx\n```\n\n#### 命令\n\n##### 启动\n```bash\nnginx\n```\n##### 关闭\n```bash\nnginx -s stop\n```\n##### 重新加载配置\n```bash\nnginx -s reload\n```\n\n##### 配置检查\n```bash\nnginx -t\n```\n\n#### 配置\n\nmain 配置\n\n```bash\n# 指定 worker 进程的运行身份，如组不指定，默认和用户名同名\nuser nginx;\n# worker 进程的数量，通常为当前主机 cpu 物理核心数\nworker_processes auto;\n# worker 进程能够打开的文件数量上限（支持的并发数如：65535）\nworker_rlimit_nofile number\nerror_log /var/log/nginx/error.log;\n# 指定存储 nginx 主进程 PID 的文件路径\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\n# 指明包含进来的其他配置文件片段\ninclude /usr/share/nginx/modules/*.conf;\n# 后台执行，默认 on 开启，off 则关闭，适合调试使用\ndaemon off;\n# 是否以 master/worker 模式运行，默认 on ，off 将不启动 worker\nmaster_process on|off\n```\nevents 配置\n\n```bash\nevents{\n      }\n# 参数\n# 每个 worker 进程所能够打开的最大并发链接数数量\n# 总最大并发数：worker_processes * worker_connections\nworker_connections number\n# 并发连接请求处理方式，默认选择最优 epoll\nuse epoll/select\n# 处理新连接请求方法，on 指 worker 轮流处理新请求，off 指每个新请求到达会通知（唤醒）所有 worker 进程，但是只有一个进程可以获得连接，造成‘惊群’，影响性能。\naccept_mutex on | off\n```\nhttp 配置\n \n```bash\nhttp{\n    # 各个 server 的公共配置\n    server{\n      # 每个 server 用于定义一个虚拟主机  \n    }\n    server{\n        # 当前虚拟主机监听的端口\n        listen IP:PORT                       # ipV4 地址\n        listen       [::]:80 default_server; # ipV6 地址\n        # 当前虚拟主机名称 eg：www.baidu.com\n        server_name 虚拟主机名\n        # root：server 虚拟主机下的根目录\n        root        主目录\n        location [OPERATOR] URL {  # 指定 URL 的特性\n            if CONDITION{\n\n            }\n        }\n    }\n}\n```\nserver_name\n\n```bash\n 1. 虚拟主机名称后可以跟多个由空白字符分割的字符串\n 2. 支持 * 通配任意长度的任意字符：server_name *.baidu.com www.baidu.*\n 3. 支持 ~ 起始的字符做正则表达式匹配，但是存在性能问题：server_name ~^www\\d+\\.baidu\\.com$\n 匹配优先级：\n a. 字符串精确匹。b. 左侧 * 通配符。c. 右侧 * 通配符 eg:com.www.baidu.* 。 d. 正则。e. defult_server\n```\nlocation 配置\n\n```bash\n# 在一个 sever 中 location 配置段可存在多个，用于实现从 uri 到文件系统的路径映射，nginx 会根据用户请求的 uri 来检查定义的所有 location,并找出一个最佳匹配进行应用。\nlocation [ = | ~ | ~* | ^~ ] uri { ... }\nlocation @name { ... }\n```\nlocation 中也有 root 路径，当请求是具体的 location 指向的路径时，走 location 中的 root 目录\n```bash\n# 如果访问 http:192.168.31.107/news 则访问的时 location 指向的 /usr/local/html/news 目录下的文件，不带路径则访问的是 server 下 root 目录下的文件\nserver {\n        listen       80 default_server;\n        server_name  _;\n        root        /usr/local/html;\n        location /news {\n                root /usr/local/html\n        }\n    }\n```\n\n路径解析\n> 在 location 中指定路径有两种方式，一种是 root，一种是 alias。它们之间的区别是：\n> root 方式处理结果 = root 路径 + location 路径\n> alias 方式处理结果 = alias 路径直接替换 location 路径。\n\n\n\n匹配：\n`=` ：对 URL 精确匹配；\n```bash\nlocation = /{  }  只能精确匹配 http:fengzhu.top/  \n```\n`^~`：对 URL　的最右边部分做匹配检查，不区分字符大小写\n`~`：对 URL 做正则匹配，区分大小写\n`~*`：对 URL 做正则匹配，不区分大小写\n不带符号：匹配起始于此 URL 的所有 URL\n优先级：=,^~,~/~*,不带符号\n\n**还是要自己配置试试，才能知道具体是怎么运行的**\n\n***\n\n<center>just do it</center>","source":"_posts/nginx安装和使用.md","raw":"---\ntitle: nginx安装和使用\ndate: 2019-11-25 23:25:00\ntags: nginx\ncategory: nginx\n---\n\n![Photo by deleted on wallhaven.cc](/nginx.png)\n\nnginx 是互联网公司必不可少的一个中间件。它不仅性能好，而且资源占用极低。nginx [中文文档](http://www.nginx.cn/doc/)，[官方下载地址](http://nginx.org/en/download.html)\n\n<!--more-->\n\n\n#### 安装\n\n```bash\n# 安装 epel 源，如果 yum 安装时提示没有找到 nginx 的话\nyum install epel-release\n\nyum install nginx\n```\n\n#### 命令\n\n##### 启动\n```bash\nnginx\n```\n##### 关闭\n```bash\nnginx -s stop\n```\n##### 重新加载配置\n```bash\nnginx -s reload\n```\n\n##### 配置检查\n```bash\nnginx -t\n```\n\n#### 配置\n\nmain 配置\n\n```bash\n# 指定 worker 进程的运行身份，如组不指定，默认和用户名同名\nuser nginx;\n# worker 进程的数量，通常为当前主机 cpu 物理核心数\nworker_processes auto;\n# worker 进程能够打开的文件数量上限（支持的并发数如：65535）\nworker_rlimit_nofile number\nerror_log /var/log/nginx/error.log;\n# 指定存储 nginx 主进程 PID 的文件路径\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\n# 指明包含进来的其他配置文件片段\ninclude /usr/share/nginx/modules/*.conf;\n# 后台执行，默认 on 开启，off 则关闭，适合调试使用\ndaemon off;\n# 是否以 master/worker 模式运行，默认 on ，off 将不启动 worker\nmaster_process on|off\n```\nevents 配置\n\n```bash\nevents{\n      }\n# 参数\n# 每个 worker 进程所能够打开的最大并发链接数数量\n# 总最大并发数：worker_processes * worker_connections\nworker_connections number\n# 并发连接请求处理方式，默认选择最优 epoll\nuse epoll/select\n# 处理新连接请求方法，on 指 worker 轮流处理新请求，off 指每个新请求到达会通知（唤醒）所有 worker 进程，但是只有一个进程可以获得连接，造成‘惊群’，影响性能。\naccept_mutex on | off\n```\nhttp 配置\n \n```bash\nhttp{\n    # 各个 server 的公共配置\n    server{\n      # 每个 server 用于定义一个虚拟主机  \n    }\n    server{\n        # 当前虚拟主机监听的端口\n        listen IP:PORT                       # ipV4 地址\n        listen       [::]:80 default_server; # ipV6 地址\n        # 当前虚拟主机名称 eg：www.baidu.com\n        server_name 虚拟主机名\n        # root：server 虚拟主机下的根目录\n        root        主目录\n        location [OPERATOR] URL {  # 指定 URL 的特性\n            if CONDITION{\n\n            }\n        }\n    }\n}\n```\nserver_name\n\n```bash\n 1. 虚拟主机名称后可以跟多个由空白字符分割的字符串\n 2. 支持 * 通配任意长度的任意字符：server_name *.baidu.com www.baidu.*\n 3. 支持 ~ 起始的字符做正则表达式匹配，但是存在性能问题：server_name ~^www\\d+\\.baidu\\.com$\n 匹配优先级：\n a. 字符串精确匹。b. 左侧 * 通配符。c. 右侧 * 通配符 eg:com.www.baidu.* 。 d. 正则。e. defult_server\n```\nlocation 配置\n\n```bash\n# 在一个 sever 中 location 配置段可存在多个，用于实现从 uri 到文件系统的路径映射，nginx 会根据用户请求的 uri 来检查定义的所有 location,并找出一个最佳匹配进行应用。\nlocation [ = | ~ | ~* | ^~ ] uri { ... }\nlocation @name { ... }\n```\nlocation 中也有 root 路径，当请求是具体的 location 指向的路径时，走 location 中的 root 目录\n```bash\n# 如果访问 http:192.168.31.107/news 则访问的时 location 指向的 /usr/local/html/news 目录下的文件，不带路径则访问的是 server 下 root 目录下的文件\nserver {\n        listen       80 default_server;\n        server_name  _;\n        root        /usr/local/html;\n        location /news {\n                root /usr/local/html\n        }\n    }\n```\n\n路径解析\n> 在 location 中指定路径有两种方式，一种是 root，一种是 alias。它们之间的区别是：\n> root 方式处理结果 = root 路径 + location 路径\n> alias 方式处理结果 = alias 路径直接替换 location 路径。\n\n\n\n匹配：\n`=` ：对 URL 精确匹配；\n```bash\nlocation = /{  }  只能精确匹配 http:fengzhu.top/  \n```\n`^~`：对 URL　的最右边部分做匹配检查，不区分字符大小写\n`~`：对 URL 做正则匹配，区分大小写\n`~*`：对 URL 做正则匹配，不区分大小写\n不带符号：匹配起始于此 URL 的所有 URL\n优先级：=,^~,~/~*,不带符号\n\n**还是要自己配置试试，才能知道具体是怎么运行的**\n\n***\n\n<center>just do it</center>","slug":"nginx安装和使用","published":1,"updated":"2021-01-31T09:30:08.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowr001crh1t6t62ez0m","content":"<p><img src=\"/2019/11/25/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/nginx.png\" alt=\"Photo by deleted on wallhaven.cc\"></p>\n<p>nginx 是互联网公司必不可少的一个中间件。它不仅性能好，而且资源占用极低。nginx <a class=\"link\" href=\"http://www.nginx.cn/doc/\">中文文档<i class=\"fas fa-external-link-alt\"></i></a>，<a class=\"link\" href=\"http://nginx.org/en/download.html\">官方下载地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<a id=\"more\"></a>\n\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 epel 源，如果 yum 安装时提示没有找到 nginx 的话</span></span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h5 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n<h5 id=\"重新加载配置\"><a href=\"#重新加载配置\" class=\"headerlink\" title=\"重新加载配置\"></a>重新加载配置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置检查\"><a href=\"#配置检查\" class=\"headerlink\" title=\"配置检查\"></a>配置检查</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>main 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 worker 进程的运行身份，如组不指定，默认和用户名同名</span></span><br><span class=\"line\">user nginx;</span><br><span class=\"line\"><span class=\"comment\"># worker 进程的数量，通常为当前主机 cpu 物理核心数</span></span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\"><span class=\"comment\"># worker 进程能够打开的文件数量上限（支持的并发数如：65535）</span></span><br><span class=\"line\">worker_rlimit_nofile number</span><br><span class=\"line\">error_log /var/<span class=\"built_in\">log</span>/nginx/error.log;</span><br><span class=\"line\"><span class=\"comment\"># 指定存储 nginx 主进程 PID 的文件路径</span></span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"comment\"># 指明包含进来的其他配置文件片段</span></span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"><span class=\"comment\"># 后台执行，默认 on 开启，off 则关闭，适合调试使用</span></span><br><span class=\"line\">daemon off;</span><br><span class=\"line\"><span class=\"comment\"># 是否以 master/worker 模式运行，默认 on ，off 将不启动 worker</span></span><br><span class=\"line\">master_process on|off</span><br></pre></td></tr></table></figure>\n<p>events 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\"># 参数</span></span><br><span class=\"line\"><span class=\"comment\"># 每个 worker 进程所能够打开的最大并发链接数数量</span></span><br><span class=\"line\"><span class=\"comment\"># 总最大并发数：worker_processes * worker_connections</span></span><br><span class=\"line\">worker_connections number</span><br><span class=\"line\"><span class=\"comment\"># 并发连接请求处理方式，默认选择最优 epoll</span></span><br><span class=\"line\">use epoll/select</span><br><span class=\"line\"><span class=\"comment\"># 处理新连接请求方法，on 指 worker 轮流处理新请求，off 指每个新请求到达会通知（唤醒）所有 worker 进程，但是只有一个进程可以获得连接，造成‘惊群’，影响性能。</span></span><br><span class=\"line\">accept_mutex on | off</span><br></pre></td></tr></table></figure>\n<p>http 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 各个 server 的公共配置</span></span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 每个 server 用于定义一个虚拟主机  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\"># 当前虚拟主机监听的端口</span></span><br><span class=\"line\">        listen IP:PORT                       <span class=\"comment\"># ipV4 地址</span></span><br><span class=\"line\">        listen       [::]:80 default_server; <span class=\"comment\"># ipV6 地址</span></span><br><span class=\"line\">        <span class=\"comment\"># 当前虚拟主机名称 eg：www.baidu.com</span></span><br><span class=\"line\">        server_name 虚拟主机名</span><br><span class=\"line\">        <span class=\"comment\"># root：server 虚拟主机下的根目录</span></span><br><span class=\"line\">        root        主目录</span><br><span class=\"line\">        location [OPERATOR] URL &#123;  <span class=\"comment\"># 指定 URL 的特性</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> CONDITION&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server_name</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 虚拟主机名称后可以跟多个由空白字符分割的字符串</span><br><span class=\"line\">2. 支持 * 通配任意长度的任意字符：server_name *.baidu.com www.baidu.*</span><br><span class=\"line\">3. 支持 ~ 起始的字符做正则表达式匹配，但是存在性能问题：server_name ~^www\\d+\\.baidu\\.com$</span><br><span class=\"line\">匹配优先级：</span><br><span class=\"line\">a. 字符串精确匹。b. 左侧 * 通配符。c. 右侧 * 通配符 eg:com.www.baidu.* 。 d. 正则。e. defult_server</span><br></pre></td></tr></table></figure>\n<p>location 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在一个 sever 中 location 配置段可存在多个，用于实现从 uri 到文件系统的路径映射，nginx 会根据用户请求的 uri 来检查定义的所有 location,并找出一个最佳匹配进行应用。</span></span><br><span class=\"line\">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class=\"line\">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>location 中也有 root 路径，当请求是具体的 location 指向的路径时，走 location 中的 root 目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果访问 http:192.168.31.107/news 则访问的时 location 指向的 /usr/local/html/news 目录下的文件，不带路径则访问的是 server 下 root 目录下的文件</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root        /usr/<span class=\"built_in\">local</span>/html;</span><br><span class=\"line\">        location /news &#123;</span><br><span class=\"line\">                root /usr/<span class=\"built_in\">local</span>/html</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>路径解析</p>\n<blockquote>\n<p>在 location 中指定路径有两种方式，一种是 root，一种是 alias。它们之间的区别是：<br>root 方式处理结果 = root 路径 + location 路径<br>alias 方式处理结果 = alias 路径直接替换 location 路径。</p>\n</blockquote>\n<p>匹配：<br><code>=</code> ：对 URL 精确匹配；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = /&#123;  &#125;  只能精确匹配 http:fengzhu.top/  </span><br></pre></td></tr></table></figure>\n<p><code>^~</code>：对 URL　的最右边部分做匹配检查，不区分字符大小写<br><code>~</code>：对 URL 做正则匹配，区分大小写<br><code>~*</code>：对 URL 做正则匹配，不区分大小写<br>不带符号：匹配起始于此 URL 的所有 URL<br>优先级：=,^<del>,</del>/~*,不带符号</p>\n<p><strong>还是要自己配置试试，才能知道具体是怎么运行的</strong></p>\n<hr>\n<center>just do it</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/11/25/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/nginx.png\" alt=\"Photo by deleted on wallhaven.cc\"></p>\n<p>nginx 是互联网公司必不可少的一个中间件。它不仅性能好，而且资源占用极低。nginx <a class=\"link\" href=\"http://www.nginx.cn/doc/\">中文文档<i class=\"fas fa-external-link-alt\"></i></a>，<a class=\"link\" href=\"http://nginx.org/en/download.html\">官方下载地址<i class=\"fas fa-external-link-alt\"></i></a></p>","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 epel 源，如果 yum 安装时提示没有找到 nginx 的话</span></span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h5 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop</span><br></pre></td></tr></table></figure>\n<h5 id=\"重新加载配置\"><a href=\"#重新加载配置\" class=\"headerlink\" title=\"重新加载配置\"></a>重新加载配置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置检查\"><a href=\"#配置检查\" class=\"headerlink\" title=\"配置检查\"></a>配置检查</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>main 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 worker 进程的运行身份，如组不指定，默认和用户名同名</span></span><br><span class=\"line\">user nginx;</span><br><span class=\"line\"><span class=\"comment\"># worker 进程的数量，通常为当前主机 cpu 物理核心数</span></span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\"><span class=\"comment\"># worker 进程能够打开的文件数量上限（支持的并发数如：65535）</span></span><br><span class=\"line\">worker_rlimit_nofile number</span><br><span class=\"line\">error_log /var/<span class=\"built_in\">log</span>/nginx/error.log;</span><br><span class=\"line\"><span class=\"comment\"># 指定存储 nginx 主进程 PID 的文件路径</span></span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"comment\"># 指明包含进来的其他配置文件片段</span></span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"><span class=\"comment\"># 后台执行，默认 on 开启，off 则关闭，适合调试使用</span></span><br><span class=\"line\">daemon off;</span><br><span class=\"line\"><span class=\"comment\"># 是否以 master/worker 模式运行，默认 on ，off 将不启动 worker</span></span><br><span class=\"line\">master_process on|off</span><br></pre></td></tr></table></figure>\n<p>events 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\"># 参数</span></span><br><span class=\"line\"><span class=\"comment\"># 每个 worker 进程所能够打开的最大并发链接数数量</span></span><br><span class=\"line\"><span class=\"comment\"># 总最大并发数：worker_processes * worker_connections</span></span><br><span class=\"line\">worker_connections number</span><br><span class=\"line\"><span class=\"comment\"># 并发连接请求处理方式，默认选择最优 epoll</span></span><br><span class=\"line\">use epoll/select</span><br><span class=\"line\"><span class=\"comment\"># 处理新连接请求方法，on 指 worker 轮流处理新请求，off 指每个新请求到达会通知（唤醒）所有 worker 进程，但是只有一个进程可以获得连接，造成‘惊群’，影响性能。</span></span><br><span class=\"line\">accept_mutex on | off</span><br></pre></td></tr></table></figure>\n<p>http 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 各个 server 的公共配置</span></span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 每个 server 用于定义一个虚拟主机  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\"># 当前虚拟主机监听的端口</span></span><br><span class=\"line\">        listen IP:PORT                       <span class=\"comment\"># ipV4 地址</span></span><br><span class=\"line\">        listen       [::]:80 default_server; <span class=\"comment\"># ipV6 地址</span></span><br><span class=\"line\">        <span class=\"comment\"># 当前虚拟主机名称 eg：www.baidu.com</span></span><br><span class=\"line\">        server_name 虚拟主机名</span><br><span class=\"line\">        <span class=\"comment\"># root：server 虚拟主机下的根目录</span></span><br><span class=\"line\">        root        主目录</span><br><span class=\"line\">        location [OPERATOR] URL &#123;  <span class=\"comment\"># 指定 URL 的特性</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> CONDITION&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server_name</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 虚拟主机名称后可以跟多个由空白字符分割的字符串</span><br><span class=\"line\">2. 支持 * 通配任意长度的任意字符：server_name *.baidu.com www.baidu.*</span><br><span class=\"line\">3. 支持 ~ 起始的字符做正则表达式匹配，但是存在性能问题：server_name ~^www\\d+\\.baidu\\.com$</span><br><span class=\"line\">匹配优先级：</span><br><span class=\"line\">a. 字符串精确匹。b. 左侧 * 通配符。c. 右侧 * 通配符 eg:com.www.baidu.* 。 d. 正则。e. defult_server</span><br></pre></td></tr></table></figure>\n<p>location 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在一个 sever 中 location 配置段可存在多个，用于实现从 uri 到文件系统的路径映射，nginx 会根据用户请求的 uri 来检查定义的所有 location,并找出一个最佳匹配进行应用。</span></span><br><span class=\"line\">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class=\"line\">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>location 中也有 root 路径，当请求是具体的 location 指向的路径时，走 location 中的 root 目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果访问 http:192.168.31.107/news 则访问的时 location 指向的 /usr/local/html/news 目录下的文件，不带路径则访问的是 server 下 root 目录下的文件</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root        /usr/<span class=\"built_in\">local</span>/html;</span><br><span class=\"line\">        location /news &#123;</span><br><span class=\"line\">                root /usr/<span class=\"built_in\">local</span>/html</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>路径解析</p>\n<blockquote>\n<p>在 location 中指定路径有两种方式，一种是 root，一种是 alias。它们之间的区别是：<br>root 方式处理结果 = root 路径 + location 路径<br>alias 方式处理结果 = alias 路径直接替换 location 路径。</p>\n</blockquote>\n<p>匹配：<br><code>=</code> ：对 URL 精确匹配；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = /&#123;  &#125;  只能精确匹配 http:fengzhu.top/  </span><br></pre></td></tr></table></figure>\n<p><code>^~</code>：对 URL　的最右边部分做匹配检查，不区分字符大小写<br><code>~</code>：对 URL 做正则匹配，区分大小写<br><code>~*</code>：对 URL 做正则匹配，不区分大小写<br>不带符号：匹配起始于此 URL 的所有 URL<br>优先级：=,^<del>,</del>/~*,不带符号</p>\n<p><strong>还是要自己配置试试，才能知道具体是怎么运行的</strong></p>\n<hr>\n<center>just do it</center>"},{"title":"rabbitMQ延时队列","date":"2019-11-02T08:28:50.000Z","_content":"\n![Photo by on Unsplash](/rabbitMqDelayQueue.png)\n\n在一些业务场景中，会有延迟这种场景出现，比如常见的订单提交之后付款计时，还有一些针对特定用户，比如会员的一些定时优惠的发放，都会在一个时间点去执行，这种一般定时器也是可以实现的，但是如果涉及数据量大，使用定时器处理不是很优的解决方案。这时候就需要了解下 mq 的延迟队列，来更好的实现这个问题。\n\n<!-- more -->\n\n#### 组件\n\n1. Time-To-Live(TTL)\n\nmq 允许给队列设置过期时间 TTL，单位是毫秒，当设有过期时间的消息进入到队列后，说明它只能在队列中 ‘存活’ TTL 时间。过期之后会成为 Dead letter (死信)。\n\n2. Dead Letter Exchange(DLX)\n\n消息过期成为死信之后，如果队列设置了 DLX，则会被 push 到 DLX 中等待绑定在 DLX 上的队列消费\n\n#### 过程\n\n通过上面 2 个机制的配合，就可以实现 mq 延迟队列。给要延迟处理的消息设置指定的过期时间，到期之后被 push 到 DLX，监听 DLX 上的队列进行消费。通过这个机制可以比较优雅的实现延迟机制。\n\n\n#### Direct 交换机\n\n1. 创建一个 direct 交换机\n\n死信交换机可以用任意类型交换机实现。\n```java\n\n@Configuration\npublic class DeadLetterExchangeConfig {\n\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey(),\n                true,false);\n    }\n}\n```\n\n2. 配置枚举类\n``` java\n\n@Getter\n@AllArgsConstructor\npublic enum MqExchangeEnum {\n\n    EXCHANGE_TEST(\"exchange_test\", \"direct交换机\"),\n    FANOUT_EXCHANGE_TEST(\"fanout_exchange_test\", \"fanout交换机\"),\n    TOPIC_EXCHANGE_TEST(\"topic_exchange_test\",\"topic交换机\"),\n    DELAY_EXCHANGE_TEST(\"delay_exchange_test\",\"死信交换机\");\n\n\n    private String key;\n    private String desc;\n}\n```\n\n3. 常量类\n```java\n@Getter\n@AllArgsConstructor\npublic enum MqArgsEnum {\n\n    X_DEAD_LETTER_EXCHANGE(\"x-dead-letter-exchange\",\"死信交换机参数\"),\n    X_DEAD_LETTER_ROUTING_KEY(\"x-dead-letter-routing-key\",\"死信路由参数\"),\n    X_MESSAGE_TTL(\"x-message-ttl\", \"过期时间\");\n\n    private String key;\n    private String desc;\n\n}\n```\n4. 队列\n创建队列是重要的步骤\n```java\n// 绑定到 DLX 交换机上面，监听并消费。\n@Bean\npublic Queue orderQueue() {\n    return new Queue(MqQueueEnum.ORDER_QUEUE.getKey(),\n            true, false, false);\n}\n\n// 死信队列，消息发送到这个队列中\n@Bean\npublic Queue orderDeadQueue() {\n    return QueueBuilder.durable(MqQueueEnum.DEAD_ORDER_QUEUE.getKey())\n            .withArgument(MqArgsEnum.X_DEAD_LETTER_EXCHANGE.getKey(), MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey())\n            .withArgument(MqArgsEnum.X_DEAD_LETTER_ROUTING_KEY.getKey(), MqRouteKeyEnum.DEAD_LETTER_KEY.getKey())\n            .withArgument(MqArgsEnum.X_MESSAGE_TTL.getKey(), 10000)\n            .build();\n}\n```\n\n5. 绑定\n```java\n@Bean\npublic Binding deadLetterBinding() {\n    return BindingBuilder.bind(queueConfig.orderQueue())\n            .to(deadLetterExchangeConfig.delayExchange())\n            .with(MqRouteKeyEnum.DEAD_LETTER_KEY.getKey());\n}\n```\n\n6. 发消息\n```java\n// 这里最好指定编码，不然会乱码。\n@Test\npublic void deadLetterSender() {\n    String msg = \"死信消息测试\";\n    rabbitTemplate.convertAndSend(MqQueueEnum.DEAD_ORDER_QUEUE.getKey(),msg);\n}\n```\n发完之后在后台界面可以看到死信队列中已经有一条消息，等待过期之后刷新，消息会到绑定的死信交换机上的队列。\n\n7. 消费\n```java\n@Component\npublic class DeadLetterConsumer {\n\n    @RabbitListener(queues = \"order_queue\")\n    public void handlerDeadLetter(String msg) {\n        System.out.println(\"DEAD_LETTER:\" +msg);\n    }\n}\n```\n\n延迟在很多场景中都会使用的到，如果使用定时任务处理在大数据情况下会产生延迟等问题，这是不能被容忍的，并且使用任务来执行定时任务也不是很优的处理方式。使用 mq 延迟队列的话可以很好的解决对延迟场景下的业务处理，而且姿势比较帅。\n\nmq (官方文档)[https://www.rabbitmq.com/dlx.html]\n\n***\n\n<center>我命由我不由天</center>\n\n\n","source":"_posts/rabbitMQ延时队列.md","raw":"---\ntitle: rabbitMQ延时队列\ndate: 2019-11-02 16:28:50\ntags: RabbitMQ\ncategory: MQ\n---\n\n![Photo by on Unsplash](/rabbitMqDelayQueue.png)\n\n在一些业务场景中，会有延迟这种场景出现，比如常见的订单提交之后付款计时，还有一些针对特定用户，比如会员的一些定时优惠的发放，都会在一个时间点去执行，这种一般定时器也是可以实现的，但是如果涉及数据量大，使用定时器处理不是很优的解决方案。这时候就需要了解下 mq 的延迟队列，来更好的实现这个问题。\n\n<!-- more -->\n\n#### 组件\n\n1. Time-To-Live(TTL)\n\nmq 允许给队列设置过期时间 TTL，单位是毫秒，当设有过期时间的消息进入到队列后，说明它只能在队列中 ‘存活’ TTL 时间。过期之后会成为 Dead letter (死信)。\n\n2. Dead Letter Exchange(DLX)\n\n消息过期成为死信之后，如果队列设置了 DLX，则会被 push 到 DLX 中等待绑定在 DLX 上的队列消费\n\n#### 过程\n\n通过上面 2 个机制的配合，就可以实现 mq 延迟队列。给要延迟处理的消息设置指定的过期时间，到期之后被 push 到 DLX，监听 DLX 上的队列进行消费。通过这个机制可以比较优雅的实现延迟机制。\n\n\n#### Direct 交换机\n\n1. 创建一个 direct 交换机\n\n死信交换机可以用任意类型交换机实现。\n```java\n\n@Configuration\npublic class DeadLetterExchangeConfig {\n\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey(),\n                true,false);\n    }\n}\n```\n\n2. 配置枚举类\n``` java\n\n@Getter\n@AllArgsConstructor\npublic enum MqExchangeEnum {\n\n    EXCHANGE_TEST(\"exchange_test\", \"direct交换机\"),\n    FANOUT_EXCHANGE_TEST(\"fanout_exchange_test\", \"fanout交换机\"),\n    TOPIC_EXCHANGE_TEST(\"topic_exchange_test\",\"topic交换机\"),\n    DELAY_EXCHANGE_TEST(\"delay_exchange_test\",\"死信交换机\");\n\n\n    private String key;\n    private String desc;\n}\n```\n\n3. 常量类\n```java\n@Getter\n@AllArgsConstructor\npublic enum MqArgsEnum {\n\n    X_DEAD_LETTER_EXCHANGE(\"x-dead-letter-exchange\",\"死信交换机参数\"),\n    X_DEAD_LETTER_ROUTING_KEY(\"x-dead-letter-routing-key\",\"死信路由参数\"),\n    X_MESSAGE_TTL(\"x-message-ttl\", \"过期时间\");\n\n    private String key;\n    private String desc;\n\n}\n```\n4. 队列\n创建队列是重要的步骤\n```java\n// 绑定到 DLX 交换机上面，监听并消费。\n@Bean\npublic Queue orderQueue() {\n    return new Queue(MqQueueEnum.ORDER_QUEUE.getKey(),\n            true, false, false);\n}\n\n// 死信队列，消息发送到这个队列中\n@Bean\npublic Queue orderDeadQueue() {\n    return QueueBuilder.durable(MqQueueEnum.DEAD_ORDER_QUEUE.getKey())\n            .withArgument(MqArgsEnum.X_DEAD_LETTER_EXCHANGE.getKey(), MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey())\n            .withArgument(MqArgsEnum.X_DEAD_LETTER_ROUTING_KEY.getKey(), MqRouteKeyEnum.DEAD_LETTER_KEY.getKey())\n            .withArgument(MqArgsEnum.X_MESSAGE_TTL.getKey(), 10000)\n            .build();\n}\n```\n\n5. 绑定\n```java\n@Bean\npublic Binding deadLetterBinding() {\n    return BindingBuilder.bind(queueConfig.orderQueue())\n            .to(deadLetterExchangeConfig.delayExchange())\n            .with(MqRouteKeyEnum.DEAD_LETTER_KEY.getKey());\n}\n```\n\n6. 发消息\n```java\n// 这里最好指定编码，不然会乱码。\n@Test\npublic void deadLetterSender() {\n    String msg = \"死信消息测试\";\n    rabbitTemplate.convertAndSend(MqQueueEnum.DEAD_ORDER_QUEUE.getKey(),msg);\n}\n```\n发完之后在后台界面可以看到死信队列中已经有一条消息，等待过期之后刷新，消息会到绑定的死信交换机上的队列。\n\n7. 消费\n```java\n@Component\npublic class DeadLetterConsumer {\n\n    @RabbitListener(queues = \"order_queue\")\n    public void handlerDeadLetter(String msg) {\n        System.out.println(\"DEAD_LETTER:\" +msg);\n    }\n}\n```\n\n延迟在很多场景中都会使用的到，如果使用定时任务处理在大数据情况下会产生延迟等问题，这是不能被容忍的，并且使用任务来执行定时任务也不是很优的处理方式。使用 mq 延迟队列的话可以很好的解决对延迟场景下的业务处理，而且姿势比较帅。\n\nmq (官方文档)[https://www.rabbitmq.com/dlx.html]\n\n***\n\n<center>我命由我不由天</center>\n\n\n","slug":"rabbitMQ延时队列","published":1,"updated":"2021-01-31T06:31:35.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeows001frh1td5us99w3","content":"<p><img src=\"/2019/11/02/rabbitMQ%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/rabbitMqDelayQueue.png\" alt=\"Photo by on Unsplash\"></p>\n<p>在一些业务场景中，会有延迟这种场景出现，比如常见的订单提交之后付款计时，还有一些针对特定用户，比如会员的一些定时优惠的发放，都会在一个时间点去执行，这种一般定时器也是可以实现的，但是如果涉及数据量大，使用定时器处理不是很优的解决方案。这时候就需要了解下 mq 的延迟队列，来更好的实现这个问题。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h4><ol>\n<li>Time-To-Live(TTL)</li>\n</ol>\n<p>mq 允许给队列设置过期时间 TTL，单位是毫秒，当设有过期时间的消息进入到队列后，说明它只能在队列中 ‘存活’ TTL 时间。过期之后会成为 Dead letter (死信)。</p>\n<ol start=\"2\">\n<li>Dead Letter Exchange(DLX)</li>\n</ol>\n<p>消息过期成为死信之后，如果队列设置了 DLX，则会被 push 到 DLX 中等待绑定在 DLX 上的队列消费</p>\n<h4 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h4><p>通过上面 2 个机制的配合，就可以实现 mq 延迟队列。给要延迟处理的消息设置指定的过期时间，到期之后被 push 到 DLX，监听 DLX 上的队列进行消费。通过这个机制可以比较优雅的实现延迟机制。</p>\n<h4 id=\"Direct-交换机\"><a href=\"#Direct-交换机\" class=\"headerlink\" title=\"Direct 交换机\"></a>Direct 交换机</h4><ol>\n<li>创建一个 direct 交换机</li>\n</ol>\n<p>死信交换机可以用任意类型交换机实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLetterExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>配置枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqExchangeEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    EXCHANGE_TEST(<span class=\"string\">&quot;exchange_test&quot;</span>, <span class=\"string\">&quot;direct交换机&quot;</span>),</span><br><span class=\"line\">    FANOUT_EXCHANGE_TEST(<span class=\"string\">&quot;fanout_exchange_test&quot;</span>, <span class=\"string\">&quot;fanout交换机&quot;</span>),</span><br><span class=\"line\">    TOPIC_EXCHANGE_TEST(<span class=\"string\">&quot;topic_exchange_test&quot;</span>,<span class=\"string\">&quot;topic交换机&quot;</span>),</span><br><span class=\"line\">    DELAY_EXCHANGE_TEST(<span class=\"string\">&quot;delay_exchange_test&quot;</span>,<span class=\"string\">&quot;死信交换机&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>常量类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqArgsEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    X_DEAD_LETTER_EXCHANGE(<span class=\"string\">&quot;x-dead-letter-exchange&quot;</span>,<span class=\"string\">&quot;死信交换机参数&quot;</span>),</span><br><span class=\"line\">    X_DEAD_LETTER_ROUTING_KEY(<span class=\"string\">&quot;x-dead-letter-routing-key&quot;</span>,<span class=\"string\">&quot;死信路由参数&quot;</span>),</span><br><span class=\"line\">    X_MESSAGE_TTL(<span class=\"string\">&quot;x-message-ttl&quot;</span>, <span class=\"string\">&quot;过期时间&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>队列<br>创建队列是重要的步骤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 绑定到 DLX 交换机上面，监听并消费。</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">orderQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(MqQueueEnum.ORDER_QUEUE.getKey(),</span><br><span class=\"line\">            <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信队列，消息发送到这个队列中</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">orderDeadQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QueueBuilder.durable(MqQueueEnum.DEAD_ORDER_QUEUE.getKey())</span><br><span class=\"line\">            .withArgument(MqArgsEnum.X_DEAD_LETTER_EXCHANGE.getKey(), MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey())</span><br><span class=\"line\">            .withArgument(MqArgsEnum.X_DEAD_LETTER_ROUTING_KEY.getKey(), MqRouteKeyEnum.DEAD_LETTER_KEY.getKey())</span><br><span class=\"line\">            .withArgument(MqArgsEnum.X_MESSAGE_TTL.getKey(), <span class=\"number\">10000</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.orderQueue())</span><br><span class=\"line\">            .to(deadLetterExchangeConfig.delayExchange())</span><br><span class=\"line\">            .with(MqRouteKeyEnum.DEAD_LETTER_KEY.getKey());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>发消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里最好指定编码，不然会乱码。</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deadLetterSender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String msg = <span class=\"string\">&quot;死信消息测试&quot;</span>;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(MqQueueEnum.DEAD_ORDER_QUEUE.getKey(),msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发完之后在后台界面可以看到死信队列中已经有一条消息，等待过期之后刷新，消息会到绑定的死信交换机上的队列。</p>\n</li>\n<li><p>消费</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLetterConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;order_queue&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerDeadLetter</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;DEAD_LETTER:&quot;</span> +msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>延迟在很多场景中都会使用的到，如果使用定时任务处理在大数据情况下会产生延迟等问题，这是不能被容忍的，并且使用任务来执行定时任务也不是很优的处理方式。使用 mq 延迟队列的话可以很好的解决对延迟场景下的业务处理，而且姿势比较帅。</p>\n</li>\n</ol>\n<p>mq (官方文档)[<a class=\"link\" href=\"https://www.rabbitmq.com/dlx.html]\">https://www.rabbitmq.com/dlx.html]<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>我命由我不由天</center>\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/11/02/rabbitMQ%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/rabbitMqDelayQueue.png\" alt=\"Photo by on Unsplash\"></p>\n<p>在一些业务场景中，会有延迟这种场景出现，比如常见的订单提交之后付款计时，还有一些针对特定用户，比如会员的一些定时优惠的发放，都会在一个时间点去执行，这种一般定时器也是可以实现的，但是如果涉及数据量大，使用定时器处理不是很优的解决方案。这时候就需要了解下 mq 的延迟队列，来更好的实现这个问题。</p>","more":"<h4 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h4><ol>\n<li>Time-To-Live(TTL)</li>\n</ol>\n<p>mq 允许给队列设置过期时间 TTL，单位是毫秒，当设有过期时间的消息进入到队列后，说明它只能在队列中 ‘存活’ TTL 时间。过期之后会成为 Dead letter (死信)。</p>\n<ol start=\"2\">\n<li>Dead Letter Exchange(DLX)</li>\n</ol>\n<p>消息过期成为死信之后，如果队列设置了 DLX，则会被 push 到 DLX 中等待绑定在 DLX 上的队列消费</p>\n<h4 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h4><p>通过上面 2 个机制的配合，就可以实现 mq 延迟队列。给要延迟处理的消息设置指定的过期时间，到期之后被 push 到 DLX，监听 DLX 上的队列进行消费。通过这个机制可以比较优雅的实现延迟机制。</p>\n<h4 id=\"Direct-交换机\"><a href=\"#Direct-交换机\" class=\"headerlink\" title=\"Direct 交换机\"></a>Direct 交换机</h4><ol>\n<li>创建一个 direct 交换机</li>\n</ol>\n<p>死信交换机可以用任意类型交换机实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLetterExchangeConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey(),</span><br><span class=\"line\">                <span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>配置枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqExchangeEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    EXCHANGE_TEST(<span class=\"string\">&quot;exchange_test&quot;</span>, <span class=\"string\">&quot;direct交换机&quot;</span>),</span><br><span class=\"line\">    FANOUT_EXCHANGE_TEST(<span class=\"string\">&quot;fanout_exchange_test&quot;</span>, <span class=\"string\">&quot;fanout交换机&quot;</span>),</span><br><span class=\"line\">    TOPIC_EXCHANGE_TEST(<span class=\"string\">&quot;topic_exchange_test&quot;</span>,<span class=\"string\">&quot;topic交换机&quot;</span>),</span><br><span class=\"line\">    DELAY_EXCHANGE_TEST(<span class=\"string\">&quot;delay_exchange_test&quot;</span>,<span class=\"string\">&quot;死信交换机&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>常量类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MqArgsEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    X_DEAD_LETTER_EXCHANGE(<span class=\"string\">&quot;x-dead-letter-exchange&quot;</span>,<span class=\"string\">&quot;死信交换机参数&quot;</span>),</span><br><span class=\"line\">    X_DEAD_LETTER_ROUTING_KEY(<span class=\"string\">&quot;x-dead-letter-routing-key&quot;</span>,<span class=\"string\">&quot;死信路由参数&quot;</span>),</span><br><span class=\"line\">    X_MESSAGE_TTL(<span class=\"string\">&quot;x-message-ttl&quot;</span>, <span class=\"string\">&quot;过期时间&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>队列<br>创建队列是重要的步骤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 绑定到 DLX 交换机上面，监听并消费。</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">orderQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(MqQueueEnum.ORDER_QUEUE.getKey(),</span><br><span class=\"line\">            <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信队列，消息发送到这个队列中</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">orderDeadQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QueueBuilder.durable(MqQueueEnum.DEAD_ORDER_QUEUE.getKey())</span><br><span class=\"line\">            .withArgument(MqArgsEnum.X_DEAD_LETTER_EXCHANGE.getKey(), MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey())</span><br><span class=\"line\">            .withArgument(MqArgsEnum.X_DEAD_LETTER_ROUTING_KEY.getKey(), MqRouteKeyEnum.DEAD_LETTER_KEY.getKey())</span><br><span class=\"line\">            .withArgument(MqArgsEnum.X_MESSAGE_TTL.getKey(), <span class=\"number\">10000</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(queueConfig.orderQueue())</span><br><span class=\"line\">            .to(deadLetterExchangeConfig.delayExchange())</span><br><span class=\"line\">            .with(MqRouteKeyEnum.DEAD_LETTER_KEY.getKey());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>发消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里最好指定编码，不然会乱码。</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deadLetterSender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String msg = <span class=\"string\">&quot;死信消息测试&quot;</span>;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(MqQueueEnum.DEAD_ORDER_QUEUE.getKey(),msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发完之后在后台界面可以看到死信队列中已经有一条消息，等待过期之后刷新，消息会到绑定的死信交换机上的队列。</p>\n</li>\n<li><p>消费</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLetterConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;order_queue&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerDeadLetter</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;DEAD_LETTER:&quot;</span> +msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>延迟在很多场景中都会使用的到，如果使用定时任务处理在大数据情况下会产生延迟等问题，这是不能被容忍的，并且使用任务来执行定时任务也不是很优的处理方式。使用 mq 延迟队列的话可以很好的解决对延迟场景下的业务处理，而且姿势比较帅。</p>\n</li>\n</ol>\n<p>mq (官方文档)[<a class=\"link\" href=\"https://www.rabbitmq.com/dlx.html]\">https://www.rabbitmq.com/dlx.html]<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>我命由我不由天</center>"},{"title":"springboot集成jedis和redisson","date":"2019-11-23T13:38:33.000Z","_content":"\n![Photo by lumberjacck on wallhaven.cc](/redisLock.png)\n\nredis 最常见的场景就是分布式缓存，分布式锁的场景。它本身提供的数据结构在实现一些功能时要比关系型数据库方便很多，比如点赞，好友关系等功能，并且不用担心并发以及性能问题。这里记录下springboot整合jedis和redisson框架 ヽ(ˋ▽ˊ)ノ\n\n<!--more-->\n\n\n##### redisson\n\nredis Java 客户端，类似 jedis，但是有更加丰富的解决方案，在分布式锁方面也提供了一套 API 来轻松实现分布式锁。[reddison wiki](https://github.com/redisson/redisson/wiki/)\n\n##### spring boot 整合\n\n1. 引入 jar 包\n```xml\n<!-- redis -->\n<dependency>\n    <groupId>org.redisson</groupId>\n    <artifactId>redisson</artifactId>\n    <version>3.8.0</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n2. 配置文件\n\n```yml\nserver:\n  port: 8080\n\n# redis 配置\nspring:\n  redis:\n    host: 192.168.31.107\n    port: 6379\n    password: 123456\n    jedis:\n      pool:\n        max-active: 10\n        max-idle: 8\n        max-wait: 3000ms\n        min-idle: 4\n```\n\n3. jedis 配置类\n\n```java\n@Configuration\n@EnableCaching\npublic class JedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(redisConnectionFactory);\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        // key采用String的序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n        // value序列化方式采用jackson\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        // hash的value序列化方式采用jackson\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n\n}\n```\n\n4. redisson 配置类\n\n```java\n@Configuration\npublic class RedissonConfig {\n\n    @Value(\"${spring.redis.host}\")\n    private String host;\n\n    @Value(\"${spring.redis.port}\")\n    private String port;\n\n    @Value(\"${spring.redis.password}\")\n    private String password;\n\n\n    @Bean\n    public RedissonClient redissonClient(){\n        Config config = new Config();\n        config.useSingleServer().setAddress(\"redis://\" + host + \":\" + port).setPassword(password);\n        return Redisson.create(config);\n    }\n\n}\n```\n\n5. jedis 工具类\n\n```java\n@Component\npublic class JedisUtil {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    /**\n     * 设置 String 类型键值对\n     * @param key 键\n     * @param value 值\n     * @return true or false\n     */\n    public boolean set(String key, Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 获取键对应值\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key) {\n        return key == null ? null : redisTemplate.opsForValue().get(key);\n    }\n}\n```\n\n6. redisson 工具类\n\n```java\n@Component\npublic class RedissonUtil {\n\n    @Autowired\n    private RedissonClient redissonClient;\n\n\n    /**\n     * 获取锁\n     * @param key key\n     * @return lock\n     */\n    public RLock getLock(String key) {\n        return redissonClient.getLock(key);\n    }\n\n}\n```\n\n7. 测试\n```java\n@Slf4j\n@RestController\npublic class RedisController {\n\n    @Autowired\n    private JedisUtil jedisUtil;\n    @Autowired\n    private RedissonUtil redissonUtil;\n\n    /**\n     * 测试 jedis\n     * @return name\n     */\n    @RequestMapping(\"/jedis\")\n    public String setAndGetRedis() {\n        Random random = new Random();\n        String key = random.nextInt(1000) + \":name\";\n        jedisUtil.set(key, \"jihe\" + key);\n        log.info(\"获取到的key:{}\",key);\n        return (String) jedisUtil.get(key);\n    }\n\n    @RequestMapping(\"/redisson\")\n    public String lockAndUnlock() {\n        RLock lock = redissonUtil.getLock(\"2001:product\");\n        log.info(\"获取到了锁对象\");\n        // 模拟处理业务\n        try {\n            sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }finally {\n            lock.unlock();\n        }\n        return \"处理完成\";\n    }\n}\n```\n\n\n以上只是简单的将 2 个框架整合在一起，在具体业务场景下的一些使用会抽空继续更新。代码[github 地址](https://github.com/oliverschen/springBoot/tree/master/springboot-redisson-jedis)\n\n***\n<center>喂马，劈柴，周游世界</center>","source":"_posts/springboot集成jedis和redisson.md","raw":"---\ntitle: springboot集成jedis和redisson\ndate: 2019-11-23 21:38:33\ntags: redis\ncategory: 分布式锁\n---\n\n![Photo by lumberjacck on wallhaven.cc](/redisLock.png)\n\nredis 最常见的场景就是分布式缓存，分布式锁的场景。它本身提供的数据结构在实现一些功能时要比关系型数据库方便很多，比如点赞，好友关系等功能，并且不用担心并发以及性能问题。这里记录下springboot整合jedis和redisson框架 ヽ(ˋ▽ˊ)ノ\n\n<!--more-->\n\n\n##### redisson\n\nredis Java 客户端，类似 jedis，但是有更加丰富的解决方案，在分布式锁方面也提供了一套 API 来轻松实现分布式锁。[reddison wiki](https://github.com/redisson/redisson/wiki/)\n\n##### spring boot 整合\n\n1. 引入 jar 包\n```xml\n<!-- redis -->\n<dependency>\n    <groupId>org.redisson</groupId>\n    <artifactId>redisson</artifactId>\n    <version>3.8.0</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n2. 配置文件\n\n```yml\nserver:\n  port: 8080\n\n# redis 配置\nspring:\n  redis:\n    host: 192.168.31.107\n    port: 6379\n    password: 123456\n    jedis:\n      pool:\n        max-active: 10\n        max-idle: 8\n        max-wait: 3000ms\n        min-idle: 4\n```\n\n3. jedis 配置类\n\n```java\n@Configuration\n@EnableCaching\npublic class JedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(redisConnectionFactory);\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        // key采用String的序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n        // value序列化方式采用jackson\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        // hash的value序列化方式采用jackson\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n\n}\n```\n\n4. redisson 配置类\n\n```java\n@Configuration\npublic class RedissonConfig {\n\n    @Value(\"${spring.redis.host}\")\n    private String host;\n\n    @Value(\"${spring.redis.port}\")\n    private String port;\n\n    @Value(\"${spring.redis.password}\")\n    private String password;\n\n\n    @Bean\n    public RedissonClient redissonClient(){\n        Config config = new Config();\n        config.useSingleServer().setAddress(\"redis://\" + host + \":\" + port).setPassword(password);\n        return Redisson.create(config);\n    }\n\n}\n```\n\n5. jedis 工具类\n\n```java\n@Component\npublic class JedisUtil {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    /**\n     * 设置 String 类型键值对\n     * @param key 键\n     * @param value 值\n     * @return true or false\n     */\n    public boolean set(String key, Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 获取键对应值\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key) {\n        return key == null ? null : redisTemplate.opsForValue().get(key);\n    }\n}\n```\n\n6. redisson 工具类\n\n```java\n@Component\npublic class RedissonUtil {\n\n    @Autowired\n    private RedissonClient redissonClient;\n\n\n    /**\n     * 获取锁\n     * @param key key\n     * @return lock\n     */\n    public RLock getLock(String key) {\n        return redissonClient.getLock(key);\n    }\n\n}\n```\n\n7. 测试\n```java\n@Slf4j\n@RestController\npublic class RedisController {\n\n    @Autowired\n    private JedisUtil jedisUtil;\n    @Autowired\n    private RedissonUtil redissonUtil;\n\n    /**\n     * 测试 jedis\n     * @return name\n     */\n    @RequestMapping(\"/jedis\")\n    public String setAndGetRedis() {\n        Random random = new Random();\n        String key = random.nextInt(1000) + \":name\";\n        jedisUtil.set(key, \"jihe\" + key);\n        log.info(\"获取到的key:{}\",key);\n        return (String) jedisUtil.get(key);\n    }\n\n    @RequestMapping(\"/redisson\")\n    public String lockAndUnlock() {\n        RLock lock = redissonUtil.getLock(\"2001:product\");\n        log.info(\"获取到了锁对象\");\n        // 模拟处理业务\n        try {\n            sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }finally {\n            lock.unlock();\n        }\n        return \"处理完成\";\n    }\n}\n```\n\n\n以上只是简单的将 2 个框架整合在一起，在具体业务场景下的一些使用会抽空继续更新。代码[github 地址](https://github.com/oliverschen/springBoot/tree/master/springboot-redisson-jedis)\n\n***\n<center>喂马，劈柴，周游世界</center>","slug":"springboot集成jedis和redisson","published":1,"updated":"2021-01-31T06:31:35.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowt001hrh1t9r3da94n","content":"<p><img src=\"/2019/11/23/springboot%E9%9B%86%E6%88%90jedis%E5%92%8Credisson/redisLock.png\" alt=\"Photo by lumberjacck on wallhaven.cc\"></p>\n<p>redis 最常见的场景就是分布式缓存，分布式锁的场景。它本身提供的数据结构在实现一些功能时要比关系型数据库方便很多，比如点赞，好友关系等功能，并且不用担心并发以及性能问题。这里记录下springboot整合jedis和redisson框架 ヽ(ˋ▽ˊ)ノ</p>\n<a id=\"more\"></a>\n\n\n<h5 id=\"redisson\"><a href=\"#redisson\" class=\"headerlink\" title=\"redisson\"></a>redisson</h5><p>redis Java 客户端，类似 jedis，但是有更加丰富的解决方案，在分布式锁方面也提供了一套 API 来轻松实现分布式锁。<a class=\"link\" href=\"https://github.com/redisson/redisson/wiki/\">reddison wiki<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"spring-boot-整合\"><a href=\"#spring-boot-整合\" class=\"headerlink\" title=\"spring boot 整合\"></a>spring boot 整合</h5><ol>\n<li>引入 jar 包<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- redis --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>配置文件</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis 配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.31</span><span class=\"number\">.107</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">jedis:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"string\">3000ms</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>jedis 配置类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        StringRedisSerializer stringRedisSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</span><br><span class=\"line\">        <span class=\"comment\">// key采用String的序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的key也采用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>redisson 配置类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedissonClient <span class=\"title\">redissonClient</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">        config.useSingleServer().setAddress(<span class=\"string\">&quot;redis://&quot;</span> + host + <span class=\"string\">&quot;:&quot;</span> + port).setPassword(password);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Redisson.create(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>jedis 工具类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JedisUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置 String 类型键值对</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true or false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取键对应值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>redisson 工具类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedissonClient redissonClient;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取锁</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> lock</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RLock <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redissonClient.getLock(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JedisUtil jedisUtil;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedissonUtil redissonUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试 jedis</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/jedis&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">setAndGetRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        String key = random.nextInt(<span class=\"number\">1000</span>) + <span class=\"string\">&quot;:name&quot;</span>;</span><br><span class=\"line\">        jedisUtil.set(key, <span class=\"string\">&quot;jihe&quot;</span> + key);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;获取到的key:&#123;&#125;&quot;</span>,key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (String) jedisUtil.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/redisson&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lockAndUnlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RLock lock = redissonUtil.getLock(<span class=\"string\">&quot;2001:product&quot;</span>);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;获取到了锁对象&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟处理业务</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;处理完成&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>以上只是简单的将 2 个框架整合在一起，在具体业务场景下的一些使用会抽空继续更新。代码<a class=\"link\" href=\"https://github.com/oliverschen/springBoot/tree/master/springboot-redisson-jedis\">github 地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>喂马，劈柴，周游世界</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/11/23/springboot%E9%9B%86%E6%88%90jedis%E5%92%8Credisson/redisLock.png\" alt=\"Photo by lumberjacck on wallhaven.cc\"></p>\n<p>redis 最常见的场景就是分布式缓存，分布式锁的场景。它本身提供的数据结构在实现一些功能时要比关系型数据库方便很多，比如点赞，好友关系等功能，并且不用担心并发以及性能问题。这里记录下springboot整合jedis和redisson框架 ヽ(ˋ▽ˊ)ノ</p>","more":"<h5 id=\"redisson\"><a href=\"#redisson\" class=\"headerlink\" title=\"redisson\"></a>redisson</h5><p>redis Java 客户端，类似 jedis，但是有更加丰富的解决方案，在分布式锁方面也提供了一套 API 来轻松实现分布式锁。<a class=\"link\" href=\"https://github.com/redisson/redisson/wiki/\">reddison wiki<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"spring-boot-整合\"><a href=\"#spring-boot-整合\" class=\"headerlink\" title=\"spring boot 整合\"></a>spring boot 整合</h5><ol>\n<li>引入 jar 包<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- redis --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>配置文件</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis 配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.31</span><span class=\"number\">.107</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">jedis:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"string\">3000ms</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>jedis 配置类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        StringRedisSerializer stringRedisSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</span><br><span class=\"line\">        <span class=\"comment\">// key采用String的序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的key也采用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>redisson 配置类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedissonClient <span class=\"title\">redissonClient</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">        config.useSingleServer().setAddress(<span class=\"string\">&quot;redis://&quot;</span> + host + <span class=\"string\">&quot;:&quot;</span> + port).setPassword(password);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Redisson.create(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>jedis 工具类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JedisUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置 String 类型键值对</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true or false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取键对应值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>redisson 工具类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedissonClient redissonClient;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取锁</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> lock</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RLock <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redissonClient.getLock(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JedisUtil jedisUtil;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedissonUtil redissonUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试 jedis</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/jedis&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">setAndGetRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        String key = random.nextInt(<span class=\"number\">1000</span>) + <span class=\"string\">&quot;:name&quot;</span>;</span><br><span class=\"line\">        jedisUtil.set(key, <span class=\"string\">&quot;jihe&quot;</span> + key);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;获取到的key:&#123;&#125;&quot;</span>,key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (String) jedisUtil.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/redisson&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">lockAndUnlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RLock lock = redissonUtil.getLock(<span class=\"string\">&quot;2001:product&quot;</span>);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;获取到了锁对象&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 模拟处理业务</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;处理完成&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>以上只是简单的将 2 个框架整合在一起，在具体业务场景下的一些使用会抽空继续更新。代码<a class=\"link\" href=\"https://github.com/oliverschen/springBoot/tree/master/springboot-redisson-jedis\">github 地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>喂马，劈柴，周游世界</center>"},{"title":"springcloud-config","date":"2019-12-15T14:39:09.000Z","_content":"\n![Photo by Maskarido on wallhaven.cc](/springcloud-config.png)\n\n项目拆分成微服务架构之后，各个服务的配置文件会增多，并且每个环境（开发，测试，预发布，生产）都会有各自环境对应的配置，单独管理起来很容易出问题，springcloud-config 就是来解决这个问题的，它将配置文件统一管理，它支持将配置放在配置服务内存中，也支持放在远程 git 仓库中，它和注册中心结构类似，也是由两个部分组成，config server & config client。\n\n<!--more-->\n\n#### springcloud-config\n\n##### 创建工程\n\n创建 config 工程，引入 config 坐标\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-config</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-config</name>\n    <description>config service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n##### 开启 config server\n```java\n@EnableConfigServer\n@SpringBootApplication\npublic class JiheConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheConfigApplication.class, args);\n    }\n\n}\n```\n\n##### 配置文件\n```yml\ndebug: true\nserver:\n  port: 9090\n\nspring:\n  application:\n    name: jihe-config\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/oliverschen/springcloud.git\n          search-paths: /jihe-config/**\n          username: \n          password:\n      # 分支名\n      label: master\n```\n##### 创建配置文件\n创建 `user-config-dev.yml`，并提交到远程仓库\n```yml\nuser:\n  username: jihe\n  age: 18\n  email: XXX@gmail.com\n```\n\n##### 启动\n访问远程仓库的配置文件 `http://localhost:9090/user-config-dev.yml` 就可以访问到用户配置文件了。\n\n#### 动态更新配置\n\nspringcloud-config + springcloud-bus 实现配置文件动态刷新。\n\n\n\n\n#### 高可用配置中心\n\n","source":"_posts/springcloud-config.md","raw":"---\ntitle: springcloud-config\ndate: 2019-12-15 22:39:09\ntags: springcloud\ncategory: springcloud\n---\n\n![Photo by Maskarido on wallhaven.cc](/springcloud-config.png)\n\n项目拆分成微服务架构之后，各个服务的配置文件会增多，并且每个环境（开发，测试，预发布，生产）都会有各自环境对应的配置，单独管理起来很容易出问题，springcloud-config 就是来解决这个问题的，它将配置文件统一管理，它支持将配置放在配置服务内存中，也支持放在远程 git 仓库中，它和注册中心结构类似，也是由两个部分组成，config server & config client。\n\n<!--more-->\n\n#### springcloud-config\n\n##### 创建工程\n\n创建 config 工程，引入 config 坐标\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-config</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-config</name>\n    <description>config service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n##### 开启 config server\n```java\n@EnableConfigServer\n@SpringBootApplication\npublic class JiheConfigApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheConfigApplication.class, args);\n    }\n\n}\n```\n\n##### 配置文件\n```yml\ndebug: true\nserver:\n  port: 9090\n\nspring:\n  application:\n    name: jihe-config\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/oliverschen/springcloud.git\n          search-paths: /jihe-config/**\n          username: \n          password:\n      # 分支名\n      label: master\n```\n##### 创建配置文件\n创建 `user-config-dev.yml`，并提交到远程仓库\n```yml\nuser:\n  username: jihe\n  age: 18\n  email: XXX@gmail.com\n```\n\n##### 启动\n访问远程仓库的配置文件 `http://localhost:9090/user-config-dev.yml` 就可以访问到用户配置文件了。\n\n#### 动态更新配置\n\nspringcloud-config + springcloud-bus 实现配置文件动态刷新。\n\n\n\n\n#### 高可用配置中心\n\n","slug":"springcloud-config","published":1,"updated":"2021-01-31T06:31:35.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowu001lrh1tfe5o2b46","content":"<p><img src=\"/2019/12/15/springcloud-config/springcloud-config.png\" alt=\"Photo by Maskarido on wallhaven.cc\"></p>\n<p>项目拆分成微服务架构之后，各个服务的配置文件会增多，并且每个环境（开发，测试，预发布，生产）都会有各自环境对应的配置，单独管理起来很容易出问题，springcloud-config 就是来解决这个问题的，它将配置文件统一管理，它支持将配置放在配置服务内存中，也支持放在远程 git 仓库中，它和注册中心结构类似，也是由两个部分组成，config server &amp; config client。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"springcloud-config\"><a href=\"#springcloud-config\" class=\"headerlink\" title=\"springcloud-config\"></a>springcloud-config</h4><h5 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h5><p>创建 config 工程，引入 config 坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-config<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>config service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-config-server\"><a href=\"#开启-config-server\" class=\"headerlink\" title=\"开启 config server\"></a>开启 config server</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheConfigApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheConfigApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-config</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://github.com/oliverschen/springcloud.git</span></span><br><span class=\"line\">          <span class=\"attr\">search-paths:</span> <span class=\"string\">/jihe-config/**</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> </span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">      <span class=\"comment\"># 分支名</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h5><p>创建 <code>user-config-dev.yml</code>，并提交到远程仓库</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">user:</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">jihe</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">email:</span> <span class=\"string\">XXX@gmail.com</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><p>访问远程仓库的配置文件 <code>http://localhost:9090/user-config-dev.yml</code> 就可以访问到用户配置文件了。</p>\n<h4 id=\"动态更新配置\"><a href=\"#动态更新配置\" class=\"headerlink\" title=\"动态更新配置\"></a>动态更新配置</h4><p>springcloud-config + springcloud-bus 实现配置文件动态刷新。</p>\n<h4 id=\"高可用配置中心\"><a href=\"#高可用配置中心\" class=\"headerlink\" title=\"高可用配置中心\"></a>高可用配置中心</h4>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/12/15/springcloud-config/springcloud-config.png\" alt=\"Photo by Maskarido on wallhaven.cc\"></p>\n<p>项目拆分成微服务架构之后，各个服务的配置文件会增多，并且每个环境（开发，测试，预发布，生产）都会有各自环境对应的配置，单独管理起来很容易出问题，springcloud-config 就是来解决这个问题的，它将配置文件统一管理，它支持将配置放在配置服务内存中，也支持放在远程 git 仓库中，它和注册中心结构类似，也是由两个部分组成，config server &amp; config client。</p>","more":"<h4 id=\"springcloud-config\"><a href=\"#springcloud-config\" class=\"headerlink\" title=\"springcloud-config\"></a>springcloud-config</h4><h5 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h5><p>创建 config 工程，引入 config 坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-config<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>config service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-config-server\"><a href=\"#开启-config-server\" class=\"headerlink\" title=\"开启 config server\"></a>开启 config server</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheConfigApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheConfigApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-config</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://github.com/oliverschen/springcloud.git</span></span><br><span class=\"line\">          <span class=\"attr\">search-paths:</span> <span class=\"string\">/jihe-config/**</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> </span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">      <span class=\"comment\"># 分支名</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h5><p>创建 <code>user-config-dev.yml</code>，并提交到远程仓库</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">user:</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">jihe</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">email:</span> <span class=\"string\">XXX@gmail.com</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><p>访问远程仓库的配置文件 <code>http://localhost:9090/user-config-dev.yml</code> 就可以访问到用户配置文件了。</p>\n<h4 id=\"动态更新配置\"><a href=\"#动态更新配置\" class=\"headerlink\" title=\"动态更新配置\"></a>动态更新配置</h4><p>springcloud-config + springcloud-bus 实现配置文件动态刷新。</p>\n<h4 id=\"高可用配置中心\"><a href=\"#高可用配置中心\" class=\"headerlink\" title=\"高可用配置中心\"></a>高可用配置中心</h4>"},{"title":"springcloud-eureka","date":"2019-04-18T14:08:39.000Z","_content":"\n![不如吃茶去](springcloud-eureka/eureka.png)\n\nspring cloud netflix eureka 是对 Netflix 公司开源组件封装后的服务注册与发现组件。主要负责对服务的治理功能。也是微服务的核心组件之一，它由 euraka server 和 eureka client 组成，服务的提供方将服务注册到 eureka server，服务的消费方通过 eureka client 调用在注册中心的服务。这样就完成了服务的提供和调用。\n\n<!-- more -->\n\n#### eureka\n\n##### 续约\n\n服务的续约：应用内的 eureka client 后台会启动一个定时任务，跟 eureka server 保持心跳续约任务。每个一段时间（默认30s）向 eureka server 发送一次 renew 请求进行续约，告诉 eureka server 自己还活着，防止被 eureka server 的 evict 任务剔除掉。\n\n##### 下线\n\n服务下线：应用内的 eureka client 在应用停止后，向 eureka server 发送 cancel 请求，告诉注册中心自己已经关闭了， eureka server 收到请求后会将其移除注册列表，防止消费端消费不可用的服务。\n\n##### 剔除\n\n服务剔除：eureka server 启动后在后台会启动一个 evict 任务，对一定时间没有续约的服务进行剔除。\n\n\n#### eureka server\n##### pom 坐标\n\n``` xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-eureka</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-eureka</name>\n    <description>eureka server</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n\n```\n如果是第一次引入的话要下载依赖包，可能需要一会。\n\n##### 开启 eureka server\n\n在启动类加入注解\n\n``` java\n@EnableEurekaServer\n@SpringBootApplication\npublic class JiheEurekaApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(JiheEurekaApplication.class, args);\n    }\n}\n\n```\n\n##### 配置\n\n``` yml\n# 日志\ndebug: false\n\nspring:\n  application:\n    name: jihe-eureka\n\n# 服务端口\nserver:\n  port: 8080\n\neureka:\n  client:\n    register-with-eureka: false # 为 true 时注册中心会尝试注册自己，这里关闭。但是集群时需要打开，因为注册中心会相互注册\n    fetch-registry: false # 为 true 时服务中心进行服务检索\n    service-url:\n      defaultZone: http://localhost:${server.port}/eureka/  # 注册中心地址\n\n```\n\n现在启动服务，访问 http://localhost:8080 就可以看到 eureka server 页面了。\n\n#### 服务提供者\n\n这里以用户 user 服务来充当服务的提供者\n##### pom 坐标\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-user</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-user</name>\n    <description>user service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n\n```\n\n###### 注册服务\n``` java\n@EnableEurekaClient\n@SpringBootApplication\npublic class JiheUserApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheUserApplication.class, args);\n    }\n\n}\n```\n##### 配置\n\n``` yml\ndebug: false\n\nserver:\n  port: 8081\n\nspring:\n  application:\n    name: jihe-user\n\n# 注册到服务中心\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8080/eureka/\n\n```\n这样就注册好服务了，现在访问 http://localhost:8080 注册中心页面就可以看到已经注册的服务\n\n**Instances currently registered with Eureka**\n\n| Application     |   AMIs   |   Availability Zones | Status|\n| ---- | ---- | ---- | ---- |\n|JIHE-USER| \tn/a (1) |(1) |UP (1) - 192.168.0.104:jihe-user:8081|\n\n到这里服务的注册和发现就完成了，可以看到服务提供者讲服务注册到服务中心，供服务的消费者调用服务,那微服务之间是如何调用的呢？下面看下另外一个组件。\n\n\n#### 提供接口\n\n在 user 服务中创建 UserController,并向外抛一个可以访问的接口\n```java\n@RestController\npublic class UserController {\n\n    @RequestMapping(\"/user/{id}\")\n    public String getUser(@PathVariable(\"id\") int id) {\n        return \"我是\" + id + \"号用户\";\n    }\n\n}\n```\n\n#### 服务消费者\n\n订单 order 服务充当 user 服务的消费者\n\n##### pom\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-order</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-order</name>\n    <description>order service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n##### 配置文件\n\n```yml\ndebug: false\n\nserver:\n  port: 8082\n\nspring:\n  application:\n    name: jihe-order\n\n# 注册到服务中心\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8080/eureka/\n```\n\n#### RestTemplate\n\nspring 提供了一个 rest 接口调用组件 restTemplate 来调用其他服务，这里使用它来调用 user 服务接口，在订单服务中，创建 restTemplate 实例对象。\n\n##### 启动类配置\n\n消费者端开启服务发现和 Feign 客户端\n\n```java\n@SpringBootApplication\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n}\n```\n\n##### 消费者远程调用接口\n创建 OderService 类，调用 user 服务（这里直接写了具体的类，没有使用接口的方式）\n\n```java\n@Service\npublic class OderService {\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public String getUser(int id) {\n        String url = \"http://jihe-user/user/{id}\";\n        return restTemplate.getForObject(url, String.class, id);\n    }\n}\n```\n\n\n##### 调用\n\n```java\n@RestController\npublic class OderController {\n\n    @Autowired\n    private OderService oderService;\n\n    @RequestMapping(\"/order/{name}/{id}\")\n    public String getOrderAndUserInfo(@PathVariable(\"name\") String name, @PathVariable(\"id\") int id) {\n        String user = oderService.getUser(id);\n        return \"我是：\" + name + \",\" + user;\n    }\n}\n```\n到这里就完成了微服务模块最小的一个结构，`服务注册中心`，`服务提供者`，`服务调用者`。先启动 注册中心，然后在启动服务提供者，在启动服务调用者，在浏览器可以测试，直接访问服务的提供者，是可以访问到。通过调用者，也可以直接访问到服务的提供者，但是访问的端口和路径是不一样的。如果熟悉 spring boot 的话其实 spring cloud 的简单使用并不难，继续加油。\n以上代码[地址](https://github.com/oliverschen/springcloud)\n\n\n***\n<center>不积跬步，无以至千里</center>\n","source":"_posts/springcloud-eureka.md","raw":"---\ntitle: springcloud-eureka\ndate: 2019-04-18 22:08:39\ntags: springcloud\ncategory: springcloud\n---\n\n![不如吃茶去](springcloud-eureka/eureka.png)\n\nspring cloud netflix eureka 是对 Netflix 公司开源组件封装后的服务注册与发现组件。主要负责对服务的治理功能。也是微服务的核心组件之一，它由 euraka server 和 eureka client 组成，服务的提供方将服务注册到 eureka server，服务的消费方通过 eureka client 调用在注册中心的服务。这样就完成了服务的提供和调用。\n\n<!-- more -->\n\n#### eureka\n\n##### 续约\n\n服务的续约：应用内的 eureka client 后台会启动一个定时任务，跟 eureka server 保持心跳续约任务。每个一段时间（默认30s）向 eureka server 发送一次 renew 请求进行续约，告诉 eureka server 自己还活着，防止被 eureka server 的 evict 任务剔除掉。\n\n##### 下线\n\n服务下线：应用内的 eureka client 在应用停止后，向 eureka server 发送 cancel 请求，告诉注册中心自己已经关闭了， eureka server 收到请求后会将其移除注册列表，防止消费端消费不可用的服务。\n\n##### 剔除\n\n服务剔除：eureka server 启动后在后台会启动一个 evict 任务，对一定时间没有续约的服务进行剔除。\n\n\n#### eureka server\n##### pom 坐标\n\n``` xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-eureka</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-eureka</name>\n    <description>eureka server</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n\n```\n如果是第一次引入的话要下载依赖包，可能需要一会。\n\n##### 开启 eureka server\n\n在启动类加入注解\n\n``` java\n@EnableEurekaServer\n@SpringBootApplication\npublic class JiheEurekaApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(JiheEurekaApplication.class, args);\n    }\n}\n\n```\n\n##### 配置\n\n``` yml\n# 日志\ndebug: false\n\nspring:\n  application:\n    name: jihe-eureka\n\n# 服务端口\nserver:\n  port: 8080\n\neureka:\n  client:\n    register-with-eureka: false # 为 true 时注册中心会尝试注册自己，这里关闭。但是集群时需要打开，因为注册中心会相互注册\n    fetch-registry: false # 为 true 时服务中心进行服务检索\n    service-url:\n      defaultZone: http://localhost:${server.port}/eureka/  # 注册中心地址\n\n```\n\n现在启动服务，访问 http://localhost:8080 就可以看到 eureka server 页面了。\n\n#### 服务提供者\n\n这里以用户 user 服务来充当服务的提供者\n##### pom 坐标\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-user</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-user</name>\n    <description>user service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n\n```\n\n###### 注册服务\n``` java\n@EnableEurekaClient\n@SpringBootApplication\npublic class JiheUserApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheUserApplication.class, args);\n    }\n\n}\n```\n##### 配置\n\n``` yml\ndebug: false\n\nserver:\n  port: 8081\n\nspring:\n  application:\n    name: jihe-user\n\n# 注册到服务中心\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8080/eureka/\n\n```\n这样就注册好服务了，现在访问 http://localhost:8080 注册中心页面就可以看到已经注册的服务\n\n**Instances currently registered with Eureka**\n\n| Application     |   AMIs   |   Availability Zones | Status|\n| ---- | ---- | ---- | ---- |\n|JIHE-USER| \tn/a (1) |(1) |UP (1) - 192.168.0.104:jihe-user:8081|\n\n到这里服务的注册和发现就完成了，可以看到服务提供者讲服务注册到服务中心，供服务的消费者调用服务,那微服务之间是如何调用的呢？下面看下另外一个组件。\n\n\n#### 提供接口\n\n在 user 服务中创建 UserController,并向外抛一个可以访问的接口\n```java\n@RestController\npublic class UserController {\n\n    @RequestMapping(\"/user/{id}\")\n    public String getUser(@PathVariable(\"id\") int id) {\n        return \"我是\" + id + \"号用户\";\n    }\n\n}\n```\n\n#### 服务消费者\n\n订单 order 服务充当 user 服务的消费者\n\n##### pom\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-order</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-order</name>\n    <description>order service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n##### 配置文件\n\n```yml\ndebug: false\n\nserver:\n  port: 8082\n\nspring:\n  application:\n    name: jihe-order\n\n# 注册到服务中心\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8080/eureka/\n```\n\n#### RestTemplate\n\nspring 提供了一个 rest 接口调用组件 restTemplate 来调用其他服务，这里使用它来调用 user 服务接口，在订单服务中，创建 restTemplate 实例对象。\n\n##### 启动类配置\n\n消费者端开启服务发现和 Feign 客户端\n\n```java\n@SpringBootApplication\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n}\n```\n\n##### 消费者远程调用接口\n创建 OderService 类，调用 user 服务（这里直接写了具体的类，没有使用接口的方式）\n\n```java\n@Service\npublic class OderService {\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public String getUser(int id) {\n        String url = \"http://jihe-user/user/{id}\";\n        return restTemplate.getForObject(url, String.class, id);\n    }\n}\n```\n\n\n##### 调用\n\n```java\n@RestController\npublic class OderController {\n\n    @Autowired\n    private OderService oderService;\n\n    @RequestMapping(\"/order/{name}/{id}\")\n    public String getOrderAndUserInfo(@PathVariable(\"name\") String name, @PathVariable(\"id\") int id) {\n        String user = oderService.getUser(id);\n        return \"我是：\" + name + \",\" + user;\n    }\n}\n```\n到这里就完成了微服务模块最小的一个结构，`服务注册中心`，`服务提供者`，`服务调用者`。先启动 注册中心，然后在启动服务提供者，在启动服务调用者，在浏览器可以测试，直接访问服务的提供者，是可以访问到。通过调用者，也可以直接访问到服务的提供者，但是访问的端口和路径是不一样的。如果熟悉 spring boot 的话其实 spring cloud 的简单使用并不难，继续加油。\n以上代码[地址](https://github.com/oliverschen/springcloud)\n\n\n***\n<center>不积跬步，无以至千里</center>\n","slug":"springcloud-eureka","published":1,"updated":"2021-01-31T06:31:35.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowv001nrh1t7xdh2rw2","content":"<p><img src=\"/2019/04/18/springcloud-eureka/eureka.png\" alt=\"不如吃茶去\"></p>\n<p>spring cloud netflix eureka 是对 Netflix 公司开源组件封装后的服务注册与发现组件。主要负责对服务的治理功能。也是微服务的核心组件之一，它由 euraka server 和 eureka client 组成，服务的提供方将服务注册到 eureka server，服务的消费方通过 eureka client 调用在注册中心的服务。这样就完成了服务的提供和调用。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"eureka\"><a href=\"#eureka\" class=\"headerlink\" title=\"eureka\"></a>eureka</h4><h5 id=\"续约\"><a href=\"#续约\" class=\"headerlink\" title=\"续约\"></a>续约</h5><p>服务的续约：应用内的 eureka client 后台会启动一个定时任务，跟 eureka server 保持心跳续约任务。每个一段时间（默认30s）向 eureka server 发送一次 renew 请求进行续约，告诉 eureka server 自己还活着，防止被 eureka server 的 evict 任务剔除掉。</p>\n<h5 id=\"下线\"><a href=\"#下线\" class=\"headerlink\" title=\"下线\"></a>下线</h5><p>服务下线：应用内的 eureka client 在应用停止后，向 eureka server 发送 cancel 请求，告诉注册中心自己已经关闭了， eureka server 收到请求后会将其移除注册列表，防止消费端消费不可用的服务。</p>\n<h5 id=\"剔除\"><a href=\"#剔除\" class=\"headerlink\" title=\"剔除\"></a>剔除</h5><p>服务剔除：eureka server 启动后在后台会启动一个 evict 任务，对一定时间没有续约的服务进行剔除。</p>\n<h4 id=\"eureka-server\"><a href=\"#eureka-server\" class=\"headerlink\" title=\"eureka server\"></a>eureka server</h4><h5 id=\"pom-坐标\"><a href=\"#pom-坐标\" class=\"headerlink\" title=\"pom 坐标\"></a>pom 坐标</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-eureka<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>eureka server<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果是第一次引入的话要下载依赖包，可能需要一会。</p>\n<h5 id=\"开启-eureka-server\"><a href=\"#开启-eureka-server\" class=\"headerlink\" title=\"开启 eureka server\"></a>开启 eureka server</h5><p>在启动类加入注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheEurekaApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheEurekaApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-eureka</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务端口</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 为 true 时注册中心会尝试注册自己，这里关闭。但是集群时需要打开，因为注册中心会相互注册</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 为 true 时服务中心进行服务检索</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:$&#123;server.port&#125;/eureka/</span>  <span class=\"comment\"># 注册中心地址</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在启动服务，访问 <a class=\"link\" href=\"http://localhost:8080/\">http://localhost:8080<i class=\"fas fa-external-link-alt\"></i></a> 就可以看到 eureka server 页面了。</p>\n<h4 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h4><p>这里以用户 user 服务来充当服务的提供者</p>\n<h5 id=\"pom-坐标-1\"><a href=\"#pom-坐标-1\" class=\"headerlink\" title=\"pom 坐标\"></a>pom 坐标</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-user<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-user<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>user service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"注册服务\"><a href=\"#注册服务\" class=\"headerlink\" title=\"注册服务\"></a>注册服务</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheUserApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheUserApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-user</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册到服务中心</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8080/eureka/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样就注册好服务了，现在访问 <a class=\"link\" href=\"http://localhost:8080/\">http://localhost:8080<i class=\"fas fa-external-link-alt\"></i></a> 注册中心页面就可以看到已经注册的服务</p>\n<p><strong>Instances currently registered with Eureka</strong></p>\n<table>\n<thead>\n<tr>\n<th>Application</th>\n<th>AMIs</th>\n<th>Availability Zones</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>JIHE-USER</td>\n<td>n/a (1)</td>\n<td>(1)</td>\n<td>UP (1) - 192.168.0.104:jihe-user:8081</td>\n</tr>\n</tbody></table>\n<p>到这里服务的注册和发现就完成了，可以看到服务提供者讲服务注册到服务中心，供服务的消费者调用服务,那微服务之间是如何调用的呢？下面看下另外一个组件。</p>\n<h4 id=\"提供接口\"><a href=\"#提供接口\" class=\"headerlink\" title=\"提供接口\"></a>提供接口</h4><p>在 user 服务中创建 UserController,并向外抛一个可以访问的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是&quot;</span> + id + <span class=\"string\">&quot;号用户&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"服务消费者\"><a href=\"#服务消费者\" class=\"headerlink\" title=\"服务消费者\"></a>服务消费者</h4><p>订单 order 服务充当 user 服务的消费者</p>\n<h5 id=\"pom\"><a href=\"#pom\" class=\"headerlink\" title=\"pom\"></a>pom</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-order<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-order<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>order service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-order</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册到服务中心</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8080/eureka/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RestTemplate\"><a href=\"#RestTemplate\" class=\"headerlink\" title=\"RestTemplate\"></a>RestTemplate</h4><p>spring 提供了一个 rest 接口调用组件 restTemplate 来调用其他服务，这里使用它来调用 user 服务接口，在订单服务中，创建 restTemplate 实例对象。</p>\n<h5 id=\"启动类配置\"><a href=\"#启动类配置\" class=\"headerlink\" title=\"启动类配置\"></a>启动类配置</h5><p>消费者端开启服务发现和 Feign 客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"消费者远程调用接口\"><a href=\"#消费者远程调用接口\" class=\"headerlink\" title=\"消费者远程调用接口\"></a>消费者远程调用接口</h5><p>创建 OderService 类，调用 user 服务（这里直接写了具体的类，没有使用接口的方式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;http://jihe-user/user/&#123;id&#125;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(url, String.class, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OderService oderService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/order/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderAndUserInfo</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;name&quot;)</span> String name, <span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        String user = oderService.getUser(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是：&quot;</span> + name + <span class=\"string\">&quot;,&quot;</span> + user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里就完成了微服务模块最小的一个结构，<code>服务注册中心</code>，<code>服务提供者</code>，<code>服务调用者</code>。先启动 注册中心，然后在启动服务提供者，在启动服务调用者，在浏览器可以测试，直接访问服务的提供者，是可以访问到。通过调用者，也可以直接访问到服务的提供者，但是访问的端口和路径是不一样的。如果熟悉 spring boot 的话其实 spring cloud 的简单使用并不难，继续加油。<br>以上代码<a class=\"link\" href=\"https://github.com/oliverschen/springcloud\">地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>不积跬步，无以至千里</center>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/04/18/springcloud-eureka/eureka.png\" alt=\"不如吃茶去\"></p>\n<p>spring cloud netflix eureka 是对 Netflix 公司开源组件封装后的服务注册与发现组件。主要负责对服务的治理功能。也是微服务的核心组件之一，它由 euraka server 和 eureka client 组成，服务的提供方将服务注册到 eureka server，服务的消费方通过 eureka client 调用在注册中心的服务。这样就完成了服务的提供和调用。</p>","more":"<h4 id=\"eureka\"><a href=\"#eureka\" class=\"headerlink\" title=\"eureka\"></a>eureka</h4><h5 id=\"续约\"><a href=\"#续约\" class=\"headerlink\" title=\"续约\"></a>续约</h5><p>服务的续约：应用内的 eureka client 后台会启动一个定时任务，跟 eureka server 保持心跳续约任务。每个一段时间（默认30s）向 eureka server 发送一次 renew 请求进行续约，告诉 eureka server 自己还活着，防止被 eureka server 的 evict 任务剔除掉。</p>\n<h5 id=\"下线\"><a href=\"#下线\" class=\"headerlink\" title=\"下线\"></a>下线</h5><p>服务下线：应用内的 eureka client 在应用停止后，向 eureka server 发送 cancel 请求，告诉注册中心自己已经关闭了， eureka server 收到请求后会将其移除注册列表，防止消费端消费不可用的服务。</p>\n<h5 id=\"剔除\"><a href=\"#剔除\" class=\"headerlink\" title=\"剔除\"></a>剔除</h5><p>服务剔除：eureka server 启动后在后台会启动一个 evict 任务，对一定时间没有续约的服务进行剔除。</p>\n<h4 id=\"eureka-server\"><a href=\"#eureka-server\" class=\"headerlink\" title=\"eureka server\"></a>eureka server</h4><h5 id=\"pom-坐标\"><a href=\"#pom-坐标\" class=\"headerlink\" title=\"pom 坐标\"></a>pom 坐标</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-eureka<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>eureka server<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果是第一次引入的话要下载依赖包，可能需要一会。</p>\n<h5 id=\"开启-eureka-server\"><a href=\"#开启-eureka-server\" class=\"headerlink\" title=\"开启 eureka server\"></a>开启 eureka server</h5><p>在启动类加入注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheEurekaApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheEurekaApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-eureka</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务端口</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 为 true 时注册中心会尝试注册自己，这里关闭。但是集群时需要打开，因为注册中心会相互注册</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 为 true 时服务中心进行服务检索</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:$&#123;server.port&#125;/eureka/</span>  <span class=\"comment\"># 注册中心地址</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在启动服务，访问 <a class=\"link\" href=\"http://localhost:8080/\">http://localhost:8080<i class=\"fas fa-external-link-alt\"></i></a> 就可以看到 eureka server 页面了。</p>\n<h4 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h4><p>这里以用户 user 服务来充当服务的提供者</p>\n<h5 id=\"pom-坐标-1\"><a href=\"#pom-坐标-1\" class=\"headerlink\" title=\"pom 坐标\"></a>pom 坐标</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-user<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-user<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>user service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"注册服务\"><a href=\"#注册服务\" class=\"headerlink\" title=\"注册服务\"></a>注册服务</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheUserApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheUserApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-user</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册到服务中心</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8080/eureka/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样就注册好服务了，现在访问 <a class=\"link\" href=\"http://localhost:8080/\">http://localhost:8080<i class=\"fas fa-external-link-alt\"></i></a> 注册中心页面就可以看到已经注册的服务</p>\n<p><strong>Instances currently registered with Eureka</strong></p>\n<table>\n<thead>\n<tr>\n<th>Application</th>\n<th>AMIs</th>\n<th>Availability Zones</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>JIHE-USER</td>\n<td>n/a (1)</td>\n<td>(1)</td>\n<td>UP (1) - 192.168.0.104:jihe-user:8081</td>\n</tr>\n</tbody></table>\n<p>到这里服务的注册和发现就完成了，可以看到服务提供者讲服务注册到服务中心，供服务的消费者调用服务,那微服务之间是如何调用的呢？下面看下另外一个组件。</p>\n<h4 id=\"提供接口\"><a href=\"#提供接口\" class=\"headerlink\" title=\"提供接口\"></a>提供接口</h4><p>在 user 服务中创建 UserController,并向外抛一个可以访问的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是&quot;</span> + id + <span class=\"string\">&quot;号用户&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"服务消费者\"><a href=\"#服务消费者\" class=\"headerlink\" title=\"服务消费者\"></a>服务消费者</h4><p>订单 order 服务充当 user 服务的消费者</p>\n<h5 id=\"pom\"><a href=\"#pom\" class=\"headerlink\" title=\"pom\"></a>pom</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-order<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-order<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>order service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-order</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册到服务中心</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8080/eureka/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RestTemplate\"><a href=\"#RestTemplate\" class=\"headerlink\" title=\"RestTemplate\"></a>RestTemplate</h4><p>spring 提供了一个 rest 接口调用组件 restTemplate 来调用其他服务，这里使用它来调用 user 服务接口，在订单服务中，创建 restTemplate 实例对象。</p>\n<h5 id=\"启动类配置\"><a href=\"#启动类配置\" class=\"headerlink\" title=\"启动类配置\"></a>启动类配置</h5><p>消费者端开启服务发现和 Feign 客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"消费者远程调用接口\"><a href=\"#消费者远程调用接口\" class=\"headerlink\" title=\"消费者远程调用接口\"></a>消费者远程调用接口</h5><p>创建 OderService 类，调用 user 服务（这里直接写了具体的类，没有使用接口的方式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OderService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;http://jihe-user/user/&#123;id&#125;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(url, String.class, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OderService oderService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/order/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderAndUserInfo</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;name&quot;)</span> String name, <span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        String user = oderService.getUser(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是：&quot;</span> + name + <span class=\"string\">&quot;,&quot;</span> + user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里就完成了微服务模块最小的一个结构，<code>服务注册中心</code>，<code>服务提供者</code>，<code>服务调用者</code>。先启动 注册中心，然后在启动服务提供者，在启动服务调用者，在浏览器可以测试，直接访问服务的提供者，是可以访问到。通过调用者，也可以直接访问到服务的提供者，但是访问的端口和路径是不一样的。如果熟悉 spring boot 的话其实 spring cloud 的简单使用并不难，继续加油。<br>以上代码<a class=\"link\" href=\"https://github.com/oliverschen/springcloud\">地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>不积跬步，无以至千里</center>"},{"title":"springcloud-feign","date":"2019-12-15T01:47:39.000Z","_content":"\n![Photo by kejsirajbek on wallhaven.cc](/springcloud-feign.png)\n\n\n在远程调用时，Java 提供了 UrlConnection 来进行远程调用，也有 Apace 封装的 HttpClient 库进行调用。 在[eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子使用了 RestTemplate 来进行服务调用，feign 也一样，是一个远程调用组件，它是以接口的方式来进行调用，时调用姿势更加优雅，使用起来更加方便。[官网地址](https://spring.io/projects/spring-cloud-openfeign#overview)\n\n<!--more-->\n\n#### feign\n\n改造 [eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子，将 restTemplate 修改成 feign 调用。\n\n##### 引入\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n```\n\n##### 开启 feign\n\n```java\n@SpringBootApplication\n// 开启 feign 客户端\n@EnableFeignClients\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n}\n```\n\n##### 接口方式调用\n\nfeign 调用是以接口的方式进行 http 调用\n```java\n@FeignClient(value = \"jihe-user\")\npublic interface FeignService {\n\n    @RequestMapping(value = \"/user/{id}\",method = RequestMethod.GET)\n    String getUser(@PathVariable(\"id\") int id);\n}\n```\n1. @FeignClient 指定具体要调用的服务应用名。\n2. @RequestMapping 指定要调用的服务路径，请求方式。\n\n\n##### 调用\n\n```java\n@RestController\npublic class OderController {\n\n    // @Autowired\n    // private OderService oderService;\n\n    // @RequestMapping(\"/order/{name}/{id}\")\n    // public String getOrderAndUserInfo(@PathVariable(\"name\") String name, @PathVariable(\"id\") int id) {\n    //     String user = oderService.getUser(id);\n    //     return \"我是：\" + name + \",\" + user;\n    // }\n\n    @Autowired\n    private FeignService feignService;\n\n    @RequestMapping(\"/order-feign/{name}/{id}\")\n    public String getOrderAndUserInfoByFeign(@PathVariable(\"name\") String name, @PathVariable(\"id\") int id) {\n        String user = feignService.getUser(id);\n        return \"FEIGN-我是：\" + name + \",\" + user;\n    }\n}\n```\n\n引入 feign 接口，直接调用接口中的方法，实现对远程服务的调用。实现方式很快捷方便。访问 `http://localhost:8082/order-feign/jihe/1002` 这个路径，可以看到具体的结果。\n\n\n***\n\n<center></center>","source":"_posts/springcloud-feign.md","raw":"---\ntitle: springcloud-feign\ndate: 2019-12-15 09:47:39\ntags: springcloud\ncategory: springcloud\n---\n\n![Photo by kejsirajbek on wallhaven.cc](/springcloud-feign.png)\n\n\n在远程调用时，Java 提供了 UrlConnection 来进行远程调用，也有 Apace 封装的 HttpClient 库进行调用。 在[eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子使用了 RestTemplate 来进行服务调用，feign 也一样，是一个远程调用组件，它是以接口的方式来进行调用，时调用姿势更加优雅，使用起来更加方便。[官网地址](https://spring.io/projects/spring-cloud-openfeign#overview)\n\n<!--more-->\n\n#### feign\n\n改造 [eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子，将 restTemplate 修改成 feign 调用。\n\n##### 引入\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n```\n\n##### 开启 feign\n\n```java\n@SpringBootApplication\n// 开启 feign 客户端\n@EnableFeignClients\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n}\n```\n\n##### 接口方式调用\n\nfeign 调用是以接口的方式进行 http 调用\n```java\n@FeignClient(value = \"jihe-user\")\npublic interface FeignService {\n\n    @RequestMapping(value = \"/user/{id}\",method = RequestMethod.GET)\n    String getUser(@PathVariable(\"id\") int id);\n}\n```\n1. @FeignClient 指定具体要调用的服务应用名。\n2. @RequestMapping 指定要调用的服务路径，请求方式。\n\n\n##### 调用\n\n```java\n@RestController\npublic class OderController {\n\n    // @Autowired\n    // private OderService oderService;\n\n    // @RequestMapping(\"/order/{name}/{id}\")\n    // public String getOrderAndUserInfo(@PathVariable(\"name\") String name, @PathVariable(\"id\") int id) {\n    //     String user = oderService.getUser(id);\n    //     return \"我是：\" + name + \",\" + user;\n    // }\n\n    @Autowired\n    private FeignService feignService;\n\n    @RequestMapping(\"/order-feign/{name}/{id}\")\n    public String getOrderAndUserInfoByFeign(@PathVariable(\"name\") String name, @PathVariable(\"id\") int id) {\n        String user = feignService.getUser(id);\n        return \"FEIGN-我是：\" + name + \",\" + user;\n    }\n}\n```\n\n引入 feign 接口，直接调用接口中的方法，实现对远程服务的调用。实现方式很快捷方便。访问 `http://localhost:8082/order-feign/jihe/1002` 这个路径，可以看到具体的结果。\n\n\n***\n\n<center></center>","slug":"springcloud-feign","published":1,"updated":"2021-01-31T06:31:35.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeoww001rrh1t225i0znh","content":"<p><img src=\"/2019/12/15/springcloud-feign/springcloud-feign.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>在远程调用时，Java 提供了 UrlConnection 来进行远程调用，也有 Apace 封装的 HttpClient 库进行调用。 在<a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子使用了 RestTemplate 来进行服务调用，feign 也一样，是一个远程调用组件，它是以接口的方式来进行调用，时调用姿势更加优雅，使用起来更加方便。<a class=\"link\" href=\"https://spring.io/projects/spring-cloud-openfeign#overview\">官网地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<a id=\"more\"></a>\n\n<h4 id=\"feign\"><a href=\"#feign\" class=\"headerlink\" title=\"feign\"></a>feign</h4><p>改造 <a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子，将 restTemplate 修改成 feign 调用。</p>\n<h5 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-feign\"><a href=\"#开启-feign\" class=\"headerlink\" title=\"开启 feign\"></a>开启 feign</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">// 开启 feign 客户端</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"接口方式调用\"><a href=\"#接口方式调用\" class=\"headerlink\" title=\"接口方式调用\"></a>接口方式调用</h5><p>feign 调用是以接口的方式进行 http 调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;jihe-user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>@FeignClient 指定具体要调用的服务应用名。</li>\n<li>@RequestMapping 指定要调用的服务路径，请求方式。</li>\n</ol>\n<h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">    <span class=\"comment\">// private OderService oderService;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @RequestMapping(&quot;/order/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// public String getOrderAndUserInfo(@PathVariable(&quot;name&quot;) String name, @PathVariable(&quot;id&quot;) int id) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     String user = oderService.getUser(id);</span></span><br><span class=\"line\">    <span class=\"comment\">//     return &quot;我是：&quot; + name + &quot;,&quot; + user;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FeignService feignService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/order-feign/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderAndUserInfoByFeign</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;name&quot;)</span> String name, <span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        String user = feignService.getUser(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;FEIGN-我是：&quot;</span> + name + <span class=\"string\">&quot;,&quot;</span> + user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引入 feign 接口，直接调用接口中的方法，实现对远程服务的调用。实现方式很快捷方便。访问 <code>http://localhost:8082/order-feign/jihe/1002</code> 这个路径，可以看到具体的结果。</p>\n<hr>\n<center></center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/12/15/springcloud-feign/springcloud-feign.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>在远程调用时，Java 提供了 UrlConnection 来进行远程调用，也有 Apace 封装的 HttpClient 库进行调用。 在<a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子使用了 RestTemplate 来进行服务调用，feign 也一样，是一个远程调用组件，它是以接口的方式来进行调用，时调用姿势更加优雅，使用起来更加方便。<a class=\"link\" href=\"https://spring.io/projects/spring-cloud-openfeign#overview\">官网地址<i class=\"fas fa-external-link-alt\"></i></a></p>","more":"<h4 id=\"feign\"><a href=\"#feign\" class=\"headerlink\" title=\"feign\"></a>feign</h4><p>改造 <a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子，将 restTemplate 修改成 feign 调用。</p>\n<h5 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-feign\"><a href=\"#开启-feign\" class=\"headerlink\" title=\"开启 feign\"></a>开启 feign</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">// 开启 feign 客户端</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"接口方式调用\"><a href=\"#接口方式调用\" class=\"headerlink\" title=\"接口方式调用\"></a>接口方式调用</h5><p>feign 调用是以接口的方式进行 http 调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;jihe-user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>@FeignClient 指定具体要调用的服务应用名。</li>\n<li>@RequestMapping 指定要调用的服务路径，请求方式。</li>\n</ol>\n<h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">    <span class=\"comment\">// private OderService oderService;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @RequestMapping(&quot;/order/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// public String getOrderAndUserInfo(@PathVariable(&quot;name&quot;) String name, @PathVariable(&quot;id&quot;) int id) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     String user = oderService.getUser(id);</span></span><br><span class=\"line\">    <span class=\"comment\">//     return &quot;我是：&quot; + name + &quot;,&quot; + user;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FeignService feignService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/order-feign/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderAndUserInfoByFeign</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;name&quot;)</span> String name, <span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        String user = feignService.getUser(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;FEIGN-我是：&quot;</span> + name + <span class=\"string\">&quot;,&quot;</span> + user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引入 feign 接口，直接调用接口中的方法，实现对远程服务的调用。实现方式很快捷方便。访问 <code>http://localhost:8082/order-feign/jihe/1002</code> 这个路径，可以看到具体的结果。</p>\n<hr>\n<center></center>"},{"title":"springcloud-hystrix(二)","date":"2019-04-25T14:38:29.000Z","_content":"\n![行到水穷处，坐看云起时](springcloud-hystrix/hystrix.png)\n\nspringcloud hystrix 熔断器，顾名思义。在现实生活中也有很多熔断器，像家里的过载保护开关就充当这个角色，当有用电器过载或者发生短路时，就能及时切断电路，避免造成更大的损坏。hystrix 在整个微服务系统中也充当类似这种角色，但是它的功能要远比刚刚这个例子要丰富的多。\n<!-- more -->\n\n#### 雪崩效应\n\n通俗来讲雪崩效应就是有一处发生雪崩可能会造成大面积雪崩的现象。在微服务系统中，多个服务之间存在相互之间的调用，如果有一处服务出现物理故障或者其他故障，如果不及时处理，可能会造成更多服务的故障甚至会影响整个系统瘫痪。这种现象可能发生在大量请求调用某个服务，导致此服务出现等待甚至崩溃后，致使其他服务也出现等待等现象，直到导致整个系统崩溃。这是一件可怕的事情，不过好在我们部署服务的时候一般都是集群部署，保证高可用。但是在实际业务场景中，可能会存在很多情况发生，熔断机制是保护服务高可用的最后一道防线。\n\n\n#### hystrix\n\nhystrix 一般部署在服务的调用方，也就是服务的消费放，我这里创建的项目和昨天的一样，今天会多创建一个服务的调用方，来部署 hystrix\n\n##### 特性\n\n1. 请求熔断：当请求到达服务失败的数量到达一定比例（默认50%），断路器会自动切换到 Open 状态，这时所有的请求会直接失败，不会发送到具体的服务，一般断路器 Open 状态一段时间（默认5秒）后，自动切换到 HALF-Open 半开状态。这时会判断下次请求，如果成功，则切换到 CLOSE 关闭状态。否则重新回到 Open 状态。\n2. 服务降级：FallBack 相当于服务降级操作，当服务不可用时走异常处理逻辑返回一个默认结果，告知调用方服务处于异常状态。\n\n##### pom\n\n也是依赖 [eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子来进行集成 Hystrix 使用。\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n```\n\n##### 启动类\n```java\n@SpringBootApplication\n@EnableFeignClients\n// 开启 Hystrix\n@EnableHystrix\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n}\n```\n\n##### 开启 hystrix\n\n```yaml\n# 开启 hystrix\nfeign:\n  hystrix:\n    enabled: true\n```\n\n##### fallback\n\n之前我们使用 feigin 进行远程调用，现在 feign 配合 hystrix 进行使用，首先使用 @FeignClient 注解中的回调参数 fallback 指定具体的回调类。\n\n```java\n@FeignClient(value = \"jihe-user\",fallback = FeignServiceFallBack.class)\npublic interface FeignService {\n\n    @RequestMapping(value = \"/user/{id}\",method = RequestMethod.GET)\n    String getUser(@PathVariable(\"id\") int id);\n}\n```\n\n##### 回调实现类\n\n编写具体的回调实现类，继承远程调用接口,编写相应的回调处理逻辑。 \n\n```java\n@Component\npublic class FeignServiceFallBack implements FeignService {\n    @Override\n    public String getUser(int id) {\n        return \"user service is busy,please wait\";\n    }\n}\n\n```\n\n到这里工程就搭建好了，按顺序启动项目。访问 order 服务 `http://localhost:8082/order-feign/jihe/1002` 会看到 `FEIGN-我是：jihe,我是1002号用户,访问端口：8081` 的结果，这是服务正常情况下的结果，现在将 user 服务直接关机，然后访问，则返回熔断后的结果 `FEIGN-我是：jihe,user service is busy,please wait`。\n\n***\n\n<center>天涯远不远？人就在天涯，天涯怎会远呢</center>\n\n\n\n\n\n\n\n\n","source":"_posts/springcloud-hystrix.md","raw":"---\ntitle: springcloud-hystrix(二)\ndate: 2019-04-25 22:38:29\ntags: springcloud\ncategory: springcloud\n---\n\n![行到水穷处，坐看云起时](springcloud-hystrix/hystrix.png)\n\nspringcloud hystrix 熔断器，顾名思义。在现实生活中也有很多熔断器，像家里的过载保护开关就充当这个角色，当有用电器过载或者发生短路时，就能及时切断电路，避免造成更大的损坏。hystrix 在整个微服务系统中也充当类似这种角色，但是它的功能要远比刚刚这个例子要丰富的多。\n<!-- more -->\n\n#### 雪崩效应\n\n通俗来讲雪崩效应就是有一处发生雪崩可能会造成大面积雪崩的现象。在微服务系统中，多个服务之间存在相互之间的调用，如果有一处服务出现物理故障或者其他故障，如果不及时处理，可能会造成更多服务的故障甚至会影响整个系统瘫痪。这种现象可能发生在大量请求调用某个服务，导致此服务出现等待甚至崩溃后，致使其他服务也出现等待等现象，直到导致整个系统崩溃。这是一件可怕的事情，不过好在我们部署服务的时候一般都是集群部署，保证高可用。但是在实际业务场景中，可能会存在很多情况发生，熔断机制是保护服务高可用的最后一道防线。\n\n\n#### hystrix\n\nhystrix 一般部署在服务的调用方，也就是服务的消费放，我这里创建的项目和昨天的一样，今天会多创建一个服务的调用方，来部署 hystrix\n\n##### 特性\n\n1. 请求熔断：当请求到达服务失败的数量到达一定比例（默认50%），断路器会自动切换到 Open 状态，这时所有的请求会直接失败，不会发送到具体的服务，一般断路器 Open 状态一段时间（默认5秒）后，自动切换到 HALF-Open 半开状态。这时会判断下次请求，如果成功，则切换到 CLOSE 关闭状态。否则重新回到 Open 状态。\n2. 服务降级：FallBack 相当于服务降级操作，当服务不可用时走异常处理逻辑返回一个默认结果，告知调用方服务处于异常状态。\n\n##### pom\n\n也是依赖 [eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子来进行集成 Hystrix 使用。\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n```\n\n##### 启动类\n```java\n@SpringBootApplication\n@EnableFeignClients\n// 开启 Hystrix\n@EnableHystrix\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n\n}\n```\n\n##### 开启 hystrix\n\n```yaml\n# 开启 hystrix\nfeign:\n  hystrix:\n    enabled: true\n```\n\n##### fallback\n\n之前我们使用 feigin 进行远程调用，现在 feign 配合 hystrix 进行使用，首先使用 @FeignClient 注解中的回调参数 fallback 指定具体的回调类。\n\n```java\n@FeignClient(value = \"jihe-user\",fallback = FeignServiceFallBack.class)\npublic interface FeignService {\n\n    @RequestMapping(value = \"/user/{id}\",method = RequestMethod.GET)\n    String getUser(@PathVariable(\"id\") int id);\n}\n```\n\n##### 回调实现类\n\n编写具体的回调实现类，继承远程调用接口,编写相应的回调处理逻辑。 \n\n```java\n@Component\npublic class FeignServiceFallBack implements FeignService {\n    @Override\n    public String getUser(int id) {\n        return \"user service is busy,please wait\";\n    }\n}\n\n```\n\n到这里工程就搭建好了，按顺序启动项目。访问 order 服务 `http://localhost:8082/order-feign/jihe/1002` 会看到 `FEIGN-我是：jihe,我是1002号用户,访问端口：8081` 的结果，这是服务正常情况下的结果，现在将 user 服务直接关机，然后访问，则返回熔断后的结果 `FEIGN-我是：jihe,user service is busy,please wait`。\n\n***\n\n<center>天涯远不远？人就在天涯，天涯怎会远呢</center>\n\n\n\n\n\n\n\n\n","slug":"springcloud-hystrix","published":1,"updated":"2021-01-31T06:31:35.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowx001urh1tdyf9at0m","content":"<p><img src=\"/2019/04/25/springcloud-hystrix/hystrix.png\" alt=\"行到水穷处，坐看云起时\"></p>\n<p>springcloud hystrix 熔断器，顾名思义。在现实生活中也有很多熔断器，像家里的过载保护开关就充当这个角色，当有用电器过载或者发生短路时，就能及时切断电路，避免造成更大的损坏。hystrix 在整个微服务系统中也充当类似这种角色，但是它的功能要远比刚刚这个例子要丰富的多。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"雪崩效应\"><a href=\"#雪崩效应\" class=\"headerlink\" title=\"雪崩效应\"></a>雪崩效应</h4><p>通俗来讲雪崩效应就是有一处发生雪崩可能会造成大面积雪崩的现象。在微服务系统中，多个服务之间存在相互之间的调用，如果有一处服务出现物理故障或者其他故障，如果不及时处理，可能会造成更多服务的故障甚至会影响整个系统瘫痪。这种现象可能发生在大量请求调用某个服务，导致此服务出现等待甚至崩溃后，致使其他服务也出现等待等现象，直到导致整个系统崩溃。这是一件可怕的事情，不过好在我们部署服务的时候一般都是集群部署，保证高可用。但是在实际业务场景中，可能会存在很多情况发生，熔断机制是保护服务高可用的最后一道防线。</p>\n<h4 id=\"hystrix\"><a href=\"#hystrix\" class=\"headerlink\" title=\"hystrix\"></a>hystrix</h4><p>hystrix 一般部署在服务的调用方，也就是服务的消费放，我这里创建的项目和昨天的一样，今天会多创建一个服务的调用方，来部署 hystrix</p>\n<h5 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h5><ol>\n<li>请求熔断：当请求到达服务失败的数量到达一定比例（默认50%），断路器会自动切换到 Open 状态，这时所有的请求会直接失败，不会发送到具体的服务，一般断路器 Open 状态一段时间（默认5秒）后，自动切换到 HALF-Open 半开状态。这时会判断下次请求，如果成功，则切换到 CLOSE 关闭状态。否则重新回到 Open 状态。</li>\n<li>服务降级：FallBack 相当于服务降级操作，当服务不可用时走异常处理逻辑返回一个默认结果，告知调用方服务处于异常状态。</li>\n</ol>\n<h5 id=\"pom\"><a href=\"#pom\" class=\"headerlink\" title=\"pom\"></a>pom</h5><p>也是依赖 <a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子来进行集成 Hystrix 使用。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 开启 Hystrix</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrix</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-hystrix\"><a href=\"#开启-hystrix\" class=\"headerlink\" title=\"开启 hystrix\"></a>开启 hystrix</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启 hystrix</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"fallback\"><a href=\"#fallback\" class=\"headerlink\" title=\"fallback\"></a>fallback</h5><p>之前我们使用 feigin 进行远程调用，现在 feign 配合 hystrix 进行使用，首先使用 @FeignClient 注解中的回调参数 fallback 指定具体的回调类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;jihe-user&quot;,fallback = FeignServiceFallBack.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"回调实现类\"><a href=\"#回调实现类\" class=\"headerlink\" title=\"回调实现类\"></a>回调实现类</h5><p>编写具体的回调实现类，继承远程调用接口,编写相应的回调处理逻辑。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignServiceFallBack</span> <span class=\"keyword\">implements</span> <span class=\"title\">FeignService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;user service is busy,please wait&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到这里工程就搭建好了，按顺序启动项目。访问 order 服务 <code>http://localhost:8082/order-feign/jihe/1002</code> 会看到 <code>FEIGN-我是：jihe,我是1002号用户,访问端口：8081</code> 的结果，这是服务正常情况下的结果，现在将 user 服务直接关机，然后访问，则返回熔断后的结果 <code>FEIGN-我是：jihe,user service is busy,please wait</code>。</p>\n<hr>\n<center>天涯远不远？人就在天涯，天涯怎会远呢</center>\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/04/25/springcloud-hystrix/hystrix.png\" alt=\"行到水穷处，坐看云起时\"></p>\n<p>springcloud hystrix 熔断器，顾名思义。在现实生活中也有很多熔断器，像家里的过载保护开关就充当这个角色，当有用电器过载或者发生短路时，就能及时切断电路，避免造成更大的损坏。hystrix 在整个微服务系统中也充当类似这种角色，但是它的功能要远比刚刚这个例子要丰富的多。</p>","more":"<h4 id=\"雪崩效应\"><a href=\"#雪崩效应\" class=\"headerlink\" title=\"雪崩效应\"></a>雪崩效应</h4><p>通俗来讲雪崩效应就是有一处发生雪崩可能会造成大面积雪崩的现象。在微服务系统中，多个服务之间存在相互之间的调用，如果有一处服务出现物理故障或者其他故障，如果不及时处理，可能会造成更多服务的故障甚至会影响整个系统瘫痪。这种现象可能发生在大量请求调用某个服务，导致此服务出现等待甚至崩溃后，致使其他服务也出现等待等现象，直到导致整个系统崩溃。这是一件可怕的事情，不过好在我们部署服务的时候一般都是集群部署，保证高可用。但是在实际业务场景中，可能会存在很多情况发生，熔断机制是保护服务高可用的最后一道防线。</p>\n<h4 id=\"hystrix\"><a href=\"#hystrix\" class=\"headerlink\" title=\"hystrix\"></a>hystrix</h4><p>hystrix 一般部署在服务的调用方，也就是服务的消费放，我这里创建的项目和昨天的一样，今天会多创建一个服务的调用方，来部署 hystrix</p>\n<h5 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h5><ol>\n<li>请求熔断：当请求到达服务失败的数量到达一定比例（默认50%），断路器会自动切换到 Open 状态，这时所有的请求会直接失败，不会发送到具体的服务，一般断路器 Open 状态一段时间（默认5秒）后，自动切换到 HALF-Open 半开状态。这时会判断下次请求，如果成功，则切换到 CLOSE 关闭状态。否则重新回到 Open 状态。</li>\n<li>服务降级：FallBack 相当于服务降级操作，当服务不可用时走异常处理逻辑返回一个默认结果，告知调用方服务处于异常状态。</li>\n</ol>\n<h5 id=\"pom\"><a href=\"#pom\" class=\"headerlink\" title=\"pom\"></a>pom</h5><p>也是依赖 <a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子来进行集成 Hystrix 使用。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 开启 Hystrix</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrix</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启-hystrix\"><a href=\"#开启-hystrix\" class=\"headerlink\" title=\"开启 hystrix\"></a>开启 hystrix</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启 hystrix</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"fallback\"><a href=\"#fallback\" class=\"headerlink\" title=\"fallback\"></a>fallback</h5><p>之前我们使用 feigin 进行远程调用，现在 feign 配合 hystrix 进行使用，首先使用 @FeignClient 注解中的回调参数 fallback 指定具体的回调类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;jihe-user&quot;,fallback = FeignServiceFallBack.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"回调实现类\"><a href=\"#回调实现类\" class=\"headerlink\" title=\"回调实现类\"></a>回调实现类</h5><p>编写具体的回调实现类，继承远程调用接口,编写相应的回调处理逻辑。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignServiceFallBack</span> <span class=\"keyword\">implements</span> <span class=\"title\">FeignService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;user service is busy,please wait&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到这里工程就搭建好了，按顺序启动项目。访问 order 服务 <code>http://localhost:8082/order-feign/jihe/1002</code> 会看到 <code>FEIGN-我是：jihe,我是1002号用户,访问端口：8081</code> 的结果，这是服务正常情况下的结果，现在将 user 服务直接关机，然后访问，则返回熔断后的结果 <code>FEIGN-我是：jihe,user service is busy,please wait</code>。</p>\n<hr>\n<center>天涯远不远？人就在天涯，天涯怎会远呢</center>"},{"title":"springcloud-ribbon","date":"2019-12-14T16:09:27.000Z","_content":"\n![Photo by kejsirajbek on wallhaven.cc](/springcloud-ribbon.png)\n\n\n一般负载均衡指的是服务端的负载均衡，硬件有 F5 等设备，软件方面有 nginx 等。负载均衡是系统在高可用和容灾性等方面的重要的解决方案之一。而 Ribbon 是一款基于客户端的负载均衡应用。\n我的理解是，请求没有到达应用之前，是由 nginx 来进行请求分发，决定进入到那个服务，当请求进入到服务之后，在服务调用时由 Ribbon 来进行服务之间请求分发，实现内网应用的负载均衡。\n<!--more-->\n\n\n#### ribbon\n\n一般 `spring-cloud-starter-netflix-eureka-client` 已经引入了 ribbon 组件，在使用时直接进行使用就可以了。\n\n\n##### @LoadBalanced\n\n负载均衡注解，官方解释 `Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient.` 大概意思是 让 restTemplate 实例配置使用负载均衡客户端。\n\n\n##### 负载均衡算法\n\n\n###### 轮询\n\n\n\n###### 随机获取\n\n\n##### 使用\n\n使用在 [eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子来进行使用。\n\n###### 引入\n在订单服务启动时加载负载均衡配置\n```java\n@SpringBootApplication\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    /**\n     * 负载均衡注解\n     **/\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n\n```\n请求到服务时打印端口信息，方便测试\n\n```java\n\n@RestController\npublic class UserController {\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @RequestMapping(\"/user/{id}\")\n    public String getUser(@PathVariable(\"id\") int id) {\n        return \"我是\" + id + \"号用户\" + \",访问端口：\" + port;\n    }\n\n}\n```\n\n###### 测试\n\n1. 首先要在 idea 开启并行启动，在 idea 右上角编辑服务栏打开 `Edit Configurations` ，进入到编辑页面后，右上角会有和复选框 `Allow Parallel run` ，选择之后项目修改端口后就可以启动多个实列了。\n\n2. 修改端口号，同时启动 3 和 user 服务。\n\n3. 使用 order 服务调用 user 服务，通过不同的端口号打印信息，会看到 ribbon 默认是轮询的方式来负载均衡请求客户端的。\n\n\n***\n\n<center></center>","source":"_posts/springcloud-ribbon.md","raw":"---\ntitle: springcloud-ribbon\ndate: 2019-12-15 00:09:27\ntags: springcloud\ncategory: springcloud\n---\n\n![Photo by kejsirajbek on wallhaven.cc](/springcloud-ribbon.png)\n\n\n一般负载均衡指的是服务端的负载均衡，硬件有 F5 等设备，软件方面有 nginx 等。负载均衡是系统在高可用和容灾性等方面的重要的解决方案之一。而 Ribbon 是一款基于客户端的负载均衡应用。\n我的理解是，请求没有到达应用之前，是由 nginx 来进行请求分发，决定进入到那个服务，当请求进入到服务之后，在服务调用时由 Ribbon 来进行服务之间请求分发，实现内网应用的负载均衡。\n<!--more-->\n\n\n#### ribbon\n\n一般 `spring-cloud-starter-netflix-eureka-client` 已经引入了 ribbon 组件，在使用时直接进行使用就可以了。\n\n\n##### @LoadBalanced\n\n负载均衡注解，官方解释 `Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient.` 大概意思是 让 restTemplate 实例配置使用负载均衡客户端。\n\n\n##### 负载均衡算法\n\n\n###### 轮询\n\n\n\n###### 随机获取\n\n\n##### 使用\n\n使用在 [eureka](https://fengzhu.top/2019/04/18/springcloud-eureka/)中的例子来进行使用。\n\n###### 引入\n在订单服务启动时加载负载均衡配置\n```java\n@SpringBootApplication\npublic class JiheOrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheOrderApplication.class, args);\n    }\n\n    /**\n     * 负载均衡注解\n     **/\n    @Bean\n    @LoadBalanced\n    @ConditionalOnMissingBean\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n\n```\n请求到服务时打印端口信息，方便测试\n\n```java\n\n@RestController\npublic class UserController {\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @RequestMapping(\"/user/{id}\")\n    public String getUser(@PathVariable(\"id\") int id) {\n        return \"我是\" + id + \"号用户\" + \",访问端口：\" + port;\n    }\n\n}\n```\n\n###### 测试\n\n1. 首先要在 idea 开启并行启动，在 idea 右上角编辑服务栏打开 `Edit Configurations` ，进入到编辑页面后，右上角会有和复选框 `Allow Parallel run` ，选择之后项目修改端口后就可以启动多个实列了。\n\n2. 修改端口号，同时启动 3 和 user 服务。\n\n3. 使用 order 服务调用 user 服务，通过不同的端口号打印信息，会看到 ribbon 默认是轮询的方式来负载均衡请求客户端的。\n\n\n***\n\n<center></center>","slug":"springcloud-ribbon","published":1,"updated":"2021-01-31T06:31:35.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowy001zrh1t6bhn2p3a","content":"<p><img src=\"/2019/12/15/springcloud-ribbon/springcloud-ribbon.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>一般负载均衡指的是服务端的负载均衡，硬件有 F5 等设备，软件方面有 nginx 等。负载均衡是系统在高可用和容灾性等方面的重要的解决方案之一。而 Ribbon 是一款基于客户端的负载均衡应用。<br>我的理解是，请求没有到达应用之前，是由 nginx 来进行请求分发，决定进入到那个服务，当请求进入到服务之后，在服务调用时由 Ribbon 来进行服务之间请求分发，实现内网应用的负载均衡。</p>\n<a id=\"more\"></a>\n\n\n<h4 id=\"ribbon\"><a href=\"#ribbon\" class=\"headerlink\" title=\"ribbon\"></a>ribbon</h4><p>一般 <code>spring-cloud-starter-netflix-eureka-client</code> 已经引入了 ribbon 组件，在使用时直接进行使用就可以了。</p>\n<h5 id=\"LoadBalanced\"><a href=\"#LoadBalanced\" class=\"headerlink\" title=\"@LoadBalanced\"></a>@LoadBalanced</h5><p>负载均衡注解，官方解释 <code>Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient.</code> 大概意思是 让 restTemplate 实例配置使用负载均衡客户端。</p>\n<h5 id=\"负载均衡算法\"><a href=\"#负载均衡算法\" class=\"headerlink\" title=\"负载均衡算法\"></a>负载均衡算法</h5><h6 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h6><h6 id=\"随机获取\"><a href=\"#随机获取\" class=\"headerlink\" title=\"随机获取\"></a>随机获取</h6><h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>使用在 <a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子来进行使用。</p>\n<h6 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h6><p>在订单服务启动时加载负载均衡配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 负载均衡注解</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>请求到服务时打印端口信息，方便测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是&quot;</span> + id + <span class=\"string\">&quot;号用户&quot;</span> + <span class=\"string\">&quot;,访问端口：&quot;</span> + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><ol>\n<li><p>首先要在 idea 开启并行启动，在 idea 右上角编辑服务栏打开 <code>Edit Configurations</code> ，进入到编辑页面后，右上角会有和复选框 <code>Allow Parallel run</code> ，选择之后项目修改端口后就可以启动多个实列了。</p>\n</li>\n<li><p>修改端口号，同时启动 3 和 user 服务。</p>\n</li>\n<li><p>使用 order 服务调用 user 服务，通过不同的端口号打印信息，会看到 ribbon 默认是轮询的方式来负载均衡请求客户端的。</p>\n</li>\n</ol>\n<hr>\n<center></center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/12/15/springcloud-ribbon/springcloud-ribbon.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>一般负载均衡指的是服务端的负载均衡，硬件有 F5 等设备，软件方面有 nginx 等。负载均衡是系统在高可用和容灾性等方面的重要的解决方案之一。而 Ribbon 是一款基于客户端的负载均衡应用。<br>我的理解是，请求没有到达应用之前，是由 nginx 来进行请求分发，决定进入到那个服务，当请求进入到服务之后，在服务调用时由 Ribbon 来进行服务之间请求分发，实现内网应用的负载均衡。</p>","more":"<h4 id=\"ribbon\"><a href=\"#ribbon\" class=\"headerlink\" title=\"ribbon\"></a>ribbon</h4><p>一般 <code>spring-cloud-starter-netflix-eureka-client</code> 已经引入了 ribbon 组件，在使用时直接进行使用就可以了。</p>\n<h5 id=\"LoadBalanced\"><a href=\"#LoadBalanced\" class=\"headerlink\" title=\"@LoadBalanced\"></a>@LoadBalanced</h5><p>负载均衡注解，官方解释 <code>Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient.</code> 大概意思是 让 restTemplate 实例配置使用负载均衡客户端。</p>\n<h5 id=\"负载均衡算法\"><a href=\"#负载均衡算法\" class=\"headerlink\" title=\"负载均衡算法\"></a>负载均衡算法</h5><h6 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h6><h6 id=\"随机获取\"><a href=\"#随机获取\" class=\"headerlink\" title=\"随机获取\"></a>随机获取</h6><h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>使用在 <a class=\"link\" href=\"https://fengzhu.top/2019/04/18/springcloud-eureka/\">eureka<i class=\"fas fa-external-link-alt\"></i></a>中的例子来进行使用。</p>\n<h6 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h6><p>在订单服务启动时加载负载均衡配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheOrderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 负载均衡注解</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>请求到服务时打印端口信息，方便测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是&quot;</span> + id + <span class=\"string\">&quot;号用户&quot;</span> + <span class=\"string\">&quot;,访问端口：&quot;</span> + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><ol>\n<li><p>首先要在 idea 开启并行启动，在 idea 右上角编辑服务栏打开 <code>Edit Configurations</code> ，进入到编辑页面后，右上角会有和复选框 <code>Allow Parallel run</code> ，选择之后项目修改端口后就可以启动多个实列了。</p>\n</li>\n<li><p>修改端口号，同时启动 3 和 user 服务。</p>\n</li>\n<li><p>使用 order 服务调用 user 服务，通过不同的端口号打印信息，会看到 ribbon 默认是轮询的方式来负载均衡请求客户端的。</p>\n</li>\n</ol>\n<hr>\n<center></center>"},{"title":"springcloud-zuul","date":"2019-12-15T09:03:26.000Z","_content":"\n![Photo by kejsirajbek on wallhaven.cc](/springcloud-zuul.png)\n\n\n服务网关时微服务架构中服务的统一入口，除了服务路由分发，负载均衡等，还具备鉴权等功能。zuul 就是 springcloud 中提供服务网关的组件。\n\n<!--more-->\n\n![网关作为微服务架构统一入口](/zuul-user.png)\n\n##### 优点\n\n1. 易于监控：可以在网关收集监控数据将其推送到外部系统进行分析。\n2. 易于认证：在网关进行鉴权等，通过后在将请求分发到具体服务。请求进入网关之后，各个微服务之间进行无状态调用。\n3. 易于重构：客户端和服务之后交互入口统一，在后期服务重构等操作时，可以进行客户端无感知重构。\n\n#### 搭建\n\n##### pom \n\n引入 zuul pom 坐标。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-zuul</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-zuul</name>\n    <description>zuul service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n##### 配置\n\n```yml\n\ndebug: false\n\nserver:\n  port: 9999\n\nspring:\n  application:\n    name: jihe-zuul\n\n# 注册到服务中心\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8080/eureka/\nzuul:\n  routes:\n    # 自定义路由\n    api-order:\n      path: /api-order/**\n      serviceId: jihe-order\n    api-user:\n      path: /api-user/**\n      serviceId: jihe-user\n```\n\n##### 配置启动类\n```java\n@EnableZuulProxy\n@EnableEurekaClient\n@SpringBootApplication\npublic class JiheZuulApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheZuulApplication.class, args);\n    }\n\n}\n```\n\n在自定义路由部分可以自己按照需求来自定义路由分发，上面当请求是 `/api-order/**` 开头时，统一走 `jihe-order` 服务，当请求是 `api-user` 时，统一走 `jihe-user` 服务。 `*` 匹配任何路径。\n\n#### 测试\n\n启动注册中心，启动网关和用户服务，访问 user 服务 `http://localhost:8081/user/1` 返回结果 `我是1号用户,访问端口：8081`，现在通过网关访问 user 服务 `http://localhost:9999/api-user/user/1` 返回结果 `我是1号用户,访问端口：8081`，通过网关，将 `api-user` 路由请求分发到了 user 服务，这里也可以用服务名来调用 `http://localhost:9999/jihe-user/user/1` 也是返回相同的结果。\n\n##### 忽略服务名访问\n\n需要在配置文件添加下面配置：\n```yml\nzuul:\n  routes:\n    # 自定义路由\n    api-order:\n      path: /api-order/**\n      serviceId: jihe-order\n    api-user:\n      path: /api-user/**\n      serviceId: jihe-user\n  # 忽略通过服务名访问\n  ignored-services: \"*\"\n```\n配置之后通过服务名将访问不到资源。\n\n##### 绑定 url 映射\n\n跳转到指定的路由。\n\n```yml\nzuul:\n  routes:\n    baidu:\n      url: http://www.baidu.com\n      path: /baidu/**\n```\n\n##### url 映射负载均衡\n\n```yml\nribbon:\n  eureka:\n    enabled: false\n# 请求服务负载均衡\njihe-user:\n  ribbon:\n    listOfServers: http://ke.qq.com/,http://www.imooc.com/\n\nzuul:\n  routes:\n    class:\n      serviceId: jihe-user\n      path: /ketang/**\n```\n请求 `http://localhost:9999/ketang` 请求线性负载到 listOfServers 中的服务。\n\n#### 过滤器\n\n配置统一过滤器，进行鉴权等操作。\n\n```java\npackage com.jihe.zuul.filter;\n\nimport com.netflix.zuul.ZuulFilter;\nimport com.netflix.zuul.context.RequestContext;\nimport com.netflix.zuul.exception.ZuulException;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\n\n/**\n * @description: 统一过滤器\n * @author: ck\n * @time: 2019-12-15 22:16\n **/\n@Component\npublic class UnionFilter extends ZuulFilter {\n\n\n    /**\n     * 包含类型：\n     * pre:路由代理之前执行\n     * route：代理时执行\n     * error：代理出错执行\n     * post：route || error 之后执行\n     */\n    @Override\n    public String filterType() {\n        // 之前执行\n        return FilterConstants.PRE_TYPE;\n    }\n\n    /**\n     * 存在多个过滤器时执行顺序\n     * 数字越小，优先级越高\n     */\n    @Override\n    public int filterOrder() {\n        return 1;\n    }\n\n    /**\n     * 是否执行过滤器：true 需要\n     */\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    /**\n     * 具体执行逻辑\n     *\n     * @throws ZuulException\n     */\n    @Override\n    public Object run() throws ZuulException {\n        System.out.println(\"enter UnionFilter,auth begin\");\n        RequestContext context = RequestContext.getCurrentContext();\n        // 获取到 request 对象，进行鉴权等操作\n        HttpServletRequest request = context.getRequest();\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isBlank(token)) {\n            try {\n                context.setSendZuulResponse(false);\n                context.setResponseStatusCode(400);\n                context.getResponse().getWriter().println(\"auth failed,please reload\");\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n\n```\n配置好过滤器之后访问 `http://localhost:9999/api-user/user/1` 服务，直接返回 `auth failed,please reload` 结果，鉴权失败，请重试。\n\n网关将鉴权等操作和服务分离出来，并且将整个微服务架构统一入口，也是微服务架构中重要的环节之一。以上就是 zuul 学习中的一些记录。\n\n#### 用户系统集成 swagger\n\n##### swagger\nswagger 是一个 Restfull 接口文档在线自动生成和测试框架\n\n##### 优点\n1. 及时更新文档：修改接口之后，接口文档即使更新，提高和前端，测试沟通效率。\n2. 方便测试：可以给到测试接口测试信息，避免手写文档\n\n##### 缺点\n代码侵入太高。\n\n##### pom\n\n```xml\n<dependency>\n    <groupId>com.spring4all</groupId>\n    <artifactId>swagger-spring-boot-starter</artifactId>\n    <version>1.7.0.RELEASE</version>\n</dependency>\n```\n\n##### 配置\n```java\npackage com.jihe.user.config;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * @description: swagger config\n * @author: ck\n * @time: 2019-12-16 00:06\n **/\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket createTestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.jihe.user.controller\"))\n                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))\n                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"用户系统Api\")\n                .description(\"用户系统接口文档\")\n                .contact(new springfox.documentation.service.Contact(\"jihe\", \"http://fengzhu.top\",\"XXX@gmail.com\"))\n                .version(\"1.0\")\n                .build();\n\n    }\n}\n```\n\n##### 使用\n```java\n@Api(\"用户系统-API\")\n@RestController\npublic class UserController {\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @ApiOperation(value = \"返回用户服务信息\",notes = \"根据 ID 返回用户和服务信息\")\n    @ApiImplicitParam(name = \"id\",value = \"用户ID\",required = true,dataType = \"Integer\")\n    @PostMapping(\"/user/{id}\")\n    public String getUser(@PathVariable(\"id\") int id) {\n        return \"我是\" + id + \"号用户\" + \",访问端口：\" + port;\n    }\n}\n```\n\n以上 swagger 就集成好了，启动注册中心，启动 user 服务访问 `http://localhost:8081/swagger-ui.html` 就可以看到具体的接口文档。不过通过上面的代码也可以看出来 swagger 对代码的侵入性很高，本来简单的代码写了很多东西。果然有利则有弊。 \n\n#### zuul 集成 swagger\n```xml\n<dependency>\n    <groupId>com.spring4all</groupId>\n    <artifactId>swagger-spring-boot-starter</artifactId>\n    <version>1.7.0.RELEASE</version>\n</dependency>\n```\n开启\n\n```java\n@EnableSwagger2\n@EnableZuulProxy\n@EnableEurekaClient\n@SpringBootApplication\npublic class JiheZuulApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheZuulApplication.class, args);\n    }\n\n}\n```\n配置\n```java\npackage com.jihe.zuul.config;\n\nimport org.springframework.cloud.netflix.zuul.filters.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport springfox.documentation.swagger.web.SwaggerResource;\nimport springfox.documentation.swagger.web.SwaggerResourcesProvider;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @description: swagger config\n * @author: ck\n * @time: 2019-12-16 00:26\n **/\n@Component\n@Primary\npublic class SwaggerConfig implements SwaggerResourcesProvider {\n\n    private RouteLocator routeLocator;\n    public SwaggerConfig(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List resources = new ArrayList();\n        resources.add(swaggerResource(\"订单系统\", \"/api-order/v2/api-docs\", \"1.0\"));\n        resources.add(swaggerResource(\"用户系统\", \"/api-user/v2/api-docs\", \"1.0\"));\n        return resources;\n    }\n\n    private SwaggerResource swaggerResource(String name, String location, String version) {\n        SwaggerResource swaggerResource = new SwaggerResource();\n        swaggerResource.setName(name);\n        swaggerResource.setLocation(location);\n        swaggerResource.setSwaggerVersion(version);\n        return swaggerResource;\n    }\n}\n```\n在浏览器访问 `http://localhost:9999/swagger-ui.html` 可以看到右上角有个下拉选择框(Select a spec) 不同服务的接口在不同的分区下面。\n\n\n今天重新看了一遍 `启示录`，还是很震撼，血腥而真实。还有一个月左右就要 2020 了，年初的 flag ，实现了几个？？？\n\n***\n\n<center>看完一本书，一部电影，真正留下来的是什么?</center>","source":"_posts/springcloud-zuul.md","raw":"---\ntitle: springcloud-zuul\ndate: 2019-12-15 17:03:26\ntags: springcloud\ncategory: springcloud\n---\n\n![Photo by kejsirajbek on wallhaven.cc](/springcloud-zuul.png)\n\n\n服务网关时微服务架构中服务的统一入口，除了服务路由分发，负载均衡等，还具备鉴权等功能。zuul 就是 springcloud 中提供服务网关的组件。\n\n<!--more-->\n\n![网关作为微服务架构统一入口](/zuul-user.png)\n\n##### 优点\n\n1. 易于监控：可以在网关收集监控数据将其推送到外部系统进行分析。\n2. 易于认证：在网关进行鉴权等，通过后在将请求分发到具体服务。请求进入网关之后，各个微服务之间进行无状态调用。\n3. 易于重构：客户端和服务之后交互入口统一，在后期服务重构等操作时，可以进行客户端无感知重构。\n\n#### 搭建\n\n##### pom \n\n引入 zuul pom 坐标。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.jihe</groupId>\n    <artifactId>jihe-zuul</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>jihe-zuul</name>\n    <description>zuul service</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n##### 配置\n\n```yml\n\ndebug: false\n\nserver:\n  port: 9999\n\nspring:\n  application:\n    name: jihe-zuul\n\n# 注册到服务中心\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8080/eureka/\nzuul:\n  routes:\n    # 自定义路由\n    api-order:\n      path: /api-order/**\n      serviceId: jihe-order\n    api-user:\n      path: /api-user/**\n      serviceId: jihe-user\n```\n\n##### 配置启动类\n```java\n@EnableZuulProxy\n@EnableEurekaClient\n@SpringBootApplication\npublic class JiheZuulApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheZuulApplication.class, args);\n    }\n\n}\n```\n\n在自定义路由部分可以自己按照需求来自定义路由分发，上面当请求是 `/api-order/**` 开头时，统一走 `jihe-order` 服务，当请求是 `api-user` 时，统一走 `jihe-user` 服务。 `*` 匹配任何路径。\n\n#### 测试\n\n启动注册中心，启动网关和用户服务，访问 user 服务 `http://localhost:8081/user/1` 返回结果 `我是1号用户,访问端口：8081`，现在通过网关访问 user 服务 `http://localhost:9999/api-user/user/1` 返回结果 `我是1号用户,访问端口：8081`，通过网关，将 `api-user` 路由请求分发到了 user 服务，这里也可以用服务名来调用 `http://localhost:9999/jihe-user/user/1` 也是返回相同的结果。\n\n##### 忽略服务名访问\n\n需要在配置文件添加下面配置：\n```yml\nzuul:\n  routes:\n    # 自定义路由\n    api-order:\n      path: /api-order/**\n      serviceId: jihe-order\n    api-user:\n      path: /api-user/**\n      serviceId: jihe-user\n  # 忽略通过服务名访问\n  ignored-services: \"*\"\n```\n配置之后通过服务名将访问不到资源。\n\n##### 绑定 url 映射\n\n跳转到指定的路由。\n\n```yml\nzuul:\n  routes:\n    baidu:\n      url: http://www.baidu.com\n      path: /baidu/**\n```\n\n##### url 映射负载均衡\n\n```yml\nribbon:\n  eureka:\n    enabled: false\n# 请求服务负载均衡\njihe-user:\n  ribbon:\n    listOfServers: http://ke.qq.com/,http://www.imooc.com/\n\nzuul:\n  routes:\n    class:\n      serviceId: jihe-user\n      path: /ketang/**\n```\n请求 `http://localhost:9999/ketang` 请求线性负载到 listOfServers 中的服务。\n\n#### 过滤器\n\n配置统一过滤器，进行鉴权等操作。\n\n```java\npackage com.jihe.zuul.filter;\n\nimport com.netflix.zuul.ZuulFilter;\nimport com.netflix.zuul.context.RequestContext;\nimport com.netflix.zuul.exception.ZuulException;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\n\n/**\n * @description: 统一过滤器\n * @author: ck\n * @time: 2019-12-15 22:16\n **/\n@Component\npublic class UnionFilter extends ZuulFilter {\n\n\n    /**\n     * 包含类型：\n     * pre:路由代理之前执行\n     * route：代理时执行\n     * error：代理出错执行\n     * post：route || error 之后执行\n     */\n    @Override\n    public String filterType() {\n        // 之前执行\n        return FilterConstants.PRE_TYPE;\n    }\n\n    /**\n     * 存在多个过滤器时执行顺序\n     * 数字越小，优先级越高\n     */\n    @Override\n    public int filterOrder() {\n        return 1;\n    }\n\n    /**\n     * 是否执行过滤器：true 需要\n     */\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    /**\n     * 具体执行逻辑\n     *\n     * @throws ZuulException\n     */\n    @Override\n    public Object run() throws ZuulException {\n        System.out.println(\"enter UnionFilter,auth begin\");\n        RequestContext context = RequestContext.getCurrentContext();\n        // 获取到 request 对象，进行鉴权等操作\n        HttpServletRequest request = context.getRequest();\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isBlank(token)) {\n            try {\n                context.setSendZuulResponse(false);\n                context.setResponseStatusCode(400);\n                context.getResponse().getWriter().println(\"auth failed,please reload\");\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n\n```\n配置好过滤器之后访问 `http://localhost:9999/api-user/user/1` 服务，直接返回 `auth failed,please reload` 结果，鉴权失败，请重试。\n\n网关将鉴权等操作和服务分离出来，并且将整个微服务架构统一入口，也是微服务架构中重要的环节之一。以上就是 zuul 学习中的一些记录。\n\n#### 用户系统集成 swagger\n\n##### swagger\nswagger 是一个 Restfull 接口文档在线自动生成和测试框架\n\n##### 优点\n1. 及时更新文档：修改接口之后，接口文档即使更新，提高和前端，测试沟通效率。\n2. 方便测试：可以给到测试接口测试信息，避免手写文档\n\n##### 缺点\n代码侵入太高。\n\n##### pom\n\n```xml\n<dependency>\n    <groupId>com.spring4all</groupId>\n    <artifactId>swagger-spring-boot-starter</artifactId>\n    <version>1.7.0.RELEASE</version>\n</dependency>\n```\n\n##### 配置\n```java\npackage com.jihe.user.config;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * @description: swagger config\n * @author: ck\n * @time: 2019-12-16 00:06\n **/\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket createTestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.jihe.user.controller\"))\n                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))\n                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"用户系统Api\")\n                .description(\"用户系统接口文档\")\n                .contact(new springfox.documentation.service.Contact(\"jihe\", \"http://fengzhu.top\",\"XXX@gmail.com\"))\n                .version(\"1.0\")\n                .build();\n\n    }\n}\n```\n\n##### 使用\n```java\n@Api(\"用户系统-API\")\n@RestController\npublic class UserController {\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @ApiOperation(value = \"返回用户服务信息\",notes = \"根据 ID 返回用户和服务信息\")\n    @ApiImplicitParam(name = \"id\",value = \"用户ID\",required = true,dataType = \"Integer\")\n    @PostMapping(\"/user/{id}\")\n    public String getUser(@PathVariable(\"id\") int id) {\n        return \"我是\" + id + \"号用户\" + \",访问端口：\" + port;\n    }\n}\n```\n\n以上 swagger 就集成好了，启动注册中心，启动 user 服务访问 `http://localhost:8081/swagger-ui.html` 就可以看到具体的接口文档。不过通过上面的代码也可以看出来 swagger 对代码的侵入性很高，本来简单的代码写了很多东西。果然有利则有弊。 \n\n#### zuul 集成 swagger\n```xml\n<dependency>\n    <groupId>com.spring4all</groupId>\n    <artifactId>swagger-spring-boot-starter</artifactId>\n    <version>1.7.0.RELEASE</version>\n</dependency>\n```\n开启\n\n```java\n@EnableSwagger2\n@EnableZuulProxy\n@EnableEurekaClient\n@SpringBootApplication\npublic class JiheZuulApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(JiheZuulApplication.class, args);\n    }\n\n}\n```\n配置\n```java\npackage com.jihe.zuul.config;\n\nimport org.springframework.cloud.netflix.zuul.filters.RouteLocator;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport springfox.documentation.swagger.web.SwaggerResource;\nimport springfox.documentation.swagger.web.SwaggerResourcesProvider;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @description: swagger config\n * @author: ck\n * @time: 2019-12-16 00:26\n **/\n@Component\n@Primary\npublic class SwaggerConfig implements SwaggerResourcesProvider {\n\n    private RouteLocator routeLocator;\n    public SwaggerConfig(RouteLocator routeLocator) {\n        this.routeLocator = routeLocator;\n    }\n\n    @Override\n    public List<SwaggerResource> get() {\n        List resources = new ArrayList();\n        resources.add(swaggerResource(\"订单系统\", \"/api-order/v2/api-docs\", \"1.0\"));\n        resources.add(swaggerResource(\"用户系统\", \"/api-user/v2/api-docs\", \"1.0\"));\n        return resources;\n    }\n\n    private SwaggerResource swaggerResource(String name, String location, String version) {\n        SwaggerResource swaggerResource = new SwaggerResource();\n        swaggerResource.setName(name);\n        swaggerResource.setLocation(location);\n        swaggerResource.setSwaggerVersion(version);\n        return swaggerResource;\n    }\n}\n```\n在浏览器访问 `http://localhost:9999/swagger-ui.html` 可以看到右上角有个下拉选择框(Select a spec) 不同服务的接口在不同的分区下面。\n\n\n今天重新看了一遍 `启示录`，还是很震撼，血腥而真实。还有一个月左右就要 2020 了，年初的 flag ，实现了几个？？？\n\n***\n\n<center>看完一本书，一部电影，真正留下来的是什么?</center>","slug":"springcloud-zuul","published":1,"updated":"2021-01-31T06:31:35.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowz0021rh1tctmt84bq","content":"<p><img src=\"/2019/12/15/springcloud-zuul/springcloud-zuul.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>服务网关时微服务架构中服务的统一入口，除了服务路由分发，负载均衡等，还具备鉴权等功能。zuul 就是 springcloud 中提供服务网关的组件。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/2019/12/15/springcloud-zuul/zuul-user.png\" alt=\"网关作为微服务架构统一入口\"></p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>易于监控：可以在网关收集监控数据将其推送到外部系统进行分析。</li>\n<li>易于认证：在网关进行鉴权等，通过后在将请求分发到具体服务。请求进入网关之后，各个微服务之间进行无状态调用。</li>\n<li>易于重构：客户端和服务之后交互入口统一，在后期服务重构等操作时，可以进行客户端无感知重构。</li>\n</ol>\n<h4 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h4><h5 id=\"pom\"><a href=\"#pom\" class=\"headerlink\" title=\"pom\"></a>pom</h5><p>引入 zuul pom 坐标。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-zuul<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>zuul service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9999</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-zuul</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册到服务中心</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8080/eureka/</span></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义路由</span></span><br><span class=\"line\">    <span class=\"attr\">api-order:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-order/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-order</span></span><br><span class=\"line\">    <span class=\"attr\">api-user:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-user/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-user</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置启动类\"><a href=\"#配置启动类\" class=\"headerlink\" title=\"配置启动类\"></a>配置启动类</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheZuulApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheZuulApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在自定义路由部分可以自己按照需求来自定义路由分发，上面当请求是 <code>/api-order/**</code> 开头时，统一走 <code>jihe-order</code> 服务，当请求是 <code>api-user</code> 时，统一走 <code>jihe-user</code> 服务。 <code>*</code> 匹配任何路径。</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>启动注册中心，启动网关和用户服务，访问 user 服务 <code>http://localhost:8081/user/1</code> 返回结果 <code>我是1号用户,访问端口：8081</code>，现在通过网关访问 user 服务 <code>http://localhost:9999/api-user/user/1</code> 返回结果 <code>我是1号用户,访问端口：8081</code>，通过网关，将 <code>api-user</code> 路由请求分发到了 user 服务，这里也可以用服务名来调用 <code>http://localhost:9999/jihe-user/user/1</code> 也是返回相同的结果。</p>\n<h5 id=\"忽略服务名访问\"><a href=\"#忽略服务名访问\" class=\"headerlink\" title=\"忽略服务名访问\"></a>忽略服务名访问</h5><p>需要在配置文件添加下面配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义路由</span></span><br><span class=\"line\">    <span class=\"attr\">api-order:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-order/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-order</span></span><br><span class=\"line\">    <span class=\"attr\">api-user:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-user/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-user</span></span><br><span class=\"line\">  <span class=\"comment\"># 忽略通过服务名访问</span></span><br><span class=\"line\">  <span class=\"attr\">ignored-services:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>配置之后通过服务名将访问不到资源。</p>\n<h5 id=\"绑定-url-映射\"><a href=\"#绑定-url-映射\" class=\"headerlink\" title=\"绑定 url 映射\"></a>绑定 url 映射</h5><p>跳转到指定的路由。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">baidu:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">http://www.baidu.com</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/baidu/**</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"url-映射负载均衡\"><a href=\"#url-映射负载均衡\" class=\"headerlink\" title=\"url 映射负载均衡\"></a>url 映射负载均衡</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbon:</span></span><br><span class=\"line\">  <span class=\"attr\">eureka:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 请求服务负载均衡</span></span><br><span class=\"line\"><span class=\"attr\">jihe-user:</span></span><br><span class=\"line\">  <span class=\"attr\">ribbon:</span></span><br><span class=\"line\">    <span class=\"attr\">listOfServers:</span> <span class=\"string\">http://ke.qq.com/,http://www.imooc.com/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">class:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-user</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/ketang/**</span></span><br></pre></td></tr></table></figure>\n<p>请求 <code>http://localhost:9999/ketang</code> 请求线性负载到 listOfServers 中的服务。</p>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>配置统一过滤器，进行鉴权等操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jihe.zuul.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 统一过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: ck</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@time</span>: 2019-12-15 22:16</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 包含类型：</span></span><br><span class=\"line\"><span class=\"comment\">     * pre:路由代理之前执行</span></span><br><span class=\"line\"><span class=\"comment\">     * route：代理时执行</span></span><br><span class=\"line\"><span class=\"comment\">     * error：代理出错执行</span></span><br><span class=\"line\"><span class=\"comment\">     * post：route || error 之后执行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 之前执行</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> FilterConstants.PRE_TYPE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存在多个过滤器时执行顺序</span></span><br><span class=\"line\"><span class=\"comment\">     * 数字越小，优先级越高</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否执行过滤器：true 需要</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体执行逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ZuulException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ZuulException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;enter UnionFilter,auth begin&quot;</span>);</span><br><span class=\"line\">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class=\"line\">        <span class=\"comment\">// 获取到 request 对象，进行鉴权等操作</span></span><br><span class=\"line\">        HttpServletRequest request = context.getRequest();</span><br><span class=\"line\">        String token = request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                context.setSendZuulResponse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                context.setResponseStatusCode(<span class=\"number\">400</span>);</span><br><span class=\"line\">                context.getResponse().getWriter().println(<span class=\"string\">&quot;auth failed,please reload&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>配置好过滤器之后访问 <code>http://localhost:9999/api-user/user/1</code> 服务，直接返回 <code>auth failed,please reload</code> 结果，鉴权失败，请重试。</p>\n<p>网关将鉴权等操作和服务分离出来，并且将整个微服务架构统一入口，也是微服务架构中重要的环节之一。以上就是 zuul 学习中的一些记录。</p>\n<h4 id=\"用户系统集成-swagger\"><a href=\"#用户系统集成-swagger\" class=\"headerlink\" title=\"用户系统集成 swagger\"></a>用户系统集成 swagger</h4><h5 id=\"swagger\"><a href=\"#swagger\" class=\"headerlink\" title=\"swagger\"></a>swagger</h5><p>swagger 是一个 Restfull 接口文档在线自动生成和测试框架</p>\n<h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>及时更新文档：修改接口之后，接口文档即使更新，提高和前端，测试沟通效率。</li>\n<li>方便测试：可以给到测试接口测试信息，避免手写文档</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><p>代码侵入太高。</p>\n<h5 id=\"pom-1\"><a href=\"#pom-1\" class=\"headerlink\" title=\"pom\"></a>pom</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring4all<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jihe.user.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiOperation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: swagger config</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: ck</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@time</span>: 2019-12-16 00:06</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createTestApi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.jihe.user.controller&quot;</span>))</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">&quot;用户系统Api&quot;</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">&quot;用户系统接口文档&quot;</span>)</span><br><span class=\"line\">                .contact(<span class=\"keyword\">new</span> springfox.documentation.service.Contact(<span class=\"string\">&quot;jihe&quot;</span>, <span class=\"string\">&quot;http://fengzhu.top&quot;</span>,<span class=\"string\">&quot;XXX@gmail.com&quot;</span>))</span><br><span class=\"line\">                .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api(&quot;用户系统-API&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(value = &quot;返回用户服务信息&quot;,notes = &quot;根据 ID 返回用户和服务信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam(name = &quot;id&quot;,value = &quot;用户ID&quot;,required = true,dataType = &quot;Integer&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是&quot;</span> + id + <span class=\"string\">&quot;号用户&quot;</span> + <span class=\"string\">&quot;,访问端口：&quot;</span> + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上 swagger 就集成好了，启动注册中心，启动 user 服务访问 <code>http://localhost:8081/swagger-ui.html</code> 就可以看到具体的接口文档。不过通过上面的代码也可以看出来 swagger 对代码的侵入性很高，本来简单的代码写了很多东西。果然有利则有弊。 </p>\n<h4 id=\"zuul-集成-swagger\"><a href=\"#zuul-集成-swagger\" class=\"headerlink\" title=\"zuul 集成 swagger\"></a>zuul 集成 swagger</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring4all<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>开启</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheZuulApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheZuulApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jihe.zuul.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.zuul.filters.RouteLocator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: swagger config</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: ck</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@time</span>: 2019-12-16 00:26</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">SwaggerResourcesProvider</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RouteLocator routeLocator;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SwaggerConfig</span><span class=\"params\">(RouteLocator routeLocator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.routeLocator = routeLocator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;SwaggerResource&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List resources = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        resources.add(swaggerResource(<span class=\"string\">&quot;订单系统&quot;</span>, <span class=\"string\">&quot;/api-order/v2/api-docs&quot;</span>, <span class=\"string\">&quot;1.0&quot;</span>));</span><br><span class=\"line\">        resources.add(swaggerResource(<span class=\"string\">&quot;用户系统&quot;</span>, <span class=\"string\">&quot;/api-user/v2/api-docs&quot;</span>, <span class=\"string\">&quot;1.0&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> SwaggerResource <span class=\"title\">swaggerResource</span><span class=\"params\">(String name, String location, String version)</span> </span>&#123;</span><br><span class=\"line\">        SwaggerResource swaggerResource = <span class=\"keyword\">new</span> SwaggerResource();</span><br><span class=\"line\">        swaggerResource.setName(name);</span><br><span class=\"line\">        swaggerResource.setLocation(location);</span><br><span class=\"line\">        swaggerResource.setSwaggerVersion(version);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> swaggerResource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器访问 <code>http://localhost:9999/swagger-ui.html</code> 可以看到右上角有个下拉选择框(Select a spec) 不同服务的接口在不同的分区下面。</p>\n<p>今天重新看了一遍 <code>启示录</code>，还是很震撼，血腥而真实。还有一个月左右就要 2020 了，年初的 flag ，实现了几个？？？</p>\n<hr>\n<center>看完一本书，一部电影，真正留下来的是什么?</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/12/15/springcloud-zuul/springcloud-zuul.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>服务网关时微服务架构中服务的统一入口，除了服务路由分发，负载均衡等，还具备鉴权等功能。zuul 就是 springcloud 中提供服务网关的组件。</p>","more":"<p><img src=\"/2019/12/15/springcloud-zuul/zuul-user.png\" alt=\"网关作为微服务架构统一入口\"></p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>易于监控：可以在网关收集监控数据将其推送到外部系统进行分析。</li>\n<li>易于认证：在网关进行鉴权等，通过后在将请求分发到具体服务。请求进入网关之后，各个微服务之间进行无状态调用。</li>\n<li>易于重构：客户端和服务之后交互入口统一，在后期服务重构等操作时，可以进行客户端无感知重构。</li>\n</ol>\n<h4 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h4><h5 id=\"pom\"><a href=\"#pom\" class=\"headerlink\" title=\"pom\"></a>pom</h5><p>引入 zuul pom 坐标。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.jihe<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jihe-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jihe-zuul<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>zuul service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9999</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jihe-zuul</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册到服务中心</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8080/eureka/</span></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义路由</span></span><br><span class=\"line\">    <span class=\"attr\">api-order:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-order/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-order</span></span><br><span class=\"line\">    <span class=\"attr\">api-user:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-user/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-user</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置启动类\"><a href=\"#配置启动类\" class=\"headerlink\" title=\"配置启动类\"></a>配置启动类</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheZuulApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheZuulApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在自定义路由部分可以自己按照需求来自定义路由分发，上面当请求是 <code>/api-order/**</code> 开头时，统一走 <code>jihe-order</code> 服务，当请求是 <code>api-user</code> 时，统一走 <code>jihe-user</code> 服务。 <code>*</code> 匹配任何路径。</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>启动注册中心，启动网关和用户服务，访问 user 服务 <code>http://localhost:8081/user/1</code> 返回结果 <code>我是1号用户,访问端口：8081</code>，现在通过网关访问 user 服务 <code>http://localhost:9999/api-user/user/1</code> 返回结果 <code>我是1号用户,访问端口：8081</code>，通过网关，将 <code>api-user</code> 路由请求分发到了 user 服务，这里也可以用服务名来调用 <code>http://localhost:9999/jihe-user/user/1</code> 也是返回相同的结果。</p>\n<h5 id=\"忽略服务名访问\"><a href=\"#忽略服务名访问\" class=\"headerlink\" title=\"忽略服务名访问\"></a>忽略服务名访问</h5><p>需要在配置文件添加下面配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义路由</span></span><br><span class=\"line\">    <span class=\"attr\">api-order:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-order/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-order</span></span><br><span class=\"line\">    <span class=\"attr\">api-user:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-user/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-user</span></span><br><span class=\"line\">  <span class=\"comment\"># 忽略通过服务名访问</span></span><br><span class=\"line\">  <span class=\"attr\">ignored-services:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>配置之后通过服务名将访问不到资源。</p>\n<h5 id=\"绑定-url-映射\"><a href=\"#绑定-url-映射\" class=\"headerlink\" title=\"绑定 url 映射\"></a>绑定 url 映射</h5><p>跳转到指定的路由。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">baidu:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">http://www.baidu.com</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/baidu/**</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"url-映射负载均衡\"><a href=\"#url-映射负载均衡\" class=\"headerlink\" title=\"url 映射负载均衡\"></a>url 映射负载均衡</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbon:</span></span><br><span class=\"line\">  <span class=\"attr\">eureka:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 请求服务负载均衡</span></span><br><span class=\"line\"><span class=\"attr\">jihe-user:</span></span><br><span class=\"line\">  <span class=\"attr\">ribbon:</span></span><br><span class=\"line\">    <span class=\"attr\">listOfServers:</span> <span class=\"string\">http://ke.qq.com/,http://www.imooc.com/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">class:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">jihe-user</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/ketang/**</span></span><br></pre></td></tr></table></figure>\n<p>请求 <code>http://localhost:9999/ketang</code> 请求线性负载到 listOfServers 中的服务。</p>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>配置统一过滤器，进行鉴权等操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jihe.zuul.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 统一过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: ck</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@time</span>: 2019-12-15 22:16</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 包含类型：</span></span><br><span class=\"line\"><span class=\"comment\">     * pre:路由代理之前执行</span></span><br><span class=\"line\"><span class=\"comment\">     * route：代理时执行</span></span><br><span class=\"line\"><span class=\"comment\">     * error：代理出错执行</span></span><br><span class=\"line\"><span class=\"comment\">     * post：route || error 之后执行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 之前执行</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> FilterConstants.PRE_TYPE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存在多个过滤器时执行顺序</span></span><br><span class=\"line\"><span class=\"comment\">     * 数字越小，优先级越高</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否执行过滤器：true 需要</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体执行逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ZuulException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ZuulException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;enter UnionFilter,auth begin&quot;</span>);</span><br><span class=\"line\">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class=\"line\">        <span class=\"comment\">// 获取到 request 对象，进行鉴权等操作</span></span><br><span class=\"line\">        HttpServletRequest request = context.getRequest();</span><br><span class=\"line\">        String token = request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                context.setSendZuulResponse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                context.setResponseStatusCode(<span class=\"number\">400</span>);</span><br><span class=\"line\">                context.getResponse().getWriter().println(<span class=\"string\">&quot;auth failed,please reload&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>配置好过滤器之后访问 <code>http://localhost:9999/api-user/user/1</code> 服务，直接返回 <code>auth failed,please reload</code> 结果，鉴权失败，请重试。</p>\n<p>网关将鉴权等操作和服务分离出来，并且将整个微服务架构统一入口，也是微服务架构中重要的环节之一。以上就是 zuul 学习中的一些记录。</p>\n<h4 id=\"用户系统集成-swagger\"><a href=\"#用户系统集成-swagger\" class=\"headerlink\" title=\"用户系统集成 swagger\"></a>用户系统集成 swagger</h4><h5 id=\"swagger\"><a href=\"#swagger\" class=\"headerlink\" title=\"swagger\"></a>swagger</h5><p>swagger 是一个 Restfull 接口文档在线自动生成和测试框架</p>\n<h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>及时更新文档：修改接口之后，接口文档即使更新，提高和前端，测试沟通效率。</li>\n<li>方便测试：可以给到测试接口测试信息，避免手写文档</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><p>代码侵入太高。</p>\n<h5 id=\"pom-1\"><a href=\"#pom-1\" class=\"headerlink\" title=\"pom\"></a>pom</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring4all<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jihe.user.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiOperation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: swagger config</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: ck</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@time</span>: 2019-12-16 00:06</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">createTestApi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.jihe.user.controller&quot;</span>))</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                .title(<span class=\"string\">&quot;用户系统Api&quot;</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">&quot;用户系统接口文档&quot;</span>)</span><br><span class=\"line\">                .contact(<span class=\"keyword\">new</span> springfox.documentation.service.Contact(<span class=\"string\">&quot;jihe&quot;</span>, <span class=\"string\">&quot;http://fengzhu.top&quot;</span>,<span class=\"string\">&quot;XXX@gmail.com&quot;</span>))</span><br><span class=\"line\">                .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api(&quot;用户系统-API&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(value = &quot;返回用户服务信息&quot;,notes = &quot;根据 ID 返回用户和服务信息&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiImplicitParam(name = &quot;id&quot;,value = &quot;用户ID&quot;,required = true,dataType = &quot;Integer&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是&quot;</span> + id + <span class=\"string\">&quot;号用户&quot;</span> + <span class=\"string\">&quot;,访问端口：&quot;</span> + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上 swagger 就集成好了，启动注册中心，启动 user 服务访问 <code>http://localhost:8081/swagger-ui.html</code> 就可以看到具体的接口文档。不过通过上面的代码也可以看出来 swagger 对代码的侵入性很高，本来简单的代码写了很多东西。果然有利则有弊。 </p>\n<h4 id=\"zuul-集成-swagger\"><a href=\"#zuul-集成-swagger\" class=\"headerlink\" title=\"zuul 集成 swagger\"></a>zuul 集成 swagger</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring4all<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>开启</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JiheZuulApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(JiheZuulApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jihe.zuul.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.zuul.filters.RouteLocator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: swagger config</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: ck</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@time</span>: 2019-12-16 00:26</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">SwaggerResourcesProvider</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RouteLocator routeLocator;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SwaggerConfig</span><span class=\"params\">(RouteLocator routeLocator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.routeLocator = routeLocator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;SwaggerResource&gt; <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List resources = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        resources.add(swaggerResource(<span class=\"string\">&quot;订单系统&quot;</span>, <span class=\"string\">&quot;/api-order/v2/api-docs&quot;</span>, <span class=\"string\">&quot;1.0&quot;</span>));</span><br><span class=\"line\">        resources.add(swaggerResource(<span class=\"string\">&quot;用户系统&quot;</span>, <span class=\"string\">&quot;/api-user/v2/api-docs&quot;</span>, <span class=\"string\">&quot;1.0&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> SwaggerResource <span class=\"title\">swaggerResource</span><span class=\"params\">(String name, String location, String version)</span> </span>&#123;</span><br><span class=\"line\">        SwaggerResource swaggerResource = <span class=\"keyword\">new</span> SwaggerResource();</span><br><span class=\"line\">        swaggerResource.setName(name);</span><br><span class=\"line\">        swaggerResource.setLocation(location);</span><br><span class=\"line\">        swaggerResource.setSwaggerVersion(version);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> swaggerResource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器访问 <code>http://localhost:9999/swagger-ui.html</code> 可以看到右上角有个下拉选择框(Select a spec) 不同服务的接口在不同的分区下面。</p>\n<p>今天重新看了一遍 <code>启示录</code>，还是很震撼，血腥而真实。还有一个月左右就要 2020 了，年初的 flag ，实现了几个？？？</p>\n<hr>\n<center>看完一本书，一部电影，真正留下来的是什么?</center>"},{"title":"springcloud","date":"2019-04-18T14:09:55.000Z","_content":"\n![大多数人的生活，是无数次选择的结果](springcloud/springcloud.png)\n\n最近两年微服务架构特别火，很多公司都投身到微服务的怀抱。面试的时候面试官也一定会问有没有用过或者了解过微服务，微服务的火热可见一斑。很多公司都在微服务的路上试探，我们公司也不例外。目前一般 Java 为基础的公司大多用的都是 spring 全家桶，而近年出了 spring boot 和 spring cloud，为微服务提供了一站式解决方案。\n\n<!-- more -->\n\n#### 什么是 Spring boot\n\n官方是这样介绍的：“spring boot 可以轻松创建独立的企业级应用。”\n它是对 spring 框架的封装，简化了开发流程，专注于开发功能。去除传统 xml 配置的方式。以 java 代码配合注解的方式实现配置，更易于理解和编写。因为它的这些特性，它也成为了开发微服务系统的基础。之前 spring 能开发的它都可以做到，并且更快速，更高效。\n\n#### 什么是 Spring Cloud\n\nspring cloud 是一系列框架的集合，它包含了 服务的注册、发现，服务网关，配置中心、消息总线、负载均衡、断路器、数据监控等，而这些组件中大部分也不是 spring 公司研发的，而是基于现有的一些优秀开源框架进行二次封装的。当然这也是 spring 不重复造轮子的理念。而这些服务的开发都是基于 spring boot 这款优秀的框架的。spring cloud 现有组件都有 20 多个，而且还在新增中。\n\n##### 优点\n1. 可扩展性强：可以针对需求方便的进行扩展\n2. 弹性：各个组件独立部署，单个组件故障不会导致雪崩效应，系统还是正常运行\n3. 组合性高：不同服务之间的不同组合，可以完成不同业务的开发。\n\n##### 缺点\n1. 运维成本增高\n2. 系统复杂性增高\n\n\n#### spring boot 和 spring cloud\n\n上面分别了解了 spring boot 和 spring cloud 之后相信对他们的区别和联系也有了认识。简单来说，没有 spring cloud，spring boot 是可以独立创建应用，并且投入生产不会有影响。而 spring cloud 的开发却离不开 spring boot 的支持。也就是说  spring cloud 是基于 spring boot 的，分清楚两者关系在学习微服务架构的时候就会有一个整体的概念，学好 spring boot 意味着 spring cloud 开发也会顺畅很多。\n\n\n#### dubbo\n\ndubbo 是阿里开源的一款服务治理中间件，在国内特别火，并且其有一个强大的监控后台，最近又开始了更新。相信未来在服务治理方面会做的更好。\n\n\n\n#### spring cloud 和 dubbo\n\n下面是一张它们核心功能对比表。\n\n| 组件     |   dubbo   |    spring cloud  |\n| ---- | ---- | ---- |\n|  服务注册中心    |   zookeeper   | Eureka 等等..     |\n|  服务网关    |  无    |  Zuul 等..    |\n|  断路器  | 不完善     |  Hystrix    |\n|配置中心| 无| Config|\n|链路追踪|无|Slenth|\n|消息总线|无|Bus|\n\n其实直接把 dubbo 和 spring cloud 放在一起对比是不公平的，spring cloud 是封装了很多优秀组件之后的一个微服务解决方案的集合，而 dubbo 更专注于服务治理，在服务治理和监控方面做的比是spring cloud 还要优秀。\n\n总的来说 spring cloud 有 spring 这个强大的组织做背书，在未来微服务方向肯定是所向披靡的，但是 dubbo 在服务治理方面也会一枝独秀，毕竟在阿里这样体量的公司和实际的业务场景下，它只会进化的越来越完善，越来越优秀。\n\n\n***\n\n<center>愿你 平安喜乐</center>","source":"_posts/springcloud.md","raw":"---\ntitle: springcloud\ndate: 2019-04-18 22:09:55\ntags: springcloud\ncategory: springcloud\n---\n\n![大多数人的生活，是无数次选择的结果](springcloud/springcloud.png)\n\n最近两年微服务架构特别火，很多公司都投身到微服务的怀抱。面试的时候面试官也一定会问有没有用过或者了解过微服务，微服务的火热可见一斑。很多公司都在微服务的路上试探，我们公司也不例外。目前一般 Java 为基础的公司大多用的都是 spring 全家桶，而近年出了 spring boot 和 spring cloud，为微服务提供了一站式解决方案。\n\n<!-- more -->\n\n#### 什么是 Spring boot\n\n官方是这样介绍的：“spring boot 可以轻松创建独立的企业级应用。”\n它是对 spring 框架的封装，简化了开发流程，专注于开发功能。去除传统 xml 配置的方式。以 java 代码配合注解的方式实现配置，更易于理解和编写。因为它的这些特性，它也成为了开发微服务系统的基础。之前 spring 能开发的它都可以做到，并且更快速，更高效。\n\n#### 什么是 Spring Cloud\n\nspring cloud 是一系列框架的集合，它包含了 服务的注册、发现，服务网关，配置中心、消息总线、负载均衡、断路器、数据监控等，而这些组件中大部分也不是 spring 公司研发的，而是基于现有的一些优秀开源框架进行二次封装的。当然这也是 spring 不重复造轮子的理念。而这些服务的开发都是基于 spring boot 这款优秀的框架的。spring cloud 现有组件都有 20 多个，而且还在新增中。\n\n##### 优点\n1. 可扩展性强：可以针对需求方便的进行扩展\n2. 弹性：各个组件独立部署，单个组件故障不会导致雪崩效应，系统还是正常运行\n3. 组合性高：不同服务之间的不同组合，可以完成不同业务的开发。\n\n##### 缺点\n1. 运维成本增高\n2. 系统复杂性增高\n\n\n#### spring boot 和 spring cloud\n\n上面分别了解了 spring boot 和 spring cloud 之后相信对他们的区别和联系也有了认识。简单来说，没有 spring cloud，spring boot 是可以独立创建应用，并且投入生产不会有影响。而 spring cloud 的开发却离不开 spring boot 的支持。也就是说  spring cloud 是基于 spring boot 的，分清楚两者关系在学习微服务架构的时候就会有一个整体的概念，学好 spring boot 意味着 spring cloud 开发也会顺畅很多。\n\n\n#### dubbo\n\ndubbo 是阿里开源的一款服务治理中间件，在国内特别火，并且其有一个强大的监控后台，最近又开始了更新。相信未来在服务治理方面会做的更好。\n\n\n\n#### spring cloud 和 dubbo\n\n下面是一张它们核心功能对比表。\n\n| 组件     |   dubbo   |    spring cloud  |\n| ---- | ---- | ---- |\n|  服务注册中心    |   zookeeper   | Eureka 等等..     |\n|  服务网关    |  无    |  Zuul 等..    |\n|  断路器  | 不完善     |  Hystrix    |\n|配置中心| 无| Config|\n|链路追踪|无|Slenth|\n|消息总线|无|Bus|\n\n其实直接把 dubbo 和 spring cloud 放在一起对比是不公平的，spring cloud 是封装了很多优秀组件之后的一个微服务解决方案的集合，而 dubbo 更专注于服务治理，在服务治理和监控方面做的比是spring cloud 还要优秀。\n\n总的来说 spring cloud 有 spring 这个强大的组织做背书，在未来微服务方向肯定是所向披靡的，但是 dubbo 在服务治理方面也会一枝独秀，毕竟在阿里这样体量的公司和实际的业务场景下，它只会进化的越来越完善，越来越优秀。\n\n\n***\n\n<center>愿你 平安喜乐</center>","slug":"springcloud","published":1,"updated":"2021-01-31T06:31:35.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeowz0023rh1t56sfek1w","content":"<p><img src=\"/2019/04/18/springcloud/springcloud.png\" alt=\"大多数人的生活，是无数次选择的结果\"></p>\n<p>最近两年微服务架构特别火，很多公司都投身到微服务的怀抱。面试的时候面试官也一定会问有没有用过或者了解过微服务，微服务的火热可见一斑。很多公司都在微服务的路上试探，我们公司也不例外。目前一般 Java 为基础的公司大多用的都是 spring 全家桶，而近年出了 spring boot 和 spring cloud，为微服务提供了一站式解决方案。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"什么是-Spring-boot\"><a href=\"#什么是-Spring-boot\" class=\"headerlink\" title=\"什么是 Spring boot\"></a>什么是 Spring boot</h4><p>官方是这样介绍的：“spring boot 可以轻松创建独立的企业级应用。”<br>它是对 spring 框架的封装，简化了开发流程，专注于开发功能。去除传统 xml 配置的方式。以 java 代码配合注解的方式实现配置，更易于理解和编写。因为它的这些特性，它也成为了开发微服务系统的基础。之前 spring 能开发的它都可以做到，并且更快速，更高效。</p>\n<h4 id=\"什么是-Spring-Cloud\"><a href=\"#什么是-Spring-Cloud\" class=\"headerlink\" title=\"什么是 Spring Cloud\"></a>什么是 Spring Cloud</h4><p>spring cloud 是一系列框架的集合，它包含了 服务的注册、发现，服务网关，配置中心、消息总线、负载均衡、断路器、数据监控等，而这些组件中大部分也不是 spring 公司研发的，而是基于现有的一些优秀开源框架进行二次封装的。当然这也是 spring 不重复造轮子的理念。而这些服务的开发都是基于 spring boot 这款优秀的框架的。spring cloud 现有组件都有 20 多个，而且还在新增中。</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>可扩展性强：可以针对需求方便的进行扩展</li>\n<li>弹性：各个组件独立部署，单个组件故障不会导致雪崩效应，系统还是正常运行</li>\n<li>组合性高：不同服务之间的不同组合，可以完成不同业务的开发。</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>运维成本增高</li>\n<li>系统复杂性增高</li>\n</ol>\n<h4 id=\"spring-boot-和-spring-cloud\"><a href=\"#spring-boot-和-spring-cloud\" class=\"headerlink\" title=\"spring boot 和 spring cloud\"></a>spring boot 和 spring cloud</h4><p>上面分别了解了 spring boot 和 spring cloud 之后相信对他们的区别和联系也有了认识。简单来说，没有 spring cloud，spring boot 是可以独立创建应用，并且投入生产不会有影响。而 spring cloud 的开发却离不开 spring boot 的支持。也就是说  spring cloud 是基于 spring boot 的，分清楚两者关系在学习微服务架构的时候就会有一个整体的概念，学好 spring boot 意味着 spring cloud 开发也会顺畅很多。</p>\n<h4 id=\"dubbo\"><a href=\"#dubbo\" class=\"headerlink\" title=\"dubbo\"></a>dubbo</h4><p>dubbo 是阿里开源的一款服务治理中间件，在国内特别火，并且其有一个强大的监控后台，最近又开始了更新。相信未来在服务治理方面会做的更好。</p>\n<h4 id=\"spring-cloud-和-dubbo\"><a href=\"#spring-cloud-和-dubbo\" class=\"headerlink\" title=\"spring cloud 和 dubbo\"></a>spring cloud 和 dubbo</h4><p>下面是一张它们核心功能对比表。</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>dubbo</th>\n<th>spring cloud</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>服务注册中心</td>\n<td>zookeeper</td>\n<td>Eureka 等等..</td>\n</tr>\n<tr>\n<td>服务网关</td>\n<td>无</td>\n<td>Zuul 等..</td>\n</tr>\n<tr>\n<td>断路器</td>\n<td>不完善</td>\n<td>Hystrix</td>\n</tr>\n<tr>\n<td>配置中心</td>\n<td>无</td>\n<td>Config</td>\n</tr>\n<tr>\n<td>链路追踪</td>\n<td>无</td>\n<td>Slenth</td>\n</tr>\n<tr>\n<td>消息总线</td>\n<td>无</td>\n<td>Bus</td>\n</tr>\n</tbody></table>\n<p>其实直接把 dubbo 和 spring cloud 放在一起对比是不公平的，spring cloud 是封装了很多优秀组件之后的一个微服务解决方案的集合，而 dubbo 更专注于服务治理，在服务治理和监控方面做的比是spring cloud 还要优秀。</p>\n<p>总的来说 spring cloud 有 spring 这个强大的组织做背书，在未来微服务方向肯定是所向披靡的，但是 dubbo 在服务治理方面也会一枝独秀，毕竟在阿里这样体量的公司和实际的业务场景下，它只会进化的越来越完善，越来越优秀。</p>\n<hr>\n<center>愿你 平安喜乐</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/04/18/springcloud/springcloud.png\" alt=\"大多数人的生活，是无数次选择的结果\"></p>\n<p>最近两年微服务架构特别火，很多公司都投身到微服务的怀抱。面试的时候面试官也一定会问有没有用过或者了解过微服务，微服务的火热可见一斑。很多公司都在微服务的路上试探，我们公司也不例外。目前一般 Java 为基础的公司大多用的都是 spring 全家桶，而近年出了 spring boot 和 spring cloud，为微服务提供了一站式解决方案。</p>","more":"<h4 id=\"什么是-Spring-boot\"><a href=\"#什么是-Spring-boot\" class=\"headerlink\" title=\"什么是 Spring boot\"></a>什么是 Spring boot</h4><p>官方是这样介绍的：“spring boot 可以轻松创建独立的企业级应用。”<br>它是对 spring 框架的封装，简化了开发流程，专注于开发功能。去除传统 xml 配置的方式。以 java 代码配合注解的方式实现配置，更易于理解和编写。因为它的这些特性，它也成为了开发微服务系统的基础。之前 spring 能开发的它都可以做到，并且更快速，更高效。</p>\n<h4 id=\"什么是-Spring-Cloud\"><a href=\"#什么是-Spring-Cloud\" class=\"headerlink\" title=\"什么是 Spring Cloud\"></a>什么是 Spring Cloud</h4><p>spring cloud 是一系列框架的集合，它包含了 服务的注册、发现，服务网关，配置中心、消息总线、负载均衡、断路器、数据监控等，而这些组件中大部分也不是 spring 公司研发的，而是基于现有的一些优秀开源框架进行二次封装的。当然这也是 spring 不重复造轮子的理念。而这些服务的开发都是基于 spring boot 这款优秀的框架的。spring cloud 现有组件都有 20 多个，而且还在新增中。</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>可扩展性强：可以针对需求方便的进行扩展</li>\n<li>弹性：各个组件独立部署，单个组件故障不会导致雪崩效应，系统还是正常运行</li>\n<li>组合性高：不同服务之间的不同组合，可以完成不同业务的开发。</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>运维成本增高</li>\n<li>系统复杂性增高</li>\n</ol>\n<h4 id=\"spring-boot-和-spring-cloud\"><a href=\"#spring-boot-和-spring-cloud\" class=\"headerlink\" title=\"spring boot 和 spring cloud\"></a>spring boot 和 spring cloud</h4><p>上面分别了解了 spring boot 和 spring cloud 之后相信对他们的区别和联系也有了认识。简单来说，没有 spring cloud，spring boot 是可以独立创建应用，并且投入生产不会有影响。而 spring cloud 的开发却离不开 spring boot 的支持。也就是说  spring cloud 是基于 spring boot 的，分清楚两者关系在学习微服务架构的时候就会有一个整体的概念，学好 spring boot 意味着 spring cloud 开发也会顺畅很多。</p>\n<h4 id=\"dubbo\"><a href=\"#dubbo\" class=\"headerlink\" title=\"dubbo\"></a>dubbo</h4><p>dubbo 是阿里开源的一款服务治理中间件，在国内特别火，并且其有一个强大的监控后台，最近又开始了更新。相信未来在服务治理方面会做的更好。</p>\n<h4 id=\"spring-cloud-和-dubbo\"><a href=\"#spring-cloud-和-dubbo\" class=\"headerlink\" title=\"spring cloud 和 dubbo\"></a>spring cloud 和 dubbo</h4><p>下面是一张它们核心功能对比表。</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>dubbo</th>\n<th>spring cloud</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>服务注册中心</td>\n<td>zookeeper</td>\n<td>Eureka 等等..</td>\n</tr>\n<tr>\n<td>服务网关</td>\n<td>无</td>\n<td>Zuul 等..</td>\n</tr>\n<tr>\n<td>断路器</td>\n<td>不完善</td>\n<td>Hystrix</td>\n</tr>\n<tr>\n<td>配置中心</td>\n<td>无</td>\n<td>Config</td>\n</tr>\n<tr>\n<td>链路追踪</td>\n<td>无</td>\n<td>Slenth</td>\n</tr>\n<tr>\n<td>消息总线</td>\n<td>无</td>\n<td>Bus</td>\n</tr>\n</tbody></table>\n<p>其实直接把 dubbo 和 spring cloud 放在一起对比是不公平的，spring cloud 是封装了很多优秀组件之后的一个微服务解决方案的集合，而 dubbo 更专注于服务治理，在服务治理和监控方面做的比是spring cloud 还要优秀。</p>\n<p>总的来说 spring cloud 有 spring 这个强大的组织做背书，在未来微服务方向肯定是所向披靡的，但是 dubbo 在服务治理方面也会一枝独秀，毕竟在阿里这样体量的公司和实际的业务场景下，它只会进化的越来越完善，越来越优秀。</p>\n<hr>\n<center>愿你 平安喜乐</center>"},{"title":"timeline","date":"2019-03-24T16:20:12.000Z","_content":"\n![](timeline/timeline.png)\n\n<center>时间旅途</center>   \n\n<!-- more -->\n\n![](timeline/一生所爱.png)\n\n时间线\n\n***\n\n2015 年 3 月 14 号，我们在一起了。\n\n那时我没有送她最爱的满天星\n\n我们喜欢在学校周围的街边散步，一走就是几个小时。\n\n感觉很开心。\n\n在最好的年纪一起开心大笑过，一起流过泪。\n\n市中心那家面馆\n\n健身房下面的那家冰激凌店，还有农场里没有全开的樱花。\n\n综合楼前的操场。\n\n时间过的很快，转眼就毕业了。\n\n时间走了，我们都在。\n\n我很幸运。\n\n***\n\n现在\n\n我们一起徒步上过华山，虽然这辈子都不想在爬第二次，但是觉得很值得。\n\n6 月份的天在青海穿着棉袄\n\n我们饶了青海湖一圈。\n\n刚察很好玩，北方城市的沧桑和寂静给人不一样的感觉。\n\n在重庆吃火锅，你眼睛不小心进了辣椒油，吃完感觉没有嘴了。\n\n但我们还是默默都说还会再来。\n\n到洪崖洞挤过人，也看了网红轻轨。\n\n还有那个全是我们足迹的小岛。\n\n这只是开始。\n\n\n\n\n\n","source":"_posts/timeline.md","raw":"---\ntitle: timeline\ndate: 2019-03-25 00:20:12\ntags: we\ncategory: we\n---\n\n![](timeline/timeline.png)\n\n<center>时间旅途</center>   \n\n<!-- more -->\n\n![](timeline/一生所爱.png)\n\n时间线\n\n***\n\n2015 年 3 月 14 号，我们在一起了。\n\n那时我没有送她最爱的满天星\n\n我们喜欢在学校周围的街边散步，一走就是几个小时。\n\n感觉很开心。\n\n在最好的年纪一起开心大笑过，一起流过泪。\n\n市中心那家面馆\n\n健身房下面的那家冰激凌店，还有农场里没有全开的樱花。\n\n综合楼前的操场。\n\n时间过的很快，转眼就毕业了。\n\n时间走了，我们都在。\n\n我很幸运。\n\n***\n\n现在\n\n我们一起徒步上过华山，虽然这辈子都不想在爬第二次，但是觉得很值得。\n\n6 月份的天在青海穿着棉袄\n\n我们饶了青海湖一圈。\n\n刚察很好玩，北方城市的沧桑和寂静给人不一样的感觉。\n\n在重庆吃火锅，你眼睛不小心进了辣椒油，吃完感觉没有嘴了。\n\n但我们还是默默都说还会再来。\n\n到洪崖洞挤过人，也看了网红轻轨。\n\n还有那个全是我们足迹的小岛。\n\n这只是开始。\n\n\n\n\n\n","slug":"timeline","published":1,"updated":"2021-01-31T06:31:35.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeox10027rh1t6yzc7ui8","content":"<p><img src=\"/2019/03/25/timeline/timeline.png\"></p>\n<center>时间旅途</center>   \n\n<a id=\"more\"></a>\n\n<p><img src=\"/2019/03/25/timeline/%E4%B8%80%E7%94%9F%E6%89%80%E7%88%B1.png\"></p>\n<p>时间线</p>\n<hr>\n<p>2015 年 3 月 14 号，我们在一起了。</p>\n<p>那时我没有送她最爱的满天星</p>\n<p>我们喜欢在学校周围的街边散步，一走就是几个小时。</p>\n<p>感觉很开心。</p>\n<p>在最好的年纪一起开心大笑过，一起流过泪。</p>\n<p>市中心那家面馆</p>\n<p>健身房下面的那家冰激凌店，还有农场里没有全开的樱花。</p>\n<p>综合楼前的操场。</p>\n<p>时间过的很快，转眼就毕业了。</p>\n<p>时间走了，我们都在。</p>\n<p>我很幸运。</p>\n<hr>\n<p>现在</p>\n<p>我们一起徒步上过华山，虽然这辈子都不想在爬第二次，但是觉得很值得。</p>\n<p>6 月份的天在青海穿着棉袄</p>\n<p>我们饶了青海湖一圈。</p>\n<p>刚察很好玩，北方城市的沧桑和寂静给人不一样的感觉。</p>\n<p>在重庆吃火锅，你眼睛不小心进了辣椒油，吃完感觉没有嘴了。</p>\n<p>但我们还是默默都说还会再来。</p>\n<p>到洪崖洞挤过人，也看了网红轻轨。</p>\n<p>还有那个全是我们足迹的小岛。</p>\n<p>这只是开始。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/03/25/timeline/timeline.png\"></p>\n<center>时间旅途</center>","more":"<p><img src=\"/2019/03/25/timeline/%E4%B8%80%E7%94%9F%E6%89%80%E7%88%B1.png\"></p>\n<p>时间线</p>\n<hr>\n<p>2015 年 3 月 14 号，我们在一起了。</p>\n<p>那时我没有送她最爱的满天星</p>\n<p>我们喜欢在学校周围的街边散步，一走就是几个小时。</p>\n<p>感觉很开心。</p>\n<p>在最好的年纪一起开心大笑过，一起流过泪。</p>\n<p>市中心那家面馆</p>\n<p>健身房下面的那家冰激凌店，还有农场里没有全开的樱花。</p>\n<p>综合楼前的操场。</p>\n<p>时间过的很快，转眼就毕业了。</p>\n<p>时间走了，我们都在。</p>\n<p>我很幸运。</p>\n<hr>\n<p>现在</p>\n<p>我们一起徒步上过华山，虽然这辈子都不想在爬第二次，但是觉得很值得。</p>\n<p>6 月份的天在青海穿着棉袄</p>\n<p>我们饶了青海湖一圈。</p>\n<p>刚察很好玩，北方城市的沧桑和寂静给人不一样的感觉。</p>\n<p>在重庆吃火锅，你眼睛不小心进了辣椒油，吃完感觉没有嘴了。</p>\n<p>但我们还是默默都说还会再来。</p>\n<p>到洪崖洞挤过人，也看了网红轻轨。</p>\n<p>还有那个全是我们足迹的小岛。</p>\n<p>这只是开始。</p>"},{"title":"tomcat","date":"2020-01-08T15:25:55.000Z","_content":"\n![Photo by MatrizenDesign on wallhaven.cc](/tomcat.png)\n\n\n1. ClassLoader,tomcat 里面怎么利用自定义 Classloader\n\n\n2.SecurityManager\n\n3.spring boot + embedTomcat + servlet\n\nsocket 编程\n\nbio 和 nio 区别\n\n","source":"_posts/tomcat-un.md","raw":"---\ntitle: tomcat\ndate: 2020-01-08 23:25:55\ntags: tomcat\ncategory: tomcat\n---\n\n![Photo by MatrizenDesign on wallhaven.cc](/tomcat.png)\n\n\n1. ClassLoader,tomcat 里面怎么利用自定义 Classloader\n\n\n2.SecurityManager\n\n3.spring boot + embedTomcat + servlet\n\nsocket 编程\n\nbio 和 nio 区别\n\n","slug":"tomcat-un","published":1,"updated":"2021-01-31T06:31:35.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeox20028rh1tcit0ehb9","content":"<p><img src=\"/2020/01/08/tomcat-un/tomcat.png\" alt=\"Photo by MatrizenDesign on wallhaven.cc\"></p>\n<ol>\n<li>ClassLoader,tomcat 里面怎么利用自定义 Classloader</li>\n</ol>\n<p>2.SecurityManager</p>\n<p>3.spring boot + embedTomcat + servlet</p>\n<p>socket 编程</p>\n<p>bio 和 nio 区别</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2020/01/08/tomcat-un/tomcat.png\" alt=\"Photo by MatrizenDesign on wallhaven.cc\"></p>\n<ol>\n<li>ClassLoader,tomcat 里面怎么利用自定义 Classloader</li>\n</ol>\n<p>2.SecurityManager</p>\n<p>3.spring boot + embedTomcat + servlet</p>\n<p>socket 编程</p>\n<p>bio 和 nio 区别</p>\n"},{"title":"tomcat一键启动脚本","date":"2020-02-24T13:46:07.000Z","comments":1,"_content":"\n\n![Photo by SamUerto on wallhaven.cc](/start-sh.png)\n\n\n开发环境往往会部署很多服务在一台服务器上面，每次启动都要好几个命令才能启动 tomcat，很麻烦并且很浪费时间。所以写了一个简易脚本，用来在开发环境启动服务。\n\n<!--more-->\n\n##### 过程\n\n1. 先判断启动参数是否正确\n2. 获取到想要启动服务的 PID\n3. 如果获取到了，说明改服务是启动状态，kill 进程之后重新启动。如果没有获取到，直接尝试启动服务\n\n##### 脚本\n\n> 很简单的一个小脚本\n\n```bash\n\n#! /bin/bash\nparam=$1\n# 服务的绝对路径  \npath=/usr/local/$param;\nif [[ \"$param\" != \"\" ]]&&[[ $param == tomcat* ]];\nthen\n    echo \"服务名称：\"$param\n    # 获取服务的 pid,grep -v grep 去除 grep pid,grep -v \"start.sh\" 去掉当前脚本的pid\n    pid=$(ps -ef | grep $param | grep -v grep | grep -v \"start.sh\" | awk '{print $2}');\n    echo \"当前服务的 PID=\"$pid;\n    if [[ \"$pid\" != \"\" ]];\n    then\n        kill -9 $pid;\n        echo \"杀掉进程执行结果：\"$?;\n        if [ $? -eq 0 ];\n        then\n            echo \"进程已结束\";\n            $path/bin/startup.sh;\n            echo \"服务正在重启...\";\n            tail -f $path/logs/catalina.out;\n        else\n            echo \"重启失败\";\n        fi\n    else\n        echo \"当前服务没有启动，尝试直接启动\";\n         $path/bin/startup.sh;\n         echo \"服务正在启动...\";\n         tail -f $path/logs/catalina.out;\n    fi\nelse\n    echo \"请输入正确的服务名称\";\nfi\n```\n脚本很简单，有些地方也有说明，需要根据自己服务部署情况做一些相应的修改，就可以使用了。\n\n##### 使用\n\n如果想要启动 tomcat-xx 服务，则直接输入 `./start.sh tomcat-xx` 就可以重启服务。\n\n##### 注意\n\n脚本名称 `start.sh` 因为里面有个地方写死了脚本名称（这里可以优化下）。\n\n***\n\n<center>做一个温暖的人</center>","source":"_posts/tomcat一键启动脚本.md","raw":"---\ntitle: tomcat一键启动脚本\ndate: 2020-02-24 21:46:07\ntags: tomcat\ncategory: tomcat\ncomments: true\n---\n\n\n![Photo by SamUerto on wallhaven.cc](/start-sh.png)\n\n\n开发环境往往会部署很多服务在一台服务器上面，每次启动都要好几个命令才能启动 tomcat，很麻烦并且很浪费时间。所以写了一个简易脚本，用来在开发环境启动服务。\n\n<!--more-->\n\n##### 过程\n\n1. 先判断启动参数是否正确\n2. 获取到想要启动服务的 PID\n3. 如果获取到了，说明改服务是启动状态，kill 进程之后重新启动。如果没有获取到，直接尝试启动服务\n\n##### 脚本\n\n> 很简单的一个小脚本\n\n```bash\n\n#! /bin/bash\nparam=$1\n# 服务的绝对路径  \npath=/usr/local/$param;\nif [[ \"$param\" != \"\" ]]&&[[ $param == tomcat* ]];\nthen\n    echo \"服务名称：\"$param\n    # 获取服务的 pid,grep -v grep 去除 grep pid,grep -v \"start.sh\" 去掉当前脚本的pid\n    pid=$(ps -ef | grep $param | grep -v grep | grep -v \"start.sh\" | awk '{print $2}');\n    echo \"当前服务的 PID=\"$pid;\n    if [[ \"$pid\" != \"\" ]];\n    then\n        kill -9 $pid;\n        echo \"杀掉进程执行结果：\"$?;\n        if [ $? -eq 0 ];\n        then\n            echo \"进程已结束\";\n            $path/bin/startup.sh;\n            echo \"服务正在重启...\";\n            tail -f $path/logs/catalina.out;\n        else\n            echo \"重启失败\";\n        fi\n    else\n        echo \"当前服务没有启动，尝试直接启动\";\n         $path/bin/startup.sh;\n         echo \"服务正在启动...\";\n         tail -f $path/logs/catalina.out;\n    fi\nelse\n    echo \"请输入正确的服务名称\";\nfi\n```\n脚本很简单，有些地方也有说明，需要根据自己服务部署情况做一些相应的修改，就可以使用了。\n\n##### 使用\n\n如果想要启动 tomcat-xx 服务，则直接输入 `./start.sh tomcat-xx` 就可以重启服务。\n\n##### 注意\n\n脚本名称 `start.sh` 因为里面有个地方写死了脚本名称（这里可以优化下）。\n\n***\n\n<center>做一个温暖的人</center>","slug":"tomcat一键启动脚本","published":1,"updated":"2021-01-31T09:40:39.225Z","layout":"post","photos":[],"link":"","_id":"ckkkzeox3002drh1tbl74dvj9","content":"<p><img src=\"/2020/02/24/tomcat%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/start-sh.png\" alt=\"Photo by SamUerto on wallhaven.cc\"></p>\n<p>开发环境往往会部署很多服务在一台服务器上面，每次启动都要好几个命令才能启动 tomcat，很麻烦并且很浪费时间。所以写了一个简易脚本，用来在开发环境启动服务。</p>\n<a id=\"more\"></a>\n\n<h5 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h5><ol>\n<li>先判断启动参数是否正确</li>\n<li>获取到想要启动服务的 PID</li>\n<li>如果获取到了，说明改服务是启动状态，kill 进程之后重新启动。如果没有获取到，直接尝试启动服务</li>\n</ol>\n<h5 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h5><blockquote>\n<p>很简单的一个小脚本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\">param=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"comment\"># 服务的绝对路径  </span></span><br><span class=\"line\">path=/usr/<span class=\"built_in\">local</span>/<span class=\"variable\">$param</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$param</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ]]&amp;&amp;[[ <span class=\"variable\">$param</span> == tomcat* ]];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;服务名称：&quot;</span><span class=\"variable\">$param</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取服务的 pid,grep -v grep 去除 grep pid,grep -v &quot;start.sh&quot; 去掉当前脚本的pid</span></span><br><span class=\"line\">    pid=$(ps -ef | grep <span class=\"variable\">$param</span> | grep -v grep | grep -v <span class=\"string\">&quot;start.sh&quot;</span> | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;当前服务的 PID=&quot;</span><span class=\"variable\">$pid</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ]];</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$pid</span>;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;杀掉进程执行结果：&quot;</span>$?;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ $? -eq 0 ];</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;进程已结束&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable\">$path</span>/bin/startup.sh;</span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;服务正在重启...&quot;</span>;</span><br><span class=\"line\">            tail -f <span class=\"variable\">$path</span>/logs/catalina.out;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;重启失败&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;当前服务没有启动，尝试直接启动&quot;</span>;</span><br><span class=\"line\">         <span class=\"variable\">$path</span>/bin/startup.sh;</span><br><span class=\"line\">         <span class=\"built_in\">echo</span> <span class=\"string\">&quot;服务正在启动...&quot;</span>;</span><br><span class=\"line\">         tail -f <span class=\"variable\">$path</span>/logs/catalina.out;</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入正确的服务名称&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>脚本很简单，有些地方也有说明，需要根据自己服务部署情况做一些相应的修改，就可以使用了。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>如果想要启动 tomcat-xx 服务，则直接输入 <code>./start.sh tomcat-xx</code> 就可以重启服务。</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>脚本名称 <code>start.sh</code> 因为里面有个地方写死了脚本名称（这里可以优化下）。</p>\n<hr>\n<center>做一个温暖的人</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2020/02/24/tomcat%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/start-sh.png\" alt=\"Photo by SamUerto on wallhaven.cc\"></p>\n<p>开发环境往往会部署很多服务在一台服务器上面，每次启动都要好几个命令才能启动 tomcat，很麻烦并且很浪费时间。所以写了一个简易脚本，用来在开发环境启动服务。</p>","more":"<h5 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h5><ol>\n<li>先判断启动参数是否正确</li>\n<li>获取到想要启动服务的 PID</li>\n<li>如果获取到了，说明改服务是启动状态，kill 进程之后重新启动。如果没有获取到，直接尝试启动服务</li>\n</ol>\n<h5 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h5><blockquote>\n<p>很简单的一个小脚本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\">param=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"comment\"># 服务的绝对路径  </span></span><br><span class=\"line\">path=/usr/<span class=\"built_in\">local</span>/<span class=\"variable\">$param</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$param</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ]]&amp;&amp;[[ <span class=\"variable\">$param</span> == tomcat* ]];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;服务名称：&quot;</span><span class=\"variable\">$param</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取服务的 pid,grep -v grep 去除 grep pid,grep -v &quot;start.sh&quot; 去掉当前脚本的pid</span></span><br><span class=\"line\">    pid=$(ps -ef | grep <span class=\"variable\">$param</span> | grep -v grep | grep -v <span class=\"string\">&quot;start.sh&quot;</span> | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;当前服务的 PID=&quot;</span><span class=\"variable\">$pid</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ]];</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$pid</span>;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;杀掉进程执行结果：&quot;</span>$?;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ $? -eq 0 ];</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;进程已结束&quot;</span>;</span><br><span class=\"line\">            <span class=\"variable\">$path</span>/bin/startup.sh;</span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;服务正在重启...&quot;</span>;</span><br><span class=\"line\">            tail -f <span class=\"variable\">$path</span>/logs/catalina.out;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;重启失败&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;当前服务没有启动，尝试直接启动&quot;</span>;</span><br><span class=\"line\">         <span class=\"variable\">$path</span>/bin/startup.sh;</span><br><span class=\"line\">         <span class=\"built_in\">echo</span> <span class=\"string\">&quot;服务正在启动...&quot;</span>;</span><br><span class=\"line\">         tail -f <span class=\"variable\">$path</span>/logs/catalina.out;</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入正确的服务名称&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>脚本很简单，有些地方也有说明，需要根据自己服务部署情况做一些相应的修改，就可以使用了。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>如果想要启动 tomcat-xx 服务，则直接输入 <code>./start.sh tomcat-xx</code> 就可以重启服务。</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>脚本名称 <code>start.sh</code> 因为里面有个地方写死了脚本名称（这里可以优化下）。</p>\n<hr>\n<center>做一个温暖的人</center>"},{"title":"分布式事务","date":"2019-12-19T16:16:03.000Z","_content":"\n![Photo by microcosmos on wallhaven.cc](/transaction.png)\n\n互联网项目一般都是分布式部署的，分布式部署不仅可以提高系统的吞吐量，降低系统之间的耦合性，便于扩展。但是也同样会带来很多问题，不如事务问题。\n\n<!--more-->\n\n\n##### Atomikos\n\n解决跨库事务\n\n\natomicos\nbyteTCC\n\n***\n<center></center>","source":"_posts/分布式事务-un.md","raw":"---\ntitle: 分布式事务\ndate: 2019-12-20 00:16:03\ntags: 事务\ncategory: 事务\n---\n\n![Photo by microcosmos on wallhaven.cc](/transaction.png)\n\n互联网项目一般都是分布式部署的，分布式部署不仅可以提高系统的吞吐量，降低系统之间的耦合性，便于扩展。但是也同样会带来很多问题，不如事务问题。\n\n<!--more-->\n\n\n##### Atomikos\n\n解决跨库事务\n\n\natomicos\nbyteTCC\n\n***\n<center></center>","slug":"分布式事务-un","published":1,"updated":"2021-01-31T06:31:35.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeox3002erh1t1u8o8u4q","content":"<p><img src=\"/2019/12/20/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-un/transaction.png\" alt=\"Photo by microcosmos on wallhaven.cc\"></p>\n<p>互联网项目一般都是分布式部署的，分布式部署不仅可以提高系统的吞吐量，降低系统之间的耦合性，便于扩展。但是也同样会带来很多问题，不如事务问题。</p>\n<a id=\"more\"></a>\n\n\n<h5 id=\"Atomikos\"><a href=\"#Atomikos\" class=\"headerlink\" title=\"Atomikos\"></a>Atomikos</h5><p>解决跨库事务</p>\n<p>atomicos<br>byteTCC</p>\n<hr>\n<center></center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/12/20/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-un/transaction.png\" alt=\"Photo by microcosmos on wallhaven.cc\"></p>\n<p>互联网项目一般都是分布式部署的，分布式部署不仅可以提高系统的吞吐量，降低系统之间的耦合性，便于扩展。但是也同样会带来很多问题，不如事务问题。</p>","more":"<h5 id=\"Atomikos\"><a href=\"#Atomikos\" class=\"headerlink\" title=\"Atomikos\"></a>Atomikos</h5><p>解决跨库事务</p>\n<p>atomicos<br>byteTCC</p>\n<hr>\n<center></center>"},{"title":"多线程","date":"2020-02-04T10:02:45.000Z","_content":"\n![Photo by WoshWosh on wallhaven.cc](/duoxiancheng.png)\n\n\n其实我之前很少使用多线程来处理一些问题，因为多线程容易出 bug，业主要因为对多线程处理理解还不是很全面。武汉肺炎大家家门都出不了，正好拿来补补知识。（武汉加油！中国加油！）\n\n<!--more-->\n\n#### CAS\n\n\n\nUnSafe：直接操作内存，所以是 unsafe，在 Java 9 之后轻易拿不到此对象。（待验证）\nCAS 操作\n最后汇编指令：lock cmpxchg 指令，如果是单核 cpu ，则直接执行 cmpxchg（compare and exchange） 指令，如果是多核 cpu 则需要加 lock，当其中一个 cpu 修改该值时，禁止其他 cpu 修改此值。\n\nJava 内存布局\n\n添加内存布局 JOL （有maven坐标）","source":"_posts/多线程.md","raw":"---\ntitle: 多线程\ndate: 2020-02-04 18:02:45\ntags: [java,多线程]\ncategory: [java,多线程]\n---\n\n![Photo by WoshWosh on wallhaven.cc](/duoxiancheng.png)\n\n\n其实我之前很少使用多线程来处理一些问题，因为多线程容易出 bug，业主要因为对多线程处理理解还不是很全面。武汉肺炎大家家门都出不了，正好拿来补补知识。（武汉加油！中国加油！）\n\n<!--more-->\n\n#### CAS\n\n\n\nUnSafe：直接操作内存，所以是 unsafe，在 Java 9 之后轻易拿不到此对象。（待验证）\nCAS 操作\n最后汇编指令：lock cmpxchg 指令，如果是单核 cpu ，则直接执行 cmpxchg（compare and exchange） 指令，如果是多核 cpu 则需要加 lock，当其中一个 cpu 修改该值时，禁止其他 cpu 修改此值。\n\nJava 内存布局\n\n添加内存布局 JOL （有maven坐标）","slug":"多线程","published":1,"updated":"2021-01-31T06:31:35.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeox5002jrh1td6pj03lx","content":"<p><img src=\"/2020/02/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/duoxiancheng.png\" alt=\"Photo by WoshWosh on wallhaven.cc\"></p>\n<p>其实我之前很少使用多线程来处理一些问题，因为多线程容易出 bug，业主要因为对多线程处理理解还不是很全面。武汉肺炎大家家门都出不了，正好拿来补补知识。（武汉加油！中国加油！）</p>\n<a id=\"more\"></a>\n\n<h4 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h4><p>UnSafe：直接操作内存，所以是 unsafe，在 Java 9 之后轻易拿不到此对象。（待验证）<br>CAS 操作<br>最后汇编指令：lock cmpxchg 指令，如果是单核 cpu ，则直接执行 cmpxchg（compare and exchange） 指令，如果是多核 cpu 则需要加 lock，当其中一个 cpu 修改该值时，禁止其他 cpu 修改此值。</p>\n<p>Java 内存布局</p>\n<p>添加内存布局 JOL （有maven坐标）</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2020/02/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/duoxiancheng.png\" alt=\"Photo by WoshWosh on wallhaven.cc\"></p>\n<p>其实我之前很少使用多线程来处理一些问题，因为多线程容易出 bug，业主要因为对多线程处理理解还不是很全面。武汉肺炎大家家门都出不了，正好拿来补补知识。（武汉加油！中国加油！）</p>","more":"<h4 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h4><p>UnSafe：直接操作内存，所以是 unsafe，在 Java 9 之后轻易拿不到此对象。（待验证）<br>CAS 操作<br>最后汇编指令：lock cmpxchg 指令，如果是单核 cpu ，则直接执行 cmpxchg（compare and exchange） 指令，如果是多核 cpu 则需要加 lock，当其中一个 cpu 修改该值时，禁止其他 cpu 修改此值。</p>\n<p>Java 内存布局</p>\n<p>添加内存布局 JOL （有maven坐标）</p>"},{"title":"jvm-类加载","date":"2019-08-03T16:57:25.000Z","_content":"\n![photo by https://unsplash.com/photos/ISVm7Rzhy8s](jvm-类加载机制/load-class.png)\n\n关于 JVM 涉及的知识比较深，并且比较难理解。每次看到不懂的地方，我习惯了解之后记下来。相信了解多了也就会变成自己的知识了。今天周六，准备换地方和朋友一起合租住，想想还是美滋滋。\n\n<!--more-->\n\n#### 类生命周期\n\n一个静态的类从被加载到内存，变成动态类，在到被卸载为止，它的生命周期是：\n```java\n\n加载--> 链接--> 初始化--> 使用--> 卸载\n\n链接包含：\n验证--> 准备--> 解析\n```\n类的加载必须按照这个过程来加载，除了解析阶段，有可能发生在初始化阶段之后。\n\n#### 类加载器\nJDK 包含类 3 中类加载器。分别是 BootStrap ClassLoader 启动类加载器，Extension ClassLoader 扩展类加载器和 Application ClassLoader 应用程序类加载器，启动类类加载器是用 C++ 实现的，作为 JVM 的一部分，而其他类加载器是用 Java 来实现的，都继承自 java.lang.ClassLoader。\n\n##### 双亲委任\n\n###### 类加载器层级\n\n自定义类加载器 > 应用程序类加载器 > 扩展类加载器 > 启动类加载器\n\n除了启动类加载器之外，每个类都有父类加载器。\n\n双亲委任大致可以理解为：当一个加载器加载一个类时，首先交给它的父类加载器加载此类路径下的类，如果父类找不到，在交给它自己的父类进行加载，如果找到了，则加载此类，如果没有找到，则会告知子类信息，子类才会尝试自己加载。也就是说，如果想自己写一个 `java.lang.String` 类来代替 jdk 本身的 `String` 类是不可以的，就算自己写了类加载器也是不能被加载成功的。\n\n\n##### 运行时数据区\n\n简单来说，运行时数据区就是 Java 程序运行时的数据在内存中的存放空间。主要包含 方法区、堆、虚拟机栈、本地方法栈、程序计数器。\n\n其中方法区和堆是所有线程共享的，而虚拟机栈、本地方法栈和程序计数器是线程私有的。\n\n###### 方法区\n\n `.java` 文件被编译为  `.class` 文件后，被类加载器加载到内存需要存放到一个内存区域，这个区域就是方法区，方法区主要存放一些不经常改变的数据，常量，静态变量等都存放在这个区域。就像数据表的建表语句，规定了这张表就应该有哪些属性，这些属性应该是什么类型。当我们 new 一个对象时，就像给这张表添加一条数据，内容可以不一样，当时必须要遵循这些属性的格式。当方法区没有足够的空间时会抛 OutOfMemoryError 异常。\n\n\n ###### 堆\n\n堆是 Java 虚拟机管理的内存中最大的一块，这块区域被所有线程共享，这块区域主要用来存放对象，在内存不足的情况下会抛出 OutOfMemoryError 异常。\n\n> 堆是所有线程共享的，用来存放共有的资源\n\n###### 程序计数器\n\n这块区域主要记录当前线程的运行指令的记录。在 cpu 发生线程切换时，程序计数器可以记录当前线程执行的位置，等切回来时可以正确执行。程序计数器是线程私有的，每个线程都拥有一个自己的计数器。\n\n###### 栈\n\n每当一个线程被启动时，Java 虚拟机会创建一个 Java 栈，栈的单位为栈帧，栈可以分为基本类型变量区，执行环境上下文，操作指令几部分。栈的数据是当前栈私有的，其他栈不能访问。\n\n> 栈是线程私有的，简单来说就是用来执行逻辑的地方\n\n###### JIT\n\n> 即时编译，指将一些经常使用的字节码（循环等） 编译成机器本身的字节码来提高运行速度。\n\n\n###### 流程\n\n```java\npublic class User {\n\n    public void toWork() {\n        System.out.println(\"how interesting\");\n    }\n\n    public static void main(String[] args) {\n        User user = new User();\n        user.toWork();\n    }\n}\n```\n这里大致描述下 jvm 执行流程：\n1. 首先在方法区寻找 User 类信息。\n2. 如果没有找到的话，通过类加载器加载 User 类到方法区。\n3. 在堆上 new 一个User 实例，并把此实例的引用添加到主线程的调用栈中。\n4. 执行 user.work() 时，jvm 先根据 user 引用找到堆上对应的对象\n5. 根据堆上实例对象持有的方法区引用，获取到方法区 User 类信息，获取到 work() 方法的字节码，执行此方法的代码。\n\n\n#### Java 垃圾回收\n\n##### 垃圾回收算法\n1. 标记-清除\n\n顾名思义，先标记在清除，第一个阶段，先标记需要清除的对象，在讲它们全部清除。这种算法存在 2 种不足，标记和清除的效率都不是很高，而且标记和清除之后很容易产生大量的不连续空间碎片。\n\n2. 复制算法\n\n复制算法会把内存分成2块，一块真正投入使用，当这块内存空间不足时，将还在存活的对象复制到另外一块内存中。标记清除算法最大的缺点是回收之后会产生大量空间碎片，而复制算法则不。但是这样在真正使用时只能使用一般的内存，对内存的使用率很低。\n\n3. 标记整理算法\n\n标记整理算法也是有2个阶段，先将还在存活的对象标记出来，然后将存活的对象复制到一端连续的空间，然后直接将边缘外的空间释放掉。\n\n##### jvm 参数\n\n1. -Xms\n\n> 设置堆的最小空间大小\n\n2. -Xmx\n\n> 设置堆的最大空间大小\n\n3. -Xss\n\n> 设置每个线程栈大小\n\n4. -XX:NewSize \n\n> 设置新生代最小空间大小\n\n5. -XX:MaxNewSize\n\n> 设置新生代最大空间大小\n\n6. -XX:PermSize\n\n> 设置永久代大小\n\n7. -XX:MaxPermSize\n\n> 设置永久代最大空间大小\n\n**老年代空间大小=堆空间大小-年轻代最大空间大小**\n\n\n##### 垃圾回收器\n使用指定的垃圾回收器\n> -XX:+Use<垃圾回收器名字>GC\n> -XX:+UseSerialGC\n\n###### Serial\n\n1. 配置\n> -XX:+UseSerialGC\n\n2. 工作方式\n> 它不仅在收集时使用单线程来完成工作，并且在新生代和老年代收集时都会出现 STW (stop the world)现象。\n3. 适用场景\n> 桌面应用\n\n###### ParNew (ParalleNew)\n\n1. 配置\n>-XX:+UseParNewGc\n\n2. 工作方式\n> 只针对新生代使用多线程，老年代还是单线程，收集过程中会出现 STW\n3. 使用场景\n> server 新生代收集器\n\n###### Parallel Scavenge(PS)\n\n1. 配置\n> -XX:+UseParallelGC\n\n2. 工作方式\n> 可控制吞吐量，所谓吞吐量 = 运行用户代码时间/（运行用户代码时间 + 垃圾收集时间）\n> 高吞吐量可以提高 cpu 利用率，提高运算速度。\n3. 使用场景\n> 计算量比较小，用户交互不多的场景\n4. 参数\n> -XX:MaxGCPauseMilis          最大垃圾收集停顿时间（大于0毫秒）\n> -XX:GCTimeRatio              吞吐量大小（0-100%）\n> -XX:+UseAdaptiveSizePolicy   内存调优委托虚拟机管理\n\n###### Parallel Old\n1. 配置\n> -XX:+UseParallelOldGC\n\n2. 工作方式\n> Parallel Scavenge 收集器老年代收集版本。多线程完成工作，采用了“标记-整理” 算法。\n\n3. 使用场景\n\n> 桌面应用场景\n\n###### Concurrent Mark Sweep（CMS）\n1. 配置\n> -XX:UseConcMarkSweepGC\n\n2. 工作方式\n> 基于“标记-清除”算法，在整个过程中都是并发进行的，以获取最短回收停顿时间为目标，整个过程分为4步：初始标记，并发标记，重新标记，并发清除。\n\n3. 使用场景\n> 互联网应用服务端\n\n###### G1\n\n1. 配置\n> -XX:+UseG1GC\n2. 工作方式\n\n> G1算法将堆划分为若干和区域，但它仍然属于分代收集器，这些区域一部分包含新生代，新生代垃圾收集依然采用暂停所有线程的方式，将存货对象拷贝到老年代或者 Survivor 空间。\n> 老年代也分成很多区域，G1 收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作，这就意味着在正常处理过程中，G1完成了堆的压缩（至少是部分堆的压缩） ，这样就不会存在 CMS 内存碎片问题了。\n> G1 有两种 GC 模式（都是 STW）\n> Yong GC 和 Mixed GC\n\n\n##### JVM 内存分配与回收策略\n\n1. 大对象直接进入老年代\n> 大对象是指需要大量连续内存空间的 Java 对象，典型的是很长的字符串或者大数组。\n> -XX:PretenureSizeThreshold 可以使大于这个值的对象直接在老年代分配。这样会避免在 Eden 区以及两个 Survivor 区之间发生大量内存复制。\n\n2. 长期存货的对象将进入老年代\n> 对象在 Survivor 区中撑过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定值（默认 15），就会将它复制到老年代中。\n\n3. 动态对象年龄判定\n> 如果在 Survivor 空间中相同年龄所有对象的大小总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，不需要等到 MaxTenuringThreshold 中要求的年龄。\n\n4. 空间分配担保\n> HandlePromotionFailure 检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于该值，将尝试进行一次 Minor GC，如果小于，或者设置不允许冒险，这是就会改为进行一次 FullGC.\n\n\n##### 字节码执行引擎\n\n1. 输入字节码文件\n2. 处理过程是字节码解析的过程\n3. 输出的是执行结果\n\n虚拟机的执行引擎则是由自己实现的，因此可以自行指定指令集与执行引擎的结构体系，并且能够执行哪些不被硬件直接支持的指令集格式。\n\n###### 栈帧\n\n每个方法从调用开始至执行完成都会对应从入栈到出栈的过程，栈帧中包含：\n1. 局部变量表\n2. 操作数栈\n3. 动态链接\n4. 返回地址\n5. ...\n\n一个栈帧需要分配多少内存，在编译的时候已经确定，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。\n\n局部变量表\n\n局部变量表是一组变量存储空间，用于存放方法参数和方法内部定义的局部变量，在 Java 程序编译为 class 文件时，就在 code 属性的 max_local 数据项中确定了该方法所需要分配的局部变量表最大容量。\n\n> 一个 Slot 可以存放一个 32 位以内的数据类型，对于 64 位的数据类型，虚拟机会以高位对齐的方式为其分配两个连续的 Slot 空间。\n\n操作数栈\n\n操作数栈是一个后入先出栈，和局部变量一样，操作数栈最大深度也在编译的时候写入到 code 属性的 max_stacks 数据项中。\n\n方法返回地址\n\n当一个方法开始执行后，只有两种方式可以推出这个方法。\n1. 执行引擎遇到任意一个方法返回的字节码指令。\n2. 在方法执行过程中遇到了异常，并没有在方法体内得到处理。\n\n方法退出的过程实际上就是等同于把当前栈帧出栈\n1. 恢复上层方法的局部变量表和操作数栈\n2. 把返回值（若存在）压入调用者栈帧的操作数栈中\n3. 调正 PC 计数器的值以指向方法调用指令后面的一条指令等\n\n方法调用\n\n方法调用并不等于方法执行，该阶段唯一的任务就是确定哪一个方法，方法在实际运行时内存中的入口地址需要在类加载期间，甚至到运行期间才能确定。\n\n虚方法\n\n可以被复写的方法都可以称作虚方法，虚方法不需要做特殊声明，可以理解为除了 static，final，private 修饰的都是虚方法。\n\n虚拟机动态分派机制\n\n虚方法表（vtable，invokeinterface 执行时调用到 itable）使用虚方法表索引来代替元数据查找来提高性能，虚方法表中存放着各个方法的实际入口地址。\n\n1. 如果方法在子类中没有被重写，那子类虚方法表里面的地址入口和父类相同方法的地址入口是一致的，都是指向父类的实现入口。\n2. 如果子类中重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。\n\n##### JDK 性能监控与故障处理工具\n\njdk 中自带的用于监视虚拟机和故障处理工具\n\n\n|  名称    |   作用描述  |\n| ---- | ---- |\n|jps|JVM 进程状态工具（JVM Process Status Tool），用于显示目标系统上 JVM 的 Java 进程信息|\n|jstat|JVM 统计监测工具（JVM Statistics Monitoring Tool），用于监控并显示 JVM 性能统计信息|\n|jinfo|Java 配置信息工具（Java Configuration Information），用于打印指定 Java 进程，核心文件或远程调试服务器的配置信息。|\n|jhat|Java 堆分析工具（Java Heap Analysis Tool），用于分析 Java 堆内存中的对象信息|\n|jmap|Java 内存映射工具（Java Memory Map），用于打印指定 Java 进程，核心文件或远程调试服务器共享对象内存映射或堆内存细节|\n|jstack|Java 堆栈跟踪工具，主要用于打印指定 Java 进程，核心文件或远程调试服务器的 Java 线程的堆栈跟踪信息|\n|jmc|Java 任务控制工具（Java Misson Control），主要用于 JVM 的生产时间监测，分析，诊断|\n|jvisualvm|JVM 监测，故障排除，分析工具，主要以图形化界面的方式梯控与指定虚拟机的 Java 应用程序的详细信息|\n|jconsole|图形化用户界面监控工具，主要用于监测并显示运行于 Java 平台上的应用程序的性能和资源占用等信息|\n\n###### jps\n\n1. 功能\n\n> 显示正在运行的虚拟机进程\n\n2. 参数\n\n> -q    只显示 LVMID，省略主类信息（LVMID: 本地虚拟机进程唯一编号）\n> -l    显示虚拟机启动进程时传递给 main() 的参数\n> -m    显示类全面，如果是 jar 包显示 jar 路径\n> -v    显示虚拟机启动时候的 JVM 参数\n3. 用法\n\n> jps -l\n\n###### jstat\n\n1. 功能\n> 显示本地或者远程虚拟机进程中的类装载，内存，垃圾收集，JIT 编译等运行数据，是定位虚拟机性能问题的首选工具。\n\n2. 参数\n\n> -class：类加载，卸载数量，总空间及类装载所耗费时间\n> -compiler：显示 JIT 编译器编译过的方法，耗时等信息\n> -gc：统计 Java 堆，包括 Eden,Survior,老年代，永久代的容量，已用空间，GC时间等信息。\n> -gccapacity：显示 Java 堆各个区域使用到的最大，最小空间\n> -gcutil：显示已使用空间占总空间的百分比\n> -gccause：垃圾收集统计概述，和 -gcutil 相同，附件最近两次垃圾回收时间的原因\n> -gcnew：新生代行为统计\n> -gcnewcapacity：兴盛带使用到的最大，最小空间统计\n> -gcold：统计老年代 GC 状况\n> -gcoldcapacity：年老代行为统计，主要关注使用最大，最小空间\n> -gcpermcapacity：显示永久代使用到的最大，最小空间（-gcmetacapacity）\n> printcompilation：显示已经被 JIT 编译的方法\n\n3. 用法\n\n> jstat -gccause vmid  [时间间隔/毫秒]\n\n###### jinfo\n\n1. 功能\n> 可以用来查看正在运行的 Java 应用程序的扩展参数，甚至支持在运行时，修改部分参数\n\n2. 参数\n\n> -flag <name> pid:打印指定 JVM 的参数值。\n> -flag [+|-]<name> pid：设置指定 JVM 参数值\n> -flag <name> =<value> pid :设置指定 JVM 参数值\n\n3. 用法\n\n> jinfo -flag +PrintGC pid\n> jinfo -flag +PrintGCDetails pid\n> jinfo -flag +PrintGCTimestamp pid\n\n> jinfo -flag -PrintGC pid\n> jinfo -flag -PrintGCDetails pid\n> jinfo -flag -PrintGCTimestamp pid\n\n\n###### jmap\n\n1. 功能\n\n> 用于生产 heap dump 文件，如果不适用这个命令，还可以使用 -XX:+HeapDumpOnOutOfMemoryError 参数来让虚拟机出现 OOM 的时候自动生产 dump 文件。jmap 不仅能生成 dump 文件，还可以查询 finalize 执行队列，Java 堆和永久带的详细信息，如当前使用率，当前使用的是那种收集器。\n\n2. 参数\n\n> -dump：生成 Java 堆快照。格式：-dump:[live,]format=b,file=<filename>,live 为是否只生成存活的对象\n> -histo：显示堆中对象的统计信息，包括类，有都少个实例，合计容量等\n> -permstat：显示永久代内存状态。在 Linux 下有效\n> -heap：显示堆详细信息，如使用哪种回收器，参数配置，分代状况等。在 Linux 下有效\n> -finalizerinfo：显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法对象。 在 Linux 下有效。\n> -F：当虚拟机进程多 -dump 没有响应时，可以使用这个选项强制生成 dump 快照。在 Linux 下有效。\n\n3. 用法\n> jmap -dump vmid\n\n###### jstack\n\n1. 功能\n> 用于生成虚拟机当前时刻的线程快照，一边可以进一步定位线程出现长时间停顿原因，如线程间死锁，死循环，清酒外部资源导致的长时间等待等。\n\n2. 参数\n\n> -F：输出请求不被响应时，强制输出线程堆栈信息\n> -l：除堆栈信息外，附加显示关于锁 的信息\n> -m：如果涉及本地方法调用，则显示C/C++ 的堆栈\n\n3. 用法\n\n> jstack -l vmid\n>查看堆情况：jmap -heap pid \n\n***\n\n<center>很平凡，很认真</center>","source":"_posts/jvm-类加载机制.md","raw":"---\ntitle: jvm-类加载\ndate: 2019-08-04 00:57:25\ntags: Java\ncategory: Java\n---\n\n![photo by https://unsplash.com/photos/ISVm7Rzhy8s](jvm-类加载机制/load-class.png)\n\n关于 JVM 涉及的知识比较深，并且比较难理解。每次看到不懂的地方，我习惯了解之后记下来。相信了解多了也就会变成自己的知识了。今天周六，准备换地方和朋友一起合租住，想想还是美滋滋。\n\n<!--more-->\n\n#### 类生命周期\n\n一个静态的类从被加载到内存，变成动态类，在到被卸载为止，它的生命周期是：\n```java\n\n加载--> 链接--> 初始化--> 使用--> 卸载\n\n链接包含：\n验证--> 准备--> 解析\n```\n类的加载必须按照这个过程来加载，除了解析阶段，有可能发生在初始化阶段之后。\n\n#### 类加载器\nJDK 包含类 3 中类加载器。分别是 BootStrap ClassLoader 启动类加载器，Extension ClassLoader 扩展类加载器和 Application ClassLoader 应用程序类加载器，启动类类加载器是用 C++ 实现的，作为 JVM 的一部分，而其他类加载器是用 Java 来实现的，都继承自 java.lang.ClassLoader。\n\n##### 双亲委任\n\n###### 类加载器层级\n\n自定义类加载器 > 应用程序类加载器 > 扩展类加载器 > 启动类加载器\n\n除了启动类加载器之外，每个类都有父类加载器。\n\n双亲委任大致可以理解为：当一个加载器加载一个类时，首先交给它的父类加载器加载此类路径下的类，如果父类找不到，在交给它自己的父类进行加载，如果找到了，则加载此类，如果没有找到，则会告知子类信息，子类才会尝试自己加载。也就是说，如果想自己写一个 `java.lang.String` 类来代替 jdk 本身的 `String` 类是不可以的，就算自己写了类加载器也是不能被加载成功的。\n\n\n##### 运行时数据区\n\n简单来说，运行时数据区就是 Java 程序运行时的数据在内存中的存放空间。主要包含 方法区、堆、虚拟机栈、本地方法栈、程序计数器。\n\n其中方法区和堆是所有线程共享的，而虚拟机栈、本地方法栈和程序计数器是线程私有的。\n\n###### 方法区\n\n `.java` 文件被编译为  `.class` 文件后，被类加载器加载到内存需要存放到一个内存区域，这个区域就是方法区，方法区主要存放一些不经常改变的数据，常量，静态变量等都存放在这个区域。就像数据表的建表语句，规定了这张表就应该有哪些属性，这些属性应该是什么类型。当我们 new 一个对象时，就像给这张表添加一条数据，内容可以不一样，当时必须要遵循这些属性的格式。当方法区没有足够的空间时会抛 OutOfMemoryError 异常。\n\n\n ###### 堆\n\n堆是 Java 虚拟机管理的内存中最大的一块，这块区域被所有线程共享，这块区域主要用来存放对象，在内存不足的情况下会抛出 OutOfMemoryError 异常。\n\n> 堆是所有线程共享的，用来存放共有的资源\n\n###### 程序计数器\n\n这块区域主要记录当前线程的运行指令的记录。在 cpu 发生线程切换时，程序计数器可以记录当前线程执行的位置，等切回来时可以正确执行。程序计数器是线程私有的，每个线程都拥有一个自己的计数器。\n\n###### 栈\n\n每当一个线程被启动时，Java 虚拟机会创建一个 Java 栈，栈的单位为栈帧，栈可以分为基本类型变量区，执行环境上下文，操作指令几部分。栈的数据是当前栈私有的，其他栈不能访问。\n\n> 栈是线程私有的，简单来说就是用来执行逻辑的地方\n\n###### JIT\n\n> 即时编译，指将一些经常使用的字节码（循环等） 编译成机器本身的字节码来提高运行速度。\n\n\n###### 流程\n\n```java\npublic class User {\n\n    public void toWork() {\n        System.out.println(\"how interesting\");\n    }\n\n    public static void main(String[] args) {\n        User user = new User();\n        user.toWork();\n    }\n}\n```\n这里大致描述下 jvm 执行流程：\n1. 首先在方法区寻找 User 类信息。\n2. 如果没有找到的话，通过类加载器加载 User 类到方法区。\n3. 在堆上 new 一个User 实例，并把此实例的引用添加到主线程的调用栈中。\n4. 执行 user.work() 时，jvm 先根据 user 引用找到堆上对应的对象\n5. 根据堆上实例对象持有的方法区引用，获取到方法区 User 类信息，获取到 work() 方法的字节码，执行此方法的代码。\n\n\n#### Java 垃圾回收\n\n##### 垃圾回收算法\n1. 标记-清除\n\n顾名思义，先标记在清除，第一个阶段，先标记需要清除的对象，在讲它们全部清除。这种算法存在 2 种不足，标记和清除的效率都不是很高，而且标记和清除之后很容易产生大量的不连续空间碎片。\n\n2. 复制算法\n\n复制算法会把内存分成2块，一块真正投入使用，当这块内存空间不足时，将还在存活的对象复制到另外一块内存中。标记清除算法最大的缺点是回收之后会产生大量空间碎片，而复制算法则不。但是这样在真正使用时只能使用一般的内存，对内存的使用率很低。\n\n3. 标记整理算法\n\n标记整理算法也是有2个阶段，先将还在存活的对象标记出来，然后将存活的对象复制到一端连续的空间，然后直接将边缘外的空间释放掉。\n\n##### jvm 参数\n\n1. -Xms\n\n> 设置堆的最小空间大小\n\n2. -Xmx\n\n> 设置堆的最大空间大小\n\n3. -Xss\n\n> 设置每个线程栈大小\n\n4. -XX:NewSize \n\n> 设置新生代最小空间大小\n\n5. -XX:MaxNewSize\n\n> 设置新生代最大空间大小\n\n6. -XX:PermSize\n\n> 设置永久代大小\n\n7. -XX:MaxPermSize\n\n> 设置永久代最大空间大小\n\n**老年代空间大小=堆空间大小-年轻代最大空间大小**\n\n\n##### 垃圾回收器\n使用指定的垃圾回收器\n> -XX:+Use<垃圾回收器名字>GC\n> -XX:+UseSerialGC\n\n###### Serial\n\n1. 配置\n> -XX:+UseSerialGC\n\n2. 工作方式\n> 它不仅在收集时使用单线程来完成工作，并且在新生代和老年代收集时都会出现 STW (stop the world)现象。\n3. 适用场景\n> 桌面应用\n\n###### ParNew (ParalleNew)\n\n1. 配置\n>-XX:+UseParNewGc\n\n2. 工作方式\n> 只针对新生代使用多线程，老年代还是单线程，收集过程中会出现 STW\n3. 使用场景\n> server 新生代收集器\n\n###### Parallel Scavenge(PS)\n\n1. 配置\n> -XX:+UseParallelGC\n\n2. 工作方式\n> 可控制吞吐量，所谓吞吐量 = 运行用户代码时间/（运行用户代码时间 + 垃圾收集时间）\n> 高吞吐量可以提高 cpu 利用率，提高运算速度。\n3. 使用场景\n> 计算量比较小，用户交互不多的场景\n4. 参数\n> -XX:MaxGCPauseMilis          最大垃圾收集停顿时间（大于0毫秒）\n> -XX:GCTimeRatio              吞吐量大小（0-100%）\n> -XX:+UseAdaptiveSizePolicy   内存调优委托虚拟机管理\n\n###### Parallel Old\n1. 配置\n> -XX:+UseParallelOldGC\n\n2. 工作方式\n> Parallel Scavenge 收集器老年代收集版本。多线程完成工作，采用了“标记-整理” 算法。\n\n3. 使用场景\n\n> 桌面应用场景\n\n###### Concurrent Mark Sweep（CMS）\n1. 配置\n> -XX:UseConcMarkSweepGC\n\n2. 工作方式\n> 基于“标记-清除”算法，在整个过程中都是并发进行的，以获取最短回收停顿时间为目标，整个过程分为4步：初始标记，并发标记，重新标记，并发清除。\n\n3. 使用场景\n> 互联网应用服务端\n\n###### G1\n\n1. 配置\n> -XX:+UseG1GC\n2. 工作方式\n\n> G1算法将堆划分为若干和区域，但它仍然属于分代收集器，这些区域一部分包含新生代，新生代垃圾收集依然采用暂停所有线程的方式，将存货对象拷贝到老年代或者 Survivor 空间。\n> 老年代也分成很多区域，G1 收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作，这就意味着在正常处理过程中，G1完成了堆的压缩（至少是部分堆的压缩） ，这样就不会存在 CMS 内存碎片问题了。\n> G1 有两种 GC 模式（都是 STW）\n> Yong GC 和 Mixed GC\n\n\n##### JVM 内存分配与回收策略\n\n1. 大对象直接进入老年代\n> 大对象是指需要大量连续内存空间的 Java 对象，典型的是很长的字符串或者大数组。\n> -XX:PretenureSizeThreshold 可以使大于这个值的对象直接在老年代分配。这样会避免在 Eden 区以及两个 Survivor 区之间发生大量内存复制。\n\n2. 长期存货的对象将进入老年代\n> 对象在 Survivor 区中撑过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定值（默认 15），就会将它复制到老年代中。\n\n3. 动态对象年龄判定\n> 如果在 Survivor 空间中相同年龄所有对象的大小总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，不需要等到 MaxTenuringThreshold 中要求的年龄。\n\n4. 空间分配担保\n> HandlePromotionFailure 检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于该值，将尝试进行一次 Minor GC，如果小于，或者设置不允许冒险，这是就会改为进行一次 FullGC.\n\n\n##### 字节码执行引擎\n\n1. 输入字节码文件\n2. 处理过程是字节码解析的过程\n3. 输出的是执行结果\n\n虚拟机的执行引擎则是由自己实现的，因此可以自行指定指令集与执行引擎的结构体系，并且能够执行哪些不被硬件直接支持的指令集格式。\n\n###### 栈帧\n\n每个方法从调用开始至执行完成都会对应从入栈到出栈的过程，栈帧中包含：\n1. 局部变量表\n2. 操作数栈\n3. 动态链接\n4. 返回地址\n5. ...\n\n一个栈帧需要分配多少内存，在编译的时候已经确定，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。\n\n局部变量表\n\n局部变量表是一组变量存储空间，用于存放方法参数和方法内部定义的局部变量，在 Java 程序编译为 class 文件时，就在 code 属性的 max_local 数据项中确定了该方法所需要分配的局部变量表最大容量。\n\n> 一个 Slot 可以存放一个 32 位以内的数据类型，对于 64 位的数据类型，虚拟机会以高位对齐的方式为其分配两个连续的 Slot 空间。\n\n操作数栈\n\n操作数栈是一个后入先出栈，和局部变量一样，操作数栈最大深度也在编译的时候写入到 code 属性的 max_stacks 数据项中。\n\n方法返回地址\n\n当一个方法开始执行后，只有两种方式可以推出这个方法。\n1. 执行引擎遇到任意一个方法返回的字节码指令。\n2. 在方法执行过程中遇到了异常，并没有在方法体内得到处理。\n\n方法退出的过程实际上就是等同于把当前栈帧出栈\n1. 恢复上层方法的局部变量表和操作数栈\n2. 把返回值（若存在）压入调用者栈帧的操作数栈中\n3. 调正 PC 计数器的值以指向方法调用指令后面的一条指令等\n\n方法调用\n\n方法调用并不等于方法执行，该阶段唯一的任务就是确定哪一个方法，方法在实际运行时内存中的入口地址需要在类加载期间，甚至到运行期间才能确定。\n\n虚方法\n\n可以被复写的方法都可以称作虚方法，虚方法不需要做特殊声明，可以理解为除了 static，final，private 修饰的都是虚方法。\n\n虚拟机动态分派机制\n\n虚方法表（vtable，invokeinterface 执行时调用到 itable）使用虚方法表索引来代替元数据查找来提高性能，虚方法表中存放着各个方法的实际入口地址。\n\n1. 如果方法在子类中没有被重写，那子类虚方法表里面的地址入口和父类相同方法的地址入口是一致的，都是指向父类的实现入口。\n2. 如果子类中重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。\n\n##### JDK 性能监控与故障处理工具\n\njdk 中自带的用于监视虚拟机和故障处理工具\n\n\n|  名称    |   作用描述  |\n| ---- | ---- |\n|jps|JVM 进程状态工具（JVM Process Status Tool），用于显示目标系统上 JVM 的 Java 进程信息|\n|jstat|JVM 统计监测工具（JVM Statistics Monitoring Tool），用于监控并显示 JVM 性能统计信息|\n|jinfo|Java 配置信息工具（Java Configuration Information），用于打印指定 Java 进程，核心文件或远程调试服务器的配置信息。|\n|jhat|Java 堆分析工具（Java Heap Analysis Tool），用于分析 Java 堆内存中的对象信息|\n|jmap|Java 内存映射工具（Java Memory Map），用于打印指定 Java 进程，核心文件或远程调试服务器共享对象内存映射或堆内存细节|\n|jstack|Java 堆栈跟踪工具，主要用于打印指定 Java 进程，核心文件或远程调试服务器的 Java 线程的堆栈跟踪信息|\n|jmc|Java 任务控制工具（Java Misson Control），主要用于 JVM 的生产时间监测，分析，诊断|\n|jvisualvm|JVM 监测，故障排除，分析工具，主要以图形化界面的方式梯控与指定虚拟机的 Java 应用程序的详细信息|\n|jconsole|图形化用户界面监控工具，主要用于监测并显示运行于 Java 平台上的应用程序的性能和资源占用等信息|\n\n###### jps\n\n1. 功能\n\n> 显示正在运行的虚拟机进程\n\n2. 参数\n\n> -q    只显示 LVMID，省略主类信息（LVMID: 本地虚拟机进程唯一编号）\n> -l    显示虚拟机启动进程时传递给 main() 的参数\n> -m    显示类全面，如果是 jar 包显示 jar 路径\n> -v    显示虚拟机启动时候的 JVM 参数\n3. 用法\n\n> jps -l\n\n###### jstat\n\n1. 功能\n> 显示本地或者远程虚拟机进程中的类装载，内存，垃圾收集，JIT 编译等运行数据，是定位虚拟机性能问题的首选工具。\n\n2. 参数\n\n> -class：类加载，卸载数量，总空间及类装载所耗费时间\n> -compiler：显示 JIT 编译器编译过的方法，耗时等信息\n> -gc：统计 Java 堆，包括 Eden,Survior,老年代，永久代的容量，已用空间，GC时间等信息。\n> -gccapacity：显示 Java 堆各个区域使用到的最大，最小空间\n> -gcutil：显示已使用空间占总空间的百分比\n> -gccause：垃圾收集统计概述，和 -gcutil 相同，附件最近两次垃圾回收时间的原因\n> -gcnew：新生代行为统计\n> -gcnewcapacity：兴盛带使用到的最大，最小空间统计\n> -gcold：统计老年代 GC 状况\n> -gcoldcapacity：年老代行为统计，主要关注使用最大，最小空间\n> -gcpermcapacity：显示永久代使用到的最大，最小空间（-gcmetacapacity）\n> printcompilation：显示已经被 JIT 编译的方法\n\n3. 用法\n\n> jstat -gccause vmid  [时间间隔/毫秒]\n\n###### jinfo\n\n1. 功能\n> 可以用来查看正在运行的 Java 应用程序的扩展参数，甚至支持在运行时，修改部分参数\n\n2. 参数\n\n> -flag <name> pid:打印指定 JVM 的参数值。\n> -flag [+|-]<name> pid：设置指定 JVM 参数值\n> -flag <name> =<value> pid :设置指定 JVM 参数值\n\n3. 用法\n\n> jinfo -flag +PrintGC pid\n> jinfo -flag +PrintGCDetails pid\n> jinfo -flag +PrintGCTimestamp pid\n\n> jinfo -flag -PrintGC pid\n> jinfo -flag -PrintGCDetails pid\n> jinfo -flag -PrintGCTimestamp pid\n\n\n###### jmap\n\n1. 功能\n\n> 用于生产 heap dump 文件，如果不适用这个命令，还可以使用 -XX:+HeapDumpOnOutOfMemoryError 参数来让虚拟机出现 OOM 的时候自动生产 dump 文件。jmap 不仅能生成 dump 文件，还可以查询 finalize 执行队列，Java 堆和永久带的详细信息，如当前使用率，当前使用的是那种收集器。\n\n2. 参数\n\n> -dump：生成 Java 堆快照。格式：-dump:[live,]format=b,file=<filename>,live 为是否只生成存活的对象\n> -histo：显示堆中对象的统计信息，包括类，有都少个实例，合计容量等\n> -permstat：显示永久代内存状态。在 Linux 下有效\n> -heap：显示堆详细信息，如使用哪种回收器，参数配置，分代状况等。在 Linux 下有效\n> -finalizerinfo：显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法对象。 在 Linux 下有效。\n> -F：当虚拟机进程多 -dump 没有响应时，可以使用这个选项强制生成 dump 快照。在 Linux 下有效。\n\n3. 用法\n> jmap -dump vmid\n\n###### jstack\n\n1. 功能\n> 用于生成虚拟机当前时刻的线程快照，一边可以进一步定位线程出现长时间停顿原因，如线程间死锁，死循环，清酒外部资源导致的长时间等待等。\n\n2. 参数\n\n> -F：输出请求不被响应时，强制输出线程堆栈信息\n> -l：除堆栈信息外，附加显示关于锁 的信息\n> -m：如果涉及本地方法调用，则显示C/C++ 的堆栈\n\n3. 用法\n\n> jstack -l vmid\n>查看堆情况：jmap -heap pid \n\n***\n\n<center>很平凡，很认真</center>","slug":"jvm-类加载机制","published":1,"updated":"2021-01-31T06:31:35.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeoxr004prh1td1gnbe1c","content":"<p><img src=\"/2019/08/04/jvm-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/load-class.png\" alt=\"photo by https://unsplash.com/photos/ISVm7Rzhy8s\"></p>\n<p>关于 JVM 涉及的知识比较深，并且比较难理解。每次看到不懂的地方，我习惯了解之后记下来。相信了解多了也就会变成自己的知识了。今天周六，准备换地方和朋友一起合租住，想想还是美滋滋。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"类生命周期\"><a href=\"#类生命周期\" class=\"headerlink\" title=\"类生命周期\"></a>类生命周期</h4><p>一个静态的类从被加载到内存，变成动态类，在到被卸载为止，它的生命周期是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">加载--&gt; 链接--&gt; 初始化--&gt; 使用--&gt; 卸载</span><br><span class=\"line\"></span><br><span class=\"line\">链接包含：</span><br><span class=\"line\">验证--&gt; 准备--&gt; 解析</span><br></pre></td></tr></table></figure>\n<p>类的加载必须按照这个过程来加载，除了解析阶段，有可能发生在初始化阶段之后。</p>\n<h4 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h4><p>JDK 包含类 3 中类加载器。分别是 BootStrap ClassLoader 启动类加载器，Extension ClassLoader 扩展类加载器和 Application ClassLoader 应用程序类加载器，启动类类加载器是用 C++ 实现的，作为 JVM 的一部分，而其他类加载器是用 Java 来实现的，都继承自 java.lang.ClassLoader。</p>\n<h5 id=\"双亲委任\"><a href=\"#双亲委任\" class=\"headerlink\" title=\"双亲委任\"></a>双亲委任</h5><h6 id=\"类加载器层级\"><a href=\"#类加载器层级\" class=\"headerlink\" title=\"类加载器层级\"></a>类加载器层级</h6><p>自定义类加载器 &gt; 应用程序类加载器 &gt; 扩展类加载器 &gt; 启动类加载器</p>\n<p>除了启动类加载器之外，每个类都有父类加载器。</p>\n<p>双亲委任大致可以理解为：当一个加载器加载一个类时，首先交给它的父类加载器加载此类路径下的类，如果父类找不到，在交给它自己的父类进行加载，如果找到了，则加载此类，如果没有找到，则会告知子类信息，子类才会尝试自己加载。也就是说，如果想自己写一个 <code>java.lang.String</code> 类来代替 jdk 本身的 <code>String</code> 类是不可以的，就算自己写了类加载器也是不能被加载成功的。</p>\n<h5 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h5><p>简单来说，运行时数据区就是 Java 程序运行时的数据在内存中的存放空间。主要包含 方法区、堆、虚拟机栈、本地方法栈、程序计数器。</p>\n<p>其中方法区和堆是所有线程共享的，而虚拟机栈、本地方法栈和程序计数器是线程私有的。</p>\n<h6 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h6><p> <code>.java</code> 文件被编译为  <code>.class</code> 文件后，被类加载器加载到内存需要存放到一个内存区域，这个区域就是方法区，方法区主要存放一些不经常改变的数据，常量，静态变量等都存放在这个区域。就像数据表的建表语句，规定了这张表就应该有哪些属性，这些属性应该是什么类型。当我们 new 一个对象时，就像给这张表添加一条数据，内容可以不一样，当时必须要遵循这些属性的格式。当方法区没有足够的空间时会抛 OutOfMemoryError 异常。</p>\n<h6 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h6><p>堆是 Java 虚拟机管理的内存中最大的一块，这块区域被所有线程共享，这块区域主要用来存放对象，在内存不足的情况下会抛出 OutOfMemoryError 异常。</p>\n<blockquote>\n<p>堆是所有线程共享的，用来存放共有的资源</p>\n</blockquote>\n<h6 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h6><p>这块区域主要记录当前线程的运行指令的记录。在 cpu 发生线程切换时，程序计数器可以记录当前线程执行的位置，等切回来时可以正确执行。程序计数器是线程私有的，每个线程都拥有一个自己的计数器。</p>\n<h6 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h6><p>每当一个线程被启动时，Java 虚拟机会创建一个 Java 栈，栈的单位为栈帧，栈可以分为基本类型变量区，执行环境上下文，操作指令几部分。栈的数据是当前栈私有的，其他栈不能访问。</p>\n<blockquote>\n<p>栈是线程私有的，简单来说就是用来执行逻辑的地方</p>\n</blockquote>\n<h6 id=\"JIT\"><a href=\"#JIT\" class=\"headerlink\" title=\"JIT\"></a>JIT</h6><blockquote>\n<p>即时编译，指将一些经常使用的字节码（循环等） 编译成机器本身的字节码来提高运行速度。</p>\n</blockquote>\n<h6 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toWork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;how interesting&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.toWork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里大致描述下 jvm 执行流程：</p>\n<ol>\n<li>首先在方法区寻找 User 类信息。</li>\n<li>如果没有找到的话，通过类加载器加载 User 类到方法区。</li>\n<li>在堆上 new 一个User 实例，并把此实例的引用添加到主线程的调用栈中。</li>\n<li>执行 user.work() 时，jvm 先根据 user 引用找到堆上对应的对象</li>\n<li>根据堆上实例对象持有的方法区引用，获取到方法区 User 类信息，获取到 work() 方法的字节码，执行此方法的代码。</li>\n</ol>\n<h4 id=\"Java-垃圾回收\"><a href=\"#Java-垃圾回收\" class=\"headerlink\" title=\"Java 垃圾回收\"></a>Java 垃圾回收</h4><h5 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h5><ol>\n<li>标记-清除</li>\n</ol>\n<p>顾名思义，先标记在清除，第一个阶段，先标记需要清除的对象，在讲它们全部清除。这种算法存在 2 种不足，标记和清除的效率都不是很高，而且标记和清除之后很容易产生大量的不连续空间碎片。</p>\n<ol start=\"2\">\n<li>复制算法</li>\n</ol>\n<p>复制算法会把内存分成2块，一块真正投入使用，当这块内存空间不足时，将还在存活的对象复制到另外一块内存中。标记清除算法最大的缺点是回收之后会产生大量空间碎片，而复制算法则不。但是这样在真正使用时只能使用一般的内存，对内存的使用率很低。</p>\n<ol start=\"3\">\n<li>标记整理算法</li>\n</ol>\n<p>标记整理算法也是有2个阶段，先将还在存活的对象标记出来，然后将存活的对象复制到一端连续的空间，然后直接将边缘外的空间释放掉。</p>\n<h5 id=\"jvm-参数\"><a href=\"#jvm-参数\" class=\"headerlink\" title=\"jvm 参数\"></a>jvm 参数</h5><ol>\n<li>-Xms</li>\n</ol>\n<blockquote>\n<p>设置堆的最小空间大小</p>\n</blockquote>\n<ol start=\"2\">\n<li>-Xmx</li>\n</ol>\n<blockquote>\n<p>设置堆的最大空间大小</p>\n</blockquote>\n<ol start=\"3\">\n<li>-Xss</li>\n</ol>\n<blockquote>\n<p>设置每个线程栈大小</p>\n</blockquote>\n<ol start=\"4\">\n<li>-XX:NewSize </li>\n</ol>\n<blockquote>\n<p>设置新生代最小空间大小</p>\n</blockquote>\n<ol start=\"5\">\n<li>-XX:MaxNewSize</li>\n</ol>\n<blockquote>\n<p>设置新生代最大空间大小</p>\n</blockquote>\n<ol start=\"6\">\n<li>-XX:PermSize</li>\n</ol>\n<blockquote>\n<p>设置永久代大小</p>\n</blockquote>\n<ol start=\"7\">\n<li>-XX:MaxPermSize</li>\n</ol>\n<blockquote>\n<p>设置永久代最大空间大小</p>\n</blockquote>\n<p><strong>老年代空间大小=堆空间大小-年轻代最大空间大小</strong></p>\n<h5 id=\"垃圾回收器\"><a href=\"#垃圾回收器\" class=\"headerlink\" title=\"垃圾回收器\"></a>垃圾回收器</h5><p>使用指定的垃圾回收器</p>\n<blockquote>\n<p>-XX:+Use&lt;垃圾回收器名字&gt;GC<br>-XX:+UseSerialGC</p>\n</blockquote>\n<h6 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseSerialGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>它不仅在收集时使用单线程来完成工作，并且在新生代和老年代收集时都会出现 STW (stop the world)现象。</p>\n</blockquote>\n</li>\n<li><p>适用场景</p>\n<blockquote>\n<p>桌面应用</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"ParNew-ParalleNew\"><a href=\"#ParNew-ParalleNew\" class=\"headerlink\" title=\"ParNew (ParalleNew)\"></a>ParNew (ParalleNew)</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseParNewGc</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>只针对新生代使用多线程，老年代还是单线程，收集过程中会出现 STW</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n<blockquote>\n<p>server 新生代收集器</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"Parallel-Scavenge-PS\"><a href=\"#Parallel-Scavenge-PS\" class=\"headerlink\" title=\"Parallel Scavenge(PS)\"></a>Parallel Scavenge(PS)</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseParallelGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>可控制吞吐量，所谓吞吐量 = 运行用户代码时间/（运行用户代码时间 + 垃圾收集时间）<br>高吞吐量可以提高 cpu 利用率，提高运算速度。</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n<blockquote>\n<p>计算量比较小，用户交互不多的场景</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n<blockquote>\n<p>-XX:MaxGCPauseMilis          最大垃圾收集停顿时间（大于0毫秒）<br>-XX:GCTimeRatio              吞吐量大小（0-100%）<br>-XX:+UseAdaptiveSizePolicy   内存调优委托虚拟机管理</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"Parallel-Old\"><a href=\"#Parallel-Old\" class=\"headerlink\" title=\"Parallel Old\"></a>Parallel Old</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseParallelOldGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>Parallel Scavenge 收集器老年代收集版本。多线程完成工作，采用了“标记-整理” 算法。</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n</li>\n</ol>\n<blockquote>\n<p>桌面应用场景</p>\n</blockquote>\n<h6 id=\"Concurrent-Mark-Sweep（CMS）\"><a href=\"#Concurrent-Mark-Sweep（CMS）\" class=\"headerlink\" title=\"Concurrent Mark Sweep（CMS）\"></a>Concurrent Mark Sweep（CMS）</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:UseConcMarkSweepGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>基于“标记-清除”算法，在整个过程中都是并发进行的，以获取最短回收停顿时间为目标，整个过程分为4步：初始标记，并发标记，重新标记，并发清除。</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n<blockquote>\n<p>互联网应用服务端</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"G1\"><a href=\"#G1\" class=\"headerlink\" title=\"G1\"></a>G1</h6><ol>\n<li>配置<blockquote>\n<p>-XX:+UseG1GC</p>\n</blockquote>\n</li>\n<li>工作方式</li>\n</ol>\n<blockquote>\n<p>G1算法将堆划分为若干和区域，但它仍然属于分代收集器，这些区域一部分包含新生代，新生代垃圾收集依然采用暂停所有线程的方式，将存货对象拷贝到老年代或者 Survivor 空间。<br>老年代也分成很多区域，G1 收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作，这就意味着在正常处理过程中，G1完成了堆的压缩（至少是部分堆的压缩） ，这样就不会存在 CMS 内存碎片问题了。<br>G1 有两种 GC 模式（都是 STW）<br>Yong GC 和 Mixed GC</p>\n</blockquote>\n<h5 id=\"JVM-内存分配与回收策略\"><a href=\"#JVM-内存分配与回收策略\" class=\"headerlink\" title=\"JVM 内存分配与回收策略\"></a>JVM 内存分配与回收策略</h5><ol>\n<li><p>大对象直接进入老年代</p>\n<blockquote>\n<p>大对象是指需要大量连续内存空间的 Java 对象，典型的是很长的字符串或者大数组。<br>-XX:PretenureSizeThreshold 可以使大于这个值的对象直接在老年代分配。这样会避免在 Eden 区以及两个 Survivor 区之间发生大量内存复制。</p>\n</blockquote>\n</li>\n<li><p>长期存货的对象将进入老年代</p>\n<blockquote>\n<p>对象在 Survivor 区中撑过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定值（默认 15），就会将它复制到老年代中。</p>\n</blockquote>\n</li>\n<li><p>动态对象年龄判定</p>\n<blockquote>\n<p>如果在 Survivor 空间中相同年龄所有对象的大小总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，不需要等到 MaxTenuringThreshold 中要求的年龄。</p>\n</blockquote>\n</li>\n<li><p>空间分配担保</p>\n<blockquote>\n<p>HandlePromotionFailure 检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于该值，将尝试进行一次 Minor GC，如果小于，或者设置不允许冒险，这是就会改为进行一次 FullGC.</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"字节码执行引擎\"><a href=\"#字节码执行引擎\" class=\"headerlink\" title=\"字节码执行引擎\"></a>字节码执行引擎</h5><ol>\n<li>输入字节码文件</li>\n<li>处理过程是字节码解析的过程</li>\n<li>输出的是执行结果</li>\n</ol>\n<p>虚拟机的执行引擎则是由自己实现的，因此可以自行指定指令集与执行引擎的结构体系，并且能够执行哪些不被硬件直接支持的指令集格式。</p>\n<h6 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h6><p>每个方法从调用开始至执行完成都会对应从入栈到出栈的过程，栈帧中包含：</p>\n<ol>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>返回地址</li>\n<li>…</li>\n</ol>\n<p>一个栈帧需要分配多少内存，在编译的时候已经确定，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p>\n<p>局部变量表</p>\n<p>局部变量表是一组变量存储空间，用于存放方法参数和方法内部定义的局部变量，在 Java 程序编译为 class 文件时，就在 code 属性的 max_local 数据项中确定了该方法所需要分配的局部变量表最大容量。</p>\n<blockquote>\n<p>一个 Slot 可以存放一个 32 位以内的数据类型，对于 64 位的数据类型，虚拟机会以高位对齐的方式为其分配两个连续的 Slot 空间。</p>\n</blockquote>\n<p>操作数栈</p>\n<p>操作数栈是一个后入先出栈，和局部变量一样，操作数栈最大深度也在编译的时候写入到 code 属性的 max_stacks 数据项中。</p>\n<p>方法返回地址</p>\n<p>当一个方法开始执行后，只有两种方式可以推出这个方法。</p>\n<ol>\n<li>执行引擎遇到任意一个方法返回的字节码指令。</li>\n<li>在方法执行过程中遇到了异常，并没有在方法体内得到处理。</li>\n</ol>\n<p>方法退出的过程实际上就是等同于把当前栈帧出栈</p>\n<ol>\n<li>恢复上层方法的局部变量表和操作数栈</li>\n<li>把返回值（若存在）压入调用者栈帧的操作数栈中</li>\n<li>调正 PC 计数器的值以指向方法调用指令后面的一条指令等</li>\n</ol>\n<p>方法调用</p>\n<p>方法调用并不等于方法执行，该阶段唯一的任务就是确定哪一个方法，方法在实际运行时内存中的入口地址需要在类加载期间，甚至到运行期间才能确定。</p>\n<p>虚方法</p>\n<p>可以被复写的方法都可以称作虚方法，虚方法不需要做特殊声明，可以理解为除了 static，final，private 修饰的都是虚方法。</p>\n<p>虚拟机动态分派机制</p>\n<p>虚方法表（vtable，invokeinterface 执行时调用到 itable）使用虚方法表索引来代替元数据查找来提高性能，虚方法表中存放着各个方法的实际入口地址。</p>\n<ol>\n<li>如果方法在子类中没有被重写，那子类虚方法表里面的地址入口和父类相同方法的地址入口是一致的，都是指向父类的实现入口。</li>\n<li>如果子类中重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。</li>\n</ol>\n<h5 id=\"JDK-性能监控与故障处理工具\"><a href=\"#JDK-性能监控与故障处理工具\" class=\"headerlink\" title=\"JDK 性能监控与故障处理工具\"></a>JDK 性能监控与故障处理工具</h5><p>jdk 中自带的用于监视虚拟机和故障处理工具</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>jps</td>\n<td>JVM 进程状态工具（JVM Process Status Tool），用于显示目标系统上 JVM 的 Java 进程信息</td>\n</tr>\n<tr>\n<td>jstat</td>\n<td>JVM 统计监测工具（JVM Statistics Monitoring Tool），用于监控并显示 JVM 性能统计信息</td>\n</tr>\n<tr>\n<td>jinfo</td>\n<td>Java 配置信息工具（Java Configuration Information），用于打印指定 Java 进程，核心文件或远程调试服务器的配置信息。</td>\n</tr>\n<tr>\n<td>jhat</td>\n<td>Java 堆分析工具（Java Heap Analysis Tool），用于分析 Java 堆内存中的对象信息</td>\n</tr>\n<tr>\n<td>jmap</td>\n<td>Java 内存映射工具（Java Memory Map），用于打印指定 Java 进程，核心文件或远程调试服务器共享对象内存映射或堆内存细节</td>\n</tr>\n<tr>\n<td>jstack</td>\n<td>Java 堆栈跟踪工具，主要用于打印指定 Java 进程，核心文件或远程调试服务器的 Java 线程的堆栈跟踪信息</td>\n</tr>\n<tr>\n<td>jmc</td>\n<td>Java 任务控制工具（Java Misson Control），主要用于 JVM 的生产时间监测，分析，诊断</td>\n</tr>\n<tr>\n<td>jvisualvm</td>\n<td>JVM 监测，故障排除，分析工具，主要以图形化界面的方式梯控与指定虚拟机的 Java 应用程序的详细信息</td>\n</tr>\n<tr>\n<td>jconsole</td>\n<td>图形化用户界面监控工具，主要用于监测并显示运行于 Java 平台上的应用程序的性能和资源占用等信息</td>\n</tr>\n</tbody></table>\n<h6 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h6><ol>\n<li>功能</li>\n</ol>\n<blockquote>\n<p>显示正在运行的虚拟机进程</p>\n</blockquote>\n<ol start=\"2\">\n<li>参数</li>\n</ol>\n<blockquote>\n<p>-q    只显示 LVMID，省略主类信息（LVMID: 本地虚拟机进程唯一编号）<br>-l    显示虚拟机启动进程时传递给 main() 的参数<br>-m    显示类全面，如果是 jar 包显示 jar 路径<br>-v    显示虚拟机启动时候的 JVM 参数<br>3. 用法</p>\n</blockquote>\n<blockquote>\n<p>jps -l</p>\n</blockquote>\n<h6 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h6><ol>\n<li><p>功能</p>\n<blockquote>\n<p>显示本地或者远程虚拟机进程中的类装载，内存，垃圾收集，JIT 编译等运行数据，是定位虚拟机性能问题的首选工具。</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n</li>\n</ol>\n<blockquote>\n<p>-class：类加载，卸载数量，总空间及类装载所耗费时间<br>-compiler：显示 JIT 编译器编译过的方法，耗时等信息<br>-gc：统计 Java 堆，包括 Eden,Survior,老年代，永久代的容量，已用空间，GC时间等信息。<br>-gccapacity：显示 Java 堆各个区域使用到的最大，最小空间<br>-gcutil：显示已使用空间占总空间的百分比<br>-gccause：垃圾收集统计概述，和 -gcutil 相同，附件最近两次垃圾回收时间的原因<br>-gcnew：新生代行为统计<br>-gcnewcapacity：兴盛带使用到的最大，最小空间统计<br>-gcold：统计老年代 GC 状况<br>-gcoldcapacity：年老代行为统计，主要关注使用最大，最小空间<br>-gcpermcapacity：显示永久代使用到的最大，最小空间（-gcmetacapacity）<br>printcompilation：显示已经被 JIT 编译的方法</p>\n</blockquote>\n<ol start=\"3\">\n<li>用法</li>\n</ol>\n<blockquote>\n<p>jstat -gccause vmid  [时间间隔/毫秒]</p>\n</blockquote>\n<h6 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h6><ol>\n<li><p>功能</p>\n<blockquote>\n<p>可以用来查看正在运行的 Java 应用程序的扩展参数，甚至支持在运行时，修改部分参数</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n</li>\n</ol>\n<blockquote>\n<p>-flag <name> pid:打印指定 JVM 的参数值。<br>-flag [+|-]<name> pid：设置指定 JVM 参数值<br>-flag <name> =<value> pid :设置指定 JVM 参数值</value></name></name></name></p>\n</blockquote>\n<ol start=\"3\">\n<li>用法</li>\n</ol>\n<blockquote>\n<p>jinfo -flag +PrintGC pid<br>jinfo -flag +PrintGCDetails pid<br>jinfo -flag +PrintGCTimestamp pid</p>\n</blockquote>\n<blockquote>\n<p>jinfo -flag -PrintGC pid<br>jinfo -flag -PrintGCDetails pid<br>jinfo -flag -PrintGCTimestamp pid</p>\n</blockquote>\n<h6 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h6><ol>\n<li>功能</li>\n</ol>\n<blockquote>\n<p>用于生产 heap dump 文件，如果不适用这个命令，还可以使用 -XX:+HeapDumpOnOutOfMemoryError 参数来让虚拟机出现 OOM 的时候自动生产 dump 文件。jmap 不仅能生成 dump 文件，还可以查询 finalize 执行队列，Java 堆和永久带的详细信息，如当前使用率，当前使用的是那种收集器。</p>\n</blockquote>\n<ol start=\"2\">\n<li>参数</li>\n</ol>\n<blockquote>\n<p>-dump：生成 Java 堆快照。格式：-dump:[live,]format=b,file=<filename>,live 为是否只生成存活的对象<br>-histo：显示堆中对象的统计信息，包括类，有都少个实例，合计容量等<br>-permstat：显示永久代内存状态。在 Linux 下有效<br>-heap：显示堆详细信息，如使用哪种回收器，参数配置，分代状况等。在 Linux 下有效<br>-finalizerinfo：显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法对象。 在 Linux 下有效。<br>-F：当虚拟机进程多 -dump 没有响应时，可以使用这个选项强制生成 dump 快照。在 Linux 下有效。</filename></p>\n</blockquote>\n<ol start=\"3\">\n<li>用法<blockquote>\n<p>jmap -dump vmid</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h6><ol>\n<li><p>功能</p>\n<blockquote>\n<p>用于生成虚拟机当前时刻的线程快照，一边可以进一步定位线程出现长时间停顿原因，如线程间死锁，死循环，清酒外部资源导致的长时间等待等。</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n</li>\n</ol>\n<blockquote>\n<p>-F：输出请求不被响应时，强制输出线程堆栈信息<br>-l：除堆栈信息外，附加显示关于锁 的信息<br>-m：如果涉及本地方法调用，则显示C/C++ 的堆栈</p>\n</blockquote>\n<ol start=\"3\">\n<li>用法</li>\n</ol>\n<blockquote>\n<p>jstack -l vmid<br>查看堆情况：jmap -heap pid </p>\n</blockquote>\n<hr>\n<center>很平凡，很认真</center>","site":{"data":{}},"excerpt":"<p><img src=\"/2019/08/04/jvm-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/load-class.png\" alt=\"photo by https://unsplash.com/photos/ISVm7Rzhy8s\"></p>\n<p>关于 JVM 涉及的知识比较深，并且比较难理解。每次看到不懂的地方，我习惯了解之后记下来。相信了解多了也就会变成自己的知识了。今天周六，准备换地方和朋友一起合租住，想想还是美滋滋。</p>","more":"<h4 id=\"类生命周期\"><a href=\"#类生命周期\" class=\"headerlink\" title=\"类生命周期\"></a>类生命周期</h4><p>一个静态的类从被加载到内存，变成动态类，在到被卸载为止，它的生命周期是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">加载--&gt; 链接--&gt; 初始化--&gt; 使用--&gt; 卸载</span><br><span class=\"line\"></span><br><span class=\"line\">链接包含：</span><br><span class=\"line\">验证--&gt; 准备--&gt; 解析</span><br></pre></td></tr></table></figure>\n<p>类的加载必须按照这个过程来加载，除了解析阶段，有可能发生在初始化阶段之后。</p>\n<h4 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h4><p>JDK 包含类 3 中类加载器。分别是 BootStrap ClassLoader 启动类加载器，Extension ClassLoader 扩展类加载器和 Application ClassLoader 应用程序类加载器，启动类类加载器是用 C++ 实现的，作为 JVM 的一部分，而其他类加载器是用 Java 来实现的，都继承自 java.lang.ClassLoader。</p>\n<h5 id=\"双亲委任\"><a href=\"#双亲委任\" class=\"headerlink\" title=\"双亲委任\"></a>双亲委任</h5><h6 id=\"类加载器层级\"><a href=\"#类加载器层级\" class=\"headerlink\" title=\"类加载器层级\"></a>类加载器层级</h6><p>自定义类加载器 &gt; 应用程序类加载器 &gt; 扩展类加载器 &gt; 启动类加载器</p>\n<p>除了启动类加载器之外，每个类都有父类加载器。</p>\n<p>双亲委任大致可以理解为：当一个加载器加载一个类时，首先交给它的父类加载器加载此类路径下的类，如果父类找不到，在交给它自己的父类进行加载，如果找到了，则加载此类，如果没有找到，则会告知子类信息，子类才会尝试自己加载。也就是说，如果想自己写一个 <code>java.lang.String</code> 类来代替 jdk 本身的 <code>String</code> 类是不可以的，就算自己写了类加载器也是不能被加载成功的。</p>\n<h5 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h5><p>简单来说，运行时数据区就是 Java 程序运行时的数据在内存中的存放空间。主要包含 方法区、堆、虚拟机栈、本地方法栈、程序计数器。</p>\n<p>其中方法区和堆是所有线程共享的，而虚拟机栈、本地方法栈和程序计数器是线程私有的。</p>\n<h6 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h6><p> <code>.java</code> 文件被编译为  <code>.class</code> 文件后，被类加载器加载到内存需要存放到一个内存区域，这个区域就是方法区，方法区主要存放一些不经常改变的数据，常量，静态变量等都存放在这个区域。就像数据表的建表语句，规定了这张表就应该有哪些属性，这些属性应该是什么类型。当我们 new 一个对象时，就像给这张表添加一条数据，内容可以不一样，当时必须要遵循这些属性的格式。当方法区没有足够的空间时会抛 OutOfMemoryError 异常。</p>\n<h6 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h6><p>堆是 Java 虚拟机管理的内存中最大的一块，这块区域被所有线程共享，这块区域主要用来存放对象，在内存不足的情况下会抛出 OutOfMemoryError 异常。</p>\n<blockquote>\n<p>堆是所有线程共享的，用来存放共有的资源</p>\n</blockquote>\n<h6 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h6><p>这块区域主要记录当前线程的运行指令的记录。在 cpu 发生线程切换时，程序计数器可以记录当前线程执行的位置，等切回来时可以正确执行。程序计数器是线程私有的，每个线程都拥有一个自己的计数器。</p>\n<h6 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h6><p>每当一个线程被启动时，Java 虚拟机会创建一个 Java 栈，栈的单位为栈帧，栈可以分为基本类型变量区，执行环境上下文，操作指令几部分。栈的数据是当前栈私有的，其他栈不能访问。</p>\n<blockquote>\n<p>栈是线程私有的，简单来说就是用来执行逻辑的地方</p>\n</blockquote>\n<h6 id=\"JIT\"><a href=\"#JIT\" class=\"headerlink\" title=\"JIT\"></a>JIT</h6><blockquote>\n<p>即时编译，指将一些经常使用的字节码（循环等） 编译成机器本身的字节码来提高运行速度。</p>\n</blockquote>\n<h6 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toWork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;how interesting&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.toWork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里大致描述下 jvm 执行流程：</p>\n<ol>\n<li>首先在方法区寻找 User 类信息。</li>\n<li>如果没有找到的话，通过类加载器加载 User 类到方法区。</li>\n<li>在堆上 new 一个User 实例，并把此实例的引用添加到主线程的调用栈中。</li>\n<li>执行 user.work() 时，jvm 先根据 user 引用找到堆上对应的对象</li>\n<li>根据堆上实例对象持有的方法区引用，获取到方法区 User 类信息，获取到 work() 方法的字节码，执行此方法的代码。</li>\n</ol>\n<h4 id=\"Java-垃圾回收\"><a href=\"#Java-垃圾回收\" class=\"headerlink\" title=\"Java 垃圾回收\"></a>Java 垃圾回收</h4><h5 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h5><ol>\n<li>标记-清除</li>\n</ol>\n<p>顾名思义，先标记在清除，第一个阶段，先标记需要清除的对象，在讲它们全部清除。这种算法存在 2 种不足，标记和清除的效率都不是很高，而且标记和清除之后很容易产生大量的不连续空间碎片。</p>\n<ol start=\"2\">\n<li>复制算法</li>\n</ol>\n<p>复制算法会把内存分成2块，一块真正投入使用，当这块内存空间不足时，将还在存活的对象复制到另外一块内存中。标记清除算法最大的缺点是回收之后会产生大量空间碎片，而复制算法则不。但是这样在真正使用时只能使用一般的内存，对内存的使用率很低。</p>\n<ol start=\"3\">\n<li>标记整理算法</li>\n</ol>\n<p>标记整理算法也是有2个阶段，先将还在存活的对象标记出来，然后将存活的对象复制到一端连续的空间，然后直接将边缘外的空间释放掉。</p>\n<h5 id=\"jvm-参数\"><a href=\"#jvm-参数\" class=\"headerlink\" title=\"jvm 参数\"></a>jvm 参数</h5><ol>\n<li>-Xms</li>\n</ol>\n<blockquote>\n<p>设置堆的最小空间大小</p>\n</blockquote>\n<ol start=\"2\">\n<li>-Xmx</li>\n</ol>\n<blockquote>\n<p>设置堆的最大空间大小</p>\n</blockquote>\n<ol start=\"3\">\n<li>-Xss</li>\n</ol>\n<blockquote>\n<p>设置每个线程栈大小</p>\n</blockquote>\n<ol start=\"4\">\n<li>-XX:NewSize </li>\n</ol>\n<blockquote>\n<p>设置新生代最小空间大小</p>\n</blockquote>\n<ol start=\"5\">\n<li>-XX:MaxNewSize</li>\n</ol>\n<blockquote>\n<p>设置新生代最大空间大小</p>\n</blockquote>\n<ol start=\"6\">\n<li>-XX:PermSize</li>\n</ol>\n<blockquote>\n<p>设置永久代大小</p>\n</blockquote>\n<ol start=\"7\">\n<li>-XX:MaxPermSize</li>\n</ol>\n<blockquote>\n<p>设置永久代最大空间大小</p>\n</blockquote>\n<p><strong>老年代空间大小=堆空间大小-年轻代最大空间大小</strong></p>\n<h5 id=\"垃圾回收器\"><a href=\"#垃圾回收器\" class=\"headerlink\" title=\"垃圾回收器\"></a>垃圾回收器</h5><p>使用指定的垃圾回收器</p>\n<blockquote>\n<p>-XX:+Use&lt;垃圾回收器名字&gt;GC<br>-XX:+UseSerialGC</p>\n</blockquote>\n<h6 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseSerialGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>它不仅在收集时使用单线程来完成工作，并且在新生代和老年代收集时都会出现 STW (stop the world)现象。</p>\n</blockquote>\n</li>\n<li><p>适用场景</p>\n<blockquote>\n<p>桌面应用</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"ParNew-ParalleNew\"><a href=\"#ParNew-ParalleNew\" class=\"headerlink\" title=\"ParNew (ParalleNew)\"></a>ParNew (ParalleNew)</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseParNewGc</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>只针对新生代使用多线程，老年代还是单线程，收集过程中会出现 STW</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n<blockquote>\n<p>server 新生代收集器</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"Parallel-Scavenge-PS\"><a href=\"#Parallel-Scavenge-PS\" class=\"headerlink\" title=\"Parallel Scavenge(PS)\"></a>Parallel Scavenge(PS)</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseParallelGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>可控制吞吐量，所谓吞吐量 = 运行用户代码时间/（运行用户代码时间 + 垃圾收集时间）<br>高吞吐量可以提高 cpu 利用率，提高运算速度。</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n<blockquote>\n<p>计算量比较小，用户交互不多的场景</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n<blockquote>\n<p>-XX:MaxGCPauseMilis          最大垃圾收集停顿时间（大于0毫秒）<br>-XX:GCTimeRatio              吞吐量大小（0-100%）<br>-XX:+UseAdaptiveSizePolicy   内存调优委托虚拟机管理</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"Parallel-Old\"><a href=\"#Parallel-Old\" class=\"headerlink\" title=\"Parallel Old\"></a>Parallel Old</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:+UseParallelOldGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>Parallel Scavenge 收集器老年代收集版本。多线程完成工作，采用了“标记-整理” 算法。</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n</li>\n</ol>\n<blockquote>\n<p>桌面应用场景</p>\n</blockquote>\n<h6 id=\"Concurrent-Mark-Sweep（CMS）\"><a href=\"#Concurrent-Mark-Sweep（CMS）\" class=\"headerlink\" title=\"Concurrent Mark Sweep（CMS）\"></a>Concurrent Mark Sweep（CMS）</h6><ol>\n<li><p>配置</p>\n<blockquote>\n<p>-XX:UseConcMarkSweepGC</p>\n</blockquote>\n</li>\n<li><p>工作方式</p>\n<blockquote>\n<p>基于“标记-清除”算法，在整个过程中都是并发进行的，以获取最短回收停顿时间为目标，整个过程分为4步：初始标记，并发标记，重新标记，并发清除。</p>\n</blockquote>\n</li>\n<li><p>使用场景</p>\n<blockquote>\n<p>互联网应用服务端</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"G1\"><a href=\"#G1\" class=\"headerlink\" title=\"G1\"></a>G1</h6><ol>\n<li>配置<blockquote>\n<p>-XX:+UseG1GC</p>\n</blockquote>\n</li>\n<li>工作方式</li>\n</ol>\n<blockquote>\n<p>G1算法将堆划分为若干和区域，但它仍然属于分代收集器，这些区域一部分包含新生代，新生代垃圾收集依然采用暂停所有线程的方式，将存货对象拷贝到老年代或者 Survivor 空间。<br>老年代也分成很多区域，G1 收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作，这就意味着在正常处理过程中，G1完成了堆的压缩（至少是部分堆的压缩） ，这样就不会存在 CMS 内存碎片问题了。<br>G1 有两种 GC 模式（都是 STW）<br>Yong GC 和 Mixed GC</p>\n</blockquote>\n<h5 id=\"JVM-内存分配与回收策略\"><a href=\"#JVM-内存分配与回收策略\" class=\"headerlink\" title=\"JVM 内存分配与回收策略\"></a>JVM 内存分配与回收策略</h5><ol>\n<li><p>大对象直接进入老年代</p>\n<blockquote>\n<p>大对象是指需要大量连续内存空间的 Java 对象，典型的是很长的字符串或者大数组。<br>-XX:PretenureSizeThreshold 可以使大于这个值的对象直接在老年代分配。这样会避免在 Eden 区以及两个 Survivor 区之间发生大量内存复制。</p>\n</blockquote>\n</li>\n<li><p>长期存货的对象将进入老年代</p>\n<blockquote>\n<p>对象在 Survivor 区中撑过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定值（默认 15），就会将它复制到老年代中。</p>\n</blockquote>\n</li>\n<li><p>动态对象年龄判定</p>\n<blockquote>\n<p>如果在 Survivor 空间中相同年龄所有对象的大小总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，不需要等到 MaxTenuringThreshold 中要求的年龄。</p>\n</blockquote>\n</li>\n<li><p>空间分配担保</p>\n<blockquote>\n<p>HandlePromotionFailure 检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于该值，将尝试进行一次 Minor GC，如果小于，或者设置不允许冒险，这是就会改为进行一次 FullGC.</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"字节码执行引擎\"><a href=\"#字节码执行引擎\" class=\"headerlink\" title=\"字节码执行引擎\"></a>字节码执行引擎</h5><ol>\n<li>输入字节码文件</li>\n<li>处理过程是字节码解析的过程</li>\n<li>输出的是执行结果</li>\n</ol>\n<p>虚拟机的执行引擎则是由自己实现的，因此可以自行指定指令集与执行引擎的结构体系，并且能够执行哪些不被硬件直接支持的指令集格式。</p>\n<h6 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h6><p>每个方法从调用开始至执行完成都会对应从入栈到出栈的过程，栈帧中包含：</p>\n<ol>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>返回地址</li>\n<li>…</li>\n</ol>\n<p>一个栈帧需要分配多少内存，在编译的时候已经确定，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p>\n<p>局部变量表</p>\n<p>局部变量表是一组变量存储空间，用于存放方法参数和方法内部定义的局部变量，在 Java 程序编译为 class 文件时，就在 code 属性的 max_local 数据项中确定了该方法所需要分配的局部变量表最大容量。</p>\n<blockquote>\n<p>一个 Slot 可以存放一个 32 位以内的数据类型，对于 64 位的数据类型，虚拟机会以高位对齐的方式为其分配两个连续的 Slot 空间。</p>\n</blockquote>\n<p>操作数栈</p>\n<p>操作数栈是一个后入先出栈，和局部变量一样，操作数栈最大深度也在编译的时候写入到 code 属性的 max_stacks 数据项中。</p>\n<p>方法返回地址</p>\n<p>当一个方法开始执行后，只有两种方式可以推出这个方法。</p>\n<ol>\n<li>执行引擎遇到任意一个方法返回的字节码指令。</li>\n<li>在方法执行过程中遇到了异常，并没有在方法体内得到处理。</li>\n</ol>\n<p>方法退出的过程实际上就是等同于把当前栈帧出栈</p>\n<ol>\n<li>恢复上层方法的局部变量表和操作数栈</li>\n<li>把返回值（若存在）压入调用者栈帧的操作数栈中</li>\n<li>调正 PC 计数器的值以指向方法调用指令后面的一条指令等</li>\n</ol>\n<p>方法调用</p>\n<p>方法调用并不等于方法执行，该阶段唯一的任务就是确定哪一个方法，方法在实际运行时内存中的入口地址需要在类加载期间，甚至到运行期间才能确定。</p>\n<p>虚方法</p>\n<p>可以被复写的方法都可以称作虚方法，虚方法不需要做特殊声明，可以理解为除了 static，final，private 修饰的都是虚方法。</p>\n<p>虚拟机动态分派机制</p>\n<p>虚方法表（vtable，invokeinterface 执行时调用到 itable）使用虚方法表索引来代替元数据查找来提高性能，虚方法表中存放着各个方法的实际入口地址。</p>\n<ol>\n<li>如果方法在子类中没有被重写，那子类虚方法表里面的地址入口和父类相同方法的地址入口是一致的，都是指向父类的实现入口。</li>\n<li>如果子类中重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。</li>\n</ol>\n<h5 id=\"JDK-性能监控与故障处理工具\"><a href=\"#JDK-性能监控与故障处理工具\" class=\"headerlink\" title=\"JDK 性能监控与故障处理工具\"></a>JDK 性能监控与故障处理工具</h5><p>jdk 中自带的用于监视虚拟机和故障处理工具</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>jps</td>\n<td>JVM 进程状态工具（JVM Process Status Tool），用于显示目标系统上 JVM 的 Java 进程信息</td>\n</tr>\n<tr>\n<td>jstat</td>\n<td>JVM 统计监测工具（JVM Statistics Monitoring Tool），用于监控并显示 JVM 性能统计信息</td>\n</tr>\n<tr>\n<td>jinfo</td>\n<td>Java 配置信息工具（Java Configuration Information），用于打印指定 Java 进程，核心文件或远程调试服务器的配置信息。</td>\n</tr>\n<tr>\n<td>jhat</td>\n<td>Java 堆分析工具（Java Heap Analysis Tool），用于分析 Java 堆内存中的对象信息</td>\n</tr>\n<tr>\n<td>jmap</td>\n<td>Java 内存映射工具（Java Memory Map），用于打印指定 Java 进程，核心文件或远程调试服务器共享对象内存映射或堆内存细节</td>\n</tr>\n<tr>\n<td>jstack</td>\n<td>Java 堆栈跟踪工具，主要用于打印指定 Java 进程，核心文件或远程调试服务器的 Java 线程的堆栈跟踪信息</td>\n</tr>\n<tr>\n<td>jmc</td>\n<td>Java 任务控制工具（Java Misson Control），主要用于 JVM 的生产时间监测，分析，诊断</td>\n</tr>\n<tr>\n<td>jvisualvm</td>\n<td>JVM 监测，故障排除，分析工具，主要以图形化界面的方式梯控与指定虚拟机的 Java 应用程序的详细信息</td>\n</tr>\n<tr>\n<td>jconsole</td>\n<td>图形化用户界面监控工具，主要用于监测并显示运行于 Java 平台上的应用程序的性能和资源占用等信息</td>\n</tr>\n</tbody></table>\n<h6 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h6><ol>\n<li>功能</li>\n</ol>\n<blockquote>\n<p>显示正在运行的虚拟机进程</p>\n</blockquote>\n<ol start=\"2\">\n<li>参数</li>\n</ol>\n<blockquote>\n<p>-q    只显示 LVMID，省略主类信息（LVMID: 本地虚拟机进程唯一编号）<br>-l    显示虚拟机启动进程时传递给 main() 的参数<br>-m    显示类全面，如果是 jar 包显示 jar 路径<br>-v    显示虚拟机启动时候的 JVM 参数<br>3. 用法</p>\n</blockquote>\n<blockquote>\n<p>jps -l</p>\n</blockquote>\n<h6 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h6><ol>\n<li><p>功能</p>\n<blockquote>\n<p>显示本地或者远程虚拟机进程中的类装载，内存，垃圾收集，JIT 编译等运行数据，是定位虚拟机性能问题的首选工具。</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n</li>\n</ol>\n<blockquote>\n<p>-class：类加载，卸载数量，总空间及类装载所耗费时间<br>-compiler：显示 JIT 编译器编译过的方法，耗时等信息<br>-gc：统计 Java 堆，包括 Eden,Survior,老年代，永久代的容量，已用空间，GC时间等信息。<br>-gccapacity：显示 Java 堆各个区域使用到的最大，最小空间<br>-gcutil：显示已使用空间占总空间的百分比<br>-gccause：垃圾收集统计概述，和 -gcutil 相同，附件最近两次垃圾回收时间的原因<br>-gcnew：新生代行为统计<br>-gcnewcapacity：兴盛带使用到的最大，最小空间统计<br>-gcold：统计老年代 GC 状况<br>-gcoldcapacity：年老代行为统计，主要关注使用最大，最小空间<br>-gcpermcapacity：显示永久代使用到的最大，最小空间（-gcmetacapacity）<br>printcompilation：显示已经被 JIT 编译的方法</p>\n</blockquote>\n<ol start=\"3\">\n<li>用法</li>\n</ol>\n<blockquote>\n<p>jstat -gccause vmid  [时间间隔/毫秒]</p>\n</blockquote>\n<h6 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h6><ol>\n<li><p>功能</p>\n<blockquote>\n<p>可以用来查看正在运行的 Java 应用程序的扩展参数，甚至支持在运行时，修改部分参数</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n</li>\n</ol>\n<blockquote>\n<p>-flag <name> pid:打印指定 JVM 的参数值。<br>-flag [+|-]<name> pid：设置指定 JVM 参数值<br>-flag <name> =<value> pid :设置指定 JVM 参数值</value></name></name></name></p>\n</blockquote>\n<ol start=\"3\">\n<li>用法</li>\n</ol>\n<blockquote>\n<p>jinfo -flag +PrintGC pid<br>jinfo -flag +PrintGCDetails pid<br>jinfo -flag +PrintGCTimestamp pid</p>\n</blockquote>\n<blockquote>\n<p>jinfo -flag -PrintGC pid<br>jinfo -flag -PrintGCDetails pid<br>jinfo -flag -PrintGCTimestamp pid</p>\n</blockquote>\n<h6 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h6><ol>\n<li>功能</li>\n</ol>\n<blockquote>\n<p>用于生产 heap dump 文件，如果不适用这个命令，还可以使用 -XX:+HeapDumpOnOutOfMemoryError 参数来让虚拟机出现 OOM 的时候自动生产 dump 文件。jmap 不仅能生成 dump 文件，还可以查询 finalize 执行队列，Java 堆和永久带的详细信息，如当前使用率，当前使用的是那种收集器。</p>\n</blockquote>\n<ol start=\"2\">\n<li>参数</li>\n</ol>\n<blockquote>\n<p>-dump：生成 Java 堆快照。格式：-dump:[live,]format=b,file=<filename>,live 为是否只生成存活的对象<br>-histo：显示堆中对象的统计信息，包括类，有都少个实例，合计容量等<br>-permstat：显示永久代内存状态。在 Linux 下有效<br>-heap：显示堆详细信息，如使用哪种回收器，参数配置，分代状况等。在 Linux 下有效<br>-finalizerinfo：显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法对象。 在 Linux 下有效。<br>-F：当虚拟机进程多 -dump 没有响应时，可以使用这个选项强制生成 dump 快照。在 Linux 下有效。</filename></p>\n</blockquote>\n<ol start=\"3\">\n<li>用法<blockquote>\n<p>jmap -dump vmid</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h6><ol>\n<li><p>功能</p>\n<blockquote>\n<p>用于生成虚拟机当前时刻的线程快照，一边可以进一步定位线程出现长时间停顿原因，如线程间死锁，死循环，清酒外部资源导致的长时间等待等。</p>\n</blockquote>\n</li>\n<li><p>参数</p>\n</li>\n</ol>\n<blockquote>\n<p>-F：输出请求不被响应时，强制输出线程堆栈信息<br>-l：除堆栈信息外，附加显示关于锁 的信息<br>-m：如果涉及本地方法调用，则显示C/C++ 的堆栈</p>\n</blockquote>\n<ol start=\"3\">\n<li>用法</li>\n</ol>\n<blockquote>\n<p>jstack -l vmid<br>查看堆情况：jmap -heap pid </p>\n</blockquote>\n<hr>\n<center>很平凡，很认真</center>"},{"title":"redis安装和使用","date":"2019-11-19T16:53:22.000Z","_content":"\n![Photo by Richs on wallhaven.cc](/redis.png)\n\n在互联网项目中，缓存中间件是一个必不可少的组件。由于磁盘 IO 和 内存 IO 在性能上的差异，通常一些热点数据都会放在缓存中，既提高了用户访问速度，缓存也在很大程度上减轻了数据库的压力，提高了系统整体的吞吐量，redis 是很成熟的一款 NoSql 数据库，是目前使用最多的缓存中间件，当然它的作用不仅仅可以用来做缓存，可以做分布式锁，简单消息队列等。性能稳定且高效，是居家必备用品。┑(￣▽ ￣)┍ \n\n<!--more-->\n\n##### 安装\n\n1. 解压\n\n目标路径\n> /usr/local\n```bash\ntar -zxvf ./redis-4.0.6.tar.gz \n```\n\nredis 压缩包是一个源码包，需要编译安装，[redis官网](https://redis.io/)有下载地址\n\n```bash\n# 安装依赖\nyum -y install gcc gcc-c++ kernel-devel\n# 编译\nmake\n# 安装到指定目录\nmake PERFIX=/usr/local/redis  install\n```\n\n> 若在编译过程中出现错，可以尝试删除掉解压的 redis 包重新解压在编译一次。\n\n2. 启动\n\n将编译包中的 redis.conf 和 sentinel.conf 文件复制到 redis/conf 目录下，方便配置\n\n```bash\n# 指定配置文件启动\nredis/bin/redis-server redis/conf/redis.conf\n```\n\n启动之后会看到 redis 的logo:\n\n```\n               _._                                                  \n           _.-``__ ''-._                                             \n      _.-``    `.  `_.  ''-._           Redis 4.0.6 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \n (    '      ,       .-`  | `,    )     Running in standalone mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\n |    `-._   `._    /     _.-'    |     PID: 24482\n  `-._    `-._  `-./  _.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |           http://redis.io        \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n      `-._    `-.__.-'    _.-'                                   \n          `-._        _.-'                                \n              `-.__.-'                                   \n                    \n```\n\n使用 redis-cli 连接测试\n\n```bash\n# 客户端连接\nredis/bin/redis-cli\n```\n测试\n```bash\n127.0.0.1:6379> ping\nPONG\n```\n完成以上步骤，redis 就使用默认配置启动成功了。\n\n###### redis 可视化工具\n\n推荐一款免费的 windows 下 redis 可视化工具[Anotherredisdesktopmanager](http://electronjs.org/apps/anotherredisdesktopmanager)\n\n##### 参数\n\nredis 在配置文件中提供了很多可供修改的参数，在实际使用中需要对这些参数进行配置在使用。\n\n###### bind\n绑定地址，0.0.0.0(默认) 允许任何互联网上的机器访问，这种配置方式很不安全，127.0.0.1 只允许本机客户端连接，这种是最安全的。配置多个主机访问为 `bind 127.0.0.1 192.268.31.108`\n```bash\nbind 127.0.0.1\n```\n\n###### protected-mode\n\n保护模式，可选参数 yes/on，yes 为开启状态。在开启状态时，当没有指定 bind 等参数时，默认 `bind 127.0.0.1`，如果设置为 no 时，则默认指定 bind 为 `bind 0.0.0.0`\n\n```\nprotected-mode\n```\n\n###### port\n\n访问端口，默认 6379\n\n```bash\nport 6379\n```\n\n###### timeout\n\n连接断开时间（秒），当客户端连续空闲指定 timeout 时间后，就断开该连接，为 0 时为禁止该功能。\n\n```bash\n\ntimeout 0\n```\n\n###### daemonize \n\n守护进程模式，可选参数 yes/on，yes 时 redis 服务以守护进程在后台执行\n\n```bash\ndaemonize yes\n```\n###### pidfile\n\n当指定守护进程方式启动时，会在 pidfile 参数指定的目录下生成 PID 文件\n\n```bash\npidfile /var/run/redis_6379.pid\n```\n\n###### databases\n\nredis 数据库数量，默认 16\n\n```bash\ndatabases 16\n```\n###### requirepass\n在客户端连接后设置密码\n```bash\n# 设置\nconfig set requirepass \"password\"\n# 验证\nauth \"password\"\n```\n\n##### redis 数据结构\n\nredis 支持很多数据结构，String，List，Hash，Set，ZSet等，简单理解它每种数据结构，都是它的 value 对应的数据结构。\n\n###### String\n\n1. 命令\n\n**GET**,**SET**\n存入/获取字符串键值对 \n```bash\nSET key value\nGET key  \n```\n**MSET**,**MGET**\n批量存入/获取字符串键值对 \n```bash\nMSET key value [key value]\nMGET key [key]\n```\n将用户对象使用批量字符串的方式保存在 redis\n\n| userId     |   userName   |  age |  \n| ---- | ---- | ---- |  \n|1001| zhangsan |20 | \n|1002|lisi|21|\n\n```bash\nMSET user:1001:name zhangsan user:1001:age 20\n127.0.0.1:6379> MGET user:1001:name user:1001:age\n1) \"zhangsan\"\n2) \"20\"\n```\n\n以上命令将用户表记录按照批量字符的方式设置到了redis，如果将对象序列化成 json 格式保存一般字符串格式，这样在用户对象年龄或者其他单个字段有改变时会涉及到 JSON 格式转化设置之后在保存的操作，加重了代码量，代码可读性降低。如果用这种方式保存的话可以直接进行针对字段的修改。\n```bash\n127.0.0.1:6379> MSET user:1001:name zhangsanMOD\nOK\n127.0.0.1:6379> MGET user:1001:name\n1) \"zhangsanMOD\"\n127.0.0.1:6379>\n```\n**SETNX**\n存入不存在的键值对 \n当设置的 key 存在时，则设置不成功，当不存在时，设置成功。因为 redis 是单线程模型，此命令可以用来实现**分布式锁功能**\n```bash\n# 设置送出15001礼物价值1000元\nSETNX gift:15001 1000\n```\n**DEL**\n删除一个键值对 \n```bash\nDEL gift:15001\n```\n**INCR**\n计数器 \n这个命令可以很方便的对 key 的 value 加 1 操作，而且不用考虑并发等问题，在实际场景中**文章阅读量可以使用此功能来实现**\n```bash\n# 111111 文章对应的阅读量\nINCR article:readcount:111111\n```\n**INCRBY**\n增量添加 \n将 key 中储存的数字加上指定的增量值。\n```bash\n# 键不存在时初始化为 0 之后在加 50\nINCRBY gift:15001:count 50\n```\n\n2. 应用\n\n> 分布式锁功能简单实现\n> 文章阅读量\n> 分布式 session 保存，用于权限认证。\n\n###### Hash\n\n1. 命令\n\n**HSET**,**HGET**\n存储/获取键值对\n\nHash 结构的 key 对应的值类似于 Java 中的 HashMap 结构。\n```bash\nHSET key field value\nHGET key field\n```\n上面将用户信息用 `MSET` 以批量字符串的形式存储，现在将用户表中用户信息用 Hash 结构存储：\n\n| userId     |   userName   |  age |  \n| ---- | ---- | ---- |  \n|1001| zhangsan |20 | \n|1002|lisi|21|\n\n```bash\nHSET user 1001:name zhangsan\nHSET user 1001:age 20\n# 获取 key 中的属性对应的值\n127.0.0.1:6379> HGET user 1001:name\n\"zhangsan\"\n```\n**HMSET**,**HMGET**\n存储多个键值对（批量）\n```bash\nHMSET key field value [key field valye]\nHMGET key field [field]\n```\n使用批量的方式存储用户 `lisi` 的信息\n```bash\nHMSET user 1002:name lisi 1002:age 21\nHMGET user 1002:name 1002:age\n# 批量获取\n127.0.0.1:6379> HMGET user 1002:name 1002:age\n1) \"lisi\"\n2) \"21\"\n# 获取多个\n127.0.0.1:6379> HMGET user 1001:name 1001:age 1002:name 1002:age\n1) \"zhangsan\"\n2) \"20\"\n3) \"lisi\"\n4) \"21\"\n```\n**HSETNX**\n存储一个不存在的键值对 \n```bash\nHSETNX key field value\n```\n```bash\n127.0.0.1:6379> HSET gift 15000:count 1\n(integer) 1\n#第二次设置不成功\n127.0.0.1:6379> HSET gift 15000:count 1\n(integer) 0\n\n```\n**HDEL**\n删除键对应的属性 \n```bash\nHDEL key field [field]\n```\n```bash\nHDEL gift 15000:count\n# 删除之后重新设置成功\n127.0.0.1:6379> HSET gift 15000:count 1\n(integer) 1\n```\n**HLEN**\nHash 表大小\n```bash\nHLEN key\n```\n```bash\nHLEN user\n# 用户 Hash 表大小 4 \n127.0.0.1:6379> HLEN user\n(integer) 4\n```\n**HGETALL**\nHash 表所有的键值对 \n```bash\nHGETALL key\n```\n```bash\nHGETALL user\n# 用户表中所有键值对\n127.0.0.1:6379> HGETALL user\n1) \"1001:name\"\n2) \"zhangsan\"\n3) \"1001:age\"\n4) \"20\"\n5) \"1002:name\"\n6) \"lisi\"\n7) \"1002:age\"\n8) \"21\"\n```\n**HINCRBY**\nHash 表 key 中属性的键的值设置增量（increment）\n```bash\nHINCRBY key field increament\n```\n```bash\n# 用户 1001 年龄 +1\n127.0.0.1:6379> HINCRBY user 1001:age 1\n(integer) 21\n```\n\n2. 应用\n\n购物车\n```bash\n1. 用户 ID 为 key\n2. 商品 ID 为 field\n3. 商品数量为 value\n# 购物车操作\n1. 添加：                 HSET cart:1001 2001 1\n2. 增加数量：             HINCRBY cart:1001 2001 1\n3. 商品总数：             HLEN cart:1001\n4. 删除商品：             HDEL cart:1001 2001\n5. 获取购物车所有商品：    HGETALL cart:1001\n```\n> 1. 用户 1001 添加 了 1 个 2001 商品到购物车\n> 2. 用户 1001 又新增了 1 个商品 2001\n> 3. 用户 1001 购物车商品总数\n> 4. 用户 1001 删除购物车商品 2001 \n> 5. 用户 1001 获取购物车所有商品 \n\n\n###### List\nList 结构中 key 对应的 value 是一个链表结构，**实现常用数据结构**\n> Stack(栈) = LPUSH + LPOP -> FILO（先进后出）\n> Queue(队列) = LPUSH + RPOP \n> Blocking MQ(阻塞队列) = LPUSH + BRPOP 在阻塞队列中，LPUSH 一条数据之后，使用 BRPOP 获取数据，区别于 RPOP 的是，当 List 中没有数据时 BRPOP 会一直监听这个 List，有值被 push 进来它会立马获取\n```bash\n# 结构\n           LPUSH                   RPUSH\nkey  ---> |   a   |   b   |   c   |   d   |\n           LPOP                    RPOP\n```\n1. 命令\n\n**LPUSH**,**LPOP**\n插入/取出一个或者多个值插入列表头部（最左边） \n```bash\nLPUSH key value [value]\nLPOP key\n```\n将礼物按照分类存入列表中\n```bash\n# 普通礼物列表存入 4 个礼物\nLPUSH ordinary 4001 4002 4003 4004\nLPOP ordinary\n# 4001 在最右边，第一次取出最左边的 4004\n127.0.0.1:6379> LPOP ordinary\n\"4004\"\n127.0.0.1:6379> LPOP ordinary\n```\n**RPUSH**,**RPOP**\n插入/取出一个或者多个值插入列表头部（最右边） \n这个命令和上面的命令是相同的结果，只是取出的位置不一样。\n```bash\nRPUSH key value [value]\nRPOP key\n```\n**BLPOP**,**BRPOP**\n列表头/尾取出一个元素，如果没有则阻塞等待，timeout = 0 时一直阻塞等待（timeout/s） \n```bash\nBLPOP key [key] timeout\nBRPOP key [key] timeout\n```\n监听礼物列表是否有商品，有则在右边阻塞取出\n```bash\nLPUSH ordinary 4001 4002 4003 4004\n\n# 执行 BRPOP 每次取出一条，如果没有，则一直等待\n127.0.0.1:6379> BRPOP ordinary 0\n1) \"ordinary\"\n2) \"4001\"\n```\n等待时添加一个元素，等待中的 BRPOP 立马输出新添加的元素\n\n**LRANGE**\n获取指定 key 列表区间的元素 \n```bash\nLRANGE key start stop\n```\n获取 0-2 区间的值\n```bash\n127.0.0.1:6379> LPUSH ordinary 4001 4002 4003 4004\n(integer) 4\n# \n127.0.0.1:6379> LRANGE ordinary 0 2\n1) \"4004\"\n2) \"4003\"\n3) \"4002\"\n\n```\n\n2. 应用\n\n微信公众号的推送信息可以使用 List 结构，用户关注的公众号每推送一个消息，在用户对应的列表增加一个文章ID\n\n```bash\n# 用户 1001 有 5001，5002 两个推送文章消息\nLPUSH 1001:msg 5001,5002\n```\n\n###### Set\n\nSet 键值对中的值数据结构类似 Java 中 Set 集合中的 key 值结构，元素不能重复。\n\n1. 命令\n\n **SADD**,**SREM**\n添加/删除集合中元素，添加时如果存在则忽略\n\n```bash\nSADD key member [member]\nSREM key member\n```\n```bash\n# 用户 6001,6002 关注用户 1001\nSADD user:1001:fans 6001 6002\n# 用户 6002 取消关注用户 1001\nSREM user:1001:fans 6002\n```\n**SMEMBERS**\n获取集合所有元素 \n```bash\nSMEMBERS key\n```\n```bash\n# 用户 1001 粉丝\n127.0.0.1:6379> SMEMBERS user:1001:fans\n1) \"6001\"\n```\n**SISMEMBER**\n判断元素是否存在 \n```bash\nSISMEMBER key member\n```\n```bash\n# 判断 6002 是否在集合 user:1001:fans 中\n127.0.0.1:6379> SISMEMBER user:1001:fans 6002\n(integer) 0\n```\n\n**SCARD**\n获取集合元素个数 \n```bash\nSCARD key\n```\n```bash\n# 获取用户 1001 的粉丝数\n127.0.0.1:6379> SCARD user:1001:fans\n(integer) 1\n```\n**SRANDMEMBER**\n从集合随机获取 count 个元素，默认获取 1 个，元素不删除 \n```bash\nSRANDMEMBER key [count]\n```\n```bash\n# 给用户 1001 添加粉丝\nSADD user:1001:fans 6002 6003 6004 6005 6006\n# 随机获取 2 个粉丝 ID\n127.0.0.1:6379> SRANDMEMBER user:1001:fans 2\n1) \"6002\"\n2) \"6006\"\n# 查看用户 1001 的粉丝，刚刚查看的还在集合中\n127.0.0.1:6379> SMEMBERS user:1001:fans\n1) \"6001\"\n2) \"6002\"\n3) \"6003\"\n4) \"6004\"\n5) \"6005\"\n6) \"6006\"\n```\n\n**SPOP**\n从集合随机获取 count 个元素，默认获取 1 个，删除元素 \n```bash\nSPOP key [count]\n```\n```bash\n# 随机获取用户 1001 的 2 个粉丝\n127.0.0.1:6379> SPOP user:1001:fans 2\n1) \"6003\"\n2) \"6004\"\n# 查看用户 1001 的粉丝，刚刚取出的已经被移除\n127.0.0.1:6379> SMEMBERS user:1001:fans\n1) \"6001\"\n2) \"6002\"\n3) \"6005\"\n4) \"6006\"\n```\n2. 应用\n微信小程序抽奖活动\n> 1. 用户 1001,1002,1003,1004 参与活动 7001 ----> SADD act:7001 1001 1002 1003 1004\n> 2. 查看参与 7001 活动的全部用户 ----> SMEMBERS act:7001\n> 3. 随机抽奖 2 名用户 ----> SRANDMEMBER act:7001 2\n> 4. 抽取 1 等奖 1 名，2 等奖 2 名(去除一等奖用户) ----> SPOP act:7001 1 ,SPOP act:7001 2\n\n微信点赞，收藏，标签\n> 1. 用户 1002 点赞用户 1001 的朋友圈消息 8001 ----> SADD like:1001:8001 1002\n> 2. 取消点赞 ----> SREM like:1001:8001 1002\n> 3. 查看用户 1003 是否点赞 ----> SISMEMBER like:1001:8001 1003\n> 4. 获取点赞朋友列表 ----> SMEMBERS like:1001:8001\n> 5. 获取点赞用户数 ----> SCARD like:1001:8001\n\n3. Set 集合运算操作\n\n集合 set1:{a,b,e,f},set2:{c,d,e},set3:{a,b,e,g}\n```bash\n# 交集：多个集合中共有的元素\nset1 set2 set3 ----> {e}\n# 并集：去重多个集合中所有元素\nset1 set2 set3 ----> {a,b,c,d,e,f,g}\n# 差集：第一个集合和其他集合不一样的元素\nset1 set2 set3 ----> {f}\n```\nSet 中对应的集合运算\n**SINTER** \n交集运算\n```bash\nSINTER set1 set2 set3\n```\n**SUNION**\n并集运算\n```bash\nSUNION set1 set2 set3\n```\n**SDIFF**\n差集运算\n```bash\nSDIFF set1 set2 set3\n```\n4. 运算应用\n关注模型\n> 1. zhangsan/lisi 关注的人：zhangsan/lisi 粉丝 set 集合\n> 2. zhangsan 和 list 共同关注：集合求并集 SINTER zhangsan lisi\n> 3. 我关注的人也关注了他（wangwu）：遍历 zhangsan 关注列表用户是否关注 wangwu SISMEMBER\n> 4. 可能认识的人：求差集 SDIFF zhangsan lisi\n\n###### ZSet\n有序集合，且不允许有重复的元素，通过 score 对集合中元素排序\n**ZADD**,**ZREM**\n添加/移除集合中的元素\n```bash\nZADD key score member [score member]\nZREM key member [member]\n```\n通过热度值对直播房间排序\n```bash\n# 房间 1100 的热度值 90000\nZADD room:sort 90000 1100 80000 2200 70000 3300\n# 移除 3300 这个房间\nZREM room:sort 3300 \n```\n**ZCARD**\n获取有序集合的元素个数\n```bash\nZCARD key\n```\n```bash\n127.0.0.1:6379> ZCARD room:sort\n(integer) 2\n```\n**ZCOUNT**\n获取有序集合 [min,max] 区间 score 元素数量\n```bash\nZCOUNT key min max\n```\n```bash\n# 获取 热度在80000-85000 之间的房间\n127.0.0.1:6379> ZCOUNT room:sort 80000 85000\n(integer) 1\n```\n**ZINCRBY**\n有序集合中指定成员 score 增加 increment\n```bash\nZINCRBY key increment member\n```\n```bash\n# 1100 房间热度增加 1000\n127.0.0.1:6379> ZINCRBY room:sort 1000 1100\n\"91000\"\n```\n\n**ZRANGE**,**ZREVRANGE**\n有序集合 [start,stop] 区间元素，通过 score，递增/递减\nstart 和 stop 都是以 0 开始，0 表示第一个元素，1 表示第二个，以此类推\n负数下标 -1 表示倒数第一个元素，-2 表示倒数第二个元素，以此类推\n```bash\nZRANGE key start stop [WITHSCORES]\nZREVRANGE key start stop [WITHSCORES]\n```\n```bash\n# 递增排序 room:sort 下所有元素\n127.0.0.1:6379> ZRANGE room:sort 0 -1 WITHSCORES\n1) \"2200\"\n2) \"80000\"\n3) \"1100\"\n4) \"91000\"\n# 递减排序 room:sort 下所有元素\n127.0.0.1:6379> ZREVRANGE room:sort 0 -1 WITHSCORES\n1) \"1100\"\n2) \"91000\"\n3) \"2200\"\n4) \"80000\"\n```\n**ZUNIONSTORE**\n运算多个有序集合并集，并存储在新 key 中, `destination`新集合 key 值，`numkeys`合并的集合个数\n```bash\nZUNIONSTORE destination numkeys key [key]\n```\n```bash\n# 添加房间在线人数集合\nZADD room:onlinenum 800 3300 1000 4400\n# 合并房间在线人数集合和房间热度集合为房间信息集合 room:info\nZUNIONSTORE room:info 2 room:sort room:onlinenum\n```\n2. 应用\n各类排行榜实现\n\n> 1. 用户点击新闻 ----> ZINCRBY hotnews:20191125 1 学好redis\n> 2. 展示当日排行榜前十 ----> ZREVRANGE hotnews:20191125 0 10 WITHSORES\n> 3. 七日搜索榜统计 ----> ZUNIONSTROE hotnews:20191119-20191125 7 hotnews:20191119 ... hotnews:20191125\n> 4. 七日排行前十 ----> ZREVRANGE hotnews:20191119-20191125 0 10 WITHSCORES\n\n\n参考 [testerhome](https://testerhome.com/topics/16402),[redis](http://redis.io) 官网，[redisdoc](http://redisdoc.com/)\n\n***\n\n<center>拥有每一天</center>\n\n\n","source":"_posts/redis安装和使用.md","raw":"---\ntitle: redis安装和使用\ndate: 2019-11-20 00:53:22\ntags: redis\ncategory: 缓存\n---\n\n![Photo by Richs on wallhaven.cc](/redis.png)\n\n在互联网项目中，缓存中间件是一个必不可少的组件。由于磁盘 IO 和 内存 IO 在性能上的差异，通常一些热点数据都会放在缓存中，既提高了用户访问速度，缓存也在很大程度上减轻了数据库的压力，提高了系统整体的吞吐量，redis 是很成熟的一款 NoSql 数据库，是目前使用最多的缓存中间件，当然它的作用不仅仅可以用来做缓存，可以做分布式锁，简单消息队列等。性能稳定且高效，是居家必备用品。┑(￣▽ ￣)┍ \n\n<!--more-->\n\n##### 安装\n\n1. 解压\n\n目标路径\n> /usr/local\n```bash\ntar -zxvf ./redis-4.0.6.tar.gz \n```\n\nredis 压缩包是一个源码包，需要编译安装，[redis官网](https://redis.io/)有下载地址\n\n```bash\n# 安装依赖\nyum -y install gcc gcc-c++ kernel-devel\n# 编译\nmake\n# 安装到指定目录\nmake PERFIX=/usr/local/redis  install\n```\n\n> 若在编译过程中出现错，可以尝试删除掉解压的 redis 包重新解压在编译一次。\n\n2. 启动\n\n将编译包中的 redis.conf 和 sentinel.conf 文件复制到 redis/conf 目录下，方便配置\n\n```bash\n# 指定配置文件启动\nredis/bin/redis-server redis/conf/redis.conf\n```\n\n启动之后会看到 redis 的logo:\n\n```\n               _._                                                  \n           _.-``__ ''-._                                             \n      _.-``    `.  `_.  ''-._           Redis 4.0.6 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._                                   \n (    '      ,       .-`  | `,    )     Running in standalone mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\n |    `-._   `._    /     _.-'    |     PID: 24482\n  `-._    `-._  `-./  _.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |           http://redis.io        \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n      `-._    `-.__.-'    _.-'                                   \n          `-._        _.-'                                \n              `-.__.-'                                   \n                    \n```\n\n使用 redis-cli 连接测试\n\n```bash\n# 客户端连接\nredis/bin/redis-cli\n```\n测试\n```bash\n127.0.0.1:6379> ping\nPONG\n```\n完成以上步骤，redis 就使用默认配置启动成功了。\n\n###### redis 可视化工具\n\n推荐一款免费的 windows 下 redis 可视化工具[Anotherredisdesktopmanager](http://electronjs.org/apps/anotherredisdesktopmanager)\n\n##### 参数\n\nredis 在配置文件中提供了很多可供修改的参数，在实际使用中需要对这些参数进行配置在使用。\n\n###### bind\n绑定地址，0.0.0.0(默认) 允许任何互联网上的机器访问，这种配置方式很不安全，127.0.0.1 只允许本机客户端连接，这种是最安全的。配置多个主机访问为 `bind 127.0.0.1 192.268.31.108`\n```bash\nbind 127.0.0.1\n```\n\n###### protected-mode\n\n保护模式，可选参数 yes/on，yes 为开启状态。在开启状态时，当没有指定 bind 等参数时，默认 `bind 127.0.0.1`，如果设置为 no 时，则默认指定 bind 为 `bind 0.0.0.0`\n\n```\nprotected-mode\n```\n\n###### port\n\n访问端口，默认 6379\n\n```bash\nport 6379\n```\n\n###### timeout\n\n连接断开时间（秒），当客户端连续空闲指定 timeout 时间后，就断开该连接，为 0 时为禁止该功能。\n\n```bash\n\ntimeout 0\n```\n\n###### daemonize \n\n守护进程模式，可选参数 yes/on，yes 时 redis 服务以守护进程在后台执行\n\n```bash\ndaemonize yes\n```\n###### pidfile\n\n当指定守护进程方式启动时，会在 pidfile 参数指定的目录下生成 PID 文件\n\n```bash\npidfile /var/run/redis_6379.pid\n```\n\n###### databases\n\nredis 数据库数量，默认 16\n\n```bash\ndatabases 16\n```\n###### requirepass\n在客户端连接后设置密码\n```bash\n# 设置\nconfig set requirepass \"password\"\n# 验证\nauth \"password\"\n```\n\n##### redis 数据结构\n\nredis 支持很多数据结构，String，List，Hash，Set，ZSet等，简单理解它每种数据结构，都是它的 value 对应的数据结构。\n\n###### String\n\n1. 命令\n\n**GET**,**SET**\n存入/获取字符串键值对 \n```bash\nSET key value\nGET key  \n```\n**MSET**,**MGET**\n批量存入/获取字符串键值对 \n```bash\nMSET key value [key value]\nMGET key [key]\n```\n将用户对象使用批量字符串的方式保存在 redis\n\n| userId     |   userName   |  age |  \n| ---- | ---- | ---- |  \n|1001| zhangsan |20 | \n|1002|lisi|21|\n\n```bash\nMSET user:1001:name zhangsan user:1001:age 20\n127.0.0.1:6379> MGET user:1001:name user:1001:age\n1) \"zhangsan\"\n2) \"20\"\n```\n\n以上命令将用户表记录按照批量字符的方式设置到了redis，如果将对象序列化成 json 格式保存一般字符串格式，这样在用户对象年龄或者其他单个字段有改变时会涉及到 JSON 格式转化设置之后在保存的操作，加重了代码量，代码可读性降低。如果用这种方式保存的话可以直接进行针对字段的修改。\n```bash\n127.0.0.1:6379> MSET user:1001:name zhangsanMOD\nOK\n127.0.0.1:6379> MGET user:1001:name\n1) \"zhangsanMOD\"\n127.0.0.1:6379>\n```\n**SETNX**\n存入不存在的键值对 \n当设置的 key 存在时，则设置不成功，当不存在时，设置成功。因为 redis 是单线程模型，此命令可以用来实现**分布式锁功能**\n```bash\n# 设置送出15001礼物价值1000元\nSETNX gift:15001 1000\n```\n**DEL**\n删除一个键值对 \n```bash\nDEL gift:15001\n```\n**INCR**\n计数器 \n这个命令可以很方便的对 key 的 value 加 1 操作，而且不用考虑并发等问题，在实际场景中**文章阅读量可以使用此功能来实现**\n```bash\n# 111111 文章对应的阅读量\nINCR article:readcount:111111\n```\n**INCRBY**\n增量添加 \n将 key 中储存的数字加上指定的增量值。\n```bash\n# 键不存在时初始化为 0 之后在加 50\nINCRBY gift:15001:count 50\n```\n\n2. 应用\n\n> 分布式锁功能简单实现\n> 文章阅读量\n> 分布式 session 保存，用于权限认证。\n\n###### Hash\n\n1. 命令\n\n**HSET**,**HGET**\n存储/获取键值对\n\nHash 结构的 key 对应的值类似于 Java 中的 HashMap 结构。\n```bash\nHSET key field value\nHGET key field\n```\n上面将用户信息用 `MSET` 以批量字符串的形式存储，现在将用户表中用户信息用 Hash 结构存储：\n\n| userId     |   userName   |  age |  \n| ---- | ---- | ---- |  \n|1001| zhangsan |20 | \n|1002|lisi|21|\n\n```bash\nHSET user 1001:name zhangsan\nHSET user 1001:age 20\n# 获取 key 中的属性对应的值\n127.0.0.1:6379> HGET user 1001:name\n\"zhangsan\"\n```\n**HMSET**,**HMGET**\n存储多个键值对（批量）\n```bash\nHMSET key field value [key field valye]\nHMGET key field [field]\n```\n使用批量的方式存储用户 `lisi` 的信息\n```bash\nHMSET user 1002:name lisi 1002:age 21\nHMGET user 1002:name 1002:age\n# 批量获取\n127.0.0.1:6379> HMGET user 1002:name 1002:age\n1) \"lisi\"\n2) \"21\"\n# 获取多个\n127.0.0.1:6379> HMGET user 1001:name 1001:age 1002:name 1002:age\n1) \"zhangsan\"\n2) \"20\"\n3) \"lisi\"\n4) \"21\"\n```\n**HSETNX**\n存储一个不存在的键值对 \n```bash\nHSETNX key field value\n```\n```bash\n127.0.0.1:6379> HSET gift 15000:count 1\n(integer) 1\n#第二次设置不成功\n127.0.0.1:6379> HSET gift 15000:count 1\n(integer) 0\n\n```\n**HDEL**\n删除键对应的属性 \n```bash\nHDEL key field [field]\n```\n```bash\nHDEL gift 15000:count\n# 删除之后重新设置成功\n127.0.0.1:6379> HSET gift 15000:count 1\n(integer) 1\n```\n**HLEN**\nHash 表大小\n```bash\nHLEN key\n```\n```bash\nHLEN user\n# 用户 Hash 表大小 4 \n127.0.0.1:6379> HLEN user\n(integer) 4\n```\n**HGETALL**\nHash 表所有的键值对 \n```bash\nHGETALL key\n```\n```bash\nHGETALL user\n# 用户表中所有键值对\n127.0.0.1:6379> HGETALL user\n1) \"1001:name\"\n2) \"zhangsan\"\n3) \"1001:age\"\n4) \"20\"\n5) \"1002:name\"\n6) \"lisi\"\n7) \"1002:age\"\n8) \"21\"\n```\n**HINCRBY**\nHash 表 key 中属性的键的值设置增量（increment）\n```bash\nHINCRBY key field increament\n```\n```bash\n# 用户 1001 年龄 +1\n127.0.0.1:6379> HINCRBY user 1001:age 1\n(integer) 21\n```\n\n2. 应用\n\n购物车\n```bash\n1. 用户 ID 为 key\n2. 商品 ID 为 field\n3. 商品数量为 value\n# 购物车操作\n1. 添加：                 HSET cart:1001 2001 1\n2. 增加数量：             HINCRBY cart:1001 2001 1\n3. 商品总数：             HLEN cart:1001\n4. 删除商品：             HDEL cart:1001 2001\n5. 获取购物车所有商品：    HGETALL cart:1001\n```\n> 1. 用户 1001 添加 了 1 个 2001 商品到购物车\n> 2. 用户 1001 又新增了 1 个商品 2001\n> 3. 用户 1001 购物车商品总数\n> 4. 用户 1001 删除购物车商品 2001 \n> 5. 用户 1001 获取购物车所有商品 \n\n\n###### List\nList 结构中 key 对应的 value 是一个链表结构，**实现常用数据结构**\n> Stack(栈) = LPUSH + LPOP -> FILO（先进后出）\n> Queue(队列) = LPUSH + RPOP \n> Blocking MQ(阻塞队列) = LPUSH + BRPOP 在阻塞队列中，LPUSH 一条数据之后，使用 BRPOP 获取数据，区别于 RPOP 的是，当 List 中没有数据时 BRPOP 会一直监听这个 List，有值被 push 进来它会立马获取\n```bash\n# 结构\n           LPUSH                   RPUSH\nkey  ---> |   a   |   b   |   c   |   d   |\n           LPOP                    RPOP\n```\n1. 命令\n\n**LPUSH**,**LPOP**\n插入/取出一个或者多个值插入列表头部（最左边） \n```bash\nLPUSH key value [value]\nLPOP key\n```\n将礼物按照分类存入列表中\n```bash\n# 普通礼物列表存入 4 个礼物\nLPUSH ordinary 4001 4002 4003 4004\nLPOP ordinary\n# 4001 在最右边，第一次取出最左边的 4004\n127.0.0.1:6379> LPOP ordinary\n\"4004\"\n127.0.0.1:6379> LPOP ordinary\n```\n**RPUSH**,**RPOP**\n插入/取出一个或者多个值插入列表头部（最右边） \n这个命令和上面的命令是相同的结果，只是取出的位置不一样。\n```bash\nRPUSH key value [value]\nRPOP key\n```\n**BLPOP**,**BRPOP**\n列表头/尾取出一个元素，如果没有则阻塞等待，timeout = 0 时一直阻塞等待（timeout/s） \n```bash\nBLPOP key [key] timeout\nBRPOP key [key] timeout\n```\n监听礼物列表是否有商品，有则在右边阻塞取出\n```bash\nLPUSH ordinary 4001 4002 4003 4004\n\n# 执行 BRPOP 每次取出一条，如果没有，则一直等待\n127.0.0.1:6379> BRPOP ordinary 0\n1) \"ordinary\"\n2) \"4001\"\n```\n等待时添加一个元素，等待中的 BRPOP 立马输出新添加的元素\n\n**LRANGE**\n获取指定 key 列表区间的元素 \n```bash\nLRANGE key start stop\n```\n获取 0-2 区间的值\n```bash\n127.0.0.1:6379> LPUSH ordinary 4001 4002 4003 4004\n(integer) 4\n# \n127.0.0.1:6379> LRANGE ordinary 0 2\n1) \"4004\"\n2) \"4003\"\n3) \"4002\"\n\n```\n\n2. 应用\n\n微信公众号的推送信息可以使用 List 结构，用户关注的公众号每推送一个消息，在用户对应的列表增加一个文章ID\n\n```bash\n# 用户 1001 有 5001，5002 两个推送文章消息\nLPUSH 1001:msg 5001,5002\n```\n\n###### Set\n\nSet 键值对中的值数据结构类似 Java 中 Set 集合中的 key 值结构，元素不能重复。\n\n1. 命令\n\n **SADD**,**SREM**\n添加/删除集合中元素，添加时如果存在则忽略\n\n```bash\nSADD key member [member]\nSREM key member\n```\n```bash\n# 用户 6001,6002 关注用户 1001\nSADD user:1001:fans 6001 6002\n# 用户 6002 取消关注用户 1001\nSREM user:1001:fans 6002\n```\n**SMEMBERS**\n获取集合所有元素 \n```bash\nSMEMBERS key\n```\n```bash\n# 用户 1001 粉丝\n127.0.0.1:6379> SMEMBERS user:1001:fans\n1) \"6001\"\n```\n**SISMEMBER**\n判断元素是否存在 \n```bash\nSISMEMBER key member\n```\n```bash\n# 判断 6002 是否在集合 user:1001:fans 中\n127.0.0.1:6379> SISMEMBER user:1001:fans 6002\n(integer) 0\n```\n\n**SCARD**\n获取集合元素个数 \n```bash\nSCARD key\n```\n```bash\n# 获取用户 1001 的粉丝数\n127.0.0.1:6379> SCARD user:1001:fans\n(integer) 1\n```\n**SRANDMEMBER**\n从集合随机获取 count 个元素，默认获取 1 个，元素不删除 \n```bash\nSRANDMEMBER key [count]\n```\n```bash\n# 给用户 1001 添加粉丝\nSADD user:1001:fans 6002 6003 6004 6005 6006\n# 随机获取 2 个粉丝 ID\n127.0.0.1:6379> SRANDMEMBER user:1001:fans 2\n1) \"6002\"\n2) \"6006\"\n# 查看用户 1001 的粉丝，刚刚查看的还在集合中\n127.0.0.1:6379> SMEMBERS user:1001:fans\n1) \"6001\"\n2) \"6002\"\n3) \"6003\"\n4) \"6004\"\n5) \"6005\"\n6) \"6006\"\n```\n\n**SPOP**\n从集合随机获取 count 个元素，默认获取 1 个，删除元素 \n```bash\nSPOP key [count]\n```\n```bash\n# 随机获取用户 1001 的 2 个粉丝\n127.0.0.1:6379> SPOP user:1001:fans 2\n1) \"6003\"\n2) \"6004\"\n# 查看用户 1001 的粉丝，刚刚取出的已经被移除\n127.0.0.1:6379> SMEMBERS user:1001:fans\n1) \"6001\"\n2) \"6002\"\n3) \"6005\"\n4) \"6006\"\n```\n2. 应用\n微信小程序抽奖活动\n> 1. 用户 1001,1002,1003,1004 参与活动 7001 ----> SADD act:7001 1001 1002 1003 1004\n> 2. 查看参与 7001 活动的全部用户 ----> SMEMBERS act:7001\n> 3. 随机抽奖 2 名用户 ----> SRANDMEMBER act:7001 2\n> 4. 抽取 1 等奖 1 名，2 等奖 2 名(去除一等奖用户) ----> SPOP act:7001 1 ,SPOP act:7001 2\n\n微信点赞，收藏，标签\n> 1. 用户 1002 点赞用户 1001 的朋友圈消息 8001 ----> SADD like:1001:8001 1002\n> 2. 取消点赞 ----> SREM like:1001:8001 1002\n> 3. 查看用户 1003 是否点赞 ----> SISMEMBER like:1001:8001 1003\n> 4. 获取点赞朋友列表 ----> SMEMBERS like:1001:8001\n> 5. 获取点赞用户数 ----> SCARD like:1001:8001\n\n3. Set 集合运算操作\n\n集合 set1:{a,b,e,f},set2:{c,d,e},set3:{a,b,e,g}\n```bash\n# 交集：多个集合中共有的元素\nset1 set2 set3 ----> {e}\n# 并集：去重多个集合中所有元素\nset1 set2 set3 ----> {a,b,c,d,e,f,g}\n# 差集：第一个集合和其他集合不一样的元素\nset1 set2 set3 ----> {f}\n```\nSet 中对应的集合运算\n**SINTER** \n交集运算\n```bash\nSINTER set1 set2 set3\n```\n**SUNION**\n并集运算\n```bash\nSUNION set1 set2 set3\n```\n**SDIFF**\n差集运算\n```bash\nSDIFF set1 set2 set3\n```\n4. 运算应用\n关注模型\n> 1. zhangsan/lisi 关注的人：zhangsan/lisi 粉丝 set 集合\n> 2. zhangsan 和 list 共同关注：集合求并集 SINTER zhangsan lisi\n> 3. 我关注的人也关注了他（wangwu）：遍历 zhangsan 关注列表用户是否关注 wangwu SISMEMBER\n> 4. 可能认识的人：求差集 SDIFF zhangsan lisi\n\n###### ZSet\n有序集合，且不允许有重复的元素，通过 score 对集合中元素排序\n**ZADD**,**ZREM**\n添加/移除集合中的元素\n```bash\nZADD key score member [score member]\nZREM key member [member]\n```\n通过热度值对直播房间排序\n```bash\n# 房间 1100 的热度值 90000\nZADD room:sort 90000 1100 80000 2200 70000 3300\n# 移除 3300 这个房间\nZREM room:sort 3300 \n```\n**ZCARD**\n获取有序集合的元素个数\n```bash\nZCARD key\n```\n```bash\n127.0.0.1:6379> ZCARD room:sort\n(integer) 2\n```\n**ZCOUNT**\n获取有序集合 [min,max] 区间 score 元素数量\n```bash\nZCOUNT key min max\n```\n```bash\n# 获取 热度在80000-85000 之间的房间\n127.0.0.1:6379> ZCOUNT room:sort 80000 85000\n(integer) 1\n```\n**ZINCRBY**\n有序集合中指定成员 score 增加 increment\n```bash\nZINCRBY key increment member\n```\n```bash\n# 1100 房间热度增加 1000\n127.0.0.1:6379> ZINCRBY room:sort 1000 1100\n\"91000\"\n```\n\n**ZRANGE**,**ZREVRANGE**\n有序集合 [start,stop] 区间元素，通过 score，递增/递减\nstart 和 stop 都是以 0 开始，0 表示第一个元素，1 表示第二个，以此类推\n负数下标 -1 表示倒数第一个元素，-2 表示倒数第二个元素，以此类推\n```bash\nZRANGE key start stop [WITHSCORES]\nZREVRANGE key start stop [WITHSCORES]\n```\n```bash\n# 递增排序 room:sort 下所有元素\n127.0.0.1:6379> ZRANGE room:sort 0 -1 WITHSCORES\n1) \"2200\"\n2) \"80000\"\n3) \"1100\"\n4) \"91000\"\n# 递减排序 room:sort 下所有元素\n127.0.0.1:6379> ZREVRANGE room:sort 0 -1 WITHSCORES\n1) \"1100\"\n2) \"91000\"\n3) \"2200\"\n4) \"80000\"\n```\n**ZUNIONSTORE**\n运算多个有序集合并集，并存储在新 key 中, `destination`新集合 key 值，`numkeys`合并的集合个数\n```bash\nZUNIONSTORE destination numkeys key [key]\n```\n```bash\n# 添加房间在线人数集合\nZADD room:onlinenum 800 3300 1000 4400\n# 合并房间在线人数集合和房间热度集合为房间信息集合 room:info\nZUNIONSTORE room:info 2 room:sort room:onlinenum\n```\n2. 应用\n各类排行榜实现\n\n> 1. 用户点击新闻 ----> ZINCRBY hotnews:20191125 1 学好redis\n> 2. 展示当日排行榜前十 ----> ZREVRANGE hotnews:20191125 0 10 WITHSORES\n> 3. 七日搜索榜统计 ----> ZUNIONSTROE hotnews:20191119-20191125 7 hotnews:20191119 ... hotnews:20191125\n> 4. 七日排行前十 ----> ZREVRANGE hotnews:20191119-20191125 0 10 WITHSCORES\n\n\n参考 [testerhome](https://testerhome.com/topics/16402),[redis](http://redis.io) 官网，[redisdoc](http://redisdoc.com/)\n\n***\n\n<center>拥有每一天</center>\n\n\n","slug":"redis安装和使用","published":1,"updated":"2021-01-31T06:31:35.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeoxs004qrh1t3nd14z2m","content":"<p><img src=\"/2019/11/20/redis%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/redis.png\" alt=\"Photo by Richs on wallhaven.cc\"></p>\n<p>在互联网项目中，缓存中间件是一个必不可少的组件。由于磁盘 IO 和 内存 IO 在性能上的差异，通常一些热点数据都会放在缓存中，既提高了用户访问速度，缓存也在很大程度上减轻了数据库的压力，提高了系统整体的吞吐量，redis 是很成熟的一款 NoSql 数据库，是目前使用最多的缓存中间件，当然它的作用不仅仅可以用来做缓存，可以做分布式锁，简单消息队列等。性能稳定且高效，是居家必备用品。┑(￣▽ ￣)┍ </p>\n<a id=\"more\"></a>\n\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><ol>\n<li>解压</li>\n</ol>\n<p>目标路径</p>\n<blockquote>\n<p>/usr/local</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf ./redis-4.0.6.tar.gz </span><br></pre></td></tr></table></figure>\n<p>redis 压缩包是一个源码包，需要编译安装，<a class=\"link\" href=\"https://redis.io/\">redis官网<i class=\"fas fa-external-link-alt\"></i></a>有下载地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yum -y install gcc gcc-c++ kernel-devel</span><br><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装到指定目录</span></span><br><span class=\"line\">make PERFIX=/usr/<span class=\"built_in\">local</span>/redis  install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若在编译过程中出现错，可以尝试删除掉解压的 redis 包重新解压在编译一次。</p>\n</blockquote>\n<ol start=\"2\">\n<li>启动</li>\n</ol>\n<p>将编译包中的 redis.conf 和 sentinel.conf 文件复制到 redis/conf 目录下，方便配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定配置文件启动</span></span><br><span class=\"line\">redis/bin/redis-server redis/conf/redis.conf</span><br></pre></td></tr></table></figure>\n<p>启动之后会看到 redis 的logo:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">              _._                                                  </span><br><span class=\"line\">          _.-&#96;&#96;__ &#39;&#39;-._                                             </span><br><span class=\"line\">     _.-&#96;&#96;    &#96;.  &#96;_.  &#39;&#39;-._           Redis 4.0.6 (00000000&#x2F;0) 64 bit</span><br><span class=\"line\"> .-&#96;&#96; .-&#96;&#96;&#96;.  &#96;&#96;&#96;\\&#x2F;    _.,_ &#39;&#39;-._                                   </span><br><span class=\"line\">(    &#39;      ,       .-&#96;  | &#96;,    )     Running in standalone mode</span><br><span class=\"line\">|&#96;-._&#96;-...-&#96; __...-.&#96;&#96;-._|&#39;&#96; _.-&#39;|     Port: 6379</span><br><span class=\"line\">|    &#96;-._   &#96;._    &#x2F;     _.-&#39;    |     PID: 24482</span><br><span class=\"line\"> &#96;-._    &#96;-._  &#96;-.&#x2F;  _.-&#39;    _.-&#39;                                   </span><br><span class=\"line\">|&#96;-._&#96;-._    &#96;-.__.-&#39;    _.-&#39;_.-&#39;|                                  </span><br><span class=\"line\">|    &#96;-._&#96;-._        _.-&#39;_.-&#39;    |           http:&#x2F;&#x2F;redis.io        </span><br><span class=\"line\"> &#96;-._    &#96;-._&#96;-.__.-&#39;_.-&#39;    _.-&#39;                                   </span><br><span class=\"line\">     &#96;-._    &#96;-.__.-&#39;    _.-&#39;                                   </span><br><span class=\"line\">         &#96;-._        _.-&#39;                                </span><br><span class=\"line\">             &#96;-.__.-&#39;                                   </span><br><span class=\"line\">                   </span><br></pre></td></tr></table></figure>\n<p>使用 redis-cli 连接测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 客户端连接</span></span><br><span class=\"line\">redis/bin/redis-cli</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n<p>完成以上步骤，redis 就使用默认配置启动成功了。</p>\n<h6 id=\"redis-可视化工具\"><a href=\"#redis-可视化工具\" class=\"headerlink\" title=\"redis 可视化工具\"></a>redis 可视化工具</h6><p>推荐一款免费的 windows 下 redis 可视化工具<a class=\"link\" href=\"http://electronjs.org/apps/anotherredisdesktopmanager\">Anotherredisdesktopmanager<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><p>redis 在配置文件中提供了很多可供修改的参数，在实际使用中需要对这些参数进行配置在使用。</p>\n<h6 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h6><p>绑定地址，0.0.0.0(默认) 允许任何互联网上的机器访问，这种配置方式很不安全，127.0.0.1 只允许本机客户端连接，这种是最安全的。配置多个主机访问为 <code>bind 127.0.0.1 192.268.31.108</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1</span><br></pre></td></tr></table></figure>\n<h6 id=\"protected-mode\"><a href=\"#protected-mode\" class=\"headerlink\" title=\"protected-mode\"></a>protected-mode</h6><p>保护模式，可选参数 yes/on，yes 为开启状态。在开启状态时，当没有指定 bind 等参数时，默认 <code>bind 127.0.0.1</code>，如果设置为 no 时，则默认指定 bind 为 <code>bind 0.0.0.0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected-mode</span><br></pre></td></tr></table></figure>\n<h6 id=\"port\"><a href=\"#port\" class=\"headerlink\" title=\"port\"></a>port</h6><p>访问端口，默认 6379</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 6379</span><br></pre></td></tr></table></figure>\n<h6 id=\"timeout\"><a href=\"#timeout\" class=\"headerlink\" title=\"timeout\"></a>timeout</h6><p>连接断开时间（秒），当客户端连续空闲指定 timeout 时间后，就断开该连接，为 0 时为禁止该功能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">timeout 0</span><br></pre></td></tr></table></figure>\n<h6 id=\"daemonize\"><a href=\"#daemonize\" class=\"headerlink\" title=\"daemonize\"></a>daemonize</h6><p>守护进程模式，可选参数 yes/on，yes 时 redis 服务以守护进程在后台执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure>\n<h6 id=\"pidfile\"><a href=\"#pidfile\" class=\"headerlink\" title=\"pidfile\"></a>pidfile</h6><p>当指定守护进程方式启动时，会在 pidfile 参数指定的目录下生成 PID 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pidfile /var/run/redis_6379.pid</span><br></pre></td></tr></table></figure>\n<h6 id=\"databases\"><a href=\"#databases\" class=\"headerlink\" title=\"databases\"></a>databases</h6><p>redis 数据库数量，默认 16</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">databases 16</span><br></pre></td></tr></table></figure>\n<h6 id=\"requirepass\"><a href=\"#requirepass\" class=\"headerlink\" title=\"requirepass\"></a>requirepass</h6><p>在客户端连接后设置密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置</span></span><br><span class=\"line\">config <span class=\"built_in\">set</span> requirepass <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">auth <span class=\"string\">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"redis-数据结构\"><a href=\"#redis-数据结构\" class=\"headerlink\" title=\"redis 数据结构\"></a>redis 数据结构</h5><p>redis 支持很多数据结构，String，List，Hash，Set，ZSet等，简单理解它每种数据结构，都是它的 value 对应的数据结构。</p>\n<h6 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h6><ol>\n<li>命令</li>\n</ol>\n<p><strong>GET</strong>,<strong>SET</strong><br>存入/获取字符串键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET key value</span><br><span class=\"line\">GET key  </span><br></pre></td></tr></table></figure>\n<p><strong>MSET</strong>,<strong>MGET</strong><br>批量存入/获取字符串键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSET key value [key value]</span><br><span class=\"line\">MGET key [key]</span><br></pre></td></tr></table></figure>\n<p>将用户对象使用批量字符串的方式保存在 redis</p>\n<table>\n<thead>\n<tr>\n<th>userId</th>\n<th>userName</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1001</td>\n<td>zhangsan</td>\n<td>20</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>lisi</td>\n<td>21</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSET user:1001:name zhangsan user:1001:age 20</span><br><span class=\"line\">127.0.0.1:6379&gt; MGET user:1001:name user:1001:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;20&quot;</span></span><br></pre></td></tr></table></figure>\n<p>以上命令将用户表记录按照批量字符的方式设置到了redis，如果将对象序列化成 json 格式保存一般字符串格式，这样在用户对象年龄或者其他单个字段有改变时会涉及到 JSON 格式转化设置之后在保存的操作，加重了代码量，代码可读性降低。如果用这种方式保存的话可以直接进行针对字段的修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; MSET user:1001:name zhangsanMOD</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; MGET user:1001:name</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsanMOD&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>SETNX</strong><br>存入不存在的键值对<br>当设置的 key 存在时，则设置不成功，当不存在时，设置成功。因为 redis 是单线程模型，此命令可以用来实现<strong>分布式锁功能</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置送出15001礼物价值1000元</span></span><br><span class=\"line\">SETNX gift:15001 1000</span><br></pre></td></tr></table></figure>\n<p><strong>DEL</strong><br>删除一个键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEL gift:15001</span><br></pre></td></tr></table></figure>\n<p><strong>INCR</strong><br>计数器<br>这个命令可以很方便的对 key 的 value 加 1 操作，而且不用考虑并发等问题，在实际场景中<strong>文章阅读量可以使用此功能来实现</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 111111 文章对应的阅读量</span></span><br><span class=\"line\">INCR article:readcount:111111</span><br></pre></td></tr></table></figure>\n<p><strong>INCRBY</strong><br>增量添加<br>将 key 中储存的数字加上指定的增量值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 键不存在时初始化为 0 之后在加 50</span></span><br><span class=\"line\">INCRBY gift:15001:count 50</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用</li>\n</ol>\n<blockquote>\n<p>分布式锁功能简单实现<br>文章阅读量<br>分布式 session 保存，用于权限认证。</p>\n</blockquote>\n<h6 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h6><ol>\n<li>命令</li>\n</ol>\n<p><strong>HSET</strong>,<strong>HGET</strong><br>存储/获取键值对</p>\n<p>Hash 结构的 key 对应的值类似于 Java 中的 HashMap 结构。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HSET key field value</span><br><span class=\"line\">HGET key field</span><br></pre></td></tr></table></figure>\n<p>上面将用户信息用 <code>MSET</code> 以批量字符串的形式存储，现在将用户表中用户信息用 Hash 结构存储：</p>\n<table>\n<thead>\n<tr>\n<th>userId</th>\n<th>userName</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1001</td>\n<td>zhangsan</td>\n<td>20</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>lisi</td>\n<td>21</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HSET user 1001:name zhangsan</span><br><span class=\"line\">HSET user 1001:age 20</span><br><span class=\"line\"><span class=\"comment\"># 获取 key 中的属性对应的值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HGET user 1001:name</span><br><span class=\"line\"><span class=\"string\">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>HMSET</strong>,<strong>HMGET</strong><br>存储多个键值对（批量）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMSET key field value [key field valye]</span><br><span class=\"line\">HMGET key field [field]</span><br></pre></td></tr></table></figure>\n<p>使用批量的方式存储用户 <code>lisi</code> 的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMSET user 1002:name lisi 1002:age 21</span><br><span class=\"line\">HMGET user 1002:name 1002:age</span><br><span class=\"line\"><span class=\"comment\"># 批量获取</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HMGET user 1002:name 1002:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;21&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取多个</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HMGET user 1001:name 1001:age 1002:name 1002:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>HSETNX</strong><br>存储一个不存在的键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HSETNX key field value</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\">#第二次设置不成功</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>HDEL</strong><br>删除键对应的属性 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HDEL key field [field]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HDEL gift 15000:count</span><br><span class=\"line\"><span class=\"comment\"># 删除之后重新设置成功</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<p><strong>HLEN</strong><br>Hash 表大小</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HLEN key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HLEN user</span><br><span class=\"line\"><span class=\"comment\"># 用户 Hash 表大小 4 </span></span><br><span class=\"line\">127.0.0.1:6379&gt; HLEN user</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></figure>\n<p><strong>HGETALL</strong><br>Hash 表所有的键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HGETALL key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HGETALL user</span><br><span class=\"line\"><span class=\"comment\"># 用户表中所有键值对</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL user</span><br><span class=\"line\">1) <span class=\"string\">&quot;1001:name&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;1001:age&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;1002:name&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;1002:age&quot;</span></span><br><span class=\"line\">8) <span class=\"string\">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>HINCRBY</strong><br>Hash 表 key 中属性的键的值设置增量（increment）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HINCRBY key field increament</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 1001 年龄 +1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY user 1001:age 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 21</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用</li>\n</ol>\n<p>购物车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 用户 ID 为 key</span><br><span class=\"line\">2. 商品 ID 为 field</span><br><span class=\"line\">3. 商品数量为 value</span><br><span class=\"line\"><span class=\"comment\"># 购物车操作</span></span><br><span class=\"line\">1. 添加：                 HSET cart:1001 2001 1</span><br><span class=\"line\">2. 增加数量：             HINCRBY cart:1001 2001 1</span><br><span class=\"line\">3. 商品总数：             HLEN cart:1001</span><br><span class=\"line\">4. 删除商品：             HDEL cart:1001 2001</span><br><span class=\"line\">5. 获取购物车所有商品：    HGETALL cart:1001</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>用户 1001 添加 了 1 个 2001 商品到购物车</li>\n<li>用户 1001 又新增了 1 个商品 2001</li>\n<li>用户 1001 购物车商品总数</li>\n<li>用户 1001 删除购物车商品 2001 </li>\n<li>用户 1001 获取购物车所有商品 </li>\n</ol>\n</blockquote>\n<h6 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h6><p>List 结构中 key 对应的 value 是一个链表结构，<strong>实现常用数据结构</strong></p>\n<blockquote>\n<p>Stack(栈) = LPUSH + LPOP -&gt; FILO（先进后出）<br>Queue(队列) = LPUSH + RPOP<br>Blocking MQ(阻塞队列) = LPUSH + BRPOP 在阻塞队列中，LPUSH 一条数据之后，使用 BRPOP 获取数据，区别于 RPOP 的是，当 List 中没有数据时 BRPOP 会一直监听这个 List，有值被 push 进来它会立马获取</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 结构</span></span><br><span class=\"line\">           LPUSH                   RPUSH</span><br><span class=\"line\">key  ---&gt; |   a   |   b   |   c   |   d   |</span><br><span class=\"line\">           LPOP                    RPOP</span><br></pre></td></tr></table></figure>\n<ol>\n<li>命令</li>\n</ol>\n<p><strong>LPUSH</strong>,<strong>LPOP</strong><br>插入/取出一个或者多个值插入列表头部（最左边） </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LPUSH key value [value]</span><br><span class=\"line\">LPOP key</span><br></pre></td></tr></table></figure>\n<p>将礼物按照分类存入列表中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通礼物列表存入 4 个礼物</span></span><br><span class=\"line\">LPUSH ordinary 4001 4002 4003 4004</span><br><span class=\"line\">LPOP ordinary</span><br><span class=\"line\"><span class=\"comment\"># 4001 在最右边，第一次取出最左边的 4004</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPOP ordinary</span><br><span class=\"line\"><span class=\"string\">&quot;4004&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPOP ordinary</span><br></pre></td></tr></table></figure>\n<p><strong>RPUSH</strong>,<strong>RPOP</strong><br>插入/取出一个或者多个值插入列表头部（最右边）<br>这个命令和上面的命令是相同的结果，只是取出的位置不一样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPUSH key value [value]</span><br><span class=\"line\">RPOP key</span><br></pre></td></tr></table></figure>\n<p><strong>BLPOP</strong>,<strong>BRPOP</strong><br>列表头/尾取出一个元素，如果没有则阻塞等待，timeout = 0 时一直阻塞等待（timeout/s） </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BLPOP key [key] timeout</span><br><span class=\"line\">BRPOP key [key] timeout</span><br></pre></td></tr></table></figure>\n<p>监听礼物列表是否有商品，有则在右边阻塞取出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LPUSH ordinary 4001 4002 4003 4004</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 BRPOP 每次取出一条，如果没有，则一直等待</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP ordinary 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;ordinary&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;4001&quot;</span></span><br></pre></td></tr></table></figure>\n<p>等待时添加一个元素，等待中的 BRPOP 立马输出新添加的元素</p>\n<p><strong>LRANGE</strong><br>获取指定 key 列表区间的元素 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRANGE key start stop</span><br></pre></td></tr></table></figure>\n<p>获取 0-2 区间的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LPUSH ordinary 4001 4002 4003 4004</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE ordinary 0 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;4004&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;4003&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;4002&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用</li>\n</ol>\n<p>微信公众号的推送信息可以使用 List 结构，用户关注的公众号每推送一个消息，在用户对应的列表增加一个文章ID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 1001 有 5001，5002 两个推送文章消息</span></span><br><span class=\"line\">LPUSH 1001:msg 5001,5002</span><br></pre></td></tr></table></figure>\n<h6 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h6><p>Set 键值对中的值数据结构类似 Java 中 Set 集合中的 key 值结构，元素不能重复。</p>\n<ol>\n<li>命令</li>\n</ol>\n<p> <strong>SADD</strong>,<strong>SREM</strong><br>添加/删除集合中元素，添加时如果存在则忽略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SADD key member [member]</span><br><span class=\"line\">SREM key member</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 6001,6002 关注用户 1001</span></span><br><span class=\"line\">SADD user:1001:fans 6001 6002</span><br><span class=\"line\"><span class=\"comment\"># 用户 6002 取消关注用户 1001</span></span><br><span class=\"line\">SREM user:1001:fans 6002</span><br></pre></td></tr></table></figure>\n<p><strong>SMEMBERS</strong><br>获取集合所有元素 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMEMBERS key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 1001 粉丝</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class=\"line\">1) <span class=\"string\">&quot;6001&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>SISMEMBER</strong><br>判断元素是否存在 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SISMEMBER key member</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断 6002 是否在集合 user:1001:fans 中</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER user:1001:fans 6002</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<p><strong>SCARD</strong><br>获取集合元素个数 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SCARD key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取用户 1001 的粉丝数</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SCARD user:1001:fans</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<p><strong>SRANDMEMBER</strong><br>从集合随机获取 count 个元素，默认获取 1 个，元素不删除 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SRANDMEMBER key [count]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给用户 1001 添加粉丝</span></span><br><span class=\"line\">SADD user:1001:fans 6002 6003 6004 6005 6006</span><br><span class=\"line\"><span class=\"comment\"># 随机获取 2 个粉丝 ID</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER user:1001:fans 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;6002&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6006&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看用户 1001 的粉丝，刚刚查看的还在集合中</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class=\"line\">1) <span class=\"string\">&quot;6001&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6002&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;6003&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;6004&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;6005&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;6006&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>SPOP</strong><br>从集合随机获取 count 个元素，默认获取 1 个，删除元素 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPOP key [count]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机获取用户 1001 的 2 个粉丝</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SPOP user:1001:fans 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;6003&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6004&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看用户 1001 的粉丝，刚刚取出的已经被移除</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class=\"line\">1) <span class=\"string\">&quot;6001&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6002&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;6005&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;6006&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用<br>微信小程序抽奖活动<blockquote>\n<ol>\n<li>用户 1001,1002,1003,1004 参与活动 7001 —-&gt; SADD act:7001 1001 1002 1003 1004</li>\n<li>查看参与 7001 活动的全部用户 —-&gt; SMEMBERS act:7001</li>\n<li>随机抽奖 2 名用户 —-&gt; SRANDMEMBER act:7001 2</li>\n<li>抽取 1 等奖 1 名，2 等奖 2 名(去除一等奖用户) —-&gt; SPOP act:7001 1 ,SPOP act:7001 2</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<p>微信点赞，收藏，标签</p>\n<blockquote>\n<ol>\n<li>用户 1002 点赞用户 1001 的朋友圈消息 8001 —-&gt; SADD like:1001:8001 1002</li>\n<li>取消点赞 —-&gt; SREM like:1001:8001 1002</li>\n<li>查看用户 1003 是否点赞 —-&gt; SISMEMBER like:1001:8001 1003</li>\n<li>获取点赞朋友列表 —-&gt; SMEMBERS like:1001:8001</li>\n<li>获取点赞用户数 —-&gt; SCARD like:1001:8001</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>Set 集合运算操作</li>\n</ol>\n<p>集合 set1:{a,b,e,f},set2:{c,d,e},set3:{a,b,e,g}</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 交集：多个集合中共有的元素</span></span><br><span class=\"line\">set1 set2 set3 ----&gt; &#123;e&#125;</span><br><span class=\"line\"><span class=\"comment\"># 并集：去重多个集合中所有元素</span></span><br><span class=\"line\">set1 set2 set3 ----&gt; &#123;a,b,c,d,e,f,g&#125;</span><br><span class=\"line\"><span class=\"comment\"># 差集：第一个集合和其他集合不一样的元素</span></span><br><span class=\"line\">set1 set2 set3 ----&gt; &#123;f&#125;</span><br></pre></td></tr></table></figure>\n<p>Set 中对应的集合运算<br><strong>SINTER</strong><br>交集运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SINTER set1 set2 set3</span><br></pre></td></tr></table></figure>\n<p><strong>SUNION</strong><br>并集运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUNION set1 set2 set3</span><br></pre></td></tr></table></figure>\n<p><strong>SDIFF</strong><br>差集运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDIFF set1 set2 set3</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>运算应用<br>关注模型<blockquote>\n<ol>\n<li>zhangsan/lisi 关注的人：zhangsan/lisi 粉丝 set 集合</li>\n<li>zhangsan 和 list 共同关注：集合求并集 SINTER zhangsan lisi</li>\n<li>我关注的人也关注了他（wangwu）：遍历 zhangsan 关注列表用户是否关注 wangwu SISMEMBER</li>\n<li>可能认识的人：求差集 SDIFF zhangsan lisi</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"ZSet\"><a href=\"#ZSet\" class=\"headerlink\" title=\"ZSet\"></a>ZSet</h6><p>有序集合，且不允许有重复的元素，通过 score 对集合中元素排序<br><strong>ZADD</strong>,<strong>ZREM</strong><br>添加/移除集合中的元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZADD key score member [score member]</span><br><span class=\"line\">ZREM key member [member]</span><br></pre></td></tr></table></figure>\n<p>通过热度值对直播房间排序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 房间 1100 的热度值 90000</span></span><br><span class=\"line\">ZADD room:sort 90000 1100 80000 2200 70000 3300</span><br><span class=\"line\"><span class=\"comment\"># 移除 3300 这个房间</span></span><br><span class=\"line\">ZREM room:sort 3300 </span><br></pre></td></tr></table></figure>\n<p><strong>ZCARD</strong><br>获取有序集合的元素个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZCARD key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZCARD room:sort</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n<p><strong>ZCOUNT</strong><br>获取有序集合 [min,max] 区间 score 元素数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZCOUNT key min max</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取 热度在80000-85000 之间的房间</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZCOUNT room:sort 80000 85000</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<p><strong>ZINCRBY</strong><br>有序集合中指定成员 score 增加 increment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZINCRBY key increment member</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1100 房间热度增加 1000</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZINCRBY room:sort 1000 1100</span><br><span class=\"line\"><span class=\"string\">&quot;91000&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>ZRANGE</strong>,<strong>ZREVRANGE</strong><br>有序集合 [start,stop] 区间元素，通过 score，递增/递减<br>start 和 stop 都是以 0 开始，0 表示第一个元素，1 表示第二个，以此类推<br>负数下标 -1 表示倒数第一个元素，-2 表示倒数第二个元素，以此类推</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZRANGE key start stop [WITHSCORES]</span><br><span class=\"line\">ZREVRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递增排序 room:sort 下所有元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE room:sort 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;2200&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;80000&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;1100&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;91000&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 递减排序 room:sort 下所有元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE room:sort 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;1100&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;91000&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;2200&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;80000&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>ZUNIONSTORE</strong><br>运算多个有序集合并集，并存储在新 key 中, <code>destination</code>新集合 key 值，<code>numkeys</code>合并的集合个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZUNIONSTORE destination numkeys key [key]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加房间在线人数集合</span></span><br><span class=\"line\">ZADD room:onlinenum 800 3300 1000 4400</span><br><span class=\"line\"><span class=\"comment\"># 合并房间在线人数集合和房间热度集合为房间信息集合 room:info</span></span><br><span class=\"line\">ZUNIONSTORE room:info 2 room:sort room:onlinenum</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用<br>各类排行榜实现</li>\n</ol>\n<blockquote>\n<ol>\n<li>用户点击新闻 —-&gt; ZINCRBY hotnews:20191125 1 学好redis</li>\n<li>展示当日排行榜前十 —-&gt; ZREVRANGE hotnews:20191125 0 10 WITHSORES</li>\n<li>七日搜索榜统计 —-&gt; ZUNIONSTROE hotnews:20191119-20191125 7 hotnews:20191119 … hotnews:20191125</li>\n<li>七日排行前十 —-&gt; ZREVRANGE hotnews:20191119-20191125 0 10 WITHSCORES</li>\n</ol>\n</blockquote>\n<p>参考 <a class=\"link\" href=\"https://testerhome.com/topics/16402\">testerhome<i class=\"fas fa-external-link-alt\"></i></a>,<a class=\"link\" href=\"http://redis.io/\">redis<i class=\"fas fa-external-link-alt\"></i></a> 官网，<a class=\"link\" href=\"http://redisdoc.com/\">redisdoc<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>拥有每一天</center>\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/11/20/redis%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/redis.png\" alt=\"Photo by Richs on wallhaven.cc\"></p>\n<p>在互联网项目中，缓存中间件是一个必不可少的组件。由于磁盘 IO 和 内存 IO 在性能上的差异，通常一些热点数据都会放在缓存中，既提高了用户访问速度，缓存也在很大程度上减轻了数据库的压力，提高了系统整体的吞吐量，redis 是很成熟的一款 NoSql 数据库，是目前使用最多的缓存中间件，当然它的作用不仅仅可以用来做缓存，可以做分布式锁，简单消息队列等。性能稳定且高效，是居家必备用品。┑(￣▽ ￣)┍ </p>","more":"<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><ol>\n<li>解压</li>\n</ol>\n<p>目标路径</p>\n<blockquote>\n<p>/usr/local</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf ./redis-4.0.6.tar.gz </span><br></pre></td></tr></table></figure>\n<p>redis 压缩包是一个源码包，需要编译安装，<a class=\"link\" href=\"https://redis.io/\">redis官网<i class=\"fas fa-external-link-alt\"></i></a>有下载地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yum -y install gcc gcc-c++ kernel-devel</span><br><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装到指定目录</span></span><br><span class=\"line\">make PERFIX=/usr/<span class=\"built_in\">local</span>/redis  install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若在编译过程中出现错，可以尝试删除掉解压的 redis 包重新解压在编译一次。</p>\n</blockquote>\n<ol start=\"2\">\n<li>启动</li>\n</ol>\n<p>将编译包中的 redis.conf 和 sentinel.conf 文件复制到 redis/conf 目录下，方便配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定配置文件启动</span></span><br><span class=\"line\">redis/bin/redis-server redis/conf/redis.conf</span><br></pre></td></tr></table></figure>\n<p>启动之后会看到 redis 的logo:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">              _._                                                  </span><br><span class=\"line\">          _.-&#96;&#96;__ &#39;&#39;-._                                             </span><br><span class=\"line\">     _.-&#96;&#96;    &#96;.  &#96;_.  &#39;&#39;-._           Redis 4.0.6 (00000000&#x2F;0) 64 bit</span><br><span class=\"line\"> .-&#96;&#96; .-&#96;&#96;&#96;.  &#96;&#96;&#96;\\&#x2F;    _.,_ &#39;&#39;-._                                   </span><br><span class=\"line\">(    &#39;      ,       .-&#96;  | &#96;,    )     Running in standalone mode</span><br><span class=\"line\">|&#96;-._&#96;-...-&#96; __...-.&#96;&#96;-._|&#39;&#96; _.-&#39;|     Port: 6379</span><br><span class=\"line\">|    &#96;-._   &#96;._    &#x2F;     _.-&#39;    |     PID: 24482</span><br><span class=\"line\"> &#96;-._    &#96;-._  &#96;-.&#x2F;  _.-&#39;    _.-&#39;                                   </span><br><span class=\"line\">|&#96;-._&#96;-._    &#96;-.__.-&#39;    _.-&#39;_.-&#39;|                                  </span><br><span class=\"line\">|    &#96;-._&#96;-._        _.-&#39;_.-&#39;    |           http:&#x2F;&#x2F;redis.io        </span><br><span class=\"line\"> &#96;-._    &#96;-._&#96;-.__.-&#39;_.-&#39;    _.-&#39;                                   </span><br><span class=\"line\">     &#96;-._    &#96;-.__.-&#39;    _.-&#39;                                   </span><br><span class=\"line\">         &#96;-._        _.-&#39;                                </span><br><span class=\"line\">             &#96;-.__.-&#39;                                   </span><br><span class=\"line\">                   </span><br></pre></td></tr></table></figure>\n<p>使用 redis-cli 连接测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 客户端连接</span></span><br><span class=\"line\">redis/bin/redis-cli</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n<p>完成以上步骤，redis 就使用默认配置启动成功了。</p>\n<h6 id=\"redis-可视化工具\"><a href=\"#redis-可视化工具\" class=\"headerlink\" title=\"redis 可视化工具\"></a>redis 可视化工具</h6><p>推荐一款免费的 windows 下 redis 可视化工具<a class=\"link\" href=\"http://electronjs.org/apps/anotherredisdesktopmanager\">Anotherredisdesktopmanager<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><p>redis 在配置文件中提供了很多可供修改的参数，在实际使用中需要对这些参数进行配置在使用。</p>\n<h6 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h6><p>绑定地址，0.0.0.0(默认) 允许任何互联网上的机器访问，这种配置方式很不安全，127.0.0.1 只允许本机客户端连接，这种是最安全的。配置多个主机访问为 <code>bind 127.0.0.1 192.268.31.108</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1</span><br></pre></td></tr></table></figure>\n<h6 id=\"protected-mode\"><a href=\"#protected-mode\" class=\"headerlink\" title=\"protected-mode\"></a>protected-mode</h6><p>保护模式，可选参数 yes/on，yes 为开启状态。在开启状态时，当没有指定 bind 等参数时，默认 <code>bind 127.0.0.1</code>，如果设置为 no 时，则默认指定 bind 为 <code>bind 0.0.0.0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected-mode</span><br></pre></td></tr></table></figure>\n<h6 id=\"port\"><a href=\"#port\" class=\"headerlink\" title=\"port\"></a>port</h6><p>访问端口，默认 6379</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 6379</span><br></pre></td></tr></table></figure>\n<h6 id=\"timeout\"><a href=\"#timeout\" class=\"headerlink\" title=\"timeout\"></a>timeout</h6><p>连接断开时间（秒），当客户端连续空闲指定 timeout 时间后，就断开该连接，为 0 时为禁止该功能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">timeout 0</span><br></pre></td></tr></table></figure>\n<h6 id=\"daemonize\"><a href=\"#daemonize\" class=\"headerlink\" title=\"daemonize\"></a>daemonize</h6><p>守护进程模式，可选参数 yes/on，yes 时 redis 服务以守护进程在后台执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure>\n<h6 id=\"pidfile\"><a href=\"#pidfile\" class=\"headerlink\" title=\"pidfile\"></a>pidfile</h6><p>当指定守护进程方式启动时，会在 pidfile 参数指定的目录下生成 PID 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pidfile /var/run/redis_6379.pid</span><br></pre></td></tr></table></figure>\n<h6 id=\"databases\"><a href=\"#databases\" class=\"headerlink\" title=\"databases\"></a>databases</h6><p>redis 数据库数量，默认 16</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">databases 16</span><br></pre></td></tr></table></figure>\n<h6 id=\"requirepass\"><a href=\"#requirepass\" class=\"headerlink\" title=\"requirepass\"></a>requirepass</h6><p>在客户端连接后设置密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置</span></span><br><span class=\"line\">config <span class=\"built_in\">set</span> requirepass <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">auth <span class=\"string\">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"redis-数据结构\"><a href=\"#redis-数据结构\" class=\"headerlink\" title=\"redis 数据结构\"></a>redis 数据结构</h5><p>redis 支持很多数据结构，String，List，Hash，Set，ZSet等，简单理解它每种数据结构，都是它的 value 对应的数据结构。</p>\n<h6 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h6><ol>\n<li>命令</li>\n</ol>\n<p><strong>GET</strong>,<strong>SET</strong><br>存入/获取字符串键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET key value</span><br><span class=\"line\">GET key  </span><br></pre></td></tr></table></figure>\n<p><strong>MSET</strong>,<strong>MGET</strong><br>批量存入/获取字符串键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSET key value [key value]</span><br><span class=\"line\">MGET key [key]</span><br></pre></td></tr></table></figure>\n<p>将用户对象使用批量字符串的方式保存在 redis</p>\n<table>\n<thead>\n<tr>\n<th>userId</th>\n<th>userName</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1001</td>\n<td>zhangsan</td>\n<td>20</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>lisi</td>\n<td>21</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSET user:1001:name zhangsan user:1001:age 20</span><br><span class=\"line\">127.0.0.1:6379&gt; MGET user:1001:name user:1001:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;20&quot;</span></span><br></pre></td></tr></table></figure>\n<p>以上命令将用户表记录按照批量字符的方式设置到了redis，如果将对象序列化成 json 格式保存一般字符串格式，这样在用户对象年龄或者其他单个字段有改变时会涉及到 JSON 格式转化设置之后在保存的操作，加重了代码量，代码可读性降低。如果用这种方式保存的话可以直接进行针对字段的修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; MSET user:1001:name zhangsanMOD</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; MGET user:1001:name</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsanMOD&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>SETNX</strong><br>存入不存在的键值对<br>当设置的 key 存在时，则设置不成功，当不存在时，设置成功。因为 redis 是单线程模型，此命令可以用来实现<strong>分布式锁功能</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置送出15001礼物价值1000元</span></span><br><span class=\"line\">SETNX gift:15001 1000</span><br></pre></td></tr></table></figure>\n<p><strong>DEL</strong><br>删除一个键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEL gift:15001</span><br></pre></td></tr></table></figure>\n<p><strong>INCR</strong><br>计数器<br>这个命令可以很方便的对 key 的 value 加 1 操作，而且不用考虑并发等问题，在实际场景中<strong>文章阅读量可以使用此功能来实现</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 111111 文章对应的阅读量</span></span><br><span class=\"line\">INCR article:readcount:111111</span><br></pre></td></tr></table></figure>\n<p><strong>INCRBY</strong><br>增量添加<br>将 key 中储存的数字加上指定的增量值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 键不存在时初始化为 0 之后在加 50</span></span><br><span class=\"line\">INCRBY gift:15001:count 50</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用</li>\n</ol>\n<blockquote>\n<p>分布式锁功能简单实现<br>文章阅读量<br>分布式 session 保存，用于权限认证。</p>\n</blockquote>\n<h6 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h6><ol>\n<li>命令</li>\n</ol>\n<p><strong>HSET</strong>,<strong>HGET</strong><br>存储/获取键值对</p>\n<p>Hash 结构的 key 对应的值类似于 Java 中的 HashMap 结构。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HSET key field value</span><br><span class=\"line\">HGET key field</span><br></pre></td></tr></table></figure>\n<p>上面将用户信息用 <code>MSET</code> 以批量字符串的形式存储，现在将用户表中用户信息用 Hash 结构存储：</p>\n<table>\n<thead>\n<tr>\n<th>userId</th>\n<th>userName</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1001</td>\n<td>zhangsan</td>\n<td>20</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>lisi</td>\n<td>21</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HSET user 1001:name zhangsan</span><br><span class=\"line\">HSET user 1001:age 20</span><br><span class=\"line\"><span class=\"comment\"># 获取 key 中的属性对应的值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HGET user 1001:name</span><br><span class=\"line\"><span class=\"string\">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>HMSET</strong>,<strong>HMGET</strong><br>存储多个键值对（批量）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMSET key field value [key field valye]</span><br><span class=\"line\">HMGET key field [field]</span><br></pre></td></tr></table></figure>\n<p>使用批量的方式存储用户 <code>lisi</code> 的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMSET user 1002:name lisi 1002:age 21</span><br><span class=\"line\">HMGET user 1002:name 1002:age</span><br><span class=\"line\"><span class=\"comment\"># 批量获取</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HMGET user 1002:name 1002:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;21&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取多个</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HMGET user 1001:name 1001:age 1002:name 1002:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>HSETNX</strong><br>存储一个不存在的键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HSETNX key field value</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\">#第二次设置不成功</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>HDEL</strong><br>删除键对应的属性 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HDEL key field [field]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HDEL gift 15000:count</span><br><span class=\"line\"><span class=\"comment\"># 删除之后重新设置成功</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<p><strong>HLEN</strong><br>Hash 表大小</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HLEN key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HLEN user</span><br><span class=\"line\"><span class=\"comment\"># 用户 Hash 表大小 4 </span></span><br><span class=\"line\">127.0.0.1:6379&gt; HLEN user</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></figure>\n<p><strong>HGETALL</strong><br>Hash 表所有的键值对 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HGETALL key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HGETALL user</span><br><span class=\"line\"><span class=\"comment\"># 用户表中所有键值对</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL user</span><br><span class=\"line\">1) <span class=\"string\">&quot;1001:name&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;1001:age&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;1002:name&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;lisi&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;1002:age&quot;</span></span><br><span class=\"line\">8) <span class=\"string\">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>HINCRBY</strong><br>Hash 表 key 中属性的键的值设置增量（increment）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HINCRBY key field increament</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 1001 年龄 +1</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY user 1001:age 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 21</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用</li>\n</ol>\n<p>购物车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 用户 ID 为 key</span><br><span class=\"line\">2. 商品 ID 为 field</span><br><span class=\"line\">3. 商品数量为 value</span><br><span class=\"line\"><span class=\"comment\"># 购物车操作</span></span><br><span class=\"line\">1. 添加：                 HSET cart:1001 2001 1</span><br><span class=\"line\">2. 增加数量：             HINCRBY cart:1001 2001 1</span><br><span class=\"line\">3. 商品总数：             HLEN cart:1001</span><br><span class=\"line\">4. 删除商品：             HDEL cart:1001 2001</span><br><span class=\"line\">5. 获取购物车所有商品：    HGETALL cart:1001</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>用户 1001 添加 了 1 个 2001 商品到购物车</li>\n<li>用户 1001 又新增了 1 个商品 2001</li>\n<li>用户 1001 购物车商品总数</li>\n<li>用户 1001 删除购物车商品 2001 </li>\n<li>用户 1001 获取购物车所有商品 </li>\n</ol>\n</blockquote>\n<h6 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h6><p>List 结构中 key 对应的 value 是一个链表结构，<strong>实现常用数据结构</strong></p>\n<blockquote>\n<p>Stack(栈) = LPUSH + LPOP -&gt; FILO（先进后出）<br>Queue(队列) = LPUSH + RPOP<br>Blocking MQ(阻塞队列) = LPUSH + BRPOP 在阻塞队列中，LPUSH 一条数据之后，使用 BRPOP 获取数据，区别于 RPOP 的是，当 List 中没有数据时 BRPOP 会一直监听这个 List，有值被 push 进来它会立马获取</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 结构</span></span><br><span class=\"line\">           LPUSH                   RPUSH</span><br><span class=\"line\">key  ---&gt; |   a   |   b   |   c   |   d   |</span><br><span class=\"line\">           LPOP                    RPOP</span><br></pre></td></tr></table></figure>\n<ol>\n<li>命令</li>\n</ol>\n<p><strong>LPUSH</strong>,<strong>LPOP</strong><br>插入/取出一个或者多个值插入列表头部（最左边） </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LPUSH key value [value]</span><br><span class=\"line\">LPOP key</span><br></pre></td></tr></table></figure>\n<p>将礼物按照分类存入列表中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通礼物列表存入 4 个礼物</span></span><br><span class=\"line\">LPUSH ordinary 4001 4002 4003 4004</span><br><span class=\"line\">LPOP ordinary</span><br><span class=\"line\"><span class=\"comment\"># 4001 在最右边，第一次取出最左边的 4004</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPOP ordinary</span><br><span class=\"line\"><span class=\"string\">&quot;4004&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPOP ordinary</span><br></pre></td></tr></table></figure>\n<p><strong>RPUSH</strong>,<strong>RPOP</strong><br>插入/取出一个或者多个值插入列表头部（最右边）<br>这个命令和上面的命令是相同的结果，只是取出的位置不一样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPUSH key value [value]</span><br><span class=\"line\">RPOP key</span><br></pre></td></tr></table></figure>\n<p><strong>BLPOP</strong>,<strong>BRPOP</strong><br>列表头/尾取出一个元素，如果没有则阻塞等待，timeout = 0 时一直阻塞等待（timeout/s） </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BLPOP key [key] timeout</span><br><span class=\"line\">BRPOP key [key] timeout</span><br></pre></td></tr></table></figure>\n<p>监听礼物列表是否有商品，有则在右边阻塞取出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LPUSH ordinary 4001 4002 4003 4004</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 BRPOP 每次取出一条，如果没有，则一直等待</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BRPOP ordinary 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;ordinary&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;4001&quot;</span></span><br></pre></td></tr></table></figure>\n<p>等待时添加一个元素，等待中的 BRPOP 立马输出新添加的元素</p>\n<p><strong>LRANGE</strong><br>获取指定 key 列表区间的元素 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRANGE key start stop</span><br></pre></td></tr></table></figure>\n<p>获取 0-2 区间的值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; LPUSH ordinary 4001 4002 4003 4004</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE ordinary 0 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;4004&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;4003&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;4002&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用</li>\n</ol>\n<p>微信公众号的推送信息可以使用 List 结构，用户关注的公众号每推送一个消息，在用户对应的列表增加一个文章ID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 1001 有 5001，5002 两个推送文章消息</span></span><br><span class=\"line\">LPUSH 1001:msg 5001,5002</span><br></pre></td></tr></table></figure>\n<h6 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h6><p>Set 键值对中的值数据结构类似 Java 中 Set 集合中的 key 值结构，元素不能重复。</p>\n<ol>\n<li>命令</li>\n</ol>\n<p> <strong>SADD</strong>,<strong>SREM</strong><br>添加/删除集合中元素，添加时如果存在则忽略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SADD key member [member]</span><br><span class=\"line\">SREM key member</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 6001,6002 关注用户 1001</span></span><br><span class=\"line\">SADD user:1001:fans 6001 6002</span><br><span class=\"line\"><span class=\"comment\"># 用户 6002 取消关注用户 1001</span></span><br><span class=\"line\">SREM user:1001:fans 6002</span><br></pre></td></tr></table></figure>\n<p><strong>SMEMBERS</strong><br>获取集合所有元素 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SMEMBERS key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户 1001 粉丝</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class=\"line\">1) <span class=\"string\">&quot;6001&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>SISMEMBER</strong><br>判断元素是否存在 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SISMEMBER key member</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断 6002 是否在集合 user:1001:fans 中</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER user:1001:fans 6002</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<p><strong>SCARD</strong><br>获取集合元素个数 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SCARD key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取用户 1001 的粉丝数</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SCARD user:1001:fans</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<p><strong>SRANDMEMBER</strong><br>从集合随机获取 count 个元素，默认获取 1 个，元素不删除 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SRANDMEMBER key [count]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给用户 1001 添加粉丝</span></span><br><span class=\"line\">SADD user:1001:fans 6002 6003 6004 6005 6006</span><br><span class=\"line\"><span class=\"comment\"># 随机获取 2 个粉丝 ID</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER user:1001:fans 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;6002&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6006&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看用户 1001 的粉丝，刚刚查看的还在集合中</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class=\"line\">1) <span class=\"string\">&quot;6001&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6002&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;6003&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;6004&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;6005&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;6006&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>SPOP</strong><br>从集合随机获取 count 个元素，默认获取 1 个，删除元素 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPOP key [count]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机获取用户 1001 的 2 个粉丝</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SPOP user:1001:fans 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;6003&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6004&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看用户 1001 的粉丝，刚刚取出的已经被移除</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class=\"line\">1) <span class=\"string\">&quot;6001&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;6002&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;6005&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;6006&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用<br>微信小程序抽奖活动<blockquote>\n<ol>\n<li>用户 1001,1002,1003,1004 参与活动 7001 —-&gt; SADD act:7001 1001 1002 1003 1004</li>\n<li>查看参与 7001 活动的全部用户 —-&gt; SMEMBERS act:7001</li>\n<li>随机抽奖 2 名用户 —-&gt; SRANDMEMBER act:7001 2</li>\n<li>抽取 1 等奖 1 名，2 等奖 2 名(去除一等奖用户) —-&gt; SPOP act:7001 1 ,SPOP act:7001 2</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<p>微信点赞，收藏，标签</p>\n<blockquote>\n<ol>\n<li>用户 1002 点赞用户 1001 的朋友圈消息 8001 —-&gt; SADD like:1001:8001 1002</li>\n<li>取消点赞 —-&gt; SREM like:1001:8001 1002</li>\n<li>查看用户 1003 是否点赞 —-&gt; SISMEMBER like:1001:8001 1003</li>\n<li>获取点赞朋友列表 —-&gt; SMEMBERS like:1001:8001</li>\n<li>获取点赞用户数 —-&gt; SCARD like:1001:8001</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>Set 集合运算操作</li>\n</ol>\n<p>集合 set1:{a,b,e,f},set2:{c,d,e},set3:{a,b,e,g}</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 交集：多个集合中共有的元素</span></span><br><span class=\"line\">set1 set2 set3 ----&gt; &#123;e&#125;</span><br><span class=\"line\"><span class=\"comment\"># 并集：去重多个集合中所有元素</span></span><br><span class=\"line\">set1 set2 set3 ----&gt; &#123;a,b,c,d,e,f,g&#125;</span><br><span class=\"line\"><span class=\"comment\"># 差集：第一个集合和其他集合不一样的元素</span></span><br><span class=\"line\">set1 set2 set3 ----&gt; &#123;f&#125;</span><br></pre></td></tr></table></figure>\n<p>Set 中对应的集合运算<br><strong>SINTER</strong><br>交集运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SINTER set1 set2 set3</span><br></pre></td></tr></table></figure>\n<p><strong>SUNION</strong><br>并集运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUNION set1 set2 set3</span><br></pre></td></tr></table></figure>\n<p><strong>SDIFF</strong><br>差集运算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDIFF set1 set2 set3</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>运算应用<br>关注模型<blockquote>\n<ol>\n<li>zhangsan/lisi 关注的人：zhangsan/lisi 粉丝 set 集合</li>\n<li>zhangsan 和 list 共同关注：集合求并集 SINTER zhangsan lisi</li>\n<li>我关注的人也关注了他（wangwu）：遍历 zhangsan 关注列表用户是否关注 wangwu SISMEMBER</li>\n<li>可能认识的人：求差集 SDIFF zhangsan lisi</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"ZSet\"><a href=\"#ZSet\" class=\"headerlink\" title=\"ZSet\"></a>ZSet</h6><p>有序集合，且不允许有重复的元素，通过 score 对集合中元素排序<br><strong>ZADD</strong>,<strong>ZREM</strong><br>添加/移除集合中的元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZADD key score member [score member]</span><br><span class=\"line\">ZREM key member [member]</span><br></pre></td></tr></table></figure>\n<p>通过热度值对直播房间排序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 房间 1100 的热度值 90000</span></span><br><span class=\"line\">ZADD room:sort 90000 1100 80000 2200 70000 3300</span><br><span class=\"line\"><span class=\"comment\"># 移除 3300 这个房间</span></span><br><span class=\"line\">ZREM room:sort 3300 </span><br></pre></td></tr></table></figure>\n<p><strong>ZCARD</strong><br>获取有序集合的元素个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZCARD key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZCARD room:sort</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n<p><strong>ZCOUNT</strong><br>获取有序集合 [min,max] 区间 score 元素数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZCOUNT key min max</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取 热度在80000-85000 之间的房间</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZCOUNT room:sort 80000 85000</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n<p><strong>ZINCRBY</strong><br>有序集合中指定成员 score 增加 increment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZINCRBY key increment member</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1100 房间热度增加 1000</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZINCRBY room:sort 1000 1100</span><br><span class=\"line\"><span class=\"string\">&quot;91000&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>ZRANGE</strong>,<strong>ZREVRANGE</strong><br>有序集合 [start,stop] 区间元素，通过 score，递增/递减<br>start 和 stop 都是以 0 开始，0 表示第一个元素，1 表示第二个，以此类推<br>负数下标 -1 表示倒数第一个元素，-2 表示倒数第二个元素，以此类推</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZRANGE key start stop [WITHSCORES]</span><br><span class=\"line\">ZREVRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递增排序 room:sort 下所有元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE room:sort 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;2200&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;80000&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;1100&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;91000&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 递减排序 room:sort 下所有元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE room:sort 0 -1 WITHSCORES</span><br><span class=\"line\">1) <span class=\"string\">&quot;1100&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;91000&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;2200&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;80000&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>ZUNIONSTORE</strong><br>运算多个有序集合并集，并存储在新 key 中, <code>destination</code>新集合 key 值，<code>numkeys</code>合并的集合个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZUNIONSTORE destination numkeys key [key]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加房间在线人数集合</span></span><br><span class=\"line\">ZADD room:onlinenum 800 3300 1000 4400</span><br><span class=\"line\"><span class=\"comment\"># 合并房间在线人数集合和房间热度集合为房间信息集合 room:info</span></span><br><span class=\"line\">ZUNIONSTORE room:info 2 room:sort room:onlinenum</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>应用<br>各类排行榜实现</li>\n</ol>\n<blockquote>\n<ol>\n<li>用户点击新闻 —-&gt; ZINCRBY hotnews:20191125 1 学好redis</li>\n<li>展示当日排行榜前十 —-&gt; ZREVRANGE hotnews:20191125 0 10 WITHSORES</li>\n<li>七日搜索榜统计 —-&gt; ZUNIONSTROE hotnews:20191119-20191125 7 hotnews:20191119 … hotnews:20191125</li>\n<li>七日排行前十 —-&gt; ZREVRANGE hotnews:20191119-20191125 0 10 WITHSCORES</li>\n</ol>\n</blockquote>\n<p>参考 <a class=\"link\" href=\"https://testerhome.com/topics/16402\">testerhome<i class=\"fas fa-external-link-alt\"></i></a>,<a class=\"link\" href=\"http://redis.io/\">redis<i class=\"fas fa-external-link-alt\"></i></a> 官网，<a class=\"link\" href=\"http://redisdoc.com/\">redisdoc<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<center>拥有每一天</center>"},{"title":"支付宝微信一码支付","date":"2019-12-01T01:26:20.000Z","_content":"\n![Photo by kejsirajbek on wallhaven.cc](/alipay-wechatpay-qr.png)\n\n前几天有个需求要将支付宝和微信扫码集中在同一个二维码上面。当时已经上线了微信各种渠道支付（Native，公众号，H5）,支付宝上线了 Native，H5 支付，于是开始了一码多付的开发。在开发过程中也碰到了一些问题，好在快速解决了问题。\n<!--more-->\n\n\n##### 问题\n\n1. 微信\n从微信官方文档了解到扫码支付需要使用公众号支付方式拉起支付进行支付，这个过程需要进行用户认证等操作，从开发的角度来讲比较麻烦，而且多了认证操作，虽然可以使用静默授权（微信提供的一种用户无感知的授权方式）但是在加载过程中需要耗费更多的时间，用户体验降低。\n2. 支付宝\n支付宝支付在官方了解到使用当面付功能可以完成扫码支付，前端 jssdk 也具备拉起的方式。但是在开发过程中发现公司账号没有开通此功能，申请需要 1-2 天时间，时间上来不及，于是和前端同学试了支付宝也采用 H5 支付的方式，结果完美解决。支付宝还是很方便的，在交互还是开发方面。\n3. 对账\n这里其实可以不用回调也可以的，因为没有业务逻辑需要在回调处理，但是因为公司也使用H5,Native 支付 方式，所以这里需要记录下，方便后期对账等操作。\n\n##### 思路\n前端页面使用 userAgent 判断是微信还是支付宝扫码进入的，如果是支付宝，跳转到支付宝 H5 支付的方式，后端返回 H5 支付返回的 Form 表单，前端直接拉起支付宝支付。如果是微信扫码进来，则跳转到微信支付静默授权链接，后端处理跳转到相应的 H5 支付页面进行处理。完成之后把前端判断是支付宝还是微信的页面生成二维码作为入口，就可以完美实现了。\n\n##### alipay\n\n1. 引入支付宝提供的 SDK\n\n```xml\n<!--支付宝sdk-->\n<dependency>\n    <groupId>com.alipay.sdk</groupId>\n    <artifactId>alipay-sdk-java</artifactId>\n    <version>4.7.1.ALL</version>\n</dependency>\n```\n\n2. 配置文件\n```properties\n# 是否启用沙盒支付\nalipay.sandbox=false\n# 支付宝后台获取 appId\nalipay.appId=your.app.id\n# 私有 key\nalipay.privateKey=your.private.key\n# 公有 key\nalipay.alipayPublicKey=your.public.key\n# 回调\nalipay.qr.notifyUrl=https://${your.domain}/alipay/notify\n```\n\n3. 配置\n```java\n@Data\n@Component\npublic class AlipayProperties {\n\n    /**\n     * 是否沙箱环境\n     */\n    @Value(\"${alipay.sandbox}\")\n    private Boolean isTest;\n    /**\n     * 应用ID\n     */\n    @Value(\"${alipay.appId}\")\n    private String appId;\n    /**\n     * 应用私钥\n     */\n    @Value(\"${alipay.privateKey}\")\n    private String privateKey;\n    /**\n     * 支付宝公钥\n     */\n    @Value(\"${alipay.alipayPublicKey}\")\n    private String alipayPublicKey;\n\n    /**\n     * 支付异步回调地址\n     */\n    @Value(\"${alipay.notifUrl}\")\n    private String notifyUrl;\n\n    /**\n     * 获取当前配置环境网关\n     */\n    public String obtainUrl() {\n        // 沙盒环境\n        if (this.isTest) {\n            return \"https://openapi.alipaydev.com/gateway.do\";\n        } else {\n            return \"https://openapi.alipay.com/gateway.do\";\n        }\n    }\n\n}\n\n```\n\n4. 对接\n\n**支付controller**\n```java\n/**\n    * 支付宝扫码支付\n    */\n@RequestMapping(\"/alipay\")\npublic ResponseMsg qrAlipay(HttpServletRequest request,\n                            @RequestBody QrPayRequestParams qrPayRequestParams,\n                            @RequestHeader(value = \"activityId\", required = false) String activityId) {\n    // 参数校验省略\n    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());\n    // 活动标记\n    qrPayRequestParams.setActivityId(activityId);\n    log.info(\"支付宝扫码参数：{}\", qrPayRequestParams.toString());\n    AliResultParams params = qrPaymentService.qrAlipay(qrPayRequestParams);\n    ResponseMsg<AliResultParams> msg = new ResponseMsg<>(Code.SUCCESSED, Constants.SUCCESS);\n    msg.setData(params);\n    return msg;\n}\n```\n**支付service**\n```java\n//存在多个回调，这里指定到具体回调\n@Value(\"${alipay.qr.notifyUrl}\")\nprivate String alipayQrNotifyUrl;\n/**\n    * 支付宝扫码支付\n    * @param qrPayRequestParams params\n    * @return form table\n    */\n@Override\npublic AliResultParams qrAlipay(QrPayRequestParams qrPayRequestParams) {\n    // 创建订单-根据具体业务\n    //QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams, QrPayConstants.PAYWAY_ALIPAY);\n    // 支付宝支付\n    AlipayClient alipayClient = new DefaultAlipayClient(alipayProperties.obtainUrl(),\n            alipayProperties.getAppId(), alipayProperties.getPrivateKey(),\n            AlipayConstants.FORMAT_JSON, AlipayConstants.CHARSET_UTF8, alipayProperties.getAlipayPublicKey(),\n            AlipayConstants.SIGN_TYPE_RSA2);\n    AlipayTradeWapPayRequest request = new AlipayTradeWapPayRequest();\n    AlipayTradeWapPayModel model = new AlipayTradeWapPayModel();\n    //该笔订单允许的最晚付款时间，逾期将关闭交易。\n    model.setTimeoutExpress(\"30m\");\n    model.setTotalAmount(qrPayRequestParams.getMoney());\n    model.setSubject(\"XXXX\");\n    // 更具具体业务生成的订单号\n    //model.setOutTradeNo(order.getRechargeOrderId());\n    model.setOutTradeNo(\"201912011111111111\");\n    model.setProductCode(\"XXXX\");\n    request.setBizModel(model);\n    request.setNotifyUrl(alipayQrNotifyUrl);\n    request.setReturnUrl(qrPayRequestParams.getReturnUrl());\n    try {\n        log.info(\"支付宝扫码请求参数：{}\",request.getTextParams());\n        AlipayTradeWapPayResponse response = alipayClient.pageExecute(request);\n        log.info(\"请求信息：{}\",response.getBody());\n        AliResultParams params = AliResultParams.builder().alipayParams(response.getBody()).build();\n        if (response.getBody().contains(model.getOutTradeNo())) {\n            params.setAlipayTradeNo(model.getOutTradeNo());\n        }\n        return params;\n    } catch (AlipayApiException e) {\n        e.printStackTrace();\n        return AliResultParams.builder().build();\n    }\n}\n```\n###### 回调\n**回调controller**\n```java\n/**\n * 支付宝扫码回调\n */\n@RequestMapping(\"/alipay/notify\")\npublic String alipayNotify(HttpServletRequest request) {\n    log.info(\"进入支付宝扫码支付回调\");\n    try {\n        return qrPaymentService.alipayNotify(request);\n    } catch (AlipayApiException e) {\n        e.printStackTrace();\n        log.info(\"支付宝扫码支付回调失败\");\n        return \"fail\";\n    }\n}\n```\n**回调service**\n```java\n/**\n * 支付宝扫码支付回调\n */\n@Override\npublic String alipayNotify(HttpServletRequest request) throws AlipayApiException {\n    Map<String, String> map;\n    Map<String, String[]> requestParams = request.getParameterMap();\n    map = this.paramsString(requestParams);\n    String outTradeNo = map.get(\"out_trade_no\");\n    String tradeStatus = map.get(\"trade_status\");\n    String tradeNo = map.get(\"trade_no\");\n    boolean signVerified = AlipaySignature.rsaCheckV1(map, alipayProperties.getAlipayPublicKey(),\n            AlipayConstants.CHARSET_UTF8, AlipayConstants.SIGN_TYPE_RSA2);\n    log.info(\"支付宝扫码参数：out_trade_no：{}，trade_status，{}，trade_no，{}，校验结果：{}\",\n            outTradeNo, tradeStatus, tradeNo,signVerified);\n    // 校验订单-省略\n    \n    // 验签通过，验证金额通过\n    return \"success\";\n    // 检验失败\n    return \"fail\";\n}\n\n/**\n * 拼接参数\n */\nprivate Map<String, String> paramsString(Map<String, String[]> requestParams) {\n    Map<String, String> map = new HashMap<>();\n    for (String name : requestParams.keySet()) {\n        String[] values = requestParams.get(name);\n        String valueStr = \"\";\n        for (int i = 0; i < values.length; i++) {\n            valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + \",\";\n            System.out.println(valueStr);\n        }\n        map.put(name, valueStr);\n    }\n    log.info(\"支付宝扫码支付参数：{}\",map);\n    return map;\n}\n```\n**entity**\n```java\n// 封装微信和支付宝请求实体\n@Data\n@ToString\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class QrPayRequestParams {\n\n    private String openId;\n\n    /**\n     * 金额 - 元\n     */\n    private Double money;\n\n    private String remoteAddr;\n    private String activityId;\n    private String returnUrl;\n}\n\n// 封装支付宝返回参数信息\n@Data\n@ToString\n@Builder\npublic class AliResultParams {\n    private String alipayParams;\n    private String alipayTradeNo;\n}\n```\n以上就完成了支付宝扫码支付的整个流程，手机网站支付的[官方文档](https://docs.open.alipay.com/203)。\n\n##### weChat pay\n\n这里使用了微信公众号支付，需要进行授权处理。个人感觉步骤比较繁琐。\n\n###### 授权\n\n微信[网页授权](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html)官方说明，扫码支付时采用静默授权，用户无感知状态下完成支付动作。主要有以下几步（官网）：\n1. 引导用户进入授权页面同意授权，获取code\n\n以下链接可以直接复制到微信客户端打开\n> https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&response_type=code&scope=snsapi_base&state=123#wechat_redirect\n\n\n2. 通过code换取网页授权access_token（与基础支持中的access_token不同）\n\n3. 如果需要，开发者可以刷新网页授权access_token，避免过期\n\n4. 通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）\n\n```java\n/**\n * 静默授权页面跳转，这里 `/wx/gzh/pay/menu` 就是上面链接中的 redirect_uri 的内容，获取到openId之后重定向到具体的业务页面\n *\n * @param request 请求实体\n * @return 页面\n*/\n@RequestMapping(\"/wx/gzh/pay/menu\")\npublic ModelAndView payGuguDou(HttpServletRequest request) {\n    String code = request.getParameter(\"code\");\n    if (StringUtils.isBlank(code)) {\n        throw new ParamDefectException(Code.WARN, \"没有获取到用户微信code\");\n    }\n    try {\n        String openId = mpService.authorization(code);\n        if (StringUtils.isBlank(openId)) {\n            return null;\n        }\n        ModelAndView mv = new ModelAndView(\"redirect:\" + htmlUrl + \"/pay.html\");\n        mv.addObject(\"openId\", openId);\n        return mv;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n\n/**\n * 获取 openId\n *\n * @param code code\n * @return result\n*/\n@Override\npublic String authorization(String code) {\n    log.info(\"voi获取的code ： {}，开始调用网页授权\", code);\n    String wxUrl = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid=\" + properties.getAppId()\n            + \"&secret=\" + properties.getAppSecret() + \"&code=\" + code + \"&grant_type=authorization_code\";\n    String weiUserJson = OkHttpUtil.getSent(wxUrl, null, null);\n    JSONObject jsonObject = JSONObject.parseObject(weiUserJson);\n    String openid = jsonObject.getString(\"openid\");\n    log.info(\" voi结束调用网页授权，网页授权获取到的openid：{}\", openid);\n    return openid;\n}\n\n/**\n * 获取accessToken\n *\n * @param url 拉起支付的页面路径\n * @return info\n*/\n@Override\npublic ResponseMsg signature(String url) {\n    this.getAccessToken();\n    String noncestr = RandomUtils.getRandomStr();\n    String timestamp = System.currentTimeMillis() + \"\";\n    timestamp = timestamp.substring(0, timestamp.length() - 3);\n\n    String string1 = \"jsapi_ticket=\" + jsToken + \"&noncestr=\" + noncestr +\n            \"&timestamp=\" + timestamp + \"&url=\" + url;\n    //加密\n    String signature = SHAUtil.SHA1(string1);\n    // 返回参数\n    Map<String, String> o = new HashMap<>(8);\n    o.put(\"jsapiticket\", jsToken);\n    o.put(\"noncestr\", noncestr);\n    o.put(\"timestamp\", timestamp);\n    o.put(\"url\", url);\n    o.put(\"signature\", signature);\n    o.put(\"appid\", properties.getAppId());\n    ResponseMsg<Map> msg = new ResponseMsg<>(Code.SUCCESSED, Constants.SUCCESS);\n    msg.setData(o);\n    return msg;\n}\n\n/**\n * 获取 ticket\n*/\nprivate void getAccessToken() {\n    String accessTokenUrl = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\" +\n            properties.getAppId() + \"&secret=\" + properties.getAppSecret();\n\n    String sent = OkHttpUtil.getSent(accessTokenUrl, null, null);\n    JSONObject accessJsonObject = JSONObject.parseObject(sent);\n    String accessToken = accessJsonObject.getString(\"access_token\");\n    String jsTokenUrl = \"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\" + accessToken + \"&type=jsapi\";\n    String jsTokenResult = OkHttpUtil.getSent(jsTokenUrl, null, null);\n    JSONObject jsTokenJsonObject = JSONObject.parseObject(jsTokenResult);\n    if (jsTokenJsonObject != null) {\n        int errcode = jsTokenJsonObject.getInteger(\"errcode\");\n        if (errcode == 0) {\n            jsToken = jsTokenJsonObject.getString(\"ticket\");\n        }\n    }\n}\n```\n完成以上动作，就完成了对用户的静默授权，**在这次扫码支付中，用户微信扫码进入到入口页面，通过 userAgent 判断时微信扫码进入后，直接跳转到下面授权链接（具体的参数需要自己的），然后开始输入金额进行支付** \n> https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&response_type=code&scope=snsapi_base&state=123#wechat_redirect\n\n\n###### 拉起支付\n\n**引入SDK**\n我这里引入了第三方开源包，[官方地址](https://github.com/Pay-Group/best-pay-sdk)\n```xml\n<dependency>\n    <groupId>cn.springboot</groupId>\n    <artifactId>best-pay-sdk</artifactId>\n    <version>1.2.0</version>\n</dependency>\n```\n\n**配置文件**\n```properties\n# mp weChat pay\ngzh.wx.appId=wx123456789\ngzh.wx.appSecret=afjidshu434234hwier3432\ngzh.wx.mchId=123456789\ngzh.wx.apiKey=Ydfsdfkf565sdf45d4\nqr.wx.notifyUrl=https://${your.domain}/wx/notify\n```\n\n**配置**\n```java\n@Data\n@Component\n@ConfigurationProperties\npublic class WxMpPayProperties {\n    @Value(\"${gzh.wx.appSecret}\")\n    private String appSecret;\n    /**\n     * 设置微信公众号或者小程序等的appid\n     */\n    @Value(\"${gzh.wx.appId}\")\n    private String appId;\n\n    /**\n     * 微信支付商户号\n     */\n    @Value(\"${gzh.wx.mchId}\")\n    private String mchId;\n\n    /**\n     * 微信支付商户密钥\n     */\n    @Value(\"${gzh.wx.apiKey}\")\n    private String mchKey;\n\n}\n```\n\n\n**支付Controller**\n```java\n\n/**\n * 微信扫码支付\n */\n@RequestMapping(\"/wechat\")\npublic ResponseMsg qrWechat(HttpServletRequest request,\n                            @RequestBody QrPayRequestParams qrPayRequestParams,\n                            @RequestHeader(value = \"activityId\",required = false) String activityId) {\n    // 安全校验（参数合法性等）-省略\n\n    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());\n    // 活动ID\n    qrPayRequestParams.setActivityId(activityId);\n    log.info(\"微信扫码参数：{}\", qrPayRequestParams.toString());\n    try {\n        WxPayMpOrderResult result = qrPaymentService.qrWechat(qrPayRequestParams);\n        ResponseMsg<WxPayMpOrderResult> msg = new ResponseMsg<>(Code.SUCCESSED, Constants.SUCCESS);\n        msg.setData(result);\n        return msg;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return new ResponseMsg(Code.FAILED, \"服务异常\");\n    }\n}\n```\n\n**支付Service**\n```java\n//存在多个回调，这里指定到具体回调\n@Value(\"${qr.wx.notifyUrl}\")\nprivate String wxQrNotifyUrl;\n/**\n* 微信二维码支付\n*\n* @param qrPayRequestParams params\n* @return 支付参数\n*/\n@Override\npublic WxPayMpOrderResult qrWechat(QrPayRequestParams qrPayRequestParams) {\n\n    // 创建订单-根据业务生成订单\n    //QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams,QrPayConstants.PAYWAY_WECHAT);\n    //log.info(\"扫码支付创建订单：{}\", order.toString());\n\n    // 微信公众号支付参数\n    PayRequest orderRequest = new PayRequest();\n    orderRequest.setOpenid(qrPayRequestParams.getOpenId());\n    //orderRequest.setOrderAmount(order.getPayMoney());\n    orderRequest.setOrderAmount(1000);\n    orderRequest.setOrderId(order.getRechargeOrderId());\n    orderRequest.setSpbillCreateIp(qrPayRequestParams.getRemoteAddr());\n    orderRequest.setOrderName(\"XXXX\");\n    orderRequest.setPayTypeEnum(BestPayTypeEnum.WXPAY_H5);\n    //统一下单\n    wxPayH5Config.setNotifyUrl(wxQrNotifyUrl);\n    bestPayService.setWxPayH5Config(wxPayH5Config);\n    PayResponse payResponse = bestPayService.pay(orderRequest);\n\n    // 加签返回结果\n    WxPayMpOrderResult payResult = WxPayMpOrderResult.builder()\n            .appId(payResponse.getAppId())\n            .timeStamp(String.valueOf(System.currentTimeMillis() / 1000))\n            .nonceStr(payResponse.getNonceStr())\n            .packageValue(payResponse.getPackAge())\n            .signType(\"MD5\")\n            .build();\n    payResult.setPaySign(SignUtils.createSign(payResult, null, this.wxPayH5Config.getMchKey(), new String[]{}));\n    return payResult;\n}\n```\n\n###### 回调\n**回调Controller**\n```java\n/**\n * 微信支付回调\n */\n@RequestMapping(\"/wx/notify\")\npublic String wxNotify(@RequestBody String xmlData) {\n    log.info(\"***********微信扫码回调参数：{}**************\", xmlData);\n    try {\n        return qrPaymentService.wxNotify(xmlData);\n    } catch (Exception e) {\n        e.printStackTrace();\n        log.error(\"微信扫码回调处理异常\");\n        return QrPayConstants.WX_NOTIFY_ERROR;\n    }\n}\n```\n\n**回调Service**\n```java\n /**\n    * 微信扫码支付回调\n    *\n    * @param xmlData 回调信息\n    * @return 返回给微信服务器处理结果\n    */\n@Override\npublic String wxNotify(String xmlData) throws WxPayException {\n    log.info(\"微信扫码回调开始解析\");\n    final WxPayOrderNotifyResult notifyResult = this.wxPayService.parseOrderNotifyResult(xmlData);\n    log.info(\"解析结果{}\", notifyResult.getOutTradeNo());\n    if (!\"SUCCESS\".equals(notifyResult.getReturnCode()) || !\"SUCCESS\".equals(notifyResult.getResultCode())) {\n        log.info(\"订单校验出错\");\n        return QrPayConstants.WX_NOTIFY_ERROR;\n    }\n    String rechargeOrderId = notifyResult.getOutTradeNo();\n    // 具体的参数校验-省略\n    \n    // 校验成功\n    return QrPayConstants.WX_NOTIFY_SUCCESS;\n    // 校验失败\n    return QrPayConstants.WX_NOTIFY_ERROR;\n}\n```\n微信回调会走多次，在订单成功的情况下需要设置状态等确保成功业务只执行一次，避免多次调用后数据错乱等情况发生。\n\n\n\n##### 总结\n1. 需要前后端配置完成，前期需要沟通确认使用哪种方式处理。（开发过程中因为对接方式的原因，延误了一些时间）\n2. 微信和支付宝的文档比较多，需要仔细阅读。\n\n> 今天中午出门逛了一大圈，有空还是多出去走走，毕竟小命要紧，保持身体健康是最重要的。\n\n***\n\n<center>2019-12-01 12月的第一天，我和小扣去了盒马，我觉得我更爱她了</center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/支付宝微信一码支付.md","raw":"---\ntitle: 支付宝微信一码支付\ndate: 2019-12-01 09:26:20\ntags: pay\ncategory: pay\n---\n\n![Photo by kejsirajbek on wallhaven.cc](/alipay-wechatpay-qr.png)\n\n前几天有个需求要将支付宝和微信扫码集中在同一个二维码上面。当时已经上线了微信各种渠道支付（Native，公众号，H5）,支付宝上线了 Native，H5 支付，于是开始了一码多付的开发。在开发过程中也碰到了一些问题，好在快速解决了问题。\n<!--more-->\n\n\n##### 问题\n\n1. 微信\n从微信官方文档了解到扫码支付需要使用公众号支付方式拉起支付进行支付，这个过程需要进行用户认证等操作，从开发的角度来讲比较麻烦，而且多了认证操作，虽然可以使用静默授权（微信提供的一种用户无感知的授权方式）但是在加载过程中需要耗费更多的时间，用户体验降低。\n2. 支付宝\n支付宝支付在官方了解到使用当面付功能可以完成扫码支付，前端 jssdk 也具备拉起的方式。但是在开发过程中发现公司账号没有开通此功能，申请需要 1-2 天时间，时间上来不及，于是和前端同学试了支付宝也采用 H5 支付的方式，结果完美解决。支付宝还是很方便的，在交互还是开发方面。\n3. 对账\n这里其实可以不用回调也可以的，因为没有业务逻辑需要在回调处理，但是因为公司也使用H5,Native 支付 方式，所以这里需要记录下，方便后期对账等操作。\n\n##### 思路\n前端页面使用 userAgent 判断是微信还是支付宝扫码进入的，如果是支付宝，跳转到支付宝 H5 支付的方式，后端返回 H5 支付返回的 Form 表单，前端直接拉起支付宝支付。如果是微信扫码进来，则跳转到微信支付静默授权链接，后端处理跳转到相应的 H5 支付页面进行处理。完成之后把前端判断是支付宝还是微信的页面生成二维码作为入口，就可以完美实现了。\n\n##### alipay\n\n1. 引入支付宝提供的 SDK\n\n```xml\n<!--支付宝sdk-->\n<dependency>\n    <groupId>com.alipay.sdk</groupId>\n    <artifactId>alipay-sdk-java</artifactId>\n    <version>4.7.1.ALL</version>\n</dependency>\n```\n\n2. 配置文件\n```properties\n# 是否启用沙盒支付\nalipay.sandbox=false\n# 支付宝后台获取 appId\nalipay.appId=your.app.id\n# 私有 key\nalipay.privateKey=your.private.key\n# 公有 key\nalipay.alipayPublicKey=your.public.key\n# 回调\nalipay.qr.notifyUrl=https://${your.domain}/alipay/notify\n```\n\n3. 配置\n```java\n@Data\n@Component\npublic class AlipayProperties {\n\n    /**\n     * 是否沙箱环境\n     */\n    @Value(\"${alipay.sandbox}\")\n    private Boolean isTest;\n    /**\n     * 应用ID\n     */\n    @Value(\"${alipay.appId}\")\n    private String appId;\n    /**\n     * 应用私钥\n     */\n    @Value(\"${alipay.privateKey}\")\n    private String privateKey;\n    /**\n     * 支付宝公钥\n     */\n    @Value(\"${alipay.alipayPublicKey}\")\n    private String alipayPublicKey;\n\n    /**\n     * 支付异步回调地址\n     */\n    @Value(\"${alipay.notifUrl}\")\n    private String notifyUrl;\n\n    /**\n     * 获取当前配置环境网关\n     */\n    public String obtainUrl() {\n        // 沙盒环境\n        if (this.isTest) {\n            return \"https://openapi.alipaydev.com/gateway.do\";\n        } else {\n            return \"https://openapi.alipay.com/gateway.do\";\n        }\n    }\n\n}\n\n```\n\n4. 对接\n\n**支付controller**\n```java\n/**\n    * 支付宝扫码支付\n    */\n@RequestMapping(\"/alipay\")\npublic ResponseMsg qrAlipay(HttpServletRequest request,\n                            @RequestBody QrPayRequestParams qrPayRequestParams,\n                            @RequestHeader(value = \"activityId\", required = false) String activityId) {\n    // 参数校验省略\n    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());\n    // 活动标记\n    qrPayRequestParams.setActivityId(activityId);\n    log.info(\"支付宝扫码参数：{}\", qrPayRequestParams.toString());\n    AliResultParams params = qrPaymentService.qrAlipay(qrPayRequestParams);\n    ResponseMsg<AliResultParams> msg = new ResponseMsg<>(Code.SUCCESSED, Constants.SUCCESS);\n    msg.setData(params);\n    return msg;\n}\n```\n**支付service**\n```java\n//存在多个回调，这里指定到具体回调\n@Value(\"${alipay.qr.notifyUrl}\")\nprivate String alipayQrNotifyUrl;\n/**\n    * 支付宝扫码支付\n    * @param qrPayRequestParams params\n    * @return form table\n    */\n@Override\npublic AliResultParams qrAlipay(QrPayRequestParams qrPayRequestParams) {\n    // 创建订单-根据具体业务\n    //QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams, QrPayConstants.PAYWAY_ALIPAY);\n    // 支付宝支付\n    AlipayClient alipayClient = new DefaultAlipayClient(alipayProperties.obtainUrl(),\n            alipayProperties.getAppId(), alipayProperties.getPrivateKey(),\n            AlipayConstants.FORMAT_JSON, AlipayConstants.CHARSET_UTF8, alipayProperties.getAlipayPublicKey(),\n            AlipayConstants.SIGN_TYPE_RSA2);\n    AlipayTradeWapPayRequest request = new AlipayTradeWapPayRequest();\n    AlipayTradeWapPayModel model = new AlipayTradeWapPayModel();\n    //该笔订单允许的最晚付款时间，逾期将关闭交易。\n    model.setTimeoutExpress(\"30m\");\n    model.setTotalAmount(qrPayRequestParams.getMoney());\n    model.setSubject(\"XXXX\");\n    // 更具具体业务生成的订单号\n    //model.setOutTradeNo(order.getRechargeOrderId());\n    model.setOutTradeNo(\"201912011111111111\");\n    model.setProductCode(\"XXXX\");\n    request.setBizModel(model);\n    request.setNotifyUrl(alipayQrNotifyUrl);\n    request.setReturnUrl(qrPayRequestParams.getReturnUrl());\n    try {\n        log.info(\"支付宝扫码请求参数：{}\",request.getTextParams());\n        AlipayTradeWapPayResponse response = alipayClient.pageExecute(request);\n        log.info(\"请求信息：{}\",response.getBody());\n        AliResultParams params = AliResultParams.builder().alipayParams(response.getBody()).build();\n        if (response.getBody().contains(model.getOutTradeNo())) {\n            params.setAlipayTradeNo(model.getOutTradeNo());\n        }\n        return params;\n    } catch (AlipayApiException e) {\n        e.printStackTrace();\n        return AliResultParams.builder().build();\n    }\n}\n```\n###### 回调\n**回调controller**\n```java\n/**\n * 支付宝扫码回调\n */\n@RequestMapping(\"/alipay/notify\")\npublic String alipayNotify(HttpServletRequest request) {\n    log.info(\"进入支付宝扫码支付回调\");\n    try {\n        return qrPaymentService.alipayNotify(request);\n    } catch (AlipayApiException e) {\n        e.printStackTrace();\n        log.info(\"支付宝扫码支付回调失败\");\n        return \"fail\";\n    }\n}\n```\n**回调service**\n```java\n/**\n * 支付宝扫码支付回调\n */\n@Override\npublic String alipayNotify(HttpServletRequest request) throws AlipayApiException {\n    Map<String, String> map;\n    Map<String, String[]> requestParams = request.getParameterMap();\n    map = this.paramsString(requestParams);\n    String outTradeNo = map.get(\"out_trade_no\");\n    String tradeStatus = map.get(\"trade_status\");\n    String tradeNo = map.get(\"trade_no\");\n    boolean signVerified = AlipaySignature.rsaCheckV1(map, alipayProperties.getAlipayPublicKey(),\n            AlipayConstants.CHARSET_UTF8, AlipayConstants.SIGN_TYPE_RSA2);\n    log.info(\"支付宝扫码参数：out_trade_no：{}，trade_status，{}，trade_no，{}，校验结果：{}\",\n            outTradeNo, tradeStatus, tradeNo,signVerified);\n    // 校验订单-省略\n    \n    // 验签通过，验证金额通过\n    return \"success\";\n    // 检验失败\n    return \"fail\";\n}\n\n/**\n * 拼接参数\n */\nprivate Map<String, String> paramsString(Map<String, String[]> requestParams) {\n    Map<String, String> map = new HashMap<>();\n    for (String name : requestParams.keySet()) {\n        String[] values = requestParams.get(name);\n        String valueStr = \"\";\n        for (int i = 0; i < values.length; i++) {\n            valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + \",\";\n            System.out.println(valueStr);\n        }\n        map.put(name, valueStr);\n    }\n    log.info(\"支付宝扫码支付参数：{}\",map);\n    return map;\n}\n```\n**entity**\n```java\n// 封装微信和支付宝请求实体\n@Data\n@ToString\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class QrPayRequestParams {\n\n    private String openId;\n\n    /**\n     * 金额 - 元\n     */\n    private Double money;\n\n    private String remoteAddr;\n    private String activityId;\n    private String returnUrl;\n}\n\n// 封装支付宝返回参数信息\n@Data\n@ToString\n@Builder\npublic class AliResultParams {\n    private String alipayParams;\n    private String alipayTradeNo;\n}\n```\n以上就完成了支付宝扫码支付的整个流程，手机网站支付的[官方文档](https://docs.open.alipay.com/203)。\n\n##### weChat pay\n\n这里使用了微信公众号支付，需要进行授权处理。个人感觉步骤比较繁琐。\n\n###### 授权\n\n微信[网页授权](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html)官方说明，扫码支付时采用静默授权，用户无感知状态下完成支付动作。主要有以下几步（官网）：\n1. 引导用户进入授权页面同意授权，获取code\n\n以下链接可以直接复制到微信客户端打开\n> https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&response_type=code&scope=snsapi_base&state=123#wechat_redirect\n\n\n2. 通过code换取网页授权access_token（与基础支持中的access_token不同）\n\n3. 如果需要，开发者可以刷新网页授权access_token，避免过期\n\n4. 通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）\n\n```java\n/**\n * 静默授权页面跳转，这里 `/wx/gzh/pay/menu` 就是上面链接中的 redirect_uri 的内容，获取到openId之后重定向到具体的业务页面\n *\n * @param request 请求实体\n * @return 页面\n*/\n@RequestMapping(\"/wx/gzh/pay/menu\")\npublic ModelAndView payGuguDou(HttpServletRequest request) {\n    String code = request.getParameter(\"code\");\n    if (StringUtils.isBlank(code)) {\n        throw new ParamDefectException(Code.WARN, \"没有获取到用户微信code\");\n    }\n    try {\n        String openId = mpService.authorization(code);\n        if (StringUtils.isBlank(openId)) {\n            return null;\n        }\n        ModelAndView mv = new ModelAndView(\"redirect:\" + htmlUrl + \"/pay.html\");\n        mv.addObject(\"openId\", openId);\n        return mv;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n\n/**\n * 获取 openId\n *\n * @param code code\n * @return result\n*/\n@Override\npublic String authorization(String code) {\n    log.info(\"voi获取的code ： {}，开始调用网页授权\", code);\n    String wxUrl = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid=\" + properties.getAppId()\n            + \"&secret=\" + properties.getAppSecret() + \"&code=\" + code + \"&grant_type=authorization_code\";\n    String weiUserJson = OkHttpUtil.getSent(wxUrl, null, null);\n    JSONObject jsonObject = JSONObject.parseObject(weiUserJson);\n    String openid = jsonObject.getString(\"openid\");\n    log.info(\" voi结束调用网页授权，网页授权获取到的openid：{}\", openid);\n    return openid;\n}\n\n/**\n * 获取accessToken\n *\n * @param url 拉起支付的页面路径\n * @return info\n*/\n@Override\npublic ResponseMsg signature(String url) {\n    this.getAccessToken();\n    String noncestr = RandomUtils.getRandomStr();\n    String timestamp = System.currentTimeMillis() + \"\";\n    timestamp = timestamp.substring(0, timestamp.length() - 3);\n\n    String string1 = \"jsapi_ticket=\" + jsToken + \"&noncestr=\" + noncestr +\n            \"&timestamp=\" + timestamp + \"&url=\" + url;\n    //加密\n    String signature = SHAUtil.SHA1(string1);\n    // 返回参数\n    Map<String, String> o = new HashMap<>(8);\n    o.put(\"jsapiticket\", jsToken);\n    o.put(\"noncestr\", noncestr);\n    o.put(\"timestamp\", timestamp);\n    o.put(\"url\", url);\n    o.put(\"signature\", signature);\n    o.put(\"appid\", properties.getAppId());\n    ResponseMsg<Map> msg = new ResponseMsg<>(Code.SUCCESSED, Constants.SUCCESS);\n    msg.setData(o);\n    return msg;\n}\n\n/**\n * 获取 ticket\n*/\nprivate void getAccessToken() {\n    String accessTokenUrl = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\" +\n            properties.getAppId() + \"&secret=\" + properties.getAppSecret();\n\n    String sent = OkHttpUtil.getSent(accessTokenUrl, null, null);\n    JSONObject accessJsonObject = JSONObject.parseObject(sent);\n    String accessToken = accessJsonObject.getString(\"access_token\");\n    String jsTokenUrl = \"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\" + accessToken + \"&type=jsapi\";\n    String jsTokenResult = OkHttpUtil.getSent(jsTokenUrl, null, null);\n    JSONObject jsTokenJsonObject = JSONObject.parseObject(jsTokenResult);\n    if (jsTokenJsonObject != null) {\n        int errcode = jsTokenJsonObject.getInteger(\"errcode\");\n        if (errcode == 0) {\n            jsToken = jsTokenJsonObject.getString(\"ticket\");\n        }\n    }\n}\n```\n完成以上动作，就完成了对用户的静默授权，**在这次扫码支付中，用户微信扫码进入到入口页面，通过 userAgent 判断时微信扫码进入后，直接跳转到下面授权链接（具体的参数需要自己的），然后开始输入金额进行支付** \n> https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&response_type=code&scope=snsapi_base&state=123#wechat_redirect\n\n\n###### 拉起支付\n\n**引入SDK**\n我这里引入了第三方开源包，[官方地址](https://github.com/Pay-Group/best-pay-sdk)\n```xml\n<dependency>\n    <groupId>cn.springboot</groupId>\n    <artifactId>best-pay-sdk</artifactId>\n    <version>1.2.0</version>\n</dependency>\n```\n\n**配置文件**\n```properties\n# mp weChat pay\ngzh.wx.appId=wx123456789\ngzh.wx.appSecret=afjidshu434234hwier3432\ngzh.wx.mchId=123456789\ngzh.wx.apiKey=Ydfsdfkf565sdf45d4\nqr.wx.notifyUrl=https://${your.domain}/wx/notify\n```\n\n**配置**\n```java\n@Data\n@Component\n@ConfigurationProperties\npublic class WxMpPayProperties {\n    @Value(\"${gzh.wx.appSecret}\")\n    private String appSecret;\n    /**\n     * 设置微信公众号或者小程序等的appid\n     */\n    @Value(\"${gzh.wx.appId}\")\n    private String appId;\n\n    /**\n     * 微信支付商户号\n     */\n    @Value(\"${gzh.wx.mchId}\")\n    private String mchId;\n\n    /**\n     * 微信支付商户密钥\n     */\n    @Value(\"${gzh.wx.apiKey}\")\n    private String mchKey;\n\n}\n```\n\n\n**支付Controller**\n```java\n\n/**\n * 微信扫码支付\n */\n@RequestMapping(\"/wechat\")\npublic ResponseMsg qrWechat(HttpServletRequest request,\n                            @RequestBody QrPayRequestParams qrPayRequestParams,\n                            @RequestHeader(value = \"activityId\",required = false) String activityId) {\n    // 安全校验（参数合法性等）-省略\n\n    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());\n    // 活动ID\n    qrPayRequestParams.setActivityId(activityId);\n    log.info(\"微信扫码参数：{}\", qrPayRequestParams.toString());\n    try {\n        WxPayMpOrderResult result = qrPaymentService.qrWechat(qrPayRequestParams);\n        ResponseMsg<WxPayMpOrderResult> msg = new ResponseMsg<>(Code.SUCCESSED, Constants.SUCCESS);\n        msg.setData(result);\n        return msg;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return new ResponseMsg(Code.FAILED, \"服务异常\");\n    }\n}\n```\n\n**支付Service**\n```java\n//存在多个回调，这里指定到具体回调\n@Value(\"${qr.wx.notifyUrl}\")\nprivate String wxQrNotifyUrl;\n/**\n* 微信二维码支付\n*\n* @param qrPayRequestParams params\n* @return 支付参数\n*/\n@Override\npublic WxPayMpOrderResult qrWechat(QrPayRequestParams qrPayRequestParams) {\n\n    // 创建订单-根据业务生成订单\n    //QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams,QrPayConstants.PAYWAY_WECHAT);\n    //log.info(\"扫码支付创建订单：{}\", order.toString());\n\n    // 微信公众号支付参数\n    PayRequest orderRequest = new PayRequest();\n    orderRequest.setOpenid(qrPayRequestParams.getOpenId());\n    //orderRequest.setOrderAmount(order.getPayMoney());\n    orderRequest.setOrderAmount(1000);\n    orderRequest.setOrderId(order.getRechargeOrderId());\n    orderRequest.setSpbillCreateIp(qrPayRequestParams.getRemoteAddr());\n    orderRequest.setOrderName(\"XXXX\");\n    orderRequest.setPayTypeEnum(BestPayTypeEnum.WXPAY_H5);\n    //统一下单\n    wxPayH5Config.setNotifyUrl(wxQrNotifyUrl);\n    bestPayService.setWxPayH5Config(wxPayH5Config);\n    PayResponse payResponse = bestPayService.pay(orderRequest);\n\n    // 加签返回结果\n    WxPayMpOrderResult payResult = WxPayMpOrderResult.builder()\n            .appId(payResponse.getAppId())\n            .timeStamp(String.valueOf(System.currentTimeMillis() / 1000))\n            .nonceStr(payResponse.getNonceStr())\n            .packageValue(payResponse.getPackAge())\n            .signType(\"MD5\")\n            .build();\n    payResult.setPaySign(SignUtils.createSign(payResult, null, this.wxPayH5Config.getMchKey(), new String[]{}));\n    return payResult;\n}\n```\n\n###### 回调\n**回调Controller**\n```java\n/**\n * 微信支付回调\n */\n@RequestMapping(\"/wx/notify\")\npublic String wxNotify(@RequestBody String xmlData) {\n    log.info(\"***********微信扫码回调参数：{}**************\", xmlData);\n    try {\n        return qrPaymentService.wxNotify(xmlData);\n    } catch (Exception e) {\n        e.printStackTrace();\n        log.error(\"微信扫码回调处理异常\");\n        return QrPayConstants.WX_NOTIFY_ERROR;\n    }\n}\n```\n\n**回调Service**\n```java\n /**\n    * 微信扫码支付回调\n    *\n    * @param xmlData 回调信息\n    * @return 返回给微信服务器处理结果\n    */\n@Override\npublic String wxNotify(String xmlData) throws WxPayException {\n    log.info(\"微信扫码回调开始解析\");\n    final WxPayOrderNotifyResult notifyResult = this.wxPayService.parseOrderNotifyResult(xmlData);\n    log.info(\"解析结果{}\", notifyResult.getOutTradeNo());\n    if (!\"SUCCESS\".equals(notifyResult.getReturnCode()) || !\"SUCCESS\".equals(notifyResult.getResultCode())) {\n        log.info(\"订单校验出错\");\n        return QrPayConstants.WX_NOTIFY_ERROR;\n    }\n    String rechargeOrderId = notifyResult.getOutTradeNo();\n    // 具体的参数校验-省略\n    \n    // 校验成功\n    return QrPayConstants.WX_NOTIFY_SUCCESS;\n    // 校验失败\n    return QrPayConstants.WX_NOTIFY_ERROR;\n}\n```\n微信回调会走多次，在订单成功的情况下需要设置状态等确保成功业务只执行一次，避免多次调用后数据错乱等情况发生。\n\n\n\n##### 总结\n1. 需要前后端配置完成，前期需要沟通确认使用哪种方式处理。（开发过程中因为对接方式的原因，延误了一些时间）\n2. 微信和支付宝的文档比较多，需要仔细阅读。\n\n> 今天中午出门逛了一大圈，有空还是多出去走走，毕竟小命要紧，保持身体健康是最重要的。\n\n***\n\n<center>2019-12-01 12月的第一天，我和小扣去了盒马，我觉得我更爱她了</center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"支付宝微信一码支付","published":1,"updated":"2021-01-31T06:31:35.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkkzeoxs004srh1t00lp803c","content":"<p><img src=\"/2019/12/01/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BE%AE%E4%BF%A1%E4%B8%80%E7%A0%81%E6%94%AF%E4%BB%98/alipay-wechatpay-qr.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>前几天有个需求要将支付宝和微信扫码集中在同一个二维码上面。当时已经上线了微信各种渠道支付（Native，公众号，H5）,支付宝上线了 Native，H5 支付，于是开始了一码多付的开发。在开发过程中也碰到了一些问题，好在快速解决了问题。</p>\n<a id=\"more\"></a>\n\n\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ol>\n<li>微信<br>从微信官方文档了解到扫码支付需要使用公众号支付方式拉起支付进行支付，这个过程需要进行用户认证等操作，从开发的角度来讲比较麻烦，而且多了认证操作，虽然可以使用静默授权（微信提供的一种用户无感知的授权方式）但是在加载过程中需要耗费更多的时间，用户体验降低。</li>\n<li>支付宝<br>支付宝支付在官方了解到使用当面付功能可以完成扫码支付，前端 jssdk 也具备拉起的方式。但是在开发过程中发现公司账号没有开通此功能，申请需要 1-2 天时间，时间上来不及，于是和前端同学试了支付宝也采用 H5 支付的方式，结果完美解决。支付宝还是很方便的，在交互还是开发方面。</li>\n<li>对账<br>这里其实可以不用回调也可以的，因为没有业务逻辑需要在回调处理，但是因为公司也使用H5,Native 支付 方式，所以这里需要记录下，方便后期对账等操作。</li>\n</ol>\n<h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>前端页面使用 userAgent 判断是微信还是支付宝扫码进入的，如果是支付宝，跳转到支付宝 H5 支付的方式，后端返回 H5 支付返回的 Form 表单，前端直接拉起支付宝支付。如果是微信扫码进来，则跳转到微信支付静默授权链接，后端处理跳转到相应的 H5 支付页面进行处理。完成之后把前端判断是支付宝还是微信的页面生成二维码作为入口，就可以完美实现了。</p>\n<h5 id=\"alipay\"><a href=\"#alipay\" class=\"headerlink\" title=\"alipay\"></a>alipay</h5><ol>\n<li>引入支付宝提供的 SDK</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--支付宝sdk--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alipay.sdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>alipay-sdk-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.7.1.ALL<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置文件<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是否启用沙盒支付</span></span><br><span class=\"line\"><span class=\"meta\">alipay.sandbox</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 支付宝后台获取 appId</span></span><br><span class=\"line\"><span class=\"meta\">alipay.appId</span>=<span class=\"string\">your.app.id</span></span><br><span class=\"line\"><span class=\"comment\"># 私有 key</span></span><br><span class=\"line\"><span class=\"meta\">alipay.privateKey</span>=<span class=\"string\">your.private.key</span></span><br><span class=\"line\"><span class=\"comment\"># 公有 key</span></span><br><span class=\"line\"><span class=\"meta\">alipay.alipayPublicKey</span>=<span class=\"string\">your.public.key</span></span><br><span class=\"line\"><span class=\"comment\"># 回调</span></span><br><span class=\"line\"><span class=\"meta\">alipay.qr.notifyUrl</span>=<span class=\"string\">https://$&#123;your.domain&#125;/alipay/notify</span></span><br></pre></td></tr></table></figure></li>\n<li>配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlipayProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否沙箱环境</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.sandbox&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isTest;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 应用ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.appId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appId;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 应用私钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.privateKey&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String privateKey;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支付宝公钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.alipayPublicKey&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alipayPublicKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支付异步回调地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.notifUrl&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String notifyUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前配置环境网关</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">obtainUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 沙盒环境</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isTest) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;https://openapi.alipay.com/gateway.do&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>对接</li>\n</ol>\n<p><strong>支付controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 支付宝扫码支付</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/alipay&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">qrAlipay</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestBody</span> QrPayRequestParams qrPayRequestParams,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestHeader(value = &quot;activityId&quot;, required = false)</span> String activityId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数校验省略</span></span><br><span class=\"line\">    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());</span><br><span class=\"line\">    <span class=\"comment\">// 活动标记</span></span><br><span class=\"line\">    qrPayRequestParams.setActivityId(activityId);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;支付宝扫码参数：&#123;&#125;&quot;</span>, qrPayRequestParams.toString());</span><br><span class=\"line\">    AliResultParams params = qrPaymentService.qrAlipay(qrPayRequestParams);</span><br><span class=\"line\">    ResponseMsg&lt;AliResultParams&gt; msg = <span class=\"keyword\">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">    msg.setData(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>支付service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在多个回调，这里指定到具体回调</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;alipay.qr.notifyUrl&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String alipayQrNotifyUrl;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 支付宝扫码支付</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> qrPayRequestParams params</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> form table</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AliResultParams <span class=\"title\">qrAlipay</span><span class=\"params\">(QrPayRequestParams qrPayRequestParams)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建订单-根据具体业务</span></span><br><span class=\"line\">    <span class=\"comment\">//QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams, QrPayConstants.PAYWAY_ALIPAY);</span></span><br><span class=\"line\">    <span class=\"comment\">// 支付宝支付</span></span><br><span class=\"line\">    AlipayClient alipayClient = <span class=\"keyword\">new</span> DefaultAlipayClient(alipayProperties.obtainUrl(),</span><br><span class=\"line\">            alipayProperties.getAppId(), alipayProperties.getPrivateKey(),</span><br><span class=\"line\">            AlipayConstants.FORMAT_JSON, AlipayConstants.CHARSET_UTF8, alipayProperties.getAlipayPublicKey(),</span><br><span class=\"line\">            AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class=\"line\">    AlipayTradeWapPayRequest request = <span class=\"keyword\">new</span> AlipayTradeWapPayRequest();</span><br><span class=\"line\">    AlipayTradeWapPayModel model = <span class=\"keyword\">new</span> AlipayTradeWapPayModel();</span><br><span class=\"line\">    <span class=\"comment\">//该笔订单允许的最晚付款时间，逾期将关闭交易。</span></span><br><span class=\"line\">    model.setTimeoutExpress(<span class=\"string\">&quot;30m&quot;</span>);</span><br><span class=\"line\">    model.setTotalAmount(qrPayRequestParams.getMoney());</span><br><span class=\"line\">    model.setSubject(<span class=\"string\">&quot;XXXX&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 更具具体业务生成的订单号</span></span><br><span class=\"line\">    <span class=\"comment\">//model.setOutTradeNo(order.getRechargeOrderId());</span></span><br><span class=\"line\">    model.setOutTradeNo(<span class=\"string\">&quot;201912011111111111&quot;</span>);</span><br><span class=\"line\">    model.setProductCode(<span class=\"string\">&quot;XXXX&quot;</span>);</span><br><span class=\"line\">    request.setBizModel(model);</span><br><span class=\"line\">    request.setNotifyUrl(alipayQrNotifyUrl);</span><br><span class=\"line\">    request.setReturnUrl(qrPayRequestParams.getReturnUrl());</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;支付宝扫码请求参数：&#123;&#125;&quot;</span>,request.getTextParams());</span><br><span class=\"line\">        AlipayTradeWapPayResponse response = alipayClient.pageExecute(request);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求信息：&#123;&#125;&quot;</span>,response.getBody());</span><br><span class=\"line\">        AliResultParams params = AliResultParams.builder().alipayParams(response.getBody()).build();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.getBody().contains(model.getOutTradeNo())) &#123;</span><br><span class=\"line\">            params.setAlipayTradeNo(model.getOutTradeNo());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AlipayApiException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AliResultParams.builder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h6><p><strong>回调controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 支付宝扫码回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/alipay/notify&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">alipayNotify</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;进入支付宝扫码支付回调&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qrPaymentService.alipayNotify(request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AlipayApiException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;支付宝扫码支付回调失败&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>回调service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 支付宝扫码支付回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">alipayNotify</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> AlipayApiException </span>&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; map;</span><br><span class=\"line\">    Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class=\"line\">    map = <span class=\"keyword\">this</span>.paramsString(requestParams);</span><br><span class=\"line\">    String outTradeNo = map.get(<span class=\"string\">&quot;out_trade_no&quot;</span>);</span><br><span class=\"line\">    String tradeStatus = map.get(<span class=\"string\">&quot;trade_status&quot;</span>);</span><br><span class=\"line\">    String tradeNo = map.get(<span class=\"string\">&quot;trade_no&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> signVerified = AlipaySignature.rsaCheckV1(map, alipayProperties.getAlipayPublicKey(),</span><br><span class=\"line\">            AlipayConstants.CHARSET_UTF8, AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;支付宝扫码参数：out_trade_no：&#123;&#125;，trade_status，&#123;&#125;，trade_no，&#123;&#125;，校验结果：&#123;&#125;&quot;</span>,</span><br><span class=\"line\">            outTradeNo, tradeStatus, tradeNo,signVerified);</span><br><span class=\"line\">    <span class=\"comment\">// 校验订单-省略</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 验签通过，验证金额通过</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 检验失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拼接参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, String&gt; <span class=\"title\">paramsString</span><span class=\"params\">(Map&lt;String, String[]&gt; requestParams)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String name : requestParams.keySet()) &#123;</span><br><span class=\"line\">        String[] values = requestParams.get(name);</span><br><span class=\"line\">        String valueStr = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">            valueStr = (i == values.length - <span class=\"number\">1</span>) ? valueStr + values[i] : valueStr + values[i] + <span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">            System.out.println(valueStr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(name, valueStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;支付宝扫码支付参数：&#123;&#125;&quot;</span>,map);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>entity</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装微信和支付宝请求实体</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QrPayRequestParams</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String openId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 金额 - 元</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double money;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String remoteAddr;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String activityId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String returnUrl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 封装支付宝返回参数信息</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AliResultParams</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alipayParams;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alipayTradeNo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就完成了支付宝扫码支付的整个流程，手机网站支付的<a class=\"link\" href=\"https://docs.open.alipay.com/203\">官方文档<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<h5 id=\"weChat-pay\"><a href=\"#weChat-pay\" class=\"headerlink\" title=\"weChat pay\"></a>weChat pay</h5><p>这里使用了微信公众号支付，需要进行授权处理。个人感觉步骤比较繁琐。</p>\n<h6 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h6><p>微信<a class=\"link\" href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html\">网页授权<i class=\"fas fa-external-link-alt\"></i></a>官方说明，扫码支付时采用静默授权，用户无感知状态下完成支付动作。主要有以下几步（官网）：</p>\n<ol>\n<li>引导用户进入授权页面同意授权，获取code</li>\n</ol>\n<p>以下链接可以直接复制到微信客户端打开</p>\n<blockquote>\n<p><a class=\"link\" href=\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https://chong.qq.com/php/index.php?d=&c=wxAdapter&m=mobileDeal&showwxpaytitle=1&vb2ctag=4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ol start=\"2\">\n<li><p>通过code换取网页授权access_token（与基础支持中的access_token不同）</p>\n</li>\n<li><p>如果需要，开发者可以刷新网页授权access_token，避免过期</p>\n</li>\n<li><p>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静默授权页面跳转，这里 `/wx/gzh/pay/menu` 就是上面链接中的 redirect_uri 的内容，获取到openId之后重定向到具体的业务页面</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request 请求实体</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 页面</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/wx/gzh/pay/menu&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">payGuguDou</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    String code = request.getParameter(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamDefectException(Code.WARN, <span class=\"string\">&quot;没有获取到用户微信code&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        String openId = mpService.authorization(code);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;redirect:&quot;</span> + htmlUrl + <span class=\"string\">&quot;/pay.html&quot;</span>);</span><br><span class=\"line\">        mv.addObject(<span class=\"string\">&quot;openId&quot;</span>, openId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取 openId</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> code code</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> result</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">authorization</span><span class=\"params\">(String code)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;voi获取的code ： &#123;&#125;，开始调用网页授权&quot;</span>, code);</span><br><span class=\"line\">    String wxUrl = <span class=\"string\">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;</span> + properties.getAppId()</span><br><span class=\"line\">            + <span class=\"string\">&quot;&amp;secret=&quot;</span> + properties.getAppSecret() + <span class=\"string\">&quot;&amp;code=&quot;</span> + code + <span class=\"string\">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class=\"line\">    String weiUserJson = OkHttpUtil.getSent(wxUrl, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.parseObject(weiUserJson);</span><br><span class=\"line\">    String openid = jsonObject.getString(<span class=\"string\">&quot;openid&quot;</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot; voi结束调用网页授权，网页授权获取到的openid：&#123;&#125;&quot;</span>, openid);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> openid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取accessToken</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> url 拉起支付的页面路径</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> info</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">signature</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getAccessToken();</span><br><span class=\"line\">    String noncestr = RandomUtils.getRandomStr();</span><br><span class=\"line\">    String timestamp = System.currentTimeMillis() + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    timestamp = timestamp.substring(<span class=\"number\">0</span>, timestamp.length() - <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    String string1 = <span class=\"string\">&quot;jsapi_ticket=&quot;</span> + jsToken + <span class=\"string\">&quot;&amp;noncestr=&quot;</span> + noncestr +</span><br><span class=\"line\">            <span class=\"string\">&quot;&amp;timestamp=&quot;</span> + timestamp + <span class=\"string\">&quot;&amp;url=&quot;</span> + url;</span><br><span class=\"line\">    <span class=\"comment\">//加密</span></span><br><span class=\"line\">    String signature = SHAUtil.SHA1(string1);</span><br><span class=\"line\">    <span class=\"comment\">// 返回参数</span></span><br><span class=\"line\">    Map&lt;String, String&gt; o = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;jsapiticket&quot;</span>, jsToken);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;noncestr&quot;</span>, noncestr);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;timestamp&quot;</span>, timestamp);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;url&quot;</span>, url);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;signature&quot;</span>, signature);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;appid&quot;</span>, properties.getAppId());</span><br><span class=\"line\">    ResponseMsg&lt;Map&gt; msg = <span class=\"keyword\">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">    msg.setData(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取 ticket</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getAccessToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String accessTokenUrl = <span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span> +</span><br><span class=\"line\">            properties.getAppId() + <span class=\"string\">&quot;&amp;secret=&quot;</span> + properties.getAppSecret();</span><br><span class=\"line\"></span><br><span class=\"line\">    String sent = OkHttpUtil.getSent(accessTokenUrl, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    JSONObject accessJsonObject = JSONObject.parseObject(sent);</span><br><span class=\"line\">    String accessToken = accessJsonObject.getString(<span class=\"string\">&quot;access_token&quot;</span>);</span><br><span class=\"line\">    String jsTokenUrl = <span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=&quot;</span> + accessToken + <span class=\"string\">&quot;&amp;type=jsapi&quot;</span>;</span><br><span class=\"line\">    String jsTokenResult = OkHttpUtil.getSent(jsTokenUrl, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    JSONObject jsTokenJsonObject = JSONObject.parseObject(jsTokenResult);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jsTokenJsonObject != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> errcode = jsTokenJsonObject.getInteger(<span class=\"string\">&quot;errcode&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errcode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            jsToken = jsTokenJsonObject.getString(<span class=\"string\">&quot;ticket&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成以上动作，就完成了对用户的静默授权，<strong>在这次扫码支付中，用户微信扫码进入到入口页面，通过 userAgent 判断时微信扫码进入后，直接跳转到下面授权链接（具体的参数需要自己的），然后开始输入金额进行支付</strong> </p>\n<blockquote>\n<p><a class=\"link\" href=\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https://chong.qq.com/php/index.php?d=&c=wxAdapter&m=mobileDeal&showwxpaytitle=1&vb2ctag=4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h6 id=\"拉起支付\"><a href=\"#拉起支付\" class=\"headerlink\" title=\"拉起支付\"></a>拉起支付</h6><p><strong>引入SDK</strong><br>我这里引入了第三方开源包，<a class=\"link\" href=\"https://github.com/Pay-Group/best-pay-sdk\">官方地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>best-pay-sdk<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mp weChat pay</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.appId</span>=<span class=\"string\">wx123456789</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.appSecret</span>=<span class=\"string\">afjidshu434234hwier3432</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.mchId</span>=<span class=\"string\">123456789</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.apiKey</span>=<span class=\"string\">Ydfsdfkf565sdf45d4</span></span><br><span class=\"line\"><span class=\"meta\">qr.wx.notifyUrl</span>=<span class=\"string\">https://$&#123;your.domain&#125;/wx/notify</span></span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WxMpPayProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.appSecret&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appSecret;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置微信公众号或者小程序等的appid</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.appId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信支付商户号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.mchId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mchId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信支付商户密钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.apiKey&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mchKey;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>支付Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 微信扫码支付</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/wechat&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">qrWechat</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestBody</span> QrPayRequestParams qrPayRequestParams,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestHeader(value = &quot;activityId&quot;,required = false)</span> String activityId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 安全校验（参数合法性等）-省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());</span><br><span class=\"line\">    <span class=\"comment\">// 活动ID</span></span><br><span class=\"line\">    qrPayRequestParams.setActivityId(activityId);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;微信扫码参数：&#123;&#125;&quot;</span>, qrPayRequestParams.toString());</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        WxPayMpOrderResult result = qrPaymentService.qrWechat(qrPayRequestParams);</span><br><span class=\"line\">        ResponseMsg&lt;WxPayMpOrderResult&gt; msg = <span class=\"keyword\">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">        msg.setData(result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseMsg(Code.FAILED, <span class=\"string\">&quot;服务异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>支付Service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在多个回调，这里指定到具体回调</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;qr.wx.notifyUrl&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String wxQrNotifyUrl;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 微信二维码支付</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> qrPayRequestParams params</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> 支付参数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WxPayMpOrderResult <span class=\"title\">qrWechat</span><span class=\"params\">(QrPayRequestParams qrPayRequestParams)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建订单-根据业务生成订单</span></span><br><span class=\"line\">    <span class=\"comment\">//QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams,QrPayConstants.PAYWAY_WECHAT);</span></span><br><span class=\"line\">    <span class=\"comment\">//log.info(&quot;扫码支付创建订单：&#123;&#125;&quot;, order.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 微信公众号支付参数</span></span><br><span class=\"line\">    PayRequest orderRequest = <span class=\"keyword\">new</span> PayRequest();</span><br><span class=\"line\">    orderRequest.setOpenid(qrPayRequestParams.getOpenId());</span><br><span class=\"line\">    <span class=\"comment\">//orderRequest.setOrderAmount(order.getPayMoney());</span></span><br><span class=\"line\">    orderRequest.setOrderAmount(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    orderRequest.setOrderId(order.getRechargeOrderId());</span><br><span class=\"line\">    orderRequest.setSpbillCreateIp(qrPayRequestParams.getRemoteAddr());</span><br><span class=\"line\">    orderRequest.setOrderName(<span class=\"string\">&quot;XXXX&quot;</span>);</span><br><span class=\"line\">    orderRequest.setPayTypeEnum(BestPayTypeEnum.WXPAY_H5);</span><br><span class=\"line\">    <span class=\"comment\">//统一下单</span></span><br><span class=\"line\">    wxPayH5Config.setNotifyUrl(wxQrNotifyUrl);</span><br><span class=\"line\">    bestPayService.setWxPayH5Config(wxPayH5Config);</span><br><span class=\"line\">    PayResponse payResponse = bestPayService.pay(orderRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加签返回结果</span></span><br><span class=\"line\">    WxPayMpOrderResult payResult = WxPayMpOrderResult.builder()</span><br><span class=\"line\">            .appId(payResponse.getAppId())</span><br><span class=\"line\">            .timeStamp(String.valueOf(System.currentTimeMillis() / <span class=\"number\">1000</span>))</span><br><span class=\"line\">            .nonceStr(payResponse.getNonceStr())</span><br><span class=\"line\">            .packageValue(payResponse.getPackAge())</span><br><span class=\"line\">            .signType(<span class=\"string\">&quot;MD5&quot;</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    payResult.setPaySign(SignUtils.createSign(payResult, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>.wxPayH5Config.getMchKey(), <span class=\"keyword\">new</span> String[]&#123;&#125;));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> payResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"回调-1\"><a href=\"#回调-1\" class=\"headerlink\" title=\"回调\"></a>回调</h6><p><strong>回调Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 微信支付回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/wx/notify&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">wxNotify</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String xmlData)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;***********微信扫码回调参数：&#123;&#125;**************&quot;</span>, xmlData);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qrPaymentService.wxNotify(xmlData);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;微信扫码回调处理异常&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>回调Service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 微信扫码支付回调</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> xmlData 回调信息</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 返回给微信服务器处理结果</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">wxNotify</span><span class=\"params\">(String xmlData)</span> <span class=\"keyword\">throws</span> WxPayException </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;微信扫码回调开始解析&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> WxPayOrderNotifyResult notifyResult = <span class=\"keyword\">this</span>.wxPayService.parseOrderNotifyResult(xmlData);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;解析结果&#123;&#125;&quot;</span>, notifyResult.getOutTradeNo());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"string\">&quot;SUCCESS&quot;</span>.equals(notifyResult.getReturnCode()) || !<span class=\"string\">&quot;SUCCESS&quot;</span>.equals(notifyResult.getResultCode())) &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;订单校验出错&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String rechargeOrderId = notifyResult.getOutTradeNo();</span><br><span class=\"line\">    <span class=\"comment\">// 具体的参数校验-省略</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 校验成功</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_SUCCESS;</span><br><span class=\"line\">    <span class=\"comment\">// 校验失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>微信回调会走多次，在订单成功的情况下需要设置状态等确保成功业务只执行一次，避免多次调用后数据错乱等情况发生。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ol>\n<li>需要前后端配置完成，前期需要沟通确认使用哪种方式处理。（开发过程中因为对接方式的原因，延误了一些时间）</li>\n<li>微信和支付宝的文档比较多，需要仔细阅读。</li>\n</ol>\n<blockquote>\n<p>今天中午出门逛了一大圈，有空还是多出去走走，毕竟小命要紧，保持身体健康是最重要的。</p>\n</blockquote>\n<hr>\n<center>2019-12-01 12月的第一天，我和小扣去了盒马，我觉得我更爱她了</center>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><img src=\"/2019/12/01/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BE%AE%E4%BF%A1%E4%B8%80%E7%A0%81%E6%94%AF%E4%BB%98/alipay-wechatpay-qr.png\" alt=\"Photo by kejsirajbek on wallhaven.cc\"></p>\n<p>前几天有个需求要将支付宝和微信扫码集中在同一个二维码上面。当时已经上线了微信各种渠道支付（Native，公众号，H5）,支付宝上线了 Native，H5 支付，于是开始了一码多付的开发。在开发过程中也碰到了一些问题，好在快速解决了问题。</p>","more":"<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ol>\n<li>微信<br>从微信官方文档了解到扫码支付需要使用公众号支付方式拉起支付进行支付，这个过程需要进行用户认证等操作，从开发的角度来讲比较麻烦，而且多了认证操作，虽然可以使用静默授权（微信提供的一种用户无感知的授权方式）但是在加载过程中需要耗费更多的时间，用户体验降低。</li>\n<li>支付宝<br>支付宝支付在官方了解到使用当面付功能可以完成扫码支付，前端 jssdk 也具备拉起的方式。但是在开发过程中发现公司账号没有开通此功能，申请需要 1-2 天时间，时间上来不及，于是和前端同学试了支付宝也采用 H5 支付的方式，结果完美解决。支付宝还是很方便的，在交互还是开发方面。</li>\n<li>对账<br>这里其实可以不用回调也可以的，因为没有业务逻辑需要在回调处理，但是因为公司也使用H5,Native 支付 方式，所以这里需要记录下，方便后期对账等操作。</li>\n</ol>\n<h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>前端页面使用 userAgent 判断是微信还是支付宝扫码进入的，如果是支付宝，跳转到支付宝 H5 支付的方式，后端返回 H5 支付返回的 Form 表单，前端直接拉起支付宝支付。如果是微信扫码进来，则跳转到微信支付静默授权链接，后端处理跳转到相应的 H5 支付页面进行处理。完成之后把前端判断是支付宝还是微信的页面生成二维码作为入口，就可以完美实现了。</p>\n<h5 id=\"alipay\"><a href=\"#alipay\" class=\"headerlink\" title=\"alipay\"></a>alipay</h5><ol>\n<li>引入支付宝提供的 SDK</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--支付宝sdk--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alipay.sdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>alipay-sdk-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.7.1.ALL<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置文件<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是否启用沙盒支付</span></span><br><span class=\"line\"><span class=\"meta\">alipay.sandbox</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 支付宝后台获取 appId</span></span><br><span class=\"line\"><span class=\"meta\">alipay.appId</span>=<span class=\"string\">your.app.id</span></span><br><span class=\"line\"><span class=\"comment\"># 私有 key</span></span><br><span class=\"line\"><span class=\"meta\">alipay.privateKey</span>=<span class=\"string\">your.private.key</span></span><br><span class=\"line\"><span class=\"comment\"># 公有 key</span></span><br><span class=\"line\"><span class=\"meta\">alipay.alipayPublicKey</span>=<span class=\"string\">your.public.key</span></span><br><span class=\"line\"><span class=\"comment\"># 回调</span></span><br><span class=\"line\"><span class=\"meta\">alipay.qr.notifyUrl</span>=<span class=\"string\">https://$&#123;your.domain&#125;/alipay/notify</span></span><br></pre></td></tr></table></figure></li>\n<li>配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlipayProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否沙箱环境</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.sandbox&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isTest;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 应用ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.appId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appId;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 应用私钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.privateKey&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String privateKey;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支付宝公钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.alipayPublicKey&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alipayPublicKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支付异步回调地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;alipay.notifUrl&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String notifyUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前配置环境网关</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">obtainUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 沙盒环境</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isTest) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;https://openapi.alipay.com/gateway.do&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>对接</li>\n</ol>\n<p><strong>支付controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 支付宝扫码支付</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/alipay&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">qrAlipay</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestBody</span> QrPayRequestParams qrPayRequestParams,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestHeader(value = &quot;activityId&quot;, required = false)</span> String activityId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数校验省略</span></span><br><span class=\"line\">    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());</span><br><span class=\"line\">    <span class=\"comment\">// 活动标记</span></span><br><span class=\"line\">    qrPayRequestParams.setActivityId(activityId);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;支付宝扫码参数：&#123;&#125;&quot;</span>, qrPayRequestParams.toString());</span><br><span class=\"line\">    AliResultParams params = qrPaymentService.qrAlipay(qrPayRequestParams);</span><br><span class=\"line\">    ResponseMsg&lt;AliResultParams&gt; msg = <span class=\"keyword\">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">    msg.setData(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>支付service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在多个回调，这里指定到具体回调</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;alipay.qr.notifyUrl&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String alipayQrNotifyUrl;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 支付宝扫码支付</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> qrPayRequestParams params</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> form table</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AliResultParams <span class=\"title\">qrAlipay</span><span class=\"params\">(QrPayRequestParams qrPayRequestParams)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建订单-根据具体业务</span></span><br><span class=\"line\">    <span class=\"comment\">//QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams, QrPayConstants.PAYWAY_ALIPAY);</span></span><br><span class=\"line\">    <span class=\"comment\">// 支付宝支付</span></span><br><span class=\"line\">    AlipayClient alipayClient = <span class=\"keyword\">new</span> DefaultAlipayClient(alipayProperties.obtainUrl(),</span><br><span class=\"line\">            alipayProperties.getAppId(), alipayProperties.getPrivateKey(),</span><br><span class=\"line\">            AlipayConstants.FORMAT_JSON, AlipayConstants.CHARSET_UTF8, alipayProperties.getAlipayPublicKey(),</span><br><span class=\"line\">            AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class=\"line\">    AlipayTradeWapPayRequest request = <span class=\"keyword\">new</span> AlipayTradeWapPayRequest();</span><br><span class=\"line\">    AlipayTradeWapPayModel model = <span class=\"keyword\">new</span> AlipayTradeWapPayModel();</span><br><span class=\"line\">    <span class=\"comment\">//该笔订单允许的最晚付款时间，逾期将关闭交易。</span></span><br><span class=\"line\">    model.setTimeoutExpress(<span class=\"string\">&quot;30m&quot;</span>);</span><br><span class=\"line\">    model.setTotalAmount(qrPayRequestParams.getMoney());</span><br><span class=\"line\">    model.setSubject(<span class=\"string\">&quot;XXXX&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 更具具体业务生成的订单号</span></span><br><span class=\"line\">    <span class=\"comment\">//model.setOutTradeNo(order.getRechargeOrderId());</span></span><br><span class=\"line\">    model.setOutTradeNo(<span class=\"string\">&quot;201912011111111111&quot;</span>);</span><br><span class=\"line\">    model.setProductCode(<span class=\"string\">&quot;XXXX&quot;</span>);</span><br><span class=\"line\">    request.setBizModel(model);</span><br><span class=\"line\">    request.setNotifyUrl(alipayQrNotifyUrl);</span><br><span class=\"line\">    request.setReturnUrl(qrPayRequestParams.getReturnUrl());</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;支付宝扫码请求参数：&#123;&#125;&quot;</span>,request.getTextParams());</span><br><span class=\"line\">        AlipayTradeWapPayResponse response = alipayClient.pageExecute(request);</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;请求信息：&#123;&#125;&quot;</span>,response.getBody());</span><br><span class=\"line\">        AliResultParams params = AliResultParams.builder().alipayParams(response.getBody()).build();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.getBody().contains(model.getOutTradeNo())) &#123;</span><br><span class=\"line\">            params.setAlipayTradeNo(model.getOutTradeNo());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AlipayApiException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AliResultParams.builder().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h6><p><strong>回调controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 支付宝扫码回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/alipay/notify&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">alipayNotify</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;进入支付宝扫码支付回调&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qrPaymentService.alipayNotify(request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AlipayApiException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;支付宝扫码支付回调失败&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>回调service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 支付宝扫码支付回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">alipayNotify</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> AlipayApiException </span>&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; map;</span><br><span class=\"line\">    Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class=\"line\">    map = <span class=\"keyword\">this</span>.paramsString(requestParams);</span><br><span class=\"line\">    String outTradeNo = map.get(<span class=\"string\">&quot;out_trade_no&quot;</span>);</span><br><span class=\"line\">    String tradeStatus = map.get(<span class=\"string\">&quot;trade_status&quot;</span>);</span><br><span class=\"line\">    String tradeNo = map.get(<span class=\"string\">&quot;trade_no&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> signVerified = AlipaySignature.rsaCheckV1(map, alipayProperties.getAlipayPublicKey(),</span><br><span class=\"line\">            AlipayConstants.CHARSET_UTF8, AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;支付宝扫码参数：out_trade_no：&#123;&#125;，trade_status，&#123;&#125;，trade_no，&#123;&#125;，校验结果：&#123;&#125;&quot;</span>,</span><br><span class=\"line\">            outTradeNo, tradeStatus, tradeNo,signVerified);</span><br><span class=\"line\">    <span class=\"comment\">// 校验订单-省略</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 验签通过，验证金额通过</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 检验失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拼接参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, String&gt; <span class=\"title\">paramsString</span><span class=\"params\">(Map&lt;String, String[]&gt; requestParams)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String name : requestParams.keySet()) &#123;</span><br><span class=\"line\">        String[] values = requestParams.get(name);</span><br><span class=\"line\">        String valueStr = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">            valueStr = (i == values.length - <span class=\"number\">1</span>) ? valueStr + values[i] : valueStr + values[i] + <span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">            System.out.println(valueStr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(name, valueStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;支付宝扫码支付参数：&#123;&#125;&quot;</span>,map);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>entity</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装微信和支付宝请求实体</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QrPayRequestParams</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String openId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 金额 - 元</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double money;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String remoteAddr;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String activityId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String returnUrl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 封装支付宝返回参数信息</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AliResultParams</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alipayParams;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alipayTradeNo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就完成了支付宝扫码支付的整个流程，手机网站支付的<a class=\"link\" href=\"https://docs.open.alipay.com/203\">官方文档<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<h5 id=\"weChat-pay\"><a href=\"#weChat-pay\" class=\"headerlink\" title=\"weChat pay\"></a>weChat pay</h5><p>这里使用了微信公众号支付，需要进行授权处理。个人感觉步骤比较繁琐。</p>\n<h6 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h6><p>微信<a class=\"link\" href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html\">网页授权<i class=\"fas fa-external-link-alt\"></i></a>官方说明，扫码支付时采用静默授权，用户无感知状态下完成支付动作。主要有以下几步（官网）：</p>\n<ol>\n<li>引导用户进入授权页面同意授权，获取code</li>\n</ol>\n<p>以下链接可以直接复制到微信客户端打开</p>\n<blockquote>\n<p><a class=\"link\" href=\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https://chong.qq.com/php/index.php?d=&c=wxAdapter&m=mobileDeal&showwxpaytitle=1&vb2ctag=4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ol start=\"2\">\n<li><p>通过code换取网页授权access_token（与基础支持中的access_token不同）</p>\n</li>\n<li><p>如果需要，开发者可以刷新网页授权access_token，避免过期</p>\n</li>\n<li><p>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静默授权页面跳转，这里 `/wx/gzh/pay/menu` 就是上面链接中的 redirect_uri 的内容，获取到openId之后重定向到具体的业务页面</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request 请求实体</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 页面</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/wx/gzh/pay/menu&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">payGuguDou</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    String code = request.getParameter(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParamDefectException(Code.WARN, <span class=\"string\">&quot;没有获取到用户微信code&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        String openId = mpService.authorization(code);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">&quot;redirect:&quot;</span> + htmlUrl + <span class=\"string\">&quot;/pay.html&quot;</span>);</span><br><span class=\"line\">        mv.addObject(<span class=\"string\">&quot;openId&quot;</span>, openId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取 openId</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> code code</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> result</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">authorization</span><span class=\"params\">(String code)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;voi获取的code ： &#123;&#125;，开始调用网页授权&quot;</span>, code);</span><br><span class=\"line\">    String wxUrl = <span class=\"string\">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;</span> + properties.getAppId()</span><br><span class=\"line\">            + <span class=\"string\">&quot;&amp;secret=&quot;</span> + properties.getAppSecret() + <span class=\"string\">&quot;&amp;code=&quot;</span> + code + <span class=\"string\">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class=\"line\">    String weiUserJson = OkHttpUtil.getSent(wxUrl, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.parseObject(weiUserJson);</span><br><span class=\"line\">    String openid = jsonObject.getString(<span class=\"string\">&quot;openid&quot;</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot; voi结束调用网页授权，网页授权获取到的openid：&#123;&#125;&quot;</span>, openid);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> openid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取accessToken</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> url 拉起支付的页面路径</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> info</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">signature</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getAccessToken();</span><br><span class=\"line\">    String noncestr = RandomUtils.getRandomStr();</span><br><span class=\"line\">    String timestamp = System.currentTimeMillis() + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    timestamp = timestamp.substring(<span class=\"number\">0</span>, timestamp.length() - <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    String string1 = <span class=\"string\">&quot;jsapi_ticket=&quot;</span> + jsToken + <span class=\"string\">&quot;&amp;noncestr=&quot;</span> + noncestr +</span><br><span class=\"line\">            <span class=\"string\">&quot;&amp;timestamp=&quot;</span> + timestamp + <span class=\"string\">&quot;&amp;url=&quot;</span> + url;</span><br><span class=\"line\">    <span class=\"comment\">//加密</span></span><br><span class=\"line\">    String signature = SHAUtil.SHA1(string1);</span><br><span class=\"line\">    <span class=\"comment\">// 返回参数</span></span><br><span class=\"line\">    Map&lt;String, String&gt; o = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">8</span>);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;jsapiticket&quot;</span>, jsToken);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;noncestr&quot;</span>, noncestr);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;timestamp&quot;</span>, timestamp);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;url&quot;</span>, url);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;signature&quot;</span>, signature);</span><br><span class=\"line\">    o.put(<span class=\"string\">&quot;appid&quot;</span>, properties.getAppId());</span><br><span class=\"line\">    ResponseMsg&lt;Map&gt; msg = <span class=\"keyword\">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">    msg.setData(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取 ticket</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getAccessToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String accessTokenUrl = <span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span> +</span><br><span class=\"line\">            properties.getAppId() + <span class=\"string\">&quot;&amp;secret=&quot;</span> + properties.getAppSecret();</span><br><span class=\"line\"></span><br><span class=\"line\">    String sent = OkHttpUtil.getSent(accessTokenUrl, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    JSONObject accessJsonObject = JSONObject.parseObject(sent);</span><br><span class=\"line\">    String accessToken = accessJsonObject.getString(<span class=\"string\">&quot;access_token&quot;</span>);</span><br><span class=\"line\">    String jsTokenUrl = <span class=\"string\">&quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=&quot;</span> + accessToken + <span class=\"string\">&quot;&amp;type=jsapi&quot;</span>;</span><br><span class=\"line\">    String jsTokenResult = OkHttpUtil.getSent(jsTokenUrl, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    JSONObject jsTokenJsonObject = JSONObject.parseObject(jsTokenResult);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jsTokenJsonObject != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> errcode = jsTokenJsonObject.getInteger(<span class=\"string\">&quot;errcode&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errcode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            jsToken = jsTokenJsonObject.getString(<span class=\"string\">&quot;ticket&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成以上动作，就完成了对用户的静默授权，<strong>在这次扫码支付中，用户微信扫码进入到入口页面，通过 userAgent 判断时微信扫码进入后，直接跳转到下面授权链接（具体的参数需要自己的），然后开始输入金额进行支付</strong> </p>\n<blockquote>\n<p><a class=\"link\" href=\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https://chong.qq.com/php/index.php?d=&c=wxAdapter&m=mobileDeal&showwxpaytitle=1&vb2ctag=4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h6 id=\"拉起支付\"><a href=\"#拉起支付\" class=\"headerlink\" title=\"拉起支付\"></a>拉起支付</h6><p><strong>引入SDK</strong><br>我这里引入了第三方开源包，<a class=\"link\" href=\"https://github.com/Pay-Group/best-pay-sdk\">官方地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>best-pay-sdk<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>配置文件</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mp weChat pay</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.appId</span>=<span class=\"string\">wx123456789</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.appSecret</span>=<span class=\"string\">afjidshu434234hwier3432</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.mchId</span>=<span class=\"string\">123456789</span></span><br><span class=\"line\"><span class=\"meta\">gzh.wx.apiKey</span>=<span class=\"string\">Ydfsdfkf565sdf45d4</span></span><br><span class=\"line\"><span class=\"meta\">qr.wx.notifyUrl</span>=<span class=\"string\">https://$&#123;your.domain&#125;/wx/notify</span></span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WxMpPayProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.appSecret&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appSecret;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置微信公众号或者小程序等的appid</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.appId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信支付商户号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.mchId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mchId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信支付商户密钥</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;gzh.wx.apiKey&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mchKey;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>支付Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 微信扫码支付</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/wechat&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseMsg <span class=\"title\">qrWechat</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestBody</span> QrPayRequestParams qrPayRequestParams,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"meta\">@RequestHeader(value = &quot;activityId&quot;,required = false)</span> String activityId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 安全校验（参数合法性等）-省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());</span><br><span class=\"line\">    <span class=\"comment\">// 活动ID</span></span><br><span class=\"line\">    qrPayRequestParams.setActivityId(activityId);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;微信扫码参数：&#123;&#125;&quot;</span>, qrPayRequestParams.toString());</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        WxPayMpOrderResult result = qrPaymentService.qrWechat(qrPayRequestParams);</span><br><span class=\"line\">        ResponseMsg&lt;WxPayMpOrderResult&gt; msg = <span class=\"keyword\">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class=\"line\">        msg.setData(result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseMsg(Code.FAILED, <span class=\"string\">&quot;服务异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>支付Service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在多个回调，这里指定到具体回调</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;qr.wx.notifyUrl&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String wxQrNotifyUrl;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 微信二维码支付</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> qrPayRequestParams params</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> 支付参数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WxPayMpOrderResult <span class=\"title\">qrWechat</span><span class=\"params\">(QrPayRequestParams qrPayRequestParams)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建订单-根据业务生成订单</span></span><br><span class=\"line\">    <span class=\"comment\">//QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams,QrPayConstants.PAYWAY_WECHAT);</span></span><br><span class=\"line\">    <span class=\"comment\">//log.info(&quot;扫码支付创建订单：&#123;&#125;&quot;, order.toString());</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 微信公众号支付参数</span></span><br><span class=\"line\">    PayRequest orderRequest = <span class=\"keyword\">new</span> PayRequest();</span><br><span class=\"line\">    orderRequest.setOpenid(qrPayRequestParams.getOpenId());</span><br><span class=\"line\">    <span class=\"comment\">//orderRequest.setOrderAmount(order.getPayMoney());</span></span><br><span class=\"line\">    orderRequest.setOrderAmount(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    orderRequest.setOrderId(order.getRechargeOrderId());</span><br><span class=\"line\">    orderRequest.setSpbillCreateIp(qrPayRequestParams.getRemoteAddr());</span><br><span class=\"line\">    orderRequest.setOrderName(<span class=\"string\">&quot;XXXX&quot;</span>);</span><br><span class=\"line\">    orderRequest.setPayTypeEnum(BestPayTypeEnum.WXPAY_H5);</span><br><span class=\"line\">    <span class=\"comment\">//统一下单</span></span><br><span class=\"line\">    wxPayH5Config.setNotifyUrl(wxQrNotifyUrl);</span><br><span class=\"line\">    bestPayService.setWxPayH5Config(wxPayH5Config);</span><br><span class=\"line\">    PayResponse payResponse = bestPayService.pay(orderRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加签返回结果</span></span><br><span class=\"line\">    WxPayMpOrderResult payResult = WxPayMpOrderResult.builder()</span><br><span class=\"line\">            .appId(payResponse.getAppId())</span><br><span class=\"line\">            .timeStamp(String.valueOf(System.currentTimeMillis() / <span class=\"number\">1000</span>))</span><br><span class=\"line\">            .nonceStr(payResponse.getNonceStr())</span><br><span class=\"line\">            .packageValue(payResponse.getPackAge())</span><br><span class=\"line\">            .signType(<span class=\"string\">&quot;MD5&quot;</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    payResult.setPaySign(SignUtils.createSign(payResult, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>.wxPayH5Config.getMchKey(), <span class=\"keyword\">new</span> String[]&#123;&#125;));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> payResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"回调-1\"><a href=\"#回调-1\" class=\"headerlink\" title=\"回调\"></a>回调</h6><p><strong>回调Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 微信支付回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/wx/notify&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">wxNotify</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String xmlData)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;***********微信扫码回调参数：&#123;&#125;**************&quot;</span>, xmlData);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qrPaymentService.wxNotify(xmlData);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;微信扫码回调处理异常&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>回调Service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 微信扫码支付回调</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> xmlData 回调信息</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 返回给微信服务器处理结果</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">wxNotify</span><span class=\"params\">(String xmlData)</span> <span class=\"keyword\">throws</span> WxPayException </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;微信扫码回调开始解析&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> WxPayOrderNotifyResult notifyResult = <span class=\"keyword\">this</span>.wxPayService.parseOrderNotifyResult(xmlData);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;解析结果&#123;&#125;&quot;</span>, notifyResult.getOutTradeNo());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"string\">&quot;SUCCESS&quot;</span>.equals(notifyResult.getReturnCode()) || !<span class=\"string\">&quot;SUCCESS&quot;</span>.equals(notifyResult.getResultCode())) &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;订单校验出错&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String rechargeOrderId = notifyResult.getOutTradeNo();</span><br><span class=\"line\">    <span class=\"comment\">// 具体的参数校验-省略</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 校验成功</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_SUCCESS;</span><br><span class=\"line\">    <span class=\"comment\">// 校验失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>微信回调会走多次，在订单成功的情况下需要设置状态等确保成功业务只执行一次，避免多次调用后数据错乱等情况发生。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ol>\n<li>需要前后端配置完成，前期需要沟通确认使用哪种方式处理。（开发过程中因为对接方式的原因，延误了一些时间）</li>\n<li>微信和支付宝的文档比较多，需要仔细阅读。</li>\n</ol>\n<blockquote>\n<p>今天中午出门逛了一大圈，有空还是多出去走走，毕竟小命要紧，保持身体健康是最重要的。</p>\n</blockquote>\n<hr>\n<center>2019-12-01 12月的第一天，我和小扣去了盒马，我觉得我更爱她了</center>"}],"PostAsset":[{"_id":"source/_posts/Java8新特性/Java8新特性.png","post":"ckkkzeow00001rh1t3dp096ge","slug":"Java8新特性.png","modified":1,"renderable":1},{"_id":"source/_posts/Java对接iOS内购以及各个渠道微信支付/pay.png","post":"ckkkzeow30003rh1t1yp3f11n","slug":"pay.png","modified":1,"renderable":1},{"_id":"source/_posts/Linux/Linux-权限.png","post":"ckkkzeow80008rh1tg62g5se9","slug":"Linux-权限.png","modified":1,"renderable":1},{"_id":"source/_posts/Linux/linux.png","post":"ckkkzeow80008rh1tg62g5se9","slug":"linux.png","modified":1,"renderable":1},{"_id":"source/_posts/Linux-shell/linux-shell.png","post":"ckkkzeow70007rh1te8irfvfs","slug":"linux-shell.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ安装和使用/rabbitmq.png","post":"ckkkzeow90009rh1t1hls0x82","slug":"rabbitmq.png","modified":1,"renderable":1},{"_id":"source/_posts/docker安装MySQL/mysql.png","post":"ckkkzeowa000drh1t5ep72v49","slug":"mysql.png","modified":1,"renderable":1},{"_id":"source/_posts/java-fragment-knowledge/java-konwlege.png","post":"ckkkzeowd000irh1t3dsl1gvg","slug":"java-konwlege.png","modified":1,"renderable":1},{"_id":"source/_posts/docker安装mongodb/mongo.png","post":"ckkkzeowb000erh1tepk0bc4l","slug":"mongo.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm-class文件结构/class.png","post":"ckkkzeowe000krh1tfdvo8zvm","slug":"class.png","modified":1,"renderable":1},{"_id":"source/_posts/manjaro编译openjdk/openjdk.png","post":"ckkkzeowi000rrh1tftrqeoh5","slug":"openjdk.png","modified":1,"renderable":1},{"_id":"source/_posts/manjaro安装/manjaro.png","post":"ckkkzeowg000prh1tbkz817mh","slug":"manjaro.png","modified":1,"renderable":1},{"_id":"source/_posts/manjaro输入密码卡死问题/密码卡死.png","post":"ckkkzeowj000wrh1tbh6jfg70","slug":"密码卡死.png","modified":1,"renderable":1},{"_id":"source/_posts/mongo乐观锁/mongoLock.png","post":"ckkkzeowk000zrh1tbl1b0u7c","slug":"mongoLock.png","modified":1,"renderable":1},{"_id":"source/_posts/mongo权限设置/mongoPower.png","post":"ckkkzeowo0016rh1t5u4jeg9x","slug":"mongoPower.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql/mysql.png","post":"ckkkzeowp0018rh1t6tbs64u5","slug":"mysql.png","modified":1,"renderable":1},{"_id":"source/_posts/mongo分片集群/replicaSet.png","post":"ckkkzeown0013rh1tced9bpeq","slug":"replicaSet.png","modified":1,"renderable":1},{"_id":"source/_posts/nginx安装和使用/nginx.png","post":"ckkkzeowr001crh1t6t62ez0m","slug":"nginx.png","modified":1,"renderable":1},{"_id":"source/_posts/rabbitMQ延时队列/rabbitMqDelayQueue.png","post":"ckkkzeows001frh1td5us99w3","slug":"rabbitMqDelayQueue.png","modified":1,"renderable":1},{"_id":"source/_posts/springboot集成jedis和redisson/redisLock.png","post":"ckkkzeowt001hrh1t9r3da94n","slug":"redisLock.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud-config/springcloud-config.png","post":"ckkkzeowu001lrh1tfe5o2b46","slug":"springcloud-config.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud-feign/springcloud-feign.png","post":"ckkkzeoww001rrh1t225i0znh","slug":"springcloud-feign.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud-eureka/eureka.png","post":"ckkkzeowv001nrh1t7xdh2rw2","slug":"eureka.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud-hystrix/hystrix.png","post":"ckkkzeowx001urh1tdyf9at0m","slug":"hystrix.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud-ribbon/springcloud-ribbon.png","post":"ckkkzeowy001zrh1t6bhn2p3a","slug":"springcloud-ribbon.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud-zuul/springcloud-zuul.png","post":"ckkkzeowz0021rh1tctmt84bq","slug":"springcloud-zuul.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud-zuul/zuul-user.png","post":"ckkkzeowz0021rh1tctmt84bq","slug":"zuul-user.png","modified":1,"renderable":1},{"_id":"source/_posts/timeline/timeline.png","post":"ckkkzeox10027rh1t6yzc7ui8","slug":"timeline.png","modified":1,"renderable":1},{"_id":"source/_posts/timeline/一生所爱.png","post":"ckkkzeox10027rh1t6yzc7ui8","slug":"一生所爱.png","modified":1,"renderable":1},{"_id":"source/_posts/springcloud/springcloud.png","post":"ckkkzeowz0023rh1t56sfek1w","slug":"springcloud.png","modified":1,"renderable":1},{"_id":"source/_posts/tomcat一键启动脚本/start-sh.png","post":"ckkkzeox3002drh1tbl74dvj9","slug":"start-sh.png","modified":1,"renderable":1},{"_id":"source/_posts/多线程/duoxiancheng.png","post":"ckkkzeox5002jrh1td6pj03lx","slug":"duoxiancheng.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm-类加载机制/load-class.png","post":"ckkkzeoxr004prh1td1gnbe1c","slug":"load-class.png","modified":1,"renderable":1},{"_id":"source/_posts/redis安装和使用/redis.png","post":"ckkkzeoxs004qrh1t3nd14z2m","slug":"redis.png","modified":1,"renderable":1},{"_id":"source/_posts/支付宝微信一码支付/alipay-wechatpay-qr.png","post":"ckkkzeoxs004srh1t00lp803c","slug":"alipay-wechatpay-qr.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckkkzeow00001rh1t3dp096ge","category_id":"ckkkzeow50004rh1thmm66jny","_id":"ckkkzeowb000frh1t42608hqm"},{"post_id":"ckkkzeow30003rh1t1yp3f11n","category_id":"ckkkzeow9000arh1tgghtg7zl","_id":"ckkkzeowe000lrh1tbpqrd3wo"},{"post_id":"ckkkzeowd000irh1t3dsl1gvg","category_id":"ckkkzeow50004rh1thmm66jny","_id":"ckkkzeowi000srh1t88iy9uwd"},{"post_id":"ckkkzeow70007rh1te8irfvfs","category_id":"ckkkzeowc000grh1t5eds3bt1","_id":"ckkkzeowk000xrh1t56fc8zjh"},{"post_id":"ckkkzeowe000krh1tfdvo8zvm","category_id":"ckkkzeow50004rh1thmm66jny","_id":"ckkkzeowl0010rh1t3lxwhu9p"},{"post_id":"ckkkzeow80008rh1tg62g5se9","category_id":"ckkkzeowc000grh1t5eds3bt1","_id":"ckkkzeowo0014rh1t4pwrdrr1"},{"post_id":"ckkkzeow90009rh1t1hls0x82","category_id":"ckkkzeowi000trh1thspbg8hi","_id":"ckkkzeowp0017rh1t159a34zs"},{"post_id":"ckkkzeows001frh1td5us99w3","category_id":"ckkkzeowi000trh1thspbg8hi","_id":"ckkkzeoww001orh1t9rqleihl"},{"post_id":"ckkkzeowg000prh1tbkz817mh","category_id":"ckkkzeowr001drh1t1u63gb2e","_id":"ckkkzeowx001srh1t58931tm8"},{"post_id":"ckkkzeowi000rrh1tftrqeoh5","category_id":"ckkkzeowu001jrh1t0tz30b7v","_id":"ckkkzeowy001wrh1t5kcddowd"},{"post_id":"ckkkzeowj000wrh1tbh6jfg70","category_id":"ckkkzeoww001prh1t0ey46ca1","_id":"ckkkzeowz0022rh1t2mfybgy7"},{"post_id":"ckkkzeowk000zrh1tbl1b0u7c","category_id":"ckkkzeowy001xrh1tgj0kem4n","_id":"ckkkzeox2002arh1t9g997y9v"},{"post_id":"ckkkzeown0013rh1tced9bpeq","category_id":"ckkkzeowy001xrh1tgj0kem4n","_id":"ckkkzeox4002grh1tc5ue4dlu"},{"post_id":"ckkkzeowo0016rh1t5u4jeg9x","category_id":"ckkkzeowy001xrh1tgj0kem4n","_id":"ckkkzeox5002krh1t8l1od4il"},{"post_id":"ckkkzeowa000drh1t5ep72v49","category_id":"ckkkzeowl0011rh1tdv982z4o","_id":"ckkkzeox6002prh1t9pjjf2qa"},{"post_id":"ckkkzeowa000drh1t5ep72v49","category_id":"ckkkzeox4002frh1tbfhh0aq7","_id":"ckkkzeox7002srh1t8xsmh2zj"},{"post_id":"ckkkzeowp0018rh1t6tbs64u5","category_id":"ckkkzeox5002mrh1ta4oy9b1i","_id":"ckkkzeox7002urh1tbvp13gbu"},{"post_id":"ckkkzeowq001brh1tavvb654t","category_id":"ckkkzeox6002qrh1t0131dro9","_id":"ckkkzeox8002yrh1t136kd2v7"},{"post_id":"ckkkzeowb000erh1tepk0bc4l","category_id":"ckkkzeowl0011rh1tdv982z4o","_id":"ckkkzeox80032rh1t2jhe50a0"},{"post_id":"ckkkzeowb000erh1tepk0bc4l","category_id":"ckkkzeox7002vrh1t6tbd7q84","_id":"ckkkzeox90035rh1t65srahdh"},{"post_id":"ckkkzeowr001crh1t6t62ez0m","category_id":"ckkkzeox8002zrh1taemladii","_id":"ckkkzeox90037rh1t1b1hc2b3"},{"post_id":"ckkkzeowt001hrh1t9r3da94n","category_id":"ckkkzeox90033rh1t79lf308u","_id":"ckkkzeoxa003brh1t12np6p7i"},{"post_id":"ckkkzeowu001lrh1tfe5o2b46","category_id":"ckkkzeox90038rh1t2qj6909e","_id":"ckkkzeoxb003grh1tfurlguvk"},{"post_id":"ckkkzeowv001nrh1t7xdh2rw2","category_id":"ckkkzeox90038rh1t2qj6909e","_id":"ckkkzeoxb003krh1t08wgh6hu"},{"post_id":"ckkkzeoww001rrh1t225i0znh","category_id":"ckkkzeox90038rh1t2qj6909e","_id":"ckkkzeoxc003orh1tb6846prl"},{"post_id":"ckkkzeowx001urh1tdyf9at0m","category_id":"ckkkzeox90038rh1t2qj6909e","_id":"ckkkzeoxe003srh1t9sb67yw3"},{"post_id":"ckkkzeowy001zrh1t6bhn2p3a","category_id":"ckkkzeox90038rh1t2qj6909e","_id":"ckkkzeoxg003wrh1t41t0hv7v"},{"post_id":"ckkkzeowz0021rh1tctmt84bq","category_id":"ckkkzeox90038rh1t2qj6909e","_id":"ckkkzeoxg0040rh1t8awc3wtz"},{"post_id":"ckkkzeowz0023rh1t56sfek1w","category_id":"ckkkzeox90038rh1t2qj6909e","_id":"ckkkzeoxh0043rh1t9zacdf2v"},{"post_id":"ckkkzeox10027rh1t6yzc7ui8","category_id":"ckkkzeoxg003zrh1tefpx0yxa","_id":"ckkkzeoxi0047rh1tejqz1vcl"},{"post_id":"ckkkzeox20028rh1tcit0ehb9","category_id":"ckkkzeoxh0044rh1tflmy6vi8","_id":"ckkkzeoxj004crh1t7551b5pb"},{"post_id":"ckkkzeox3002drh1tbl74dvj9","category_id":"ckkkzeoxh0044rh1tflmy6vi8","_id":"ckkkzeoxk004frh1t2xj755w1"},{"post_id":"ckkkzeox3002erh1t1u8o8u4q","category_id":"ckkkzeoxj004brh1t474ra85t","_id":"ckkkzeoxk004jrh1t6sduhkue"},{"post_id":"ckkkzeox5002jrh1td6pj03lx","category_id":"ckkkzeoxk004grh1the245h2m","_id":"ckkkzeoxl004nrh1t298f3my0"},{"post_id":"ckkkzeox5002jrh1td6pj03lx","category_id":"ckkkzeoxl004krh1tdiuudtcj","_id":"ckkkzeoxl004orh1t5ih67ulg"},{"post_id":"ckkkzeoxr004prh1td1gnbe1c","category_id":"ckkkzeow50004rh1thmm66jny","_id":"ckkkzeoxt004vrh1tabi1gknj"},{"post_id":"ckkkzeoxs004srh1t00lp803c","category_id":"ckkkzeow9000arh1tgghtg7zl","_id":"ckkkzeoxu004xrh1teskq9kai"},{"post_id":"ckkkzeoxs004qrh1t3nd14z2m","category_id":"ckkkzeoxt004trh1t8q616s32","_id":"ckkkzeoxu004yrh1tc8rk1vfn"}],"PostTag":[{"post_id":"ckkkzeow00001rh1t3dp096ge","tag_id":"ckkkzeow60005rh1t6mqg4jdp","_id":"ckkkzeowa000crh1t3ks9hzht"},{"post_id":"ckkkzeow30003rh1t1yp3f11n","tag_id":"ckkkzeowa000brh1t9jy2dppe","_id":"ckkkzeowd000jrh1t2lz631qk"},{"post_id":"ckkkzeowd000irh1t3dsl1gvg","tag_id":"ckkkzeow60005rh1t6mqg4jdp","_id":"ckkkzeowf000orh1t0yr4g174"},{"post_id":"ckkkzeow70007rh1te8irfvfs","tag_id":"ckkkzeowc000hrh1t1u5b8chs","_id":"ckkkzeowh000qrh1t5d2q4doo"},{"post_id":"ckkkzeowe000krh1tfdvo8zvm","tag_id":"ckkkzeow60005rh1t6mqg4jdp","_id":"ckkkzeowj000vrh1ta4te7dyq"},{"post_id":"ckkkzeow80008rh1tg62g5se9","tag_id":"ckkkzeowc000hrh1t1u5b8chs","_id":"ckkkzeowk000yrh1t6fzibg2n"},{"post_id":"ckkkzeow90009rh1t1hls0x82","tag_id":"ckkkzeowj000urh1t2jrddfzw","_id":"ckkkzeowo0015rh1tar896lsl"},{"post_id":"ckkkzeowa000drh1t5ep72v49","tag_id":"ckkkzeowl0012rh1tai6oemnw","_id":"ckkkzeowt001grh1t3gc00jn5"},{"post_id":"ckkkzeowa000drh1t5ep72v49","tag_id":"ckkkzeowp001arh1t80w894vc","_id":"ckkkzeowt001irh1t5zyccgaw"},{"post_id":"ckkkzeows001frh1td5us99w3","tag_id":"ckkkzeowj000urh1t2jrddfzw","_id":"ckkkzeowv001mrh1t24cp1u7x"},{"post_id":"ckkkzeowb000erh1tepk0bc4l","tag_id":"ckkkzeowl0012rh1tai6oemnw","_id":"ckkkzeowx001trh1tgpe47fo1"},{"post_id":"ckkkzeowb000erh1tepk0bc4l","tag_id":"ckkkzeowu001krh1t8m5v39e7","_id":"ckkkzeowy001vrh1t724yfrnf"},{"post_id":"ckkkzeowg000prh1tbkz817mh","tag_id":"ckkkzeoww001qrh1tecm749la","_id":"ckkkzeowz0020rh1t5s82fec4"},{"post_id":"ckkkzeowi000rrh1tftrqeoh5","tag_id":"ckkkzeowy001yrh1t672lhmc7","_id":"ckkkzeox10026rh1t348j9zqj"},{"post_id":"ckkkzeowj000wrh1tbh6jfg70","tag_id":"ckkkzeoww001qrh1tecm749la","_id":"ckkkzeox3002crh1tf7gb7gwq"},{"post_id":"ckkkzeowk000zrh1tbl1b0u7c","tag_id":"ckkkzeowu001krh1t8m5v39e7","_id":"ckkkzeox4002irh1t56aa63kw"},{"post_id":"ckkkzeown0013rh1tced9bpeq","tag_id":"ckkkzeowu001krh1t8m5v39e7","_id":"ckkkzeox6002nrh1t42lq8s9k"},{"post_id":"ckkkzeowo0016rh1t5u4jeg9x","tag_id":"ckkkzeowu001krh1t8m5v39e7","_id":"ckkkzeox7002rrh1td8vygb7a"},{"post_id":"ckkkzeowp0018rh1t6tbs64u5","tag_id":"ckkkzeowp001arh1t80w894vc","_id":"ckkkzeox7002wrh1t6ve76mni"},{"post_id":"ckkkzeowq001brh1tavvb654t","tag_id":"ckkkzeox7002trh1t1ati4hrr","_id":"ckkkzeox80030rh1t6o38dt8n"},{"post_id":"ckkkzeowr001crh1t6t62ez0m","tag_id":"ckkkzeox8002xrh1t39irezg8","_id":"ckkkzeox90034rh1t5l08gg0a"},{"post_id":"ckkkzeowt001hrh1t9r3da94n","tag_id":"ckkkzeox80031rh1t4l1qc7kk","_id":"ckkkzeox90039rh1t1zrodvs7"},{"post_id":"ckkkzeowu001lrh1tfe5o2b46","tag_id":"ckkkzeox90036rh1t8gw8ebbl","_id":"ckkkzeoxa003drh1tf5mk2fxv"},{"post_id":"ckkkzeowv001nrh1t7xdh2rw2","tag_id":"ckkkzeox90036rh1t8gw8ebbl","_id":"ckkkzeoxb003hrh1tgd1q1cow"},{"post_id":"ckkkzeoww001rrh1t225i0znh","tag_id":"ckkkzeox90036rh1t8gw8ebbl","_id":"ckkkzeoxc003lrh1tbwu38c4v"},{"post_id":"ckkkzeowx001urh1tdyf9at0m","tag_id":"ckkkzeox90036rh1t8gw8ebbl","_id":"ckkkzeoxc003prh1ta5gq2fbd"},{"post_id":"ckkkzeowy001zrh1t6bhn2p3a","tag_id":"ckkkzeox90036rh1t8gw8ebbl","_id":"ckkkzeoxe003trh1t8wjy93vz"},{"post_id":"ckkkzeowz0021rh1tctmt84bq","tag_id":"ckkkzeox90036rh1t8gw8ebbl","_id":"ckkkzeoxg003xrh1te1gh1qzz"},{"post_id":"ckkkzeowz0023rh1t56sfek1w","tag_id":"ckkkzeox90036rh1t8gw8ebbl","_id":"ckkkzeoxg0041rh1t2exdexgj"},{"post_id":"ckkkzeox10027rh1t6yzc7ui8","tag_id":"ckkkzeoxg003yrh1t9dk315j3","_id":"ckkkzeoxi0045rh1thlv79b7j"},{"post_id":"ckkkzeox20028rh1tcit0ehb9","tag_id":"ckkkzeoxh0042rh1t2uv528du","_id":"ckkkzeoxi0049rh1t012t4hyl"},{"post_id":"ckkkzeox3002drh1tbl74dvj9","tag_id":"ckkkzeoxh0042rh1t2uv528du","_id":"ckkkzeoxj004drh1tex0ue8pz"},{"post_id":"ckkkzeox3002erh1t1u8o8u4q","tag_id":"ckkkzeoxj004arh1tbl6t2nl6","_id":"ckkkzeoxk004hrh1t5n6ybdwo"},{"post_id":"ckkkzeox5002jrh1td6pj03lx","tag_id":"ckkkzeoxj004erh1tbjhy6g67","_id":"ckkkzeoxl004lrh1t23qf4mb9"},{"post_id":"ckkkzeox5002jrh1td6pj03lx","tag_id":"ckkkzeoxk004irh1tgxf3dexf","_id":"ckkkzeoxl004mrh1t5hyy9pvz"},{"post_id":"ckkkzeoxr004prh1td1gnbe1c","tag_id":"ckkkzeow60005rh1t6mqg4jdp","_id":"ckkkzeoxs004rrh1t6lh9agd2"},{"post_id":"ckkkzeoxs004qrh1t3nd14z2m","tag_id":"ckkkzeox80031rh1t4l1qc7kk","_id":"ckkkzeoxt004urh1tbqys2p7m"},{"post_id":"ckkkzeoxs004srh1t00lp803c","tag_id":"ckkkzeowa000brh1t9jy2dppe","_id":"ckkkzeoxt004wrh1t7btx0uri"}],"Tag":[{"name":"Java","_id":"ckkkzeow60005rh1t6mqg4jdp"},{"name":"pay","_id":"ckkkzeowa000brh1t9jy2dppe"},{"name":"Linux","_id":"ckkkzeowc000hrh1t1u5b8chs"},{"name":"RabbitMQ","_id":"ckkkzeowj000urh1t2jrddfzw"},{"name":"docker","_id":"ckkkzeowl0012rh1tai6oemnw"},{"name":"mysql","_id":"ckkkzeowp001arh1t80w894vc"},{"name":"mongo","_id":"ckkkzeowu001krh1t8m5v39e7"},{"name":"manjaro","_id":"ckkkzeoww001qrh1tecm749la"},{"name":"openjdk","_id":"ckkkzeowy001yrh1t672lhmc7"},{"name":"netty","_id":"ckkkzeox7002trh1t1ati4hrr"},{"name":"nginx","_id":"ckkkzeox8002xrh1t39irezg8"},{"name":"redis","_id":"ckkkzeox80031rh1t4l1qc7kk"},{"name":"springcloud","_id":"ckkkzeox90036rh1t8gw8ebbl"},{"name":"we","_id":"ckkkzeoxg003yrh1t9dk315j3"},{"name":"tomcat","_id":"ckkkzeoxh0042rh1t2uv528du"},{"name":"事务","_id":"ckkkzeoxj004arh1tbl6t2nl6"},{"name":"java","_id":"ckkkzeoxj004erh1tbjhy6g67"},{"name":"多线程","_id":"ckkkzeoxk004irh1tgxf3dexf"}]}}