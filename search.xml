<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java8新特性</title>
    <url>/2019/07/27/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><img src="/2019/07/27/Java8%E6%96%B0%E7%89%B9%E6%80%A7/Java8%E6%96%B0%E7%89%B9%E6%80%A7.png" alt="Photo by Cristofer Jeschke"></p>
<p>Java8 相对之前版本来说是更新比较大的一个版本，不仅在 Java 语言本身，而且在编译器，类库，jvm 都引入了很多新的特性，工作中虽然偶尔会用到一些简单的特性，比如 forEach,stream,等相关功能，但是没有专门花时间去整理这些特性，最近新版本刚刚发布完成，抽空整理学习下这部分内容。用了 Java8 这么久，新特性面前不能瑟瑟发抖，哈哈哈….  <a id="more"></a></p>
<h4 id="Lambda-表达式和函数式接口-FunctionInterface"><a href="#Lambda-表达式和函数式接口-FunctionInterface" class="headerlink" title="Lambda 表达式和函数式接口 FunctionInterface"></a>Lambda 表达式和函数式接口 FunctionInterface</h4><p>Lambda 表达式是 Java8 引入的一个新特性，它允许将函数作为参数传递给调用方法，极大程度的简化了 Java 的代码量，这里举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 栗子</span></span><br><span class="line"><span class="comment">// Java8 之前遍历 List 实例</span></span><br><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String s : strings) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Java8 </span></span><br><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">strings.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>
<p>上面这个例子比较简单，看起来也就省了一行代码，但是代码在整体的简洁程度有了很大的提高，Lambda 表达式主要符号是 <code>-&gt;</code>，在上面的例子中，参数 <code>s</code> 的类型是编译器自动去推断的，当然也可以自己声明参数的类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">strings.forEach((String s )-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>
<p>Lambda 表达式引用成员变量或者局部变量时，会被隐式的转成 final 类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">String ext = <span class="string">&quot;,&quot;</span>;</span><br><span class="line">strings.forEach((String s )-&gt; System.out.println(s + ext));</span><br></pre></td></tr></table></figure>
<p>上面其实等价于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="keyword">final</span> String ext = <span class="string">&quot;,&quot;</span>;</span><br><span class="line">strings.forEach((String s )-&gt; System.out.println(s + ext));</span><br></pre></td></tr></table></figure>
<h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>Java8 提供了方法引用的语法来直接访问类或者已经存在的方法或者构造方法，是语法更加简洁紧凑，一般主要有下面几种形式：</p>
<h5 id="构造方法引用"><a href="#构造方法引用" class="headerlink" title="构造方法引用"></a>构造方法引用</h5><p>通过构造方法引用，可以实例化一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person 类【</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">newPerson</span><span class="params">(<span class="keyword">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person person = Person.newPerson(Person::<span class="keyword">new</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过 Class::new 这种语法来创建对象，这里要提供一个无参构造器，否则会编译出错。</p>
<h5 id="类实例方法引用-amp-静态方法引用"><a href="#类实例方法引用-amp-静态方法引用" class="headerlink" title="类实例方法引用&amp;静态方法引用"></a>类实例方法引用&amp;静态方法引用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        age = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">newPerson</span><span class="params">(<span class="keyword">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// test</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        list.add(Person.newPerson(Person::<span class="keyword">new</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类的实例方法引用</span></span><br><span class="line">    list.forEach(Person::getAge);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面的例子可以看到，每次输出的都是不同的 age 属性，语法上更加简洁明了。<strong>静态方法引用</strong>和类的实例方法引用一样，也是 ClassName::methodName 的方式引用。一般用的最多的也就是这几种引用，后面有机会在补充上来。</p>
<h4 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream 流"></a>Stream 流</h4><p>Java8 提供了一种新的数据处理方式—流。流的处理的概念类似管道处理，结合 Lambda 表达式使得集合等数据处理变得简洁高效，还可以对数据进行筛选、排序、聚合等操作，简直不要太爽。</p>
<blockquote>
<p>集合，数组，I/O channel，generator 等。<br>集合中包含串行流和并行流，一般情况下并行流比串行流效率更高。<br>串行流：stream()。<br>并行流：parallelStream()。</p>
</blockquote>
<p>下面是一个简单的列子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javabean 添加了 name 属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        age = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">newPerson</span><span class="params">(<span class="keyword">final</span> Supplier&lt;Person&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>, <span class="number">20</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="string">&quot;二炮&quot;</span>, <span class="number">23</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="string">&quot;大同&quot;</span>, <span class="number">29</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>, <span class="number">34</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Person(<span class="string">&quot;小二&quot;</span>, <span class="number">18</span>));</span><br><span class="line">    Predicate&lt;Person&gt; predicate = (person) -&gt; person.getAge() &gt; <span class="number">25</span>;</span><br><span class="line">    list.forEach(person -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(predicate.test(person))&#123;</span><br><span class="line">            System.out.println(person.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的串行流比较类似迭代器，使用 Predicate 创建了一个条件，在迭代时将满足条件的接口打印出来。</p>
<h5 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h5><h6 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h6><blockquote>
<p>forEach() 在上面的例子中已经出现了很多次了，也是我经常用的方法之一，stream 流内部遍历简化了代码，在语法上面更加清晰。</p>
</blockquote>
<h6 id="map"><a href="#map" class="headerlink" title="map"></a>map</h6><blockquote>
<p>map 可以按照规则映射成另一个元素，简单来说就是可以给某个元素设置另外的值。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().map(i -&gt; i+<span class="number">1</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h6><blockquote>
<p>filter 可以对 stream 中元素进行过滤</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">long</span> count = integers.stream().filter(integer -&gt; integer &gt; <span class="number">3</span>).count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>集合中数值大于 3 的数量统计。</p>
<h6 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h6><blockquote>
<p>此方法可以获取指定数量的流</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">34</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().limit(<span class="number">6</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印前 6 条记录，这里 limit 指定想要的条数，从 0 开始取。</p>
<h6 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h6><blockquote>
<p>顾名思义，可以利用 sorted 方法对流数据进行排序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSorted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">99</span>, <span class="number">22</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">34</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个使用还是很顺滑的，减少了很多代码就可以优雅进行排序了。</p>
<h6 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h6><blockquote>
<p>对流进行合并操作</p>
</blockquote>
<p>concat 方法是 Stream 接口的一个静态方法，如果合并时两个流中元素是经过排序的，则得到的元素也是排序的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConcat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">11</span>, <span class="number">9</span>, <span class="number">34</span>);</span><br><span class="line">    List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">10</span>,<span class="number">19</span>, <span class="number">2</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = Stream.concat(integers.stream(), integerList.stream()).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h6><blockquote>
<p>对流中元素进行去重操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistinct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">34</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().distinct().collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有个坑，就是如果List 是一个对象集合，没有重写 equals() 方法的话，得到的答案是不正确的，因为它是基于 equals() 方法来实现的。</p>
<h6 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h6><blockquote>
<p>跳过流中的某几个元素，经常和 limit 配置使用。</p>
</blockquote>
<p>使用 skip 配合 limit 可以更好的对流中元素进行分页操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSkip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">99</span>, <span class="number">12</span>, <span class="number">40</span>, <span class="number">8</span>, <span class="number">11</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().skip(<span class="number">2</span>).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="match"><a href="#match" class="headerlink" title="match"></a>match</h6><blockquote>
<p>匹配指定的元素<br>Stream 提供了 3 个 api 接口，分别是：allMatch()，anyMatch()，noneMatch() 方法的功能基本顾名思义的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">99</span>, <span class="number">12</span>, <span class="number">40</span>, <span class="number">8</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">boolean</span> b = integers.stream().allMatch(integer -&gt; integer &gt; <span class="number">8</span>);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    <span class="keyword">boolean</span> anyMatch = integers.stream().anyMatch(integer -&gt; integer &gt; <span class="number">8</span>);</span><br><span class="line">    System.out.println(anyMatch);</span><br><span class="line">    <span class="keyword">boolean</span> noneMatch = integers.stream().noneMatch(integer -&gt; integer &gt; <span class="number">8</span>);</span><br><span class="line">    System.out.println(noneMatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>代码中空指针异常是一个让人很头疼但是又不得不去检查的操作，在 Java8 之前都是用过 if 来判断的，Java8 则引入了 Optional 来解决，使代码不被空间查污染。<br>Optional 是一个容器，它可以保存任意类型的值，也可以保存 null，通过它提供的方法，就可以不用显式的进行空值判断。书面话的说明看着都是似懂非懂的感觉，还是看代码更有感觉一点。</p>
<h5 id="Optional-创建"><a href="#Optional-创建" class="headerlink" title="Optional 创建"></a>Optional 创建</h5><ol>
<li>Optional.empty():创建一个空的 Optional 对象</li>
<li>Optional.of(T value):传入的 value 值为 null 的话，会抛空指针异常。</li>
<li>Optional.ofNullable(T value): 传入的 value 值允许为空。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// empty()</span></span><br><span class="line">    Optional&lt;Person&gt; empty = Optional.empty();</span><br><span class="line">    <span class="comment">// of(T value)</span></span><br><span class="line">    Optional&lt;Person&gt; optional = Optional.of(<span class="keyword">new</span> Person());</span><br><span class="line">    <span class="comment">// ofNullable(T value)</span></span><br><span class="line">    Optional&lt;Person&gt; ofNullable = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="orElse"><a href="#orElse" class="headerlink" title="orElse"></a>orElse</h6></li>
</ol>
<blockquote>
<p>有值则返回，没有则返回其他值</p>
</blockquote>
<p>如果传入的值是 null 时，返回 orElse 方法中指定的结果，否则返回实例的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrElse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.ofNullable(p.getName());</span><br><span class="line">    String name_is_null = optional.orElse(<span class="string">&quot;name is null&quot;</span>);</span><br><span class="line">    System.out.println(name_is_null);</span><br><span class="line">    p.setName(<span class="string">&quot;jihe&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; optionalS = Optional.ofNullable(p.getName());</span><br><span class="line">    String name_is_nullS = optionalS.orElse(<span class="string">&quot;name is null&quot;</span>);</span><br><span class="line">    System.out.println(name_is_nullS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet"></a>orElseGet</h6><blockquote>
<p>在功能上和 orElse() 方法类似，只是 orElseGet 指出传入一个 Lambda 表达式生产默认值</p>
</blockquote>
<p>如果想要的实例为 null 时，就可以通过 orElseGet 获取一个非空实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrElseGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">null</span>;</span><br><span class="line">    Optional&lt;Person&gt; optional = Optional.ofNullable(p);</span><br><span class="line">    Person person = optional.orElseGet(() -&gt; <span class="keyword">new</span> Person(<span class="string">&quot;jihe&quot;</span>, <span class="number">23</span>));</span><br><span class="line">    System.out.println(person.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是一些比较常用的 Java8 新特性，后面会一点点的完善上来。另外 Java8 对时间日期处理也引入了新的 API 来解决让人傻傻分不清的日期类。让日期和时间的处理更加人性化，易于理解。在 JVM 层面，PermGen 空间被移除了，取而代之的是 MetaSpace，与之对应的 -XX:PermSize 和 -XX:MaxPermSize 参数分别被 -XX:MetaSpaceSize 和 -XX:MaxMetaSpaceSize 所代替。[ PermSize 是用来存放 Class 类元数据的内存区域，如果在应用启动时加载的类信息比较的的话，可能会抛出 “java.lang.OutOfMemoryError: PermGen space” 异常，Java8 使用了本地内存来存储这部分信息，将这部分空间全部移除]</p>
<p>今晚去看了哪吒，超级好看。里面一句台词让人印象深刻。</p>
<hr>
<center>人的成见就像一座大山</center>









]]></content>
      <categories>
        <category>Java</category>
        <category>JDK8</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDK8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java对接iOS内购以及各个渠道微信支付</title>
    <url>/2019/05/29/Java%E5%AF%B9%E6%8E%A5iOS%E5%86%85%E8%B4%AD%E4%BB%A5%E5%8F%8A%E5%90%84%E4%B8%AA%E6%B8%A0%E9%81%93%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<p><img src="/2019/05/29/Java%E5%AF%B9%E6%8E%A5iOS%E5%86%85%E8%B4%AD%E4%BB%A5%E5%8F%8A%E5%90%84%E4%B8%AA%E6%B8%A0%E9%81%93%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/pay.png"></p>
<p>最近因为公司业务需要，要对接支付这一块，我也是第一次对接第三方支付相关，因为是微信，iOS 缘故，对接前感觉可能会比较容易，毕竟这两家的东西用的人肯定很多，但是在具体的对接过程中还是碰到了很多的问题。</p>
<a id="more"></a>

<h5 id="iOS-内购"><a href="#iOS-内购" class="headerlink" title="iOS 内购"></a>iOS 内购</h5><p>iOS 对接相对来说比较容易点，客户端 SDK 已经集成了支付相关的很多流程，这里服务端只是做一个校验，保存相关数据和业务操作就可以。</p>
<h6 id="购买流程："><a href="#购买流程：" class="headerlink" title="购买流程："></a>购买流程：</h6><ol>
<li>app 购买成功之后，将 receipt-data 提交给自己的应用服务器</li>
<li>应用服务器拿到数据之后解析后拿着数据去苹果服务器验证。</li>
<li>苹果返回验证结果给应用服务器，应用服务器返回给 app。</li>
</ol>
<p>####### 问题</p>
<ol>
<li>应用服务器到苹果服务器验证数时会有两个环境，沙盒测试环境和正式环境，这里在保存数据的时候要注意标记支付环境，方便后续统计数据。</li>
<li>苹果服务器访问是真慢。</li>
<li>这个问题是代码上线一段时间后在生产暴露出来的，被刷单。</li>
</ol>
<h6 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h6><blockquote>
</blockquote>
<ol>
<li>内购沙盒地址：SANDBOX_CERTIFICATE_URL = <a class="link" href="https://sandbox.itunes.apple.com/verifyReceipt">https://sandbox.itunes.apple.com/verifyReceipt<i class="fas fa-external-link-alt"></i></a></li>
<li>正式地址：    BUY_CERTIFICATE_URL = <a class="link" href="https://buy.itunes.apple.com/verifyReceipt">https://buy.itunes.apple.com/verifyReceipt<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> receiptData app 端传来的交易数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">iosInnerBuy</span><span class="params">(String receiptData, String userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用于记录是沙盒测试支付还是实际用户购买支付，可用于以后对账</span></span><br><span class="line">        String payChannel = <span class="string">&quot;sandbox&quot;</span>;</span><br><span class="line">        String result = OkHttpUtil.sendHttpPost(SANDBOX_CERTIFICATE_URL, <span class="string">&quot;&#123;\&quot;receipt-data\&quot;:\&quot;&quot;</span> + receiptData + <span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">        JSONObject obj = JSONObject.parseObject(result);</span><br><span class="line">        <span class="comment">// 如果沙箱环境没有成功，调用正式环境处理</span></span><br><span class="line">        <span class="keyword">if</span> (obj.getInteger(<span class="string">&quot;status&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            payChannel = <span class="string">&quot;formal&quot;</span>;</span><br><span class="line">            result = OkHttpUtil.sendHttpPost(BUY_CERTIFICATE_URL, <span class="string">&quot;&#123;\&quot;receipt-data\&quot;:\&quot;&quot;</span> + receiptData + <span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String productId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        JSONObject jsonArry = JSONObject.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (jsonArry == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsException(Code.FAILED, <span class="string">&quot;参数有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject map = (JSONObject) jsonArry.get(<span class="string">&quot;receipt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsException(Code.FAILED, <span class="string">&quot;参数有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JSONArray inApp = (JSONArray) map.get(<span class="string">&quot;in_app&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (inApp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsException(Code.FAILED, <span class="string">&quot;参数有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inApp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inApp.size(); i++) &#123;</span><br><span class="line">                JSONObject json = inApp.getJSONObject(i);</span><br><span class="line">                productId = (String) json.get(<span class="string">&quot;product_id&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(productId)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;product_id 为空，返回结果为:&#123;&#125;&quot;</span>, result);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsException(Code.FAILED, <span class="string">&quot;product_id 不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO 具体的业务逻辑...</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="被恶意攻击"><a href="#被恶意攻击" class="headerlink" title="被恶意攻击"></a>被恶意攻击</h6><ol>
<li>起因</li>
</ol>
<p>因为版本时间比较紧张，各个开发和测试的时间都很短，导致在开发和测试环境没有暴露出来被刷单的问题。今天数据分析师突然说有异常充值订单，（和钱有关的还是要进行代码审核，多方确认才能上生产的）进行排查后发现是因为有人用支付成功的 receipt-data 来进行多次请求（应该是写了脚本进行连续访问）因为当时代码没有加入苹果支付返回的唯一ID transaction_id（这里确实是代码问题，正常情况是必须加上这些参数的）。导致重复充值问题。当时已经下班了才发现的（肯定回不去了），立马进行了修复，异常订单问题还没有讨论。</p>
<ol start="2">
<li>解决</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 首先给充值接口添加 redis 分布式锁，防止脚本恶意频繁刷单。接口的加密校验也做了处理。</span><br><span class="line">2. 保存 Apple 验证返回的 transaction_id，校验获取到的这个值是唯一的，和 product_id 在同一层数据结构中。</span><br><span class="line">3. 对异常用户做一些处理，纠正被刷的订单。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个解决也都相对简单，就是在创建订单前先用 transaction_id 检查以下有没有订单，如果有的话就直接抛出相应的异常告知调用方。<br>如果没有的话，则创建订单，保存对应的 transaction_id，进行数据校验。</p>
</blockquote>
<h5 id="微信-app-支付"><a href="#微信-app-支付" class="headerlink" title="微信 app 支付"></a>微信 app 支付</h5><blockquote>
<p>推荐参考 <a class="link" href="https://github.com/binarywang">https://github.com/binarywang<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>微信支付我们在生活中使用也比较多，流程也相对比较清晰，并且官方提供的文档都是中文的，所以比较容易一点。微信支付一般涉及到 APP 拉起支付，h5 支付，JSAPI 支付，Native 支付这几种，具体描述<a class="link" href="https://pay.weixin.qq.com/wiki/doc/api/index.html">官网<i class="fas fa-external-link-alt"></i></a>看起来比较清晰，也更加详细，这里先看下 <a class="link" href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1">APP 支付<i class="fas fa-external-link-alt"></i></a>，在自己 APP 中集成微信支付。</p>
<h6 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h6><ol>
<li>选择要购买的商品，调用 APP 自己的服务生成订单和支付数据，加签后返回给客户端。</li>
<li>客户端校验服务端返回的参数，拉起微信支付。</li>
<li>输入密码进行支付，生成支付信息。</li>
</ol>
<h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><ol>
<li>前后端验签的时候特别容易出错，这里要仔细看文档。</li>
</ol>
<h6 id="相关代码-1"><a href="#相关代码-1" class="headerlink" title="相关代码"></a>相关代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 统一预下单接口</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> jsonParam</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> WxPayException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/unifiedOrder&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseMsg <span class="title">unifiedOrder</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject jsonParam,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   HttpServletRequest request)</span> <span class="keyword">throws</span> WxPayException </span>&#123;</span><br><span class="line">       ResponseMsg responseMsg = <span class="keyword">new</span> ResponseMsg(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class="line">       <span class="comment">// 1. 根据自己业务校验参数</span></span><br><span class="line">       <span class="comment">// 2. 创建订单</span></span><br><span class="line">       WxPayUnifiedOrderRequest orderRequest = <span class="keyword">new</span> WxPayUnifiedOrderRequest();</span><br><span class="line">       <span class="comment">//商品描述</span></span><br><span class="line">       orderRequest.setBody(<span class="string">&quot;some desc&quot;</span>);</span><br><span class="line">       <span class="comment">//商户订单号</span></span><br><span class="line">       orderRequest.setOutTradeNo(order.getOrderId());</span><br><span class="line">       <span class="comment">//订单总金额，单位为分</span></span><br><span class="line">       orderRequest.setTotalFee(Item.getPrice());</span><br><span class="line">       <span class="comment">//终端IP</span></span><br><span class="line">       orderRequest.setSpbillCreateIp(request.getRemoteAddr());</span><br><span class="line">       <span class="comment">//指定支付方式 no_credit--可限制用户不能使用信用卡支付</span></span><br><span class="line">       orderRequest.setLimitPay(<span class="string">&quot;no_credit&quot;</span>);</span><br><span class="line">       <span class="comment">//交易类型</span></span><br><span class="line">       orderRequest.setTradeType(<span class="string">&quot;APP&quot;</span>);</span><br><span class="line">       <span class="comment">//用户的 openid</span></span><br><span class="line">       orderRequest.setOpenid(user.getOpenidApp());</span><br><span class="line">      </span><br><span class="line">       WxPayUnifiedOrderResult result = <span class="keyword">this</span>.wxAppPayService.unifiedOrder(orderRequest);</span><br><span class="line">       HashMap&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">       param.put(<span class="string">&quot;appid&quot;</span>, result.getAppid());</span><br><span class="line">       param.put(<span class="string">&quot;partnerid&quot;</span>, result.getMchId());</span><br><span class="line">       param.put(<span class="string">&quot;prepayid&quot;</span>, result.getPrepayId());</span><br><span class="line">       param.put(<span class="string">&quot;package&quot;</span>, <span class="string">&quot;Sign=WXPay&quot;</span>);</span><br><span class="line">       param.put(<span class="string">&quot;noncestr&quot;</span>, result.getNonceStr());</span><br><span class="line">       param.put(<span class="string">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>));</span><br><span class="line">       <span class="keyword">final</span> WxPayAppOrderResult pay = WxPayAppOrderResult.builder()</span><br><span class="line">               .sign(SignUtils.createSign(param, <span class="keyword">null</span>, properties.getMchKey(), <span class="keyword">new</span> String[]&#123;&#125;))</span><br><span class="line">               .prepayId(result.getPrepayId())</span><br><span class="line">               .partnerId(result.getMchId())</span><br><span class="line">               .appId(result.getAppid())</span><br><span class="line">               .timeStamp(param.get(<span class="string">&quot;timestamp&quot;</span>))</span><br><span class="line">               .nonceStr(result.getNonceStr())</span><br><span class="line">               .packageValue(<span class="string">&quot;Sign=WXPay&quot;</span>)</span><br><span class="line">               .rechargeOrderId(order.getRechargeOrderId())</span><br><span class="line">               .build();</span><br><span class="line">       responseMsg.setData(pay);</span><br><span class="line">       <span class="keyword">return</span> responseMsg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>加签方法：在 <a class="link" href="https://github.com/binarywang">https://github.com/binarywang<i class="fas fa-external-link-alt"></i></a> 加到本地后可以直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 微信支付签名算法(详见:https://pay.weixin.qq.com/wiki/doc/api/tools/cash_coupon.php?chapter=4_3).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> params        参数信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> signType      签名类型，如果为空，则默认为MD5</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> signKey       签名Key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> ignoredParams 签名时需要忽略的特殊参数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 签名字符串 string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createSign</span><span class="params">(Map&lt;String, String&gt; params, String signType, String signKey, String[] ignoredParams)</span> </span>&#123;</span><br><span class="line">    SortedMap&lt;String, String&gt; sortedMap = <span class="keyword">new</span> TreeMap&lt;&gt;(params);</span><br><span class="line"></span><br><span class="line">    StringBuilder toSign = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (String key : sortedMap.keySet()) &#123;</span><br><span class="line">      String value = params.get(key);</span><br><span class="line">      <span class="keyword">boolean</span> shouldSign = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.isNotEmpty(value) &amp;&amp; !ArrayUtils.contains(ignoredParams, key)</span><br><span class="line">        &amp;&amp; !Lists.newArrayList(<span class="string">&quot;sign&quot;</span>, <span class="string">&quot;key&quot;</span>, <span class="string">&quot;xmlString&quot;</span>, <span class="string">&quot;xmlDoc&quot;</span>, <span class="string">&quot;couponList&quot;</span>).contains(key)) &#123;</span><br><span class="line">        shouldSign = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (shouldSign) &#123;</span><br><span class="line">        toSign.append(key).append(<span class="string">&quot;=&quot;</span>).append(value).append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toSign.append(<span class="string">&quot;key=&quot;</span>).append(signKey);</span><br><span class="line">    <span class="keyword">if</span> (WxPayConstants.SignType.HMAC_SHA256.equals(signType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> me.chanjar.weixin.common.util.SignUtils.createHmacSha256Sign(toSign.toString(), signKey);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> DigestUtils.md5Hex(toSign.toString()).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>加签返回给 APP 后进行验证拉起支付，这里得特别小心加签前后的参数大小写，很容易出现问题。以上就是微信 APP 支付。</p>
<hr>
<center>沉淀</center>

]]></content>
      <categories>
        <category>Pay</category>
      </categories>
      <tags>
        <tag>Pay</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-shell</title>
    <url>/2020/01/03/Linux-shell/</url>
    <content><![CDATA[<p><img src="/2020/01/03/Linux-shell/linux-shell.png" alt="Photo by deleted on wallhaven.cc"></p>
<p>shell 是用户和 Linux 系统交互的一个应用程序，就像 Windows 操作系统可以用过界面进行交互。shell 脚本就是通过 shell 来执行的，就像 Java 程序执行在 JVM 上类似。类似 Java 虚拟机，Linux 下也有很多的 shell 程序，但是最常用的就是 bash，因为其使用简单，并且是免费的，所以是 Linux 的默认 shell。</p>
<a id="more"></a>

<h4 id="shell-script"><a href="#shell-script" class="headerlink" title="shell script"></a>shell script</h4><h5 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h5><p>任何语言都离不开一个 hello world ，现在感受下 shell 的第一个脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>
<p>一般 shell 脚本命名都是以 .sh 来写的，这是一个约定俗成的写法，这样别人在看到 .sh 结尾的文件就知道是一个 shell 脚本，当然想以其他结尾也是可以的。</p>
<blockquote>
<p>#!<br>这个是告诉系统这个脚本使用哪个 shell 来执行。<br>echo<br>向窗口输出文本</p>
</blockquote>
<h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>规则</p>
<blockquote>
<ol>
<li>只能使用数字，字母，下划线，且不能以数字开头</li>
<li>变量名区分大小写</li>
<li>变量赋值通过（=）号，且不能有空格</li>
</ol>
</blockquote>
<p>使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jihe shell]<span class="comment"># a=1</span></span><br><span class="line">[root@jihe shell]<span class="comment"># echo $a</span></span><br><span class="line">1</span><br><span class="line">[root@jihe shell]<span class="comment"># echo $&#123;a&#125;</span></span><br><span class="line">1</span><br><span class="line">[root@jihe shell]<span class="comment"># echo $ab</span></span><br><span class="line"></span><br><span class="line">[root@jihe shell]<span class="comment"># echo $&#123;a&#125;b</span></span><br><span class="line">1b</span><br></pre></td></tr></table></figure>
<h6 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h6><p><strong>$?</strong></p>
<p>接收上一天命令的返回状态码，上条命令执行成功是 0 ，失败为其他 1-255 之间的值。</p>
<p><strong>$#</strong></p>
<p>脚本执行的参数个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="variable">$1</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line"><span class="variable">$#</span></span><br></pre></td></tr></table></figure>
<p><code>$*</code></p>
<p>所有参数</p>
<p><strong>$$</strong></p>
<p>获取当前脚本的进程号，可以实现脚本自杀，或者使用 exit 退出。</p>
<h4 id="循环和判断"><a href="#循环和判断" class="headerlink" title="循环和判断"></a>循环和判断</h4><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>shell 中也是 for 循环，但是格式区别于 Java 中的 for 循环，而且 shell 中 for 循环有多种写法，下面是比较容易记住的写法。</p>
<p>打印 0 到 9</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;10;1++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;i=&quot;</span><span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>这样程序会打印 <code>i=0</code> 到  <code>i=9</code> 输出到窗口。<code>do</code> 作为循环体的开始，<code>done</code> 作为循环体的结束。</p>
<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><p>test EXPR<br>[ EXPR ] : 中括号和表达式之间有空格</p>
<h6 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h6><p><code>-gt</code> : 大于， [ $1 -gt $2 ] 或者 test $1 -gt $2 判断变量 1 大于 变量 2<br><code>-lt</code>：小于<br><code>-ge</code>：大于等于<br><code>-le</code>：小于等于<br><code>-eq</code>：等于<br><code>-ne</code>：不等于</p>
<h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><p><code>=</code>：等于，判断变量是否为空 [ “$str” = “” ] 或者 [ -z $str ]<br><code>!=</code>：不等于</p>
<h5 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h5><p>类似 Java 中的 if，而且是以 fi 作为判断的结尾</p>
<p>if [condition 1]<br>then<br>    first tree<br>elif [conditin 2]<br>    second tree<br>else<br>    third tree<br>fi</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">num=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> one</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> two</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> none</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jihe shell]<span class="comment"># ./if.sh 1</span></span><br><span class="line">one</span><br><span class="line">[root@jihe shell]<span class="comment"># ./if.sh 2</span></span><br><span class="line">two</span><br><span class="line">[root@jihe shell]<span class="comment"># ./if.sh 3</span></span><br><span class="line">none</span><br></pre></td></tr></table></figure>

<h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p><code>$&#123;&#125;</code>：获取变量的值<br><code>$()</code>：等于 ``，会执行里面的命令，并且获取命令执行的结果<br><code>$[]</code>：可以对方括号里面的公式进行算术运算<br><code>$(())</code>：可以对双括号里面的公式进行算数运算</p>
<h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><h5 id="date"><a href="#date" class="headerlink" title="date"></a>date</h5><p>显示当前时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure>
<h5 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jihe shell]<span class="comment"># date +%Y-%m-%d</span></span><br><span class="line">2020-01-05</span><br></pre></td></tr></table></figure>
<h5 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title="获取时间戳"></a>获取时间戳</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jihe shell]<span class="comment"># date +%s</span></span><br><span class="line">1578188573</span><br></pre></td></tr></table></figure>
<h5 id="指定时间"><a href="#指定时间" class="headerlink" title="指定时间"></a>指定时间</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取前一天时间，按照指定格式输出</span></span><br><span class="line">[root@jihe shell]<span class="comment"># date --date=&#x27;1 days ago&#x27; +%Y-%m-%d</span></span><br><span class="line">2020-01-04</span><br><span class="line"><span class="comment"># 获取后一天时间，按照指定格式输出</span></span><br><span class="line">[root@jihe shell]<span class="comment"># date --date=&#x27;-1 days ago&#x27; +%Y-%m-%d</span></span><br><span class="line">2020-01-06</span><br><span class="line"><span class="comment"># 获取指定时间的前一天</span></span><br><span class="line">[root@jihe shell]<span class="comment"># date --date=&#x27;20191111 1 days ago&#x27; +%Y-%m-%d</span></span><br><span class="line">2019-11-10</span><br></pre></td></tr></table></figure>
<h4 id="后台执行"><a href="#后台执行" class="headerlink" title="后台执行"></a>后台执行</h4><p>在后台执行脚本</p>
<h5 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h5><p>不挂断的运行命令，忽略所有挂断（hangup）信号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup for.sh &amp;</span><br></pre></td></tr></table></figure>
<p>nohup 会忽略进程的挂断信号，也会在当前执行目录生成一个 nohup.out 日志文件。</p>
<h4 id="标准输入，输出，重定向"><a href="#标准输入，输出，重定向" class="headerlink" title="标准输入，输出，重定向"></a>标准输入，输出，重定向</h4><p>标准输入，输出，错误可以使用文件描述符 0，1，2 引用</p>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &gt; 将输出结果重定向输出到 file 文件中</span></span><br><span class="line"><span class="comment"># 1&gt; 将输出的正确结果重定向到 file 文件中</span></span><br><span class="line"><span class="comment"># &gt;&gt; 将输出的结果追加到 file 文件中，不做覆盖处理</span></span><br><span class="line">ls &gt;file 或者 ls 1&gt;file (ls &gt;&gt;file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2&gt; 将错误输出到 file 文件中，haha 是一个错误命令</span></span><br><span class="line">haha 2&gt;file </span><br></pre></td></tr></table></figure>
<p>特殊</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把输出信息直接丢失，既不保存也不打印到控制台</span></span><br><span class="line">ls &gt;/dev/null</span><br></pre></td></tr></table></figure>
<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p>Linux 下有专门执行定时任务的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/crontab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是 crontab 文件的内容</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里追加定时任务，都为 * 时为 1 分钟执行一次。root 为执行用户，后面跟脚本绝对路径。</span></span><br><span class="line">* * * * * root /usr/<span class="built_in">local</span>/shell/crontab.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>crontab.sh<br>脚本将文本内容输出到指定文件 cron.txt。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt;&gt;/usr/<span class="built_in">local</span>/shell/cron.txt</span><br></pre></td></tr></table></figure>
<p>查看 cron.txt 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实时输出内容</span></span><br><span class="line">tail -f cron.txt</span><br></pre></td></tr></table></figure>

<hr>
<center>美好的事即将发生</center>






]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-常用命令</title>
    <url>/2020/01/01/Linux/</url>
    <content><![CDATA[<p><img src="/2020/01/01/Linux/linux.png" alt="Photo by kejsirajbek on wallhaven.cc"></p>
<p>Linux 是服务端最常用的操作系统，也是范围最广的，都是通过命令来交互的，记录些常用命令，这里会一直追加，年底了，回家的诱惑越来越强。</p>
<a id="more"></a>

<h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><ol>
<li>远程复制</li>
</ol>
<p> <strong>scp</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制文件到远程</span></span><br><span class="line">scp 文件 192.168.31.107:/usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>
<p>静默复制目录到远程主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -r 表示目录，-q 静默复制</span></span><br><span class="line">scp -rq /目录名 192.168.31.107:/usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>权限</li>
</ol>
<p>说明</p>
<blockquote>
<p>使用命令 ll 就可以清晰的查看 Linux 文件目录权限。</p>
</blockquote>
<p><img src="/2020/01/01/Linux/Linux-%E6%9D%83%E9%99%90.png" alt="文件目录权限"></p>
<p>具体的命令执行后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x. 2 root root  4096 May 11  2019 bin</span><br><span class="line">drwxr-xr-x. 2 root root  4096 May 11  2019 etc</span><br><span class="line">drwxr-xr-x. 2 root root  4096 May 11  2019 games</span><br><span class="line">-rw-r--r--. 1 root root 13871 Dec 16 11:38 jihe.sh</span><br><span class="line">drwxr-xr-x. 2 root root  4096 May 11  2019 include</span><br><span class="line">drwxr-xr-x. 2 root root  4096 May 11  2019 lib</span><br></pre></td></tr></table></figure>
<p>比较有意思的是，以上 <code>rwx</code> 表示的权限也可以用数字来描述：<br>r=4,w=2,x=1；如果想设置可读可执行：r + x = 5</p>
<p>设置权限</p>
<p><strong>chmod</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给当前用户设置可执行权限</span></span><br><span class="line">chmod +x jihe.sh</span><br><span class="line"><span class="comment"># 给所有用户最大权限（可读可写可执行）</span></span><br><span class="line">chmod 777 jihe.sh</span><br><span class="line"><span class="comment"># 递归添加权限</span></span><br><span class="line">chmod -R 777 bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>查看文件</li>
</ol>
<p><strong>cat</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件合并 - 把 file1 和 file2 合并输出到 file3</span></span><br><span class="line">cat file1 file2 &gt; file3</span><br><span class="line"><span class="comment"># 显示行号</span></span><br><span class="line">cat -b file1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>more</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分页显示大文件 - 空格下一页</span></span><br><span class="line">more jihe.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>解压</li>
</ol>
<p><strong>tar</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩 - 把目录下所有 txt 文件打包</span></span><br><span class="line">tar -zcvf jihe.tar.gz *.txt</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf jihe.tar.gz</span><br></pre></td></tr></table></figure>
<p>参数说明</p>
<blockquote>
<p>-z 是否使用 gzip 解压缩<br>-c 创建压缩文件（create）<br>-x 解压压缩文件<br>-v 压缩过程显示文件<br>-f 使用档案名，此参数为最后一个参数，后面只能接档案名</p>
</blockquote>
<ol start="4">
<li>文件大小</li>
</ol>
<p><strong>du</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全部目录及其子目录每个档案所占磁盘空间</span></span><br><span class="line">du -a </span><br><span class="line"><span class="comment"># 全部目录及其子目录所占磁盘空间</span></span><br><span class="line">du -h </span><br><span class="line"><span class="comment"># 对应目录及其子目录所占空间</span></span><br><span class="line">du -ch 目录</span><br><span class="line"><span class="comment"># 总大小</span></span><br><span class="line">du -sh</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>管道</li>
</ol>
<p><strong>|</strong></p>
<p>管道命令使用 <code>|</code> 作为界定符号，管道命令需要结合其他命令一块使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出 jihe.txt 中包含 abc 的行。（区分大小写，包含空格必须加引号 &quot;a bc&quot;）</span></span><br><span class="line">cat jihe.txt | grep abc</span><br><span class="line"><span class="comment"># 输出 jihe.txt 文件中包含 abc 的行（忽略大小写）</span></span><br><span class="line">cat jihe.txt | grep -i abc</span><br><span class="line"><span class="comment"># 输出 jihe.txt 文件中不包含 abc 的行</span></span><br><span class="line">cat jihe.txt | grep -v abc</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>查看</li>
</ol>
<p><strong>which</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找 $PATH 设置命令及安装文件目录所在位置</span></span><br><span class="line"><span class="built_in">which</span> ll</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>输出及显示</li>
</ol>
<p><strong>echo</strong><br>输出内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出文本，一般有特殊字符建议加双引号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># 输出环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>export</strong></p>
<p>设置或者显示环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前黄静变量值</span></span><br><span class="line"><span class="built_in">export</span> -p</span><br><span class="line"><span class="comment"># 设置临时环境变量</span></span><br><span class="line"><span class="built_in">export</span>  变量（<span class="variable">$JAVA_HOME</span>）</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>yum<br>应用包管理，类似安卓平台上的安卓应用市场，iOS 平台 AppStore 等应用中心</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件 -y 忽略在安装中确认的操作，直接默认 yes</span></span><br><span class="line">yum install `-y` 包名</span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">yum update 报名</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">yum remove 报名</span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="9">
<li>操作历史</li>
</ol>
<p><strong>history</strong><br>保留了最近执行的命令记录，默认保留 1000 条<br>历史清单从 0 开始编号到最大值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示最近 n 条命令</span></span><br><span class="line"><span class="built_in">history</span> 10</span><br><span class="line"><span class="comment"># 清除所有的历史记录</span></span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line"><span class="comment"># 保存历史记录到文本</span></span><br><span class="line"><span class="built_in">history</span> -w jihe.txt</span><br></pre></td></tr></table></figure>

<h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><ol>
<li>系统状态</li>
</ol>
<p><strong>ps</strong></p>
<p>查看处于活动状态的服务进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep 进程名[tomcat]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">ss -ntl</span><br></pre></td></tr></table></figure>
<p><strong>netstat</strong></p>
<p>查看端口号等信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 端口号[8080]</span><br></pre></td></tr></table></figure>
<p><strong>top</strong><br>动态显示当前系统运行情况，类似 windows 中任务管理器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示命令执行的全路径</span></span><br><span class="line">top -c </span><br><span class="line"><span class="comment"># 指定用户名</span></span><br><span class="line">top -u</span><br><span class="line"><span class="comment"># 指定进程</span></span><br><span class="line">top -p </span><br><span class="line"><span class="comment"># 按进程的 CPU 使用率排序</span></span><br><span class="line">top P</span><br><span class="line"><span class="comment"># 按进程的内存使用率排序</span></span><br><span class="line">top M</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>df</strong><br>显示磁盘使用率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>
<p><strong>who</strong><br>显示当前登录用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">who</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>uname</strong><br>查看系统信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>
<p><strong>free</strong><br>查看内存和交换空间使用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个命令显示的是字节，以 M/G 为单位显示</span></span><br><span class="line">free -m/g</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>关机重启</li>
</ol>
<p><strong>reboot</strong><br>重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立刻重启</span></span><br><span class="line">reboot -h now </span><br></pre></td></tr></table></figure>
<p><strong>poweroff</strong></p>
<p>关机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poweroff</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>查看系统</li>
</ol>
<p><strong>lscpu</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统 cpu 信息</span></span><br><span class="line">lscpu</span><br></pre></td></tr></table></figure>
<hr>
<center>越来越好</center>




]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ安装和使用</title>
    <url>/2019/09/05/RabbitMQ%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/2019/09/05/RabbitMQ%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/rabbitmq.png" alt="Photo by Vadim Sadovski on Unsplash"></p>
<p>作为消息中间件，MQ （Message Queue） 在系统中有至关重要的作用，在高并发场景下，MQ 异步处理请求，缓解系统高峰期压力。在系统之间的调用中解耦，降低各个系统之间的依赖，提交系统的可扩展性。在一写复杂业务处理时，进行异步处理，类似乐观锁，及时返回给用户操作状态，至于业务逻辑通知 MQ 之后在进行处理，提高用户体验，也提高了服务器的处理能力。</p>
<a id="more"></a>


<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>|  系统    |   版本   |<br>| —- | —- | —- |<br>| CenterOS |  7.6       |<br>|   RabbitMq  | 3.6.10    | </p>
<p>因为 RabbitMQ 是 erlang 实现的，所以先要安装 erlang 环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没有 wget 命令的先安装 wget</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://www.rabbitmq.com/releases/erlang/erlang-19.0.4-1.el7.centos.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">rpm -ivh erlang-19.0.4-1.el7.centos.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install erlang</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 rabbitmq</span></span><br><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el6.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 mq</span></span><br><span class="line">yum -y install rabbitmq-server-3.6.6-1.el6.noarch.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在安装过程中碰到了缺少一些依赖包的情况，但是 Google 上都有解决方案，下载安装后可以解决。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/sbin</span><br><span class="line">service rabbitmq-server start</span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">ps -ef | grep rabbitmq </span><br></pre></td></tr></table></figure>
<h5 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></table></figure>
<h5 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure>
<h5 id="安装-web-管理插件"><a href="#安装-web-管理插件" class="headerlink" title="安装 web 管理插件"></a>安装 web 管理插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>访问： <a class="link" href="http://ip:15672/">http://ip:15672<i class="fas fa-external-link-alt"></i></a> 就可以进入到管理页面了</p>
<h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><p>rabbitmq 有个默认的 guest/guest 用户，但是只能在 localhost 下访问，所以要创建一个用户来可以进行远程访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">abbitmqctl add_user admin admin</span><br><span class="line"><span class="comment"># 授予权限</span></span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line"><span class="comment"># 分配权限</span></span><br><span class="line">rabbitmqctl add_vhost admin</span><br><span class="line"></span><br><span class="line">rabbitmqctl set_permissions -p admin admin <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><ol>
<li>Broker：可以理解成 rabbitmq 服务。</li>
<li>vhost:  虚拟主机，一个 broker 可以创建多个 vhost，用作权限分离。</li>
<li>Producer：消息生产者，消息的来源。</li>
<li>Consumer：消息消费者，负责消费生产者生产的消息。</li>
<li>Exchange：交换机，可以看作是一个消息的中转站。</li>
<li>Queue：队列，消息的载体，消息会被投递到一个或者多个队列中。</li>
<li>Binding：绑定，按照一定规则绑定交换机和队列。</li>
<li>Routing Key：路由key，交换机根据这个关键字投递到对应的队列。</li>
<li>Channel：通道，在 client 端每个链接，可以建立多个通道。</li>
</ol>
<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><h5 id="简单队列"><a href="#简单队列" class="headerlink" title="简单队列"></a>简单队列</h5><p>生产者将消息推到队列，消费者从队列消费消息。一个生产者对应一个消费者。</p>
<h6 id="work-模式"><a href="#work-模式" class="headerlink" title="work 模式"></a>work 模式</h6><p>一个生产者对应多个消费者，但是一个消息只能被一个消费者获取。</p>
<ol>
<li><p>创建一个 Direct 交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// params</span></span><br><span class="line">        <span class="comment">// 1. name:交换机名字</span></span><br><span class="line">        <span class="comment">// 2. durable:持久化，当为 true 时，在 mq 重启之后会重新加载此交换机</span></span><br><span class="line">        <span class="comment">// 3. autoDelete:自动删除，当交换机长时间不使用时，自动删除此交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(RabbitMqConfig.EXCHANGE_TEST,</span><br><span class="line">                <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_TEST = <span class="string">&quot;exchange_test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIRST_QUEUE = <span class="string">&quot;first_queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECOND_QUEUE = <span class="string">&quot;second_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 队列key1*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIRST_ROUTING_KEY = <span class="string">&quot;first_routing_key&quot;</span>;</span><br><span class="line">    <span class="comment">/** 队列key2*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECOND_ROUTING_KEY = <span class="string">&quot;second_routing_key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConnectionFactory connectionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExchangeConfig exchangeConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> QueueConfig queueConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RabbitMqConfig</span><span class="params">(ConnectionFactory connectionFactory, ExchangeConfig exchangeConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">                          QueueConfig queueConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionFactory = connectionFactory;</span><br><span class="line">        <span class="keyword">this</span>.exchangeConfig = exchangeConfig;</span><br><span class="line">        <span class="keyword">this</span>.queueConfig = queueConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">simpleMessageListenerContainer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer simpleMessageListenerContainer = <span class="keyword">new</span> SimpleMessageListenerContainer(connectionFactory);</span><br><span class="line">        simpleMessageListenerContainer.addQueues(queueConfig.firstQueue());</span><br><span class="line">        simpleMessageListenerContainer.setExposeListenerChannel(<span class="keyword">true</span>);</span><br><span class="line">        simpleMessageListenerContainer.setMaxConcurrentConsumers(<span class="number">5</span>);</span><br><span class="line">        simpleMessageListenerContainer.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置确认模式手工确认</span></span><br><span class="line">        simpleMessageListenerContainer.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        <span class="keyword">return</span> simpleMessageListenerContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RabbitTemplate template = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">        template.setConfirmCallback(msgSendConfirmCallBack());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AckCallback <span class="title">msgSendConfirmCallBack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AckCallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的 key 将具体的队列绑定到 direct 交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">firstBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueConfig.firstQueue())</span><br><span class="line">                             .to(exchangeConfig.directExchange())</span><br><span class="line">                             .with(RabbitMqConfig.FIRST_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">secondBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueConfig.secondQueue())</span><br><span class="line">                             .to(exchangeConfig.directExchange())</span><br><span class="line">                             .with(RabbitMqConfig.SECOND_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">firstQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// params</span></span><br><span class="line">        <span class="comment">// 1. name:队列名称</span></span><br><span class="line">        <span class="comment">// 2. durable:持久化，当为 true 时，在 mq 重启之后此队列自动加载</span></span><br><span class="line">        <span class="comment">// 3. exclusive:排他队列，当为 true 时，只有队列声明者才能调用</span></span><br><span class="line">        <span class="comment">// 4. autoDelete:自动删除，当为 true 时，自动删除长时间不适用的队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitMqConfig.FIRST_QUEUE,</span><br><span class="line">                <span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">secondQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitMqConfig.SECOND_QUEUE,</span><br><span class="line">                <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AckCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;AckCallback 回调，ID:&#123;&#125;&quot;</span>,correlationData);</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息消费成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息消费失败，原因：&#123;&#125;&quot;</span>,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消息消费完之后会有回调</p>
</li>
<li><p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">    String msg = <span class="string">&quot;第一次发送消息&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TEST,</span><br><span class="line">            RabbitMqConfig.SECOND_ROUTING_KEY,msg,correlationData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我这里直接用 JUnit 进行测试</p>
</li>
<li><p>消费费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 监听的队列名称，链接工厂实例</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &#123;RabbitMqConfig.SECOND_QUEUE, RabbitMqConfig.FIRST_QUEUE&#125;,</span></span><br><span class="line"><span class="meta">            containerFactory = &quot;rabbitListenerContainerFactory&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费成功&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Direct 交换机中，一个交换机可以绑定多个队列，通过不同的路由 key 来指定消息发送到对应的队列中进行消费。当消费者启动时，会自动监听消费相应的消息。</p>
</li>
</ol>
<h5 id="Fanout-交换机（订阅模式）"><a href="#Fanout-交换机（订阅模式）" class="headerlink" title="Fanout 交换机（订阅模式）"></a>Fanout 交换机（订阅模式）</h5><p>订阅模式类似公众号，推送一条消息之后，关注者都可以收到这天推送。</p>
<ol>
<li>枚举类</li>
</ol>
<p>交换机配置枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MqExchangeEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FANOUT_EXCHANGE_TEST(<span class="string">&quot;fanout_exchange_test&quot;</span>, <span class="string">&quot;fanout交换机&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>队列枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MqQueueEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FANOUT_QUEUE_A(<span class="string">&quot;fanout_queue_a&quot;</span>,<span class="string">&quot;fanout交换机队列1&quot;</span>),</span><br><span class="line">    FANOUT_QUEUE_B(<span class="string">&quot;fanout_queue_b&quot;</span>, <span class="string">&quot;fanout交换机队列2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交换机配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutExchangeConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),</span><br><span class="line">                <span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>绑定<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanBindingA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueConfig.fanoutQueueA()).to(fanoutExchangeConfig.fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanBindingB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueConfig.fanoutQueueB()).to(fanoutExchangeConfig.fanoutExchange());</span><br></pre></td></tr></table></figure></li>
<li>发送消息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fanoutSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(i + <span class="string">&quot;消息&quot;</span>);</span><br><span class="line">            String msg = <span class="string">&quot;fanout exchange first test, time: &quot;</span> + System.currentTimeMillis() + <span class="string">&quot; . msg num: &quot;</span> + i;</span><br><span class="line">            rabbitTemplate.convertAndSend(MqExchangeEnum.FANOUT_EXCHANGE_TEST.getKey(),<span class="string">&quot;&quot;</span>,msg,correlationData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>消费消息<br>监听相应的队列，进行消息处理。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;fanout_queue_a&quot;, &quot;fanout_queue_b&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fanout exchange 消息内容：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
fanout 交换机推送消息到所有绑定到它的队列，这里指定具体的路由也是不会生效的</li>
</ol>
<h5 id="Topic-交换机（匹配模式）"><a href="#Topic-交换机（匹配模式）" class="headerlink" title="Topic 交换机（匹配模式）"></a>Topic 交换机（匹配模式）</h5><p>topic 交换机绑定队列之后，可以根据路由 key 来匹配具体的队列，进行消息消费，以通配符的方式绑定到相应的队列，生产者发送相应的路由后，会按照规则匹配到具体的队列</p>
<ol>
<li>交换机配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicExchangeConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>队列<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueueA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(MqQueueEnum.TOPIC_QUEUE_A.getKey(),</span><br><span class="line">                <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueueB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(MqQueueEnum.TOPIC_QUEUE_B.getKey(),</span><br><span class="line">            <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>路由</li>
</ol>
<blockquote>
<p><code>#</code> 表示 零个或者多个单词，匹配任何字符， 以 # 作为路由，topic 交换机的工作模式会和 fanout 交换机工作模式相同</p>
<ul>
<li>  表示一个单词</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBindingA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueConfig.topicQueueA())</span><br><span class="line">                .to(topicExchangeConfig.topicExchange()).with(<span class="string">&quot;#.user.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">topicBindingB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queueConfig.topicQueueB())</span><br><span class="line">            .to(topicExchangeConfig.topicExchange()).with(<span class="string">&quot;topic.#&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>生产者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topicSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        String msg = <span class="string">&quot;top message:&quot;</span> + i;</span><br><span class="line">        rabbitTemplate.convertAndSend(MqExchangeEnum.TOPIC_EXCHANGE_TEST.getKey(), <span class="string">&quot;topic.user&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>消费者</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_queue_a&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topicConsumerOne</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;topic_queue_a 1 消费&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_queue_b&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topicConTow</span><span class="params">(String tow)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;topic_queue_b 2 消费&quot;</span> + tow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考<a class="link" href="https://blog.csdn.net/zhuzhezhuzhe1/article/details/80454956">链接<i class="fas fa-external-link-alt"></i></a><br>参考<a class="link" href="https://www.kancloud.cn/digest/rabbitmq-for-java/122041">RabbitMq教程<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>When life gives you lemons,make Lemonade</center>












]]></content>
      <categories>
        <category>MQ</category>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码</title>
    <url>/2021/02/14/SpringBoot%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><img src="/2021/02/14/SpringBoot%E6%BA%90%E7%A0%81/SpringBoot.png" alt="Photo by destex on JustJon"></p>
<p>Springboot 是 Spring 退出的一个快速集成开发框架，可以很容易的搭建一个 Web 项目，它采用 <code>starter</code> 的方式来引入需要的组件，自动装配需要的配置信息。很大程度的提高了开发效率，让开发者专注于具体业务的开发。这里是我在看 SpringBoot 源码时的一些分析和流程梳理。 </p>
<a id="more"></a>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>这是 SpringBoot 启动动类注解，它是一个组合注解。</p>
<p><img src="/2021/02/14/SpringBoot%E6%BA%90%E7%A0%81/SpringBoot-anno.jpg" alt="SpringBootApplication 注解"></p>
<h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>它导入了 @Configuration 注解，拥有配置属性。所以 @SpringBootApplication 注解也拥有「配置类」属性。</p>
<h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><h5 id="AutoConfigurationImportSelector"><a href="#AutoConfigurationImportSelector" class="headerlink" title="AutoConfigurationImportSelector"></a>AutoConfigurationImportSelector</h5><p>开启自动配置注解，这个注解 Import 了一个 AutoConfigurationImportSelector 自动配置导入选择器。</p>
<p><img src="/2021/02/14/SpringBoot%E6%BA%90%E7%A0%81/impl.png" alt="实现类"></p>
<p>它实现了 Aware 接口，在 IoC 容器启动后，在初始化 Bean 时执行导入，Selector 类会去加载 <code>spring-boot-autoconfigure</code> 包下 <code>Resource/META-INFO/spring.factories</code> 文件中的  <code>Auto Configure</code> 自动配置类，这个文件已经默认将 Redis,RabbitMQ,Kafka,Mybatis,elasticsearch 等常见的第三方自动配置类配置了。只要引入依赖就可以直接使用了。</p>
<h5 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h5><p>自动配置基础扫描包，这个注解 Import 了 AutoConfigurationPackages.Registrar 类，负责将标注次注解的类所在的包名注册到 Bean 定义中</p>
<h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>组建扫描注解，通过 ClassUtils.<em>getPackageName</em>(启动类) 扫描启动类包以及子包中的 @Component，@Service 等注解，将其加入到 IoC 容器中。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>下图是源码的大致调用和启动流程，蓝色为主干，其他均为各个分支。</p>
<p><img src="/2021/02/14/SpringBoot%E6%BA%90%E7%A0%81/flow.png" alt="源码流程图"></p>
<h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><h4 id="invokeBeanFactoryPostProcessors-beanFactory"><a href="#invokeBeanFactoryPostProcessors-beanFactory" class="headerlink" title="invokeBeanFactoryPostProcessors(beanFactory)"></a>invokeBeanFactoryPostProcessors(beanFactory)</h4><p>扫描 Bean 定义并且执行核心的自动配置都是在这里完成的，@SpringBootApplication 包含的所有注解涉及的步骤也是在这个方法中被加载使用。</p>
<h5 id="AutoConfigurationImportSelector-1"><a href="#AutoConfigurationImportSelector-1" class="headerlink" title="AutoConfigurationImportSelector"></a>AutoConfigurationImportSelector</h5><p><img src="/2021/02/14/SpringBoot%E6%BA%90%E7%A0%81/auto-import.png" alt="自动装配类"></p>
<p>它实现 Aware 和 ImportSelector 接口，在配置类记载是执行，并找到 <code>spring-boot-autoconfigure</code></p>
<p>包中的 spring.factories 下所有的自动配置类，进行过滤并且自动装配。</p>
<h5 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h5><p>SpringBoot 自动装配时不会把所有的配置都加载进来 ，它会进行过滤，只添加项目需要的配置类，根据下面的注解：</p>
<ol>
<li>@ConditionalOnProperty</li>
<li>@ConditionalOnClass</li>
<li>@ConditionalOnBean</li>
<li>@ConditionalOnWebApplication</li>
</ol>
<p>通过自动配置类上面的注解进行过滤，筛选出项目依赖的配置类。</p>
<h5 id="DispatcherServletAutoConfiguration"><a href="#DispatcherServletAutoConfiguration" class="headerlink" title="DispatcherServletAutoConfiguration"></a>DispatcherServletAutoConfiguration</h5><p>@ConditionalOnWebApplication(type = Type.SERVLET) 以 SERVLET 类型启动并且 @ConditionalOnClass(DispatcherServlet.class) 存在该类时会自动加载 DispatcherServlet 相关配置。</p>
<h4 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh()"></a>onRefresh()</h4><p>如果依赖了 <code>spring-boot-starter-web</code> ，会在此时去创建 tomcat 相关的操作。</p>
<h3 id="refresh"><a href="#refresh" class="headerlink" title="refresh"></a>refresh</h3><p>refresh() 方法是容器启动的核心方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        <span class="comment">//1. 设置容器启动状态。创建早期事件监听，发布于多播器创建之前</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        <span class="comment">//2. 创建 beanFactory，加载 beanDefinitions(bean 定义)</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        <span class="comment">//3. 准备工厂的类加载器等信息。设置 aware 类型的后置处理器，注册默认的环境 bean 到工厂中的一级缓存。</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            <span class="comment">//4. 处理 BeanFactoryPostProcessor 后置处理器流程</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            <span class="comment">//5. 调用执行后置处理器 BeanDefinitionRegistryPostProcessors, BeanFactoryPostProcessors </span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            <span class="comment">//6. 注册 BeanPostProcessors 后置处理器</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//7. Initialize message source for this context.初始化国际化的一直资源</span></span><br><span class="line">            initMessageSource();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//8. Initialize event multicaster for this context.初始化事件多播器</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//9. Initialize other special beans in specific context subclasses.留给子类的扩展点</span></span><br><span class="line">            onRefresh();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//10. Check for listener beans and register them.注册监听到多播器中</span></span><br><span class="line">            registerListeners();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            <span class="comment">//11. 初始化所有的非懒加载单例 bean，重要</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//12. Last step: publish corresponding event.最后发布一些事件等</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> + <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line">            <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<center>🌵</center>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码</title>
    <url>/2021/02/10/Spring%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><img src="/2021/02/10/Spring%E6%BA%90%E7%A0%81/Spring-source.png" alt="Photo by destex on wallhaven.cc"></p>
<p>Spring 源码流程分析，主要包含 Spring 核心功能 IoC 和 AOP 部分代码，Spring 循环依赖等问题。</p>
<a id="more"></a>

<h2 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h2><p><img src="/2021/02/10/Spring%E6%BA%90%E7%A0%81/bean.jpg" alt="生命周期"></p>
<h2 id="🦸‍♀️IoC"><a href="#🦸‍♀️IoC" class="headerlink" title="🦸‍♀️IoC"></a>🦸‍♀️IoC</h2><p>控制反转：将创建对象的权利交给 Spring 容器来完成</p>
<h3 id="两种容器"><a href="#两种容器" class="headerlink" title="两种容器"></a>两种容器</h3><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>「简单容器」 </p>
<h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>「复杂容器」</p>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>下面是通过加载 XML 的形式加载 Bean 时 IoC 容器启动过程，包含初始化 Bean 和 循环依赖问题。</p>
<blockquote>
<p>ApplicationContext context = new ClassPathXmlApplicationContext(“applicationContext.xml”);</p>
</blockquote>
<p><img src="/2021/02/10/Spring%E6%BA%90%E7%A0%81/IoC.png" alt="IoC"></p>
<p>以注解扫描的方式启动和 XML 的类似。流程是一样的。</p>
<h3 id="后置处理器🤖️"><a href="#后置处理器🤖️" class="headerlink" title="后置处理器🤖️"></a>后置处理器🤖️</h3><p>Spring 提供了很多空接口，供开发者自己实现，比如下面是 PostProcessor 「后置处理器」相关接口</p>
<h4 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h4><p>beanFactory 的后置处理器：有个 postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) 方法，获取到的是 「Bean 工厂」，是在 invokeBeanFactoryPostProcessors() 方法中调用的，这个时候已经获取到了所有的 Bean 定义实例，但是还没有进行初始化，可以对所有 Bean 定义进行操作修改。</p>
<h4 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h4><p>Bean 后置处理器：在 initializeBean() 方法中执行，会拦截所有的 Bean 进入当前处理器。此时 Bean 已经实例化完成。它提供了两个方法：</p>
<ol>
<li>postProcessBeforeInitialization<br>invokeInitMethods() 方法之前的处理器</li>
<li>postProcessAfterInitialization<br>invokeInitMethods() 方法之后的处理器<h4 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h4>初始化 Bean 时在 Bean 的后置处理 before 方法之后执行（看上面的执行顺序），此时已经初始化完成。在调用 invokeInitMethods() 方法时执行，此时会有三种情况：</li>
<li>只实现了 InitializingBean 接口，会执行 afterPropertiesSet() 方法。</li>
<li>如果只设置了 init-method （@Bean(name = “user”, initMethod = “init”)），此时会执行init()方法</li>
<li>如果以上都有，按照1，2的顺序执行<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="启动类代码"><a href="#启动类代码" class="headerlink" title="启动类代码"></a>启动类代码</h3></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * 基于 xml 获取 bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        Student student001 = (Student) context.getBean(<span class="string">&quot;student001&quot;</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;student001 ==&gt;%s&quot;</span>, student001.toString()));</span><br><span class="line">        Student student002 = (Student) context.getBean(<span class="string">&quot;student002&quot;</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;student002 ==&gt;%s&quot;</span>, student002.toString()));</span><br><span class="line">        School school = (School) context.getBean(<span class="string">&quot;school&quot;</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;school: ==&gt;%s&quot;</span>,school.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.oliverschen.springbean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ck&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student002&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.oliverschen.springbean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;24&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.oliverschen.springbean.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schoolName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深大&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;student001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="🦸‍♂️AOP"><a href="#🦸‍♂️AOP" class="headerlink" title="🦸‍♂️AOP"></a>🦸‍♂️AOP</h2><p>AOP 是在原有代码的基础上，对代码进行「横向」增强。OOP 中继承都是「竖向」对代码进行增强，AOP 弥补了这个空白。</p>
<p><img src="/2021/02/10/Spring%E6%BA%90%E7%A0%81/aop-oop.jpg" alt="aop-oop"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h4><p>Eclipse 基金会提供的一个完整的解决方案。功能比 Spring AOP 要强大。它属于静态织入，有多种织入方式。</p>
<ol>
<li>Compile-time weaving<br>编译期织入</li>
<li>Post-compile weaving<br>编译后织入</li>
<li>Load-time weaving<br>指的是在加载类的时候进行织入「自定义类加载器/启动是指定AspectJ 提供的<br>agent：-javaagent:xxx/xxx/aspectjweaver.jar」<br>它在代码运行前已经将代码进行织入，所以执行起来就像是一个新增了方法的类一样，没有其他开销。<h4 id="CGlib"><a href="#CGlib" class="headerlink" title="CGlib"></a>CGlib</h4>Spring 中代理类没有接口，则用 CGlib 实现生成代理类。<br>CGlib是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，并覆盖其中方法的增强，但是因为采用的是继承，所以该类或方法最好不要生成final，对于final类或方法，是无法继承的。采用 ASM 字节码技术。<br>在 JDK8 之前，大量调用时性能优于 JDK 动态代理。JDK8 之后，性能持平或稍逊于 JDK 动态代理。<br>JDK Proxy<br>JDK 内置的动态代理类。在 Spring 中如果目标类有接口就直接用 JDK 动态代理方式生成代理类。<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3>类关系<br>下图是自动代理主要的类 AnnotationAwareAspectJAutoProxyCreator 继承关系，它本质其实是一个拥有BeanPostProcessor 接口特性的类。<br><img src="/2021/02/10/Spring%E6%BA%90%E7%A0%81/class-image.png"></li>
</ol>
<p>调用流程</p>
<ol>
<li>AOP 生成代理对象是依赖了 IoC 容器，在容器初始化完 Bean 之后，在 BeanPostProcessor 后置处理器的 after 方法中执行生成过程。</li>
<li>调用时先拿到目标方法的拦截器链，然后执行对应的切面方法。<br><img src="/2021/02/10/Spring%E6%BA%90%E7%A0%81/AOP.png" alt="AOP"></li>
</ol>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><h5 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopLog</span></span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.github.oliverschen.springbean..*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">point</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Before(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterThrowing 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(&quot;point()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around 方法进入&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;around 方法完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">启动类</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * 基于 xml 获取 bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        OrderService orderService = (OrderService) context.getBean(<span class="string">&quot;orderService&quot;</span>);</span><br><span class="line">        orderService.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.oliverschen.springbean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ck&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student002&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.oliverschen.springbean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;24&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.oliverschen.springbean.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schoolName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深大&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;student001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.github.oliverschen.springbean&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<center>再见，2020，你好，2021</center>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装MySQL</title>
    <url>/2019/04/09/docker%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<p><img src="/2019/04/09/docker%E5%AE%89%E8%A3%85MySQL/mysql.png"></p>
<p>自从接触到 docker 之后，就想把所有组件都安装在上面，方便后面使用。今天开始折腾安装 MySQL，虽然目前公司项目使用 MySQL 非常少，但是我很喜欢 MySQL，哈哈。</p>
<a id="more"></a>

<h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉去最新版的 mysql</span></span><br><span class="line">sudo docker pull mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用以上命令拉取最新版 MySQL</p>
<h5 id="启动-MySQL"><a href="#启动-MySQL" class="headerlink" title="启动 MySQL"></a>启动 MySQL</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql-ck -v /usr/<span class="built_in">local</span>/mysql/conf:/etc/mysql/conf.d -v /usr/<span class="built_in">local</span>/mysql/logs:/logs -v /usr/<span class="built_in">local</span>/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 将 3306 端口映射到本机 3306 端口</span></span><br><span class="line"><span class="comment"># --name 后面跟 MySQL 别名</span></span><br><span class="line"><span class="comment"># -v MySQL 数据保存路径：/usr/local/mysql/conf:/etc/mysql/conf.d   将本机 /usr/local/mysql/conf 映射到 docker 的 /etc/mysql/conf.d 目录</span></span><br><span class="line"><span class="comment"># -e 设置初始密码</span></span><br><span class="line"><span class="comment"># -d 后台运行</span></span><br></pre></td></tr></table></figure>
<p>启动 MySQL 成功之后，容器会返回一个 id 类似 <code>6d2b3575b78f67481300d01cd65ca47a2a1868f448f2a53bb68d7b056f7ef23d</code></p>
<h5 id="进入-MySQL"><a href="#进入-MySQL" class="headerlink" title="进入 MySQL"></a>进入 MySQL</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it mysql bash</span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">root@6d2b3575b78f:/<span class="comment"># mysql -uroot -proot</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.15 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h5><p>建议到<a class="link" href="https://www.navicat.com.cn/products/">官网<i class="fas fa-external-link-alt"></i></a>下载 navicat 客户端，当然条件允许的建议购买正版产品，实在不行就先下载下来，有半个月的试用期，体验一般，个人觉得他们家的产品用起来很不错。下载后解压，直接启动即可使用。</p>
<p>此时就进入到我们熟悉的客户端了，接下来的操作就和在物理机上的操作是一样的了。虽然公司项目可能接触 MySQL 会很少，但是 MySQL 依然是很多公司数据存储不可替代的部分，所以嘛，好好学习，天天向上。</p>
<p>今天没有加班，下班早早就溜了，最近加班比较多，希望程序狗们都能天天没 bug ,天天早下班。</p>
<hr>
<center>道理都懂，但做不到</center>


]]></content>
      <categories>
        <category>Docker</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket</title>
    <url>/2021/03/08/WebSocket/</url>
    <content><![CDATA[<p><img src="/2021/03/08/WebSocket/websocket.png" alt="Photo by JustJon on wallhaven.cc"></p>
<p>WebSocket 协议建立的是一个长连接，Http 协议是浏览器通过主动请求服务端建立连接获取数据，而 WebScoket 协议服务端可以实现主动向浏览器推送数据服务，浏览器也可以主动向服务端发生请求，它是一个全双工通信协议。WebSocket 协议在第一次连接时需要通过 Http 协议进行建立，建立成功之后通过 TCP 进行数据交换。在一些需要即使获取服务端信息的场景下，如果使用 Http 只能采用轮训的方式来获取，在及时性和资源方面都不友好，而通过 WebSocket 可以立即收到服务端的推送消息。</p>
<a id="more"></a>
<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>Socket：一组系统为了避免直接操作底层 TCP/UDP 协议而提供的 API 接口。在通过网络层 IP 协议找到对应的主机和应用程序。<br>WebSocket：和 Http 一样，是应用层协议。首次建立连接时需要通过 Http 进行连接，连接建立成功后通过 TCP 进行通讯。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="gradle-坐标"><a href="#gradle-坐标" class="headerlink" title="gradle 坐标"></a>gradle 坐标</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter-websocket&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><p>开启 WebSocket 自动装配，和测试群发消息的 API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span> <span class="comment">// 开启 WebSocket</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoGradleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WsService wsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/publish/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span> </span>&#123;</span><br><span class="line">        wsService.publishMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebScoketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="WebSocket对外服务"><a href="#WebSocket对外服务" class="headerlink" title="WebSocket对外服务"></a>WebSocket对外服务</h4><p>这里需要注意使用 Spring 自动注入的时候只能在首次获取到注入值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/ws/conn&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsServer</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WsService wsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立webSocket连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        wsService.create(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收到前端消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Session session, String message)</span> </span>&#123;</span><br><span class="line">        wsService.receiveMessage(session, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发生异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;发生异常，sessionId：&#123;&#125;&quot;</span>, session.getUserPrincipal().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        wsService.close(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际有用的是静态变量，自动注入的只是在 bean 初始化完成时赋值给静态变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WsService wsServiceAuto;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebSocket 是多例的，启动之后客户端访问时创建的新的实例中 wsService 为空，</span></span><br><span class="line"><span class="comment">     * 这里初始化完成之后设置一个全局静态变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        wsService = <span class="keyword">this</span>.wsServiceAuto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="service类"><a href="#service类" class="headerlink" title="service类"></a>service类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存所有的WebSocket连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;Integer, Session&gt; WEB_SOCKET_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        Integer sessionId = getSessionId(session);</span><br><span class="line">        WEB_SOCKET_MAP.put(sessionId, session);</span><br><span class="line">        log.info(<span class="string">&quot;新客户端&#123;&#125;连接成功&quot;</span>, sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Session session, String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端&#123;&#125;收到消息&#123;&#125;&quot;</span>, getSessionId(session), message);</span><br><span class="line">        sendMessage(session, message.replace(<span class="string">&quot;吗？&quot;</span>, <span class="string">&quot;！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Session session, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.getBasicRemote().sendText(msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;error msg:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息成功：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        Integer sessionId = getSessionId(session);</span><br><span class="line">        WEB_SOCKET_MAP.remove(sessionId);</span><br><span class="line">        log.info(<span class="string">&quot;客户端&#123;&#125;关闭&quot;</span>, sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        WEB_SOCKET_MAP.forEach((key, value) -&gt; sendMessage(value, msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSessionId</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li>使用<a class="link" href="http://www.websocket-test.com/">在线测试地址<i class="fas fa-external-link-alt"></i></a>测试 WebSocket 连接是否能正常建立。</li>
<li>多开窗口，访问 <code>http://localhost:7777/publish</code> 测试群发消息。</li>
</ol>
<hr>
<center>别拖延，都要还回来</center>]]></content>
      <categories>
        <category>WebSocket</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装mongodb</title>
    <url>/2019/03/19/docker%E5%AE%89%E8%A3%85mongodb/</url>
    <content><![CDATA[<p><img src="/2019/03/19/docker%E5%AE%89%E8%A3%85mongodb/mongo.png"></p>
<p>mongodb 是一款很优秀的开源 nosql 数据库，它内部以 json 作为存储格式，在数据存储方面有很大的收缩性。因为前几天折腾 docker，这里记录一下在 docker 部署 mongdb 的步骤和简单的使用方法，其实之前接触 nosql 最多的就是 redis，目前公司大量使用 mongodb,在这里记录一些关键点，方便回顾。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>ev</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>docker</td>
<td>18.09.3-ce</td>
</tr>
<tr>
<td>os</td>
<td>Mangaro 18.0.1</td>
</tr>
<tr>
<td>mongodb</td>
<td>v4.0.6</td>
</tr>
</tbody></table>
<p>关于 docker 的安装，如果是 Manjaro 的话，请在<a class="link" href="https://fengzhu.top/2019/03/17/manjaro%E5%AE%89%E8%A3%85/#more">这里<i class="fas fa-external-link-alt"></i></a>参考，如果是其他系统的话， Google 应该有很多好的博客可以参考。</p>
<h4 id="安装-mongodb"><a href="#安装-mongodb" class="headerlink" title="安装 mongodb"></a>安装 mongodb</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull mongo</span><br></pre></td></tr></table></figure>
<p>等待下载完成之后，查看 docker 容器中镜像情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull mongo</span><br></pre></td></tr></table></figure>
<p>等待 mongo 下载完成之后，进行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 mongo    --auth 有此参数的话，在连接时需要用户名密码</span></span><br><span class="line">sudo docker run -d -p 27017:27017 -v /home/chenkui/database/mongodb/config:/data/configdb -v /home/chenkui/database/mongodb/data:/data/db --name mongo docker.io/mongo --auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 mongo (容器创建成功之后启动 mongo 命令)</span></span><br><span class="line">sudo docker start mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 mongo</span></span><br><span class="line">sudo docker stop mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 mongo</span></span><br><span class="line">sudo docker rm mongo</span><br><span class="line"><span class="comment"># 进入 mongo bash,创建 admin 账户</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it mongo bash</span><br><span class="line"><span class="comment"># 在 shell 中创建用户和密码</span></span><br><span class="line">db.createUser(&#123;user:<span class="string">&quot;admin&quot;</span>,<span class="built_in">pwd</span>:<span class="string">&quot;admin&quot;</span>,roles:[&#123;role:<span class="string">&quot;userAdminAnyDatabase&quot;</span>,db:<span class="string">&quot;admin&quot;</span>&#125;]&#125;);</span><br><span class="line"><span class="comment"># 退出刚刚的bash </span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 进入 mongo</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it mongo mongo admin</span><br><span class="line"><span class="comment"># 用 admin 登录</span></span><br><span class="line">db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"><span class="comment"># 进入数据库，没有则创建</span></span><br><span class="line">use <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 创建管理用户</span></span><br><span class="line">db.createUser(&#123; user: <span class="string">&#x27;test&#x27;</span>, <span class="built_in">pwd</span>:<span class="string">&#x27;test&#x27;</span>, roles: [ &#123;role:<span class="string">&quot;readWrite&quot;</span>,db:<span class="string">&quot;test&quot;</span>&#125;]&#125;);</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">db.auth(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启动成功之后查看 mongo 运行情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>
<p>到这里，mongodb 在 docker 中的安装就完成了，以上安装步骤在 Google 上有很多可以参考，我也是参考大神们的笔记之后做的总结。安装好之后建议安装 mongodb 客户端<a class="link" href="https://robomongo.org/">robo3T<i class="fas fa-external-link-alt"></i></a>可以更直观的看到数据的格式和存储的方式。我有个习惯就是在接触到一些新技术时先不会去纠结它的一些具体细节，我先会做个简单的例子自己跑一边，看一遍到底是怎么回事，和自己已经会的东西相比，有什么异同，这样的话会比较容易上手，当然这只是个建议，每个人都有自己的方式去学习新东西。下面我会按照我的思路来看一遍 mongo 的操作过程。</p>
<h4 id="springboot-集成-mongodb"><a href="#springboot-集成-mongodb" class="headerlink" title="springboot 集成 mongodb"></a>springboot 集成 mongodb</h4><p>这里使用 spring boot 是因为用它的话能最快的搭建一个框架，来使用 mongo，至于 spring boot 工程如何搭建 Google 上有很多教程可以参考。主要引入 mongodb 坐标。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><p>mongodb 不像关系型数据库，对于字段的完整性要求很高，通俗点讲的话它的存储结构完全自由，只要是格式正确的数据都能存储在里面，但是在实际开发中，每个数据库中表的数据会是一类数据，比如说 User 表中就是存储用户信息，不可能把订单信息也放在里面，这样就会造成数据的混乱，在实际开发中，每个表也都会有自己对应的 Javabean，它的字段也取决于这个 Javabean。</p>
<h5 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h5><p>实体类 （省略一些导包路径）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(collection = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> Integer age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> String sex; <span class="comment">// 性别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">&quot;jihe&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        template.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://localhost:27017/mongo</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">mongo</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>mongo 的使用很简单，在操作上和关系型数据库很相似，简单的操作还是很容易上手的。</p>
<h5 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Query query = <span class="keyword">new</span> Query(<span class="keyword">new</span> Criteria(<span class="string">&quot;userName&quot;</span>).is(<span class="string">&quot;jihe&quot;</span>));</span><br><span class="line">    DeleteResult remove = template.remove(query, User.class);</span><br><span class="line">    System.out.println(remove.getDeletedCount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置和上面的一样，通过用户名删除用户信息</p>
<h5 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Query query = <span class="keyword">new</span> Query(<span class="keyword">new</span> Criteria(<span class="string">&quot;userName&quot;</span>).is(<span class="string">&quot;jihe&quot;</span>));</span><br><span class="line">    Update update = <span class="keyword">new</span> Update();</span><br><span class="line">    update.set(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    UpdateResult updateResult = template.updateFirst(query, update, User.class);</span><br><span class="line">    System.out.println(updateResult.getModifiedCount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改用户名为 jihe 的用户年龄为 20 岁</p>
<h5 id="查找记录"><a href="#查找记录" class="headerlink" title="查找记录"></a>查找记录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Query query = <span class="keyword">new</span> Query(<span class="keyword">new</span> Criteria(<span class="string">&quot;userName&quot;</span>).is(<span class="string">&quot;jihe&quot;</span>));</span><br><span class="line">    User one = template.findOne(query, User.class);</span><br><span class="line">    System.out.println(one);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是关于 mongo 的最基础简单的增删改查，在入门使用方面来讲 mongo 还是很容易接受的，尤其是接触过关系型数据库之后来使用它的话，这里简单记录一下，后面还会记录更多关于 mongo 的使用和一些在具体项目中的应用。</p>
<hr>
<center>能成为一个人的骄傲</center>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Mongo</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-class文件结构</title>
    <url>/2019/05/05/jvm-class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="/2019/05/05/jvm-class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/class.png"></p>
<p>最近 manjaro 又更新挂了，算了，不折腾了，考虑真香 windows 了。（如果不忙的话还是很喜欢折腾的，但是最近手头也比较忙就先不换回去了）今年是准备偏向底层的学习，现在新技术层出不穷，让人眼花缭乱。有时候会很浮躁，担心学到的东西过不了多久就会被抛弃。也是瑟瑟发抖。不过看了很多大佬写的东西，都会有一个结论，就是偏底层技术永远是新技术的支撑，那些枯燥乏味的知识才是生命力最强的技术。</p>
<a id="more"></a>

<p>我们都知道 Java 程序要运行的话，需要编译然后才能运行。Java 文件经过编译器编译之后会生产 class 文件，一般打开都是乱码的，建议使用 notepad++ 插件 HEX-editor 来进行查看字节码文件，打开文件就会看到一堆十六进制的代码，不过这样一堆代码也是有规可循的。</p>
<h4 id="文件基本组成"><a href="#文件基本组成" class="headerlink" title="文件基本组成"></a>文件基本组成</h4><h5 id="Java-魔数"><a href="#Java-魔数" class="headerlink" title="Java 魔数"></a>Java 魔数</h5><p>这个相信学习 Java 的都会知道，JVM 如何知道这个文件是 class 文件呢，就是根据文件最开头的 4 个字节来判断的，这 4 个字节很有意思，分别是 <code>ca fe ba be</code> 咖啡贝比，都是十六进制数组成的，不知道当年 Java 之父想到这个时是多开心的…。当然，验证完是一个字节码文件之后还会验证很多东西，比如版本，全限定名，常量等等。否则会抛异常。</p>
<h5 id="主次版本号"><a href="#主次版本号" class="headerlink" title="主次版本号"></a>主次版本号</h5><p>跟在魔数后面的就是 Java 的 主次版本号，Java 语言都是向下兼容的，如果低版本跑在高版本的 JVM 就会抛错处出来。</p>
<h5 id="常量池计数器"><a href="#常量池计数器" class="headerlink" title="常量池计数器"></a>常量池计数器</h5><p>在版本号后面会有 2 个字节的计数器，顾名思义，是用来记录当前 class 常量池大小计数器。</p>
<h5 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h5><p>常量池可以理解为整个文件的 <code>元数据</code>，就像是一个文件，文件名叫什么，什么时候创建的，文件多大，文件类型是什么。常量池包含了类的属性，方法，接口等一些类的描述信息。</p>
<hr>
<p>以上就是对 class 文件基础信息的简单总结，这个会持续更新，我也在学习中，希望大家能在使用 Java 时，可以知其然，并知其所以然。（如果有问题，大佬们请多多指正）</p>
<hr>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><h5 id="java-文件"><a href="#java-文件" class="headerlink" title=".java 文件"></a>.java 文件</h5><p>我写了一个很简单的类，来大概分析下 class 文件的对应关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassStructure</span> <span class="keyword">extends</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            a = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先使用 <code>javac ClassStructure.java</code> 编译文件，正常情况下会生成一个 ClassStructure.class 文件，然后使用  <code>javap -v ClassStructure.class</code> 命令查看文件信息，会生成下面的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">G:\jvm\src\main\java\com\jihe\jvm\<span class="built_in">test</span>&gt;javap -v ClassStructure.class</span><br><span class="line">Classfile /G:/jvm/src/main/java/com/jihe/jvm/<span class="built_in">test</span>/ClassStructure.class</span><br><span class="line">  Last modified 2019-5-21; size 617 bytes</span><br><span class="line">  MD5 checksum e664b24bf12decb3e4ff2dbcf2857a55</span><br><span class="line">  Compiled from <span class="string">&quot;ClassStructure.java&quot;</span></span><br><span class="line">public class com.jihe.jvm.test.ClassStructure extends java.lang.Thread implements java.io.Serializable</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Methodref          #6.#24         // java/lang/Thread.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="comment">#2 = Fieldref           #5.#25         // com/jihe/jvm/test/ClassStructure.i:I</span></span><br><span class="line">   <span class="comment">#3 = Fieldref           #5.#26         // com/jihe/jvm/test/ClassStructure.a:I</span></span><br><span class="line">   <span class="comment">#4 = Class              #27            // java/lang/Exception</span></span><br><span class="line">   <span class="comment">#5 = Class              #28            // com/jihe/jvm/test/ClassStructure</span></span><br><span class="line">   <span class="comment">#6 = Class              #29            // java/lang/Thread</span></span><br><span class="line">   <span class="comment">#7 = Class              #30            // java/io/Serializable</span></span><br><span class="line">   <span class="comment">#8 = Utf8               i</span></span><br><span class="line">   <span class="comment">#9 = Utf8               I</span></span><br><span class="line">  <span class="comment">#10 = Utf8               a</span></span><br><span class="line">  <span class="comment">#11 = Utf8               &lt;init&gt;</span></span><br><span class="line">  <span class="comment">#12 = Utf8               ()V</span></span><br><span class="line">  <span class="comment">#13 = Utf8               Code</span></span><br><span class="line">  <span class="comment">#14 = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="comment">#15 = Utf8               inc</span></span><br><span class="line">  <span class="comment">#16 = Utf8               add</span></span><br><span class="line">  <span class="comment">#17 = Utf8               ()I</span></span><br><span class="line">  <span class="comment">#18 = Utf8               test</span></span><br><span class="line">  <span class="comment">#19 = Utf8               StackMapTable</span></span><br><span class="line">  <span class="comment">#20 = Class              #27            // java/lang/Exception</span></span><br><span class="line">  <span class="comment">#21 = Utf8               &lt;clinit&gt;</span></span><br><span class="line">  <span class="comment">#22 = Utf8               SourceFile</span></span><br><span class="line">  <span class="comment">#23 = Utf8               ClassStructure.java</span></span><br><span class="line">  <span class="comment">#24 = NameAndType        #11:#12        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#25 = NameAndType        #8:#9          // i:I</span></span><br><span class="line">  <span class="comment">#26 = NameAndType        #10:#9         // a:I</span></span><br><span class="line">  <span class="comment">#27 = Utf8               java/lang/Exception</span></span><br><span class="line">  <span class="comment">#28 = Utf8               com/jihe/jvm/test/ClassStructure</span></span><br><span class="line">  <span class="comment">#29 = Utf8               java/lang/Thread</span></span><br><span class="line">  <span class="comment">#30 = Utf8               java/io/Serializable</span></span><br><span class="line">&#123;</span><br><span class="line">  public com.jihe.jvm.test.ClassStructure();                   // 构造器</span><br><span class="line">    descriptor: ()                                             // 方法参数等描述</span><br><span class="line">    flags: ACC_PUBLIC                                          // 访问标志</span><br><span class="line">    Code:                                                         </span><br><span class="line">      stack=2, locals=1, args_size=1                         </span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial <span class="comment">#1                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         4: aload_0</span><br><span class="line">         5: iconst_0</span><br><span class="line">         6: putfield      <span class="comment">#2                  // Field i:I</span></span><br><span class="line">         9: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 10: 0</span><br><span class="line">        line 12: 4</span><br><span class="line"></span><br><span class="line">  public void inc();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=3, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: dup</span><br><span class="line">         2: getfield      <span class="comment">#2                  // Field i:I</span></span><br><span class="line">         5: iconst_1</span><br><span class="line">         6: iadd</span><br><span class="line">         7: putfield      <span class="comment">#2                  // Field i:I</span></span><br><span class="line">        10: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 16: 0</span><br><span class="line">        line 17: 10</span><br><span class="line"></span><br><span class="line">  public int add();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: getfield      <span class="comment">#2                  // Field i:I</span></span><br><span class="line">         4: getstatic     <span class="comment">#3                  // Field a:I</span></span><br><span class="line">         7: iadd</span><br><span class="line">         8: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 20: 0</span><br><span class="line"></span><br><span class="line">  public void <span class="built_in">test</span>();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: iconst_1</span><br><span class="line">         2: putfield      <span class="comment">#2                  // Field i:I</span></span><br><span class="line">         5: goto          13</span><br><span class="line">         8: astore_1</span><br><span class="line">         9: iconst_2</span><br><span class="line">        10: putstatic     <span class="comment">#3                  // Field a:I</span></span><br><span class="line">        13: <span class="built_in">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target <span class="built_in">type</span></span><br><span class="line">             0     5     8   Class java/lang/Exception</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 25: 0</span><br><span class="line">        line 28: 5</span><br><span class="line">        line 26: 8</span><br><span class="line">        line 27: 9</span><br><span class="line">        line 29: 13</span><br><span class="line">      StackMapTable: number_of_entries = 2</span><br><span class="line">        frame_type = 72 /* same_locals_1_stack_item */</span><br><span class="line">          stack = [ class java/lang/Exception ]</span><br><span class="line">        frame_type = 4 /* same */</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;                                 // 静态变量初始化方法</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=0, args_size=0</span><br><span class="line">         0: iconst_1</span><br><span class="line">         1: putstatic     <span class="comment">#3                  // Field a:I</span></span><br><span class="line">         4: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 13: 0</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;ClassStructure.java&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其实在这里看的话已经很明了了，在一些代码后面还有相应的注释，我们都知道一个类对象创建是在调用其构造方法的时候，那先从构造器开始看起。<br>在我注释构造器的地方就是这个类的构造方法，入口从 <code>invokespecial #1</code> 开始，它后面指向了 <code>#1</code>， 在常量池 <code>Constant pool</code> 中找到 <code>#1</code>：</p>
<table>
<thead>
<tr>
<th>编号说明</th>
<th>编号</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>#1 = Methodref</td>
<td>#6.#24</td>
<td>// java/lang/Thread.”<init>“:()V</init></td>
</tr>
<tr>
<td>Methodref 方法的符号引用</td>
<td>指向的常量池编号</td>
<td>注释，#6 号和 #24 注释</td>
</tr>
</tbody></table>
<p>在 class 中是按照编号的形式查找的，一级指向一级，常量池中保存了整个类的一些结构定义，相当于一个 <code>元数据</code> 部分。今年准备好好回归到底层部分，对 Java 底层部分进行比较深入的了解，字节码文件是熟悉的陌生人之一，所以 class 也是我学习的开始。</p>
<h5 id="异常表"><a href="#异常表" class="headerlink" title="异常表"></a>异常表</h5><p>上面的类中 test 方法有一个异常处理。下面是代码部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">23</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">24</span>       <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">25</span>           i = <span class="number">1</span>;</span><br><span class="line"><span class="number">26</span>       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="number">27</span>           a = <span class="number">2</span>;</span><br><span class="line"><span class="number">28</span>       &#125;</span><br><span class="line"><span class="number">29</span>   &#125;</span><br></pre></td></tr></table></figure>
<p>使用 javap -v 命令可以看到如下异常表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">0</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/Exception</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">25</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">28</span>: <span class="number">5</span></span><br><span class="line">        line <span class="number">26</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">27</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">29</span>: <span class="number">13</span></span><br></pre></td></tr></table></figure>
<p>这个异常表对应到具体的代码大概是这样的：</p>
<ol>
<li>from 0: 对应下面的 LineNumberTable(LNT) ，<code>line 25: 0 </code> 0 对应的是源代码第 25 行，回到上面 Java 源代码可以看到我原本代码行数 <code>25           i = 1;</code> 行，就是异常开始。</li>
<li>to 5: 这里和上面也是一样的，对应到 LNT 是 28 行，异常从 28 行出结束。</li>
<li>target 8: 对应到具体源代码行是第 26 行，也就是具体的目标类型， Exception<br>上面就是异常表大概的对应关系。如果没有异常表将会导致 debug 断点时会出现问题，打印错误日志不会有行号。</li>
</ol>
<p>看到一句很有意思的话：you are my exception.</p>
<hr>
<center>不忘初心，方得始终</center>
                ]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-fragment-knowledge</title>
    <url>/2019/12/15/java-fragment-knowledge/</url>
    <content><![CDATA[<p><img src="/2019/12/15/java-fragment-knowledge/java-konwlege.png" alt="Photo by vinc on wallhaven.cc"></p>
<p>记录 Java 中一些有趣但是容易忽略的碎片知识。</p>
<a id="more"></a>

<h3 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h3><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>System.currentTimeMillis() 和 System.nanoTime()。前者精度不及后者精度高，一般高精度时间获取使用后者。这里有个具体<a class="link" href="https://blog.csdn.net/elky1982/article/details/4677365">测试<i class="fas fa-external-link-alt"></i></a></p>
<center></center>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro安装</title>
    <url>/2019/03/17/manjaro%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="/2019/03/17/manjaro%E5%AE%89%E8%A3%85/manjaro.png"></p>
<h3 id="manjaro-配置和软件安装"><a href="#manjaro-配置和软件安装" class="headerlink" title="manjaro 配置和软件安装"></a>manjaro 配置和软件安装</h3><p>一般做开发的话使用 Linux 是躲不开的，在学校的时候挺喜欢折腾，但也是局限于在虚拟机安装各种版本的 Linux 系统，但是有些 win 上必须应用软件在 Linux 找不到代替版，就一直只是当做服务器的角色，没有用在实际使用中，直到去年碰到 manjaro，就把常驻多年的 win 换成了 manjaro，使用起来很方便，应用软件基本都有了，安装过程也很简单，类 win 操作，这里也只是记录下配置和一些必要软件的安装命令，以防我哪天作死搞挂重装….o‿≖✧</p>
<a id="more"></a>

<blockquote>
<p>manjaro 安装比较简单，建议使用 <a class="link" href="https://rufus.ie/">rufus<i class="fas fa-external-link-alt"></i></a>，还有 <a class="link" href="https://manjaro.org/">manjaro<i class="fas fa-external-link-alt"></i></a> 官网地址。</p>
</blockquote>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>更新中国源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br><span class="line">## 弹出后选择清华或者中科大源</span><br></pre></td></tr></table></figure>
<p><strong>配置 AUR 源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line"># SigLevel &#x3D; Optional TrustedOnly</span><br><span class="line">SigLevel &#x3D; Never</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br><span class="line"></span><br><span class="line">[arch4edu]</span><br><span class="line">SigLevel &#x3D; Never</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;arch4edu&#x2F;$arch</span><br></pre></td></tr></table></figure>
<p><strong>更新并选择最快的源列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -g </span><br></pre></td></tr></table></figure>
<p><strong>更新数据源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>
<h4 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h4><p><strong>安装 yaourt</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure>
<p><strong>安装 拼音</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##### 安装搜狗输入法</span><br><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br><span class="line">sudo pacman -S fcitx-sogoupinyin</span><br><span class="line"></span><br><span class="line">添加输入法配置文件 sudo vim ~&#x2F;.xprofile</span><br><span class="line"></span><br><span class="line">export GTK_IM_MODULE&#x3D;fcitx</span><br><span class="line">export QT_IM_MODULE&#x3D;fcitx</span><br><span class="line">export XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果安装失败的话执行下面的方式安装</span><br><span class="line">sudo yaourt sogou</span><br></pre></td></tr></table></figure>
<p><strong>安装 chrome</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure>
<p><strong>安装深度截图</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S deepin-screenshot</span><br></pre></td></tr></table></figure>
<p><strong>安装 TIM</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S deepin-wine-tim</span><br></pre></td></tr></table></figure>
<p><strong>安装网易云音乐</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>
<p><strong>安装 pdf 阅读器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yaourt foxit</span><br></pre></td></tr></table></figure>
<p><strong>安装下载工具</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yaourt -S uget </span><br></pre></td></tr></table></figure>
<p><strong>安装 zsh</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#最新版本已经默认安装了。</span><br><span class="line">sudo pacman -S zsh</span><br><span class="line"># 安装oh-my-zsh</span><br><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class="line"># 更换默认的shell</span><br><span class="line">chsh -s &#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure>
<p><strong>安装 wechat</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S electronic-wechat	</span><br></pre></td></tr></table></figure>
<p><strong>安装 git</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S git</span><br></pre></td></tr></table></figure>
<p><strong>安装 wps</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wps-office</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>安装护眼软件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xflux-gui-git</span><br></pre></td></tr></table></figure>
<p><strong>安装 vscode</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>
<p><strong>安装 JDK</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S jdk8</span><br><span class="line">### 配置环境变量</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;default</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOEM&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib </span><br></pre></td></tr></table></figure>
<p><strong>卸载 JDK</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -R jdk8</span><br></pre></td></tr></table></figure>
<p><strong>安装　idea</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在官网下载安装包解压</span><br><span class="line">tar　-zxcf　ideaxxx.tar.gz</span><br><span class="line">进到　.&#x2F;bin　目录执行文件</span><br><span class="line">.&#x2F;idea.sh</span><br><span class="line">完成安装</span><br></pre></td></tr></table></figure>
<p><strong>安装 svn 客户端 kdesvn</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S kdesvn</span><br></pre></td></tr></table></figure>
<p><strong>安装 mongodb</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yay -S mongodb</span><br><span class="line"><span class="comment">## 配置</span></span><br><span class="line">$ sudo vim /etc/mongodb.conf <span class="comment"># 编辑 mongodb 数据库路径</span></span><br><span class="line"></span><br><span class="line">sudo chmod  u=rw /home/mj/mongodb  <span class="comment">#  设置读写权限</span></span><br><span class="line">sudo chown -R mongodb:  /home/mj/mongodb  <span class="comment"># 更改用户</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>安装 docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S docker</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker.service <span class="comment"># 启动服务 </span></span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service <span class="comment"># 设置 docker 自启动</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>安装 ss</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pacman -S shadowsocks-qt5</span><br></pre></td></tr></table></figure>
<p><strong>配置 switchyomega</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 下载</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;FelisCatus&#x2F;SwitchyOmega&#x2F;releases </span><br><span class="line">配置方式网上有很多博客</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>pacman 命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pacman -S  软件名   #安装</span><br><span class="line">pacman -Syu    #更新</span><br><span class="line">pacman -R 软件名    #移除</span><br></pre></td></tr></table></figure>
<h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><p><strong>设置　ll 命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">编辑　~/.bashrc</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> cp=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> mv=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -i&#x27;</span></span><br><span class="line">保存生效　</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p><strong>设置主目录为英文</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S xdg-user-dirs-gtk</span><br><span class="line">$ <span class="built_in">export</span> LANG=en_US</span><br><span class="line">$ xdg-user-dirs-gtk-update</span><br><span class="line">$ <span class="comment">#然后会有个窗口提示语言更改，更新名称即可</span></span><br><span class="line">$ <span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line">$ <span class="comment">#然后重启电脑如果提示语言更改，保留旧的名称即可</span></span><br></pre></td></tr></table></figure>
<p><strong>设置环境变量</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/...</span><br></pre></td></tr></table></figure>
<p><strong>安装 flash player</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装好之后重启浏览器就可以正常访问了</span></span><br><span class="line">yaourt -S flashplugin pepper-flash</span><br></pre></td></tr></table></figure>
<p><strong>远程连接服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 ssh 连接</span></span><br><span class="line">ssh username@hostaddress</span><br></pre></td></tr></table></figure>
<p>补充 ing…</p>
<hr>
<center>秋天来了，老家落叶的样子又错过了。最怕提及的是，深秋早晨的白霜更有奶奶的背影</center>]]></content>
      <categories>
        <category>OS</category>
        <category>Manjaro</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>Manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro编译Openjdk</title>
    <url>/2019/04/09/manjaro%E7%BC%96%E8%AF%91openjdk/</url>
    <content><![CDATA[<p><img src="/2019/04/09/manjaro%E7%BC%96%E8%AF%91openjdk/openjdk.png"></p>
<p>刚接触到 Java 时就被一些陌生的英文缩写吓到了，什么 jdk,jre,jvm 等等。但是随着后面对它的了解越多，对这些基础的概念越来越清晰，对这些概念也有了一些认识。 jdk 就是我们经常使用的开发工具包，它不仅包含 jre,还包含了编译器等其他基础包，而 jre 则是 Java 代码运行的最小环境。而 jvm 则是 Java 虚拟机， “一处编译，到处运行” 就是因为这位大佬的存在。从学习开始到现在一直都和它们间接接触，但是对它们的了解还是有很大的局限，今天拉了 openjdk 的源码准备好好研究一下。</p>
<a id="more"></a>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><table>
<thead>
<tr>
<th>ev</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>os</td>
<td>Mangaro 18.0.1</td>
</tr>
<tr>
<td>openjdk</td>
<td>jdk8u</td>
</tr>
<tr>
<td>boot jdk</td>
<td>1.8.0_202</td>
</tr>
</tbody></table>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>下载 mercurial 来克隆 jdk 代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S mercurial</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>克隆代码到指定目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先进入到要放目标目录</span></span><br><span class="line">sudo hg <span class="built_in">clone</span> http://hg.openjdk.java.net/jdk8u/jdk8u/</span><br></pre></td></tr></table></figure>
<p>当然也可以在官网下载代码，官网<a class="link" href="http://hg.openjdk.java.net/jdk8u/jdk8u/">地址<i class="fas fa-external-link-alt"></i></a>在这里，进去之后左侧有 gz 的包，直接下载。我选择的是第一种方式，直接在仓库克隆代码到本地。</p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><h5 id="README"><a href="#README" class="headerlink" title="README"></a>README</h5><p>先看下 README 文件，这个里面已经有详细的说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ./README</span><br><span class="line"></span><br><span class="line">README:</span><br><span class="line">  This file should be located at the top of the OpenJDK Mercurial root</span><br><span class="line">  repository. A full OpenJDK repository <span class="built_in">set</span> (forest) should also include</span><br><span class="line">  the following 6 nested repositories:</span><br><span class="line">    <span class="string">&quot;jdk&quot;</span>, <span class="string">&quot;hotspot&quot;</span>, <span class="string">&quot;langtools&quot;</span>, <span class="string">&quot;corba&quot;</span>, <span class="string">&quot;jaxws&quot;</span>  and <span class="string">&quot;jaxp&quot;</span>.</span><br><span class="line"></span><br><span class="line">  The root repository can be obtained with something like:</span><br><span class="line">    hg <span class="built_in">clone</span> http://hg.openjdk.java.net/jdk8/jdk8 openjdk8</span><br><span class="line">  </span><br><span class="line">  You can run the get_source.sh script located <span class="keyword">in</span> the root repository to get</span><br><span class="line">  the other needed repositories:</span><br><span class="line">    <span class="built_in">cd</span> openjdk8 &amp;&amp; sh ./get_source.sh</span><br><span class="line"></span><br><span class="line">  People unfamiliar with Mercurial should <span class="built_in">read</span> the first few chapters of</span><br><span class="line">  the Mercurial book: http://hgbook.red-bean.com/<span class="built_in">read</span>/</span><br><span class="line"></span><br><span class="line">  See http://openjdk.java.net/ <span class="keyword">for</span> more information about OpenJDK.</span><br><span class="line"></span><br><span class="line">Simple Build Instructions:</span><br><span class="line">  </span><br><span class="line">  0. Get the necessary system software/packages installed on your system, see</span><br><span class="line">     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html</span><br><span class="line"></span><br><span class="line">  1. If you don<span class="string">&#x27;t have a jdk7u7 or newer jdk, download and install it from</span></span><br><span class="line"><span class="string">     http://java.sun.com/javase/downloads/index.jsp</span></span><br><span class="line"><span class="string">     Add the /bin directory of this installation to your PATH environment</span></span><br><span class="line"><span class="string">     variable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  2. Configure the build:</span></span><br><span class="line"><span class="string">       bash ./configure</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  3. Build the OpenJDK:</span></span><br><span class="line"><span class="string">       make all</span></span><br><span class="line"><span class="string">     The resulting JDK image should be found in build/*/images/j2sdk-image</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">where make is GNU make 3.81 or newer, /usr/bin/make on Linux usually</span></span><br><span class="line"><span class="string">is 3.81 or newer. Note that on Solaris, GNU make is called &quot;gmake&quot;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Complete details are available in the file:</span></span><br><span class="line"><span class="string">     http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>那就按照 README 文件的步骤来执行编译</p>
<h5 id="Getting-the-Source"><a href="#Getting-the-Source" class="headerlink" title="Getting the Source"></a>Getting the Source</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> jdk8u</span><br><span class="line"><span class="comment"># 执行脚本,拉取所有代码</span></span><br><span class="line">bash ./get_source.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下载完成之后目录结构是这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rw-r--r--  1 root root   1522  4月 14 17:11 ASSEMBLY_EXCEPTION</span><br><span class="line">drwxr-xr-x  6 root root   4096  4月 14 17:11 common</span><br><span class="line">-rw-r--r--  1 root root   1588  4月 14 17:11 configure</span><br><span class="line">drwxr-xr-x  6 root root   4096  4月 14 17:56 corba</span><br><span class="line">-rw-r--r--  1 root root   3107  4月 14 17:11 get_source.sh</span><br><span class="line">drwxr-xr-x  8 root root   4096  4月 14 18:06 hotspot</span><br><span class="line">drwxr-xr-x  7 root root   4096  4月 14 17:15 jaxp</span><br><span class="line">drwxr-xr-x  7 root root   4096  4月 14 17:15 jaxws</span><br><span class="line">drwxr-xr-x  7 root root   4096  4月 14 18:46 jdk</span><br><span class="line">drwxr-xr-x  7 root root   4096  4月 14 18:04 langtools</span><br><span class="line">-rw-r--r--  1 root root  19274  4月 14 17:11 LICENSE</span><br><span class="line">drwxr-xr-x  6 root root   4096  4月 14 17:11 make</span><br><span class="line">-rw-r--r--  1 root root   6232  4月 14 17:11 Makefile</span><br><span class="line">drwxr-xr-x 13 root root   4096  4月 14 17:27 nashorn</span><br><span class="line">-rw-r--r--  1 root root   1549  4月 14 17:11 README</span><br><span class="line">-rw-r--r--  1 root root 129333  4月 14 17:11 README-builds.html</span><br><span class="line">drwxr-xr-x  3 root root   4096  4月 14 17:11 <span class="built_in">test</span></span><br><span class="line">-rw-r--r--  1 root root 152511  4月 14 17:11 THIRD_PARTY_README</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不过下载代码的时候我遇到了多次中断回滚，如果发生中断，会有警告在终端提醒， <strong>上面的脚本可以重复拉取。如果有更新的话会自动拉取最新代码</strong>。</p>
<h5 id="Building"><a href="#Building" class="headerlink" title="Building"></a>Building</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这一步会检查你的 /usr/bin 下的的命令是否齐全，如果缺少会抛错误出来，提示缺少某个命令，只需要安装再次执行就好</span></span><br><span class="line">bash ./configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有以下信息打印出来，说明第一步已经执行完成</span></span><br><span class="line">A new configuration has been successfully created <span class="keyword">in</span></span><br><span class="line">/usr/<span class="built_in">local</span>/jdk8u/build/linux-x86_64-normal-server-release</span><br><span class="line">using default settings.</span><br><span class="line"></span><br><span class="line">Configuration summary:</span><br><span class="line">* Debug level:    release</span><br><span class="line">* JDK variant:    normal</span><br><span class="line">* JVM variants:   server</span><br><span class="line">* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64</span><br><span class="line"></span><br><span class="line">Tools summary:</span><br><span class="line">* Boot JDK:       java version <span class="string">&quot;1.8.0_202&quot;</span> Java(TM) SE Runtime Environment (build 1.8.0_202-b08) Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)  (at /usr/lib/jvm/default)</span><br><span class="line">* Toolchain:      gcc (GNU Compiler Collection)</span><br><span class="line">* C Compiler:     Version 8.2.1 (at /usr/bin/gcc)</span><br><span class="line">* C++ Compiler:   Version 8.2.1 (at /usr/bin/g++)</span><br><span class="line"></span><br><span class="line">Build performance summary:</span><br><span class="line">* Cores to use:   7</span><br><span class="line">* Memory <span class="built_in">limit</span>:   7859 MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure>
<h5 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h5><p>编译完成之后会打印下面的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">----- Build <span class="built_in">times</span> -------</span><br><span class="line">Start 2019-04-14 22:26:22</span><br><span class="line">End   2019-04-14 22:36:39</span><br><span class="line">00:00:18 corba</span><br><span class="line">00:00:14 demos</span><br><span class="line">00:02:26 docs</span><br><span class="line">00:03:32 hotspot</span><br><span class="line">00:00:18 images</span><br><span class="line">00:00:13 jaxp</span><br><span class="line">00:00:17 jaxws</span><br><span class="line">00:02:16 jdk</span><br><span class="line">00:00:25 langtools</span><br><span class="line">00:00:17 nashorn</span><br><span class="line">00:10:17 TOTAL</span><br><span class="line">-------------------------</span><br><span class="line">Finished building OpenJDK <span class="keyword">for</span> target <span class="string">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>
<p>编译时会出现各种问题，可能是依赖版本，或者是包下载不下来导致问题，还有写是因为配置文件设置的问题。下面是我碰到的几个问题</p>
<h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><p>现在已经拥有一个自己的 jdk 了，设置环境变量使用起来。</p>
<p>先在 jdk8u/build/linux-x86_64-normal-server-release/images 下找到 j2sdk-image 目录，这个就是编译好的 jdk，把它复制到自己的 java 目录下，然后设置环境变量。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先卸载之前配置的 bootjdk 之后然后设置新的</span></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment"># JDK</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOEM&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启配置文件<br> source /etc/profile</p>
<p>现在 java 环境变量已经设置好了，输入 java -version 可以查看到环境下面信息，而且还有<strong>自己的机器名</strong>在上面，开心一分钟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0-internal&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0-internal-chenkui_2019_04_14_22_21-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)</span><br></pre></td></tr></table></figure>
<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>在编译时出现的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Warning: ××× ‘int readdir_r(DIR*, dirent*, dirent**)’ is deprecated (declared at &#x2F;usr&#x2F;include&#x2F;dirent.h:183) [-Wdeprecated-declarations] ×××</span><br></pre></td></tr></table></figure>
<p>解决方案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/jdk8u/hotspot/make/linux/makefiles</span><br><span class="line">vim ./gcc.make</span><br><span class="line"><span class="comment"># 编辑 gcc.make</span></span><br><span class="line"><span class="comment"># 找到 WARNINGS_ARE_ERRORS = -Werror 修改为</span></span><br><span class="line">WARNINGS_ARE_ERRORS = -Wno-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># WARNING_FLAGS = -Wno-deprecated-declarations -Wno-unused-parameter -Wno-sign-compare -Wno-error 修改为</span></span><br><span class="line"></span><br><span class="line">WARNING_FLAGS = -w</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考<a class="link" href="https://blog.csdn.net/desiyonan/article/details/80802066">链接<i class="fas fa-external-link-alt"></i></a> 这个问题是解决最没有头绪的一个，不过在编译的过程中要仔细看报错信息，这样方便 Google 时能准确的找到问题所在。现在就可以愉快的调试源码来玩一下了。</p>
<h4 id="the-end"><a href="#the-end" class="headerlink" title="the end"></a>the end</h4><p>记得第一次接触 Java 时，在命令行打印出 <code>hello world</code> 时真的很疑惑，就这么一个东西，能有什么用。但是随着一点一点的了解，慢慢发现它的强大之处。每天能进步一点，一年后看今天碰到的问题，其实也不难解决，不积跬步无以至千里，要加油啊！！！  ∩▂∩</p>
<p>官网提供的编译<a class="link" href="http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html">文档<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>我最爱海南，每个地方都有挥之不去的记忆</center>]]></content>
      <categories>
        <category>Manjaro</category>
        <category>Openjdk</category>
      </categories>
      <tags>
        <tag>Manjaro</tag>
        <tag>Openjdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro输入密码卡死问题</title>
    <url>/2019/04/24/manjaro%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="/2019/04/24/manjaro%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%8D%A1%E6%AD%BB%E9%97%AE%E9%A2%98/%E5%AF%86%E7%A0%81%E5%8D%A1%E6%AD%BB.png" alt="年轻才不怕"></p>
<p>最近玩 manjaro 还是听开心的，该有的软件都有了，用起来也挺方便的。事故发生在一次更新之后，我第二天晚上打开电脑输入密码，卡死在输密码的界面…（嗯…小问题，开启重启。我太天真了，还是没有解决问题）因为最近比较忙，手头也没有多余的电脑，就搁置了几天。最近查了各种资料，问了一些大佬，终于解决了问题。</p>
<a id="more"></a>

<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><table>
<thead>
<tr>
<th>ev</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>os</td>
<td>Mangaro 18.0.4</td>
</tr>
<tr>
<td>Kernel</td>
<td>x86_64 Linux 4.19.34-1-MANJARO</td>
</tr>
<tr>
<td>DE</td>
<td>KDE 5.56.0 / Plasma 5.15.4</td>
</tr>
<tr>
<td>GPU</td>
<td>Mesa DRI Intel(R) Haswell Mobile</td>
</tr>
</tbody></table>
<h4 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h4><p>Google 了很多同学碰到的问题，说卡死是双显卡导致的，因为我也是双显卡，所以准备先在这里排除问题。首先 CTRL + ALT + F3 进入到 tty3 终端。使用 root 登录之后就有问题了，所有的命令都报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 报错信息</span></span><br><span class="line"><span class="comment"># ll</span></span><br><span class="line">-bash: 口口口口口</span><br></pre></td></tr></table></figure>
<p>基本所有命令都不能使用，很难受。后面请教了一些大佬说应该是环境变量的问题，后面的<code>口口口口</code> 应该是中文不支持原因，实际应该是下面的情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 报错信息</span></span><br><span class="line">-bash: 未找到命令</span><br></pre></td></tr></table></figure>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>上面的问题终于有了眉目，命令不存在应该是环境变量导致的，所以先要设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑环境变量</span></span><br><span class="line">$ /usr/bin/vim /etc/profile</span><br><span class="line"><span class="comment"># 添加下面的值</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/bin</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p>到这里所有的命令应该就可以使用了。</p>
<h4 id="更新显卡依赖"><a href="#更新显卡依赖" class="headerlink" title="更新显卡依赖"></a>更新显卡依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S virtualgl lib32-virtualgl lib32-primus primus</span><br></pre></td></tr></table></figure>
<p>更新完成之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启之后，终于进去了…切还是那样熟悉 。</p>
<hr>
<center>白马非马</center>
]]></content>
      <categories>
        <category>Manjaro</category>
      </categories>
      <tags>
        <tag>Manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongo乐观锁</title>
    <url>/2019/03/31/mongo%E4%B9%90%E8%A7%82%E9%94%81/</url>
    <content><![CDATA[<p><img src="/2019/03/31/mongo%E4%B9%90%E8%A7%82%E9%94%81/mongoLock.png"></p>
<p>前几天完了一下 mongo 的一些基础操作，在工作中遇到最多的就是 CRUD 这种操作，但是随着业务复杂度增加，访问数量增加之后，对系统的需求也会随之增加。我在业务中使用最多的就是乐观锁，主要原因是因</p>
<a id="more"></a>
<p>为乐观锁有一下几点好处：</p>
<ol>
<li>在执行读操作时不会对数据进行加锁处理，这样提高了数据访问速度。</li>
<li>mongo 本身不支持事物，所以没有像关系型数据库那样完善的锁机制。</li>
</ol>
<p>下面看下 mongo 是怎样实现乐观锁的，看下具体的乐观锁是如何实现对数据加锁的。</p>
<h6 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h6><p>乐观锁在读取数据时一般会认为数据没有被修改，所以在读的时候不会对数据加锁，但是在更新数据时会对其进行<code>加锁</code>,这里所谓的加锁一般是会设置一个版本号，在更新时看下这个版本号有没有变化，如果更新时版本号不一致，则说明数据已经被更新，当前更新操作不会被执行。<br>下面是 mongo 中实现乐观锁的一些具体操作</p>
<h6 id="version"><a href="#version" class="headerlink" title="version"></a>version</h6><p>在实体类中添加版本号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(collection = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Long version; <span class="comment">// 这里添加版本字段，并添加版本注解</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> Integer age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> String sex; <span class="comment">// 性别</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName,Integer age,String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setUserName(userName);</span><br><span class="line">        <span class="keyword">this</span>.setSex(sex);</span><br><span class="line">        <span class="keyword">this</span>.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>配置好版本号之后进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optimisticLockTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    User user = template.insert(<span class="keyword">new</span> User(<span class="string">&quot;feng&quot;</span>, <span class="number">18</span>, <span class="string">&quot;female&quot;</span>)); <span class="comment">// 插入一条记录</span></span><br><span class="line"></span><br><span class="line">    User one = template.findOne(<span class="keyword">new</span> Query(<span class="keyword">new</span> Criteria(<span class="string">&quot;id&quot;</span>).is(user.getId())), User.class); <span class="comment">// 将插入的记录查出来</span></span><br><span class="line"></span><br><span class="line">    one.setUserName(<span class="string">&quot;管你啊&quot;</span>); <span class="comment">// 给查出来的对象设置行名称</span></span><br><span class="line"></span><br><span class="line">    template.save(one); <span class="comment">// 保存查出来的对象</span></span><br><span class="line"></span><br><span class="line">    template.save(user); <span class="comment">// 这里再次保存之前的对象时会抛出 OptimisticLockingFailureException 异常</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>乐观锁使用比较简单，但是也很大程度的避免了在更新操作时的加锁问题，但是也会存在脏读等问题，以上就是 mongo 使用乐观锁的一些具体操作，这些在官网例子中也有说明，这里附上<a class="link" href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template.optimistic-locking">官网连接<i class="fas fa-external-link-alt"></i></a> </p>
<p>开始写东西不久，在很多表达方面可能不是很到位，但是会坚持下去的，这里也算是对自己进行约束的一个地方。我一直是一个不敢表达自我的人，希望在这里用书写的方式先把自己的东西写出来，能在回顾的时候不断提高自己。good luck…</p>
<hr>
<center>盖一处庭院，养一只大狗</center>]]></content>
      <categories>
        <category>Mongo</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongo权限设置</title>
    <url>/2019/03/28/mongo%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/2019/03/28/mongo%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/mongoPower.png"></p>
<p>mongodb 使用起来还是相对简单的，但是在权限设置时，遇到了几个小问题，以至于花了比较久的时间，在给 mongo 设置权限前首先要清楚几点：</p>
<a id="more"></a>

<ol>
<li>mongo 默认是没有用户的。</li>
<li>mongo 每个数据库由独立的用户来管理。<br>因为 mongo 默认是没有用户的，所以首先要创建管理员用户，这里创建管理员用户时要进入 admin 数据库来设置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 adimn 数据库</span></span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">&quot;admin&quot;</span>, <span class="comment"># admin 用户名</span></span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>, <span class="comment"># 密码</span></span><br><span class="line">     roles: [ &#123; role: <span class="string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ] <span class="comment"># admin 此用户作用的目标数据库</span></span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 此处创建成功 bash 会返回成功信息</span></span><br><span class="line"><span class="comment"># 验证权限</span></span><br><span class="line">&gt; db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">1 <span class="comment"># 成功会返回1</span></span><br></pre></td></tr></table></figure>
<p>至此，mongo 管理员用户已经创建成功了，现在退出 mongo ,在配置文件中开启验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth&#x3D;ture</span><br></pre></td></tr></table></figure>
<p>重启 mongo</p>
<p>创建 test 数据库，给此数据库创建 test 用户方能连接到此数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有的话进入，没有则创建此库</span></span><br><span class="line">&gt; use <span class="built_in">test</span></span><br><span class="line">&gt; db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">     roles: [ &#123; role: <span class="string">&quot;readWrite&quot;</span>, db: <span class="string">&quot;test&quot;</span> &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此时用户和关联的库已经创建好，在 robo3T 客户端就可以直接连接使用了。</p>
<hr>
<center>夜深人静的时候，世界才是自己的</center>]]></content>
      <categories>
        <category>Mongo</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongo分片集群</title>
    <url>/2019/11/12/mongo%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p><img src="/2019/11/12/mongo%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/replicaSet.png" alt="Photo by Unsplash"></p>
<p>mongdb 通过分片机制将数据分布在多台机器上面，实现了横向扩展。也支持了非常大数集和高吞吐量操作。mongodb 可以很好的利用机器的内存资源，内存越大，查询就会越快。mongo 对数据的结构没有其他限制，对开发者很友好，很适合迭代很快，表字段变化很多的场景。</p>
<a id="more"></a>

<h5 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h5><p>mongo 通过分片机制，将数据拆分后存储在不同机器上面。这样就可以存储更多的数据，并且能以很快的速度读取出来。mongo 原生就支持了分布式特性，在使用方面也是非常方便。下面先<a class="link" href="https://www.mongodb.org/dl/linux/x86_64">下载<i class="fas fa-external-link-alt"></i></a>进行部署。</p>
<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><table>
<thead>
<tr>
<th>ev</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>os</td>
<td>CentOS Linux release 7.6.1810 (Core)</td>
</tr>
<tr>
<td>mongo</td>
<td>mongodb-linux-x86_64-v4.0-latest</td>
</tr>
</tbody></table>
<h6 id="配置服务搭建"><a href="#配置服务搭建" class="headerlink" title="配置服务搭建"></a>配置服务搭建</h6><p>创建 3 台虚拟机，分别搭建 mongo 实例<br>机器分配<br>|    os  |  ip    |<br>| —- | —- |<br>|  centos7   | 192.168.31.107    |<br>|    centos7  |  192.168.31.107  |<br>|centos7|192.168.31.107 | </p>
<ol>
<li>下载并安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录 /usr/local</span></span><br><span class="line">mkdir mongo</span><br><span class="line"><span class="comment"># 解压到 mongo 目录</span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-v4.0-latest.gz</span><br></pre></td></tr></table></figure></li>
<li>配置文件<br>先创建下面对应的文件夹</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="string">27017                                            #端口，默认 27017 </span></span><br><span class="line"><span class="attr">bind_ip</span> = <span class="string">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="string">2000                                           #最大连接数</span></span><br><span class="line"><span class="attr">logpath</span> = <span class="string">/usr/local/mongo/config/log/mongo.log         #指定日志文件</span></span><br><span class="line"><span class="attr">logappend</span> = <span class="string">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class="line"><span class="attr">pidfilepath</span> = <span class="string">/usr/local/mongo/config/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class="line"><span class="attr">fork</span> = <span class="string">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class="line"><span class="attr">dbpath</span> = <span class="string">/usr/local/mongo/config/data                   #数据存放目录。默认： /data/db/</span></span><br><span class="line"><span class="attr">replSet</span>=<span class="string">configs                                         #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class="line"><span class="attr">configsvr</span> = <span class="string">true                                        ##设置是否是配置服务，默认端口27019，默认目录/data/configdb</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>启动服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/mongo/bin/mongod -f /usr/<span class="built_in">local</span>/mongo/conf/config.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动成功</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 8982</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>备注</strong><br>其他两台机器也按照以上方式同样配置</p>
<ol start="4">
<li>初始化副本集</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#config变量</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : &quot;configs&quot;,</span><br><span class="line">     members : [</span><br><span class="line">         &#123;_id : 0, host : &quot;192.168.31.107:27017&quot; &#125;,</span><br><span class="line">         &#123;_id : 1, host : &quot;192.168.31.108:27017&quot; &#125;,</span><br><span class="line">         &#123;_id : 2, host : &quot;192.168.31.109:27017&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> #初始化配置</span><br><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure>
<p>configs:配置文件中副本集名称</p>
<h6 id="分片副本集"><a href="#分片副本集" class="headerlink" title="分片副本集"></a>分片副本集</h6><p><strong>配置 shard1</strong></p>
<ol>
<li>配置文件</li>
</ol>
<p>创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim conf/shard1.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="string">27001                                            #端口，默认 27017 </span></span><br><span class="line"><span class="attr">bind_ip</span> = <span class="string">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="string">2000                                           #最大连接数</span></span><br><span class="line"><span class="attr">logpath</span> = <span class="string">/usr/local/mongo/shard1/log/mongo.log         #指定日志文件</span></span><br><span class="line"><span class="attr">logappend</span> = <span class="string">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class="line"><span class="attr">pidfilepath</span> = <span class="string">/usr/local/mongo/shard1/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class="line"><span class="attr">fork</span> = <span class="string">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class="line"><span class="attr">dbpath</span> = <span class="string">/usr/local/mongo/shard1/data                   #数据存放目录。默认： /data/db/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">replSet</span>=<span class="string">shard1                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class="line"><span class="attr">shardsvr</span> = <span class="string">true                                         #设置是否分片，默认端口27018</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动 shard1 服务</li>
</ol>
<p>按照相同的方式配置其他 2 台服务并启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/mongod -f conf/shard1.conf </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>初始化副本集<br>进入 shell 命令行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 27001</span><br></pre></td></tr></table></figure>
初始化<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#使用admin数据库</span><br><span class="line">use admin</span><br><span class="line">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : &quot;shard1&quot;,</span><br><span class="line">     members : [</span><br><span class="line">         &#123;_id : 0, host : &quot;192.168.31.107:27001&quot; &#125;,</span><br><span class="line">         &#123;_id : 1, host : &quot;192.168.31.108:27001&quot; &#125;,</span><br><span class="line">         &#123;_id : 2, host : &quot;192.168.31.109:27001&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">#初始化副本集配置</span><br><span class="line">rs.initiate(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>配置 shard2</strong></p>
<ol>
<li>配置文件</li>
</ol>
<p>创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim conf/shard2.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="string">27002                                            #端口，默认 27017 </span></span><br><span class="line"><span class="attr">bind_ip</span> = <span class="string">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="string">2000                                           #最大连接数</span></span><br><span class="line"><span class="attr">logpath</span> = <span class="string">/usr/local/mongo/shard2/log/mongo.log         #指定日志文件</span></span><br><span class="line"><span class="attr">logappend</span> = <span class="string">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class="line"><span class="attr">pidfilepath</span> = <span class="string">/usr/local/mongo/shard2/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class="line"><span class="attr">fork</span> = <span class="string">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class="line"><span class="attr">dbpath</span> = <span class="string">/usr/local/mongo/shard2/data                   #数据存放目录。默认： /data/db/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">replSet</span>=<span class="string">shard2                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class="line"><span class="attr">shardsvr</span> = <span class="string">true                                         #设置是否分片，默认端口27018</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动 shard2 服务</li>
</ol>
<p>按照相同的方式配置其他 2 台服务并启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/mongod -f conf/shard2.conf </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>初始化副本集<br>进入 shell 命令行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 27002</span><br></pre></td></tr></table></figure>
初始化<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#使用admin数据库</span><br><span class="line">use admin</span><br><span class="line">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : &quot;shard2&quot;,</span><br><span class="line">     members : [</span><br><span class="line">         &#123;_id : 0, host : &quot;192.168.31.107:27002&quot; &#125;,</span><br><span class="line">         &#123;_id : 1, host : &quot;192.168.31.108:27002&quot; &#125;,</span><br><span class="line">         &#123;_id : 2, host : &quot;192.168.31.109:27002&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">#初始化副本集配置</span><br><span class="line">rs.initiate(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>配置 shard3</strong></p>
<p>配置 shard3</p>
<ol>
<li>配置文件</li>
</ol>
<p>创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim conf/shard3.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="string">27003                                            #端口，默认 27017 </span></span><br><span class="line"><span class="attr">bind_ip</span> = <span class="string">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="string">2000                                           #最大连接数</span></span><br><span class="line"><span class="attr">logpath</span> = <span class="string">/usr/local/mongo/shard3/log/mongo.log         #指定日志文件</span></span><br><span class="line"><span class="attr">logappend</span> = <span class="string">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class="line"><span class="attr">pidfilepath</span> = <span class="string">/usr/local/mongo/shard3/log/mongo.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class="line"><span class="attr">fork</span> = <span class="string">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class="line"><span class="attr">dbpath</span> = <span class="string">/usr/local/mongo/shard3/data                   #数据存放目录。默认： /data/db/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">replSet</span>=<span class="string">shard3                                          #使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class="line"><span class="attr">shardsvr</span> = <span class="string">true                                         #设置是否分片，默认端口27018</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#使用admin数据库</span><br><span class="line">use admin</span><br><span class="line">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : &quot;shard3&quot;,</span><br><span class="line">     members : [</span><br><span class="line">         &#123;_id : 0, host : &quot;192.168.31.107:27003&quot; &#125;,</span><br><span class="line">         &#123;_id : 1, host : &quot;192.168.31.108:27003&quot; &#125;,</span><br><span class="line">         &#123;_id : 2, host : &quot;192.168.31.109:27003&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">#初始化副本集配置</span><br><span class="line">rs.initiate(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动 shard3 服务</li>
</ol>
<p>按照相同的方式配置其他 2 台服务并启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/mongod -f conf/shard3.conf </span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>初始化副本集<br>进入 shell 命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --port 27003</span><br></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#使用admin数据库</span><br><span class="line">use admin</span><br><span class="line">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : &quot;shard3&quot;,</span><br><span class="line">     members : [</span><br><span class="line">         &#123;_id : 0, host : &quot;192.168.31.107:27003&quot; &#125;,</span><br><span class="line">         &#123;_id : 1, host : &quot;192.168.31.108:27003&quot; &#125;,</span><br><span class="line">         &#123;_id : 2, host : &quot;192.168.31.109:27003&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">#初始化副本集配置</span><br><span class="line">rs.initiate(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="配置路由服务"><a href="#配置路由服务" class="headerlink" title="配置路由服务"></a>配置路由服务</h6></li>
<li><p>配置文件</p>
</li>
</ol>
<p>创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim conf/shard3.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="string">28000                                            #端口，默认 27017 </span></span><br><span class="line"><span class="attr">bind_ip</span> = <span class="string">0.0.0.0                                       #绑定地址，默认127.0.0.1只能通过本地连接，0.0.0.0允许任何机器连接</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="string">2000                                           #最大连接数</span></span><br><span class="line"><span class="attr">logpath</span> = <span class="string">/usr/local/mongo/mongos/log/mongos.log         #指定日志文件</span></span><br><span class="line"><span class="attr">logappend</span> = <span class="string">true                                        #写日志的模式：设置为true为追加。默认是覆盖</span></span><br><span class="line"><span class="attr">pidfilepath</span> = <span class="string">/usr/local/mongo/mongos/log/mongos.pid     #进程ID，没有指定则启动时候就没有PID文件。默认缺省</span></span><br><span class="line"><span class="attr">fork</span> = <span class="string">true                                             #是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false</span></span><br><span class="line"><span class="comment">#配置服务器，只能是一个或者3个。configs 是上面配置服务器副本集名字</span></span><br><span class="line"><span class="attr">configdb</span> = <span class="string">configs/192.168.31.107:27017,192.168.31.108:27017,192.168.31.109:27017</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>启动<br>使用 <strong>mongos</strong>命令启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/mongos -f conf/mongos.conf</span><br></pre></td></tr></table></figure>
<p>按照以上方式配置启动其他2台mongos服务</p>
</li>
<li><p>启动分片</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录 mongos</span></span><br><span class="line">mongo --port 28000</span><br><span class="line"><span class="comment">#使用admin数据库</span></span><br><span class="line">use  admin</span><br><span class="line"><span class="comment">#配置分片</span></span><br><span class="line">sh.addShard(<span class="string">&quot;shard1/192.168.31.107:27001,192.168.31.108:27001,192.168.31.109:27001&quot;</span>)</span><br><span class="line">sh.addShard(<span class="string">&quot;shard2/192.168.31.107:27002,192.168.31.108:27002,192.168.31.109:27002&quot;</span>)</span><br><span class="line">sh.addShard(<span class="string">&quot;shard3/192.168.31.107:27003,192.168.31.108:27003,192.168.31.109:27003&quot;</span>)</span><br><span class="line"><span class="comment">#查看集群状态</span></span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>完成以上 mongo 分片部署就完成了，下面进行简单测试。</p>
</blockquote>
<h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><ol>
<li>指定分片库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 admin 账户</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 指定 testdb 分片生效</span></span><br><span class="line">db.runCommand( &#123; enablesharding :<span class="string">&quot;testdb&quot;</span>&#125;);</span><br><span class="line"><span class="comment"># 指定数据库里需要分片的集合和片键</span></span><br><span class="line">db.runCommand( &#123; shardcollection : <span class="string">&quot;testdb.user&quot;</span>,key : &#123;id: 1&#125; &#125; )</span><br></pre></td></tr></table></figure>
<p>指定 testdb 下 user 表数据进行分片处理，对 user 表插入数据测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入任意分片</span></span><br><span class="line">mongo --port 28000</span><br><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">use testdb</span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="keyword">for</span> (var i=1;i&lt;=100000;i++) db.user.insert(&#123;id:i,<span class="string">&quot;userId&quot;</span>:<span class="string">&quot;user&quot;</span>+i&#125;)</span><br></pre></td></tr></table></figure>
<p>使用 <a class="link" href="https://studio3t.com/download/">studio 3T<i class="fas fa-external-link-alt"></i></a> 连接 mongo ，连接之后点击：</p>
<blockquote>
<ol>
<li>右键连接</li>
<li>Curent Operations</li>
</ol>
</blockquote>
<p>进入 Curent Operations 页面，就可以看到数据是写入到了不同的分片之上的。</p>
<p>mongdb 对于快速迭代开发是一个非常不错的选择，因为在不断迭代变化的过程中既可以满足前期快速的迭代，也能抗住后期海量数据存储和并发访问问题。而且对开发者很友好，非关系型结构可以让开发按照需求快速调整数据结构，但是也有一个弊端，可能造成表结构数据混乱等情况。在横向扩展方面更是有非常大的优势，在未来潜力无限。<a class="link" href="https://docs.mongodb.com/manual/sharding/">官方文档<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>mongo is not mango</center>
]]></content>
      <categories>
        <category>Mongo</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2020/01/18/mysql/</url>
    <content><![CDATA[<p><img src="/2020/01/18/mysql/mysql.png" alt="Photo by WoshWosh on wallhaven.cc"></p>
<p>趁着放假，准备系统的在理一理 MySQL 的知识，通过看网上大神的一些学习记录和自己工作中的一些经验总结。把 MySQL 数据库重新学习一边，加深对 MySQL 的理解，也方便以后复习时查看。</p>
<a id="more"></a>

<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>MySQL 是由两大部分 server 部分和存储引擎构成的。而 server 部分主要由 连接器，分析器，优化器和执行器组成的，server 部分主要负责客户端的连接，SQL 语句的解析，优化以及执行。 存储引擎主要负责数存储，并且提供数据的读写接口。</p>
<h3 id="MySQL组件"><a href="#MySQL组件" class="headerlink" title="MySQL组件"></a>MySQL组件</h3><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>MySQL 前置操作都在这里执行。</p>
<h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>负责管理客户端连接，权限的验证等操作。当验证通过一个用户名和密码之后，此后的操作都是依赖当前权限，也就是说当一个用户连接成功之后，即使管理员修改密码，但是他还是能完成操作。</p>
<h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p>当用户通过连接器，SQL 到达之后，一般会先查询缓存（8.0 之前）。如果缓存中存在的话直接返回。没有的话则对 SQL 语句进行语法分析等动作。对于缓存不建议使用，因为当有表涉及到更新时，所有关于当前表的缓存会失效。除非是数据不经常变更的数据表。</p>
<h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>优化器主要是分析 SQL 语句怎样执行最优，然后生成执行方案。</p>
<h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>执行 SQL 语句，返回结果集。</p>
<h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>在 MySQL 语句更新过程中，如果每次都在磁盘找到相应记录，并且修改记录，写入磁盘的话，效率会很低。所以在执行过程中一些会将修改结果先保存在内存中，然后在 redo log 中记录当前的修改，当事务提交之后。服务在空闲的时候，或者日志空间不够时，在刷新 redo log 中 commit 的数据到磁盘中去。WAL （write-ahead logging）技术, 先写日志，在写磁盘。redo log 是存储引擎 InnoDB 独有的日志记录系统，它保证了在 MySQL 服务宕机之后保证数据不丢失。 可以通过设置参数 <code>innodb_flush_log_at_trx_commit=1</code> 保证每次 redo lod 都写在磁盘上，保证重启之后数据不丢失。</p>
<h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><p>MySQL server 层提供的日志系统，支持所有引擎。bin log 是追加的形式写入的，不像 redo log 有大小限制。binlog有两种记录模式，statement格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在网上购物从确认商品，下订单，扣减库存，到付款成功。这是一个整体的操作。对于这个操作来说，如果有其中一步操作失败，那意味着在它之前的操作都要回滚。这就是一个事务。在这一系列操作中，要么都成功。要么都失败。</p>
<p>事务特性：ACID，原子性（atomictity），一致性（consistency），隔离性（isolation），持久性（durablity）</p>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>隔离级别越高，效率越低。</p>
<h4 id="读未提交（read-uncommitted）"><a href="#读未提交（read-uncommitted）" class="headerlink" title="读未提交（read uncommitted）"></a>读未提交（read uncommitted）</h4><blockquote>
<p>一个事务还没有提交，它的变更能别其他事务看到</p>
</blockquote>
<h4 id="读提交（read-commit）"><a href="#读提交（read-commit）" class="headerlink" title="读提交（read commit）"></a>读提交（read commit）</h4><blockquote>
<p>事务提交之后，变更才能被其他事务看到</p>
</blockquote>
<h4 id="可重复读（repeatable-read）"><a href="#可重复读（repeatable-read）" class="headerlink" title="可重复读（repeatable read）"></a>可重复读（repeatable read）</h4><blockquote>
<p>事务启动之后，在事务提交之前，看到的数据和启动之前一致。没有提交的事务对其他事务不可见。</p>
</blockquote>
<h4 id="串行化（serialiable）"><a href="#串行化（serialiable）" class="headerlink" title="串行化（serialiable）"></a>串行化（serialiable）</h4><blockquote>
<p>对于同一行记录，写会加写锁，读会加读锁，当出现读写锁冲突时，必须等上个事务完成之后才能执行下一个事务。</p>
</blockquote>
<h4 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启</span></span><br><span class="line"><span class="keyword">begin</span> (<span class="keyword">start</span>) transaction;</span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<p>或者设置参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 0 关闭自动提交，查询也会自动开启，并且不会自动提交。一直持续到commit/rollback，或者断开连接。</span></span><br><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>由于 MySQL MVCC 多版本并发控制，每个操作都会有相应的回滚操作保存下来，每个事务都会记录。当设置为自动提交时，连接成功就会执行 set autocommit=0 的操作，每个操作都会在事务中，如果时长连接就会导致意外长事务。<strong>所以一般 set autocommit=1,显示开启事务</strong></p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>Docker 部署 Mysql5.7 </p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，一般设置为IP，注意要唯一</span><br><span class="line">server_id&#x3D;6</span><br><span class="line">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br><span class="line">binlog-ignore-db&#x3D;mysql</span><br><span class="line">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span><br><span class="line">log-bin&#x3D;replicas-mysql-bin</span><br><span class="line">## 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span><br><span class="line">binlog_cache_size&#x3D;1M</span><br><span class="line">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line">## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。</span><br><span class="line">expire_logs_days&#x3D;7</span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span><br><span class="line">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors&#x3D;1062</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>指定不同的配置和端口启动两个容器</p>
<blockquote>
<p>docker run –name mysql-6 -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -v ~/develop/mysql/mysql-6/data:/var/lib/mysql -v ~/develop/mysql/mysql-6/conf/my.cnf:/etc/mysql/my.cnf mysql:5.7</p>
</blockquote>
<blockquote>
<p>docker run –name mysql-7 -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -v ~/develop/mysql/mysql-7/data:/var/lib/mysql -v ~/develop/mysql/mysql-7/conf/my.cnf:/etc/mysql/my.cnf mysql:5.7</p>
</blockquote>
<h4 id="主节点"><a href="#主节点" class="headerlink" title="主节点"></a>主节点</h4><p>连接主节点授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* to &#39;sync&#39;@&#39;%&#39; identified by &#39;root&#39;;</span><br><span class="line"># 查看主节点状态</span><br><span class="line">show master status;</span><br></pre></td></tr></table></figure>
<h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect --format &#39;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#39; &lt;container-ID&gt; </span><br></pre></td></tr></table></figure>
<h4 id="从节点"><a href="#从节点" class="headerlink" title="从节点"></a>从节点</h4><p>连接主节点，指定主节点的地址信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;172.17.0.2&#39;,master_user&#x3D;&#39;sync&#39;,master_password&#x3D;&#39;root&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;437,master_port&#x3D;3306;</span><br></pre></td></tr></table></figure>
<p>开启从节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reset slave;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>


<hr>
<center>我该选哪个？</center>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/2020/01/14/netty/</url>
    <content><![CDATA[<p><img src="/2020/01/14/netty/netty.png" alt="Photo by WallpaperManiac on wallhaven.cc"></p>
<p>Netty 提供<strong>异步</strong>的、<strong>事件驱动</strong>的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。也就是说，Netty 是一个<strong>基于 NIO</strong> 的客户，服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。</p>
<a id="more"></a>

<h2 id="✈️NIO"><a href="#✈️NIO" class="headerlink" title="✈️NIO"></a>✈️NIO</h2><h3 id="Java-Socket-编程"><a href="#Java-Socket-编程" class="headerlink" title="Java Socket 编程"></a>Java Socket 编程</h3><p>使用Socket进行网络编程时，本质上就是两个进程之间的网络通信。其中一个进程必须充当服务器端，它会主动监听某个指定的端口，另一个进程必须充当客户端，它必须主动连接服务器的IP地址和指定端口，如果连接成功，服务器端和客户端就成功地建立了一个TCP连接，双方后续就可以随时发送和接收数据。</p>
<h3 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">阻塞</th>
<th align="center">非阻塞</th>
</tr>
</thead>
<tbody><tr>
<td align="center">同步</td>
<td align="center">阻塞 I/O 模型</td>
<td align="center">非阻塞 I/O 模型</td>
</tr>
<tr>
<td align="center">同步</td>
<td align="center">I/O 复用模型</td>
<td align="center">信号驱动 I/O 模型</td>
</tr>
<tr>
<td align="center">异步</td>
<td align="center"></td>
<td align="center">异步 I/O 模型</td>
</tr>
</tbody></table>
<h4 id="阻塞I-O"><a href="#阻塞I-O" class="headerlink" title="阻塞I/O"></a>阻塞I/O</h4><p>阻塞式 I/O 模型，一般通过在循环中等待接收客户端连接的请求，建立连接之后只能等待当前客户端通信完成才能接收其他客户端请求。「可以通过多线程来处理多个客户端连接」</p>
<ul>
<li>等待数据就绪。通过网络 I/O 数据抵达接收端</li>
<li>数据拷贝。 将数据从内核态拷贝到用户态</li>
</ul>
<h4 id="非阻塞I-O"><a href="#非阻塞I-O" class="headerlink" title="非阻塞I/O"></a>非阻塞I/O</h4><p>内核会立即返回。用户进程第一个阶段不是阻塞的,需要不断的主动询问 kernel 数据好了没有；第二个阶段依然总是阻塞的。</p>
<ul>
<li>设置状态。将请求设置为「非阻塞状态」，当数据没有准备好时线程不要进入阻塞队列，直接返回状态码 <code>EWOULDBLOCK</code> </li>
<li>轮询。轮询查看数据是否准备好</li>
<li>数据拷贝。数据准备好时，将数据从内核态拷贝到用户态</li>
</ul>
<h4 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I/O多路复用"></a>I/O多路复用</h4><p>也称事件驱动 I/O：就是在单线程里同时监控多个 Socket，通过 select/poll 函数轮询负责所有的 Socket，当某个 Socket 数据到达了，就通知用户进程。</p>
<ul>
<li>请求先阻塞在 select/poll 上，阻塞多个请求，轮询查看数据是否准备好</li>
<li>告知客户端数据已准备好，客户端发起请求获取数据</li>
<li>将数据从内核态拷贝到用户态，返回</li>
</ul>
<h5 id="select-poll缺点"><a href="#select-poll缺点" class="headerlink" title="select/poll缺点"></a>select/poll缺点</h5><ol>
<li><p>每次调用 select，都需要把 fd 集合从用户态拷贝到内核态，这个开销在 fd 很多时会很大</p>
</li>
<li><p>同时每次调用 select 都需要在<strong>内核遍历传递进来的所有 fd</strong>，这个开销在 fd 很多时也很大</p>
</li>
<li><p>select 支持的文件描述符数量太小了，默认是1024</p>
</li>
</ol>
<h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h5><p>Linux 2.5.44内核中引入,2.6内核正式引入,可被用于代替 POSIX select 和 poll 系统调用</p>
<ol>
<li><p>内核与用户空间共享一块内存</p>
</li>
<li><p>通过回调解决遍历问题</p>
</li>
<li><p>fd 没有限制，可以支撑10万连接</p>
</li>
</ol>
<h4 id="信号驱动I-O"><a href="#信号驱动I-O" class="headerlink" title="信号驱动I/O"></a>信号驱动I/O</h4><p>信号驱动 IO（SIGIO） 与 BIO 和 NIO 最大的区别就在于，在 IO 执行的数据准备阶段，不会阻塞用户进程。</p>
<ul>
<li>客户端发送请求数据的信号，期间不会发生阻塞</li>
<li>服务端准备好数据后传递一个信号 SIGIO 给客户端。客户端发起请求获取数据</li>
<li>将数据从内核态拷贝到用户态，返回</li>
</ul>
<h4 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h4><p>异步 IO <strong>真正实现</strong>了 IO 全流程的非阻塞。用户进程发出系统调用后立即返回，内核等待数据准备完成，然后将数据拷贝到用户进程缓冲区，然后发送信号告诉用户进程 IO 操作执行完毕「与 SIGIO 相比，一个是发送信号告诉用户进程数据准备完毕，一个是 IO 执行完毕」。</p>
<h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p>Netty 提供<strong>异步</strong>的、<strong>事件驱动</strong>的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。也就是说，Netty 是一个<strong>基于 NIO</strong> 的客户，服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>高性能协议服务器</p>
<p>高吞吐，低延迟，低开销，零拷贝，可扩容，松耦合: 网络和业务逻辑分离，使用方便、可维护性好</p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h5><p>通道，Java NIO 中的基础概念,代表一个打开的连接,可执行读取/写入 IO 操作。Netty 对 Channel 的所有 IO 操作都是非阻塞的。</p>
<h5 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h5><p>Java 的 Future 接口，只能查询操作的完成情况, 或者阻塞当前线程等待操作完成。Netty 封装一个 ChannelFuture 接口。可以将回调方法传给 ChannelFuture，在操作完成时自动执行。</p>
<h5 id="Event-amp-Handler"><a href="#Event-amp-Handler" class="headerlink" title="Event&amp;Handler"></a>Event&amp;Handler</h5><p>Netty 基于事件驱动，事件和处理器可以关联到入站和出站数据流。</p>
<h5 id="Encoder-amp-Decoder"><a href="#Encoder-amp-Decoder" class="headerlink" title="Encoder&amp;Decoder"></a>Encoder&amp;Decoder</h5><p>处理网络 IO 时，需要进行序列化和反序列化, 转换 Java 对象与字节流。对入站数据进行解码, 基类是 ByteToMessageDecoder。对出站数据进行编码, 基类是 MessageToByteEncoder。 </p>
<h5 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h5><p>数据处理管道就是事件处理器链。有顺序、同一 Channel 的出站处理器和入站处理器在同一个列表中。</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol>
<li><p>不要阻塞 EventLoop</p>
</li>
<li><p>系统参数优化</p>
</li>
</ol>
<blockquote>
<p>ulimit -a /proc/sys/net/ipv4/tcp_fin_timeout, TcpTimedWaitDelay</p>
</blockquote>
<ol start="3">
<li>缓冲区优化</li>
</ol>
<blockquote>
<p>SO_RCVBUF/SO_SNDBUF/SO_BACKLOG/ REUSEXXX</p>
</blockquote>
<ol start="4">
<li>心跳频率周期优化</li>
</ol>
<blockquote>
<p>心跳机制与断线重连</p>
</blockquote>
<ol start="5">
<li>内存与 ByteBuffer 优化</li>
</ol>
<blockquote>
<p>DirectBuffer与HeapBuffer</p>
</blockquote>
<ol start="6">
<li>其他优化</li>
</ol>
<blockquote>
<p>-ioRatio</p>
<p>-Watermark</p>
<p>-TrafficShaping</p>
</blockquote>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>实现 API 网关</p>
<h5 id="常见网关"><a href="#常见网关" class="headerlink" title="常见网关"></a>常见网关</h5><p>zuul ,zuul2 ,Spring Cloud Gateway ,openResty ,Kong </p>
<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p><a class="link" href="https://waylau.gitbooks.io/essential-netty-in-action/content/GETTING%20STARTED/Asynchronous%20and%20Event%20Driven.html">Essential Netty in Action 《Netty 实战(精髓)》<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>曾经的愿望实现了吗？</center>]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装和使用</title>
    <url>/2019/11/25/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/2019/11/25/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/nginx.png" alt="Photo by deleted on wallhaven.cc"></p>
<p>nginx 是互联网公司必不可少的一个中间件。它不仅性能好，而且资源占用极低。nginx <a class="link" href="http://www.nginx.cn/doc/">中文文档<i class="fas fa-external-link-alt"></i></a>，<a class="link" href="http://nginx.org/en/download.html">官方下载地址<i class="fas fa-external-link-alt"></i></a></p>
<a id="more"></a>


<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 epel 源，如果 yum 安装时提示没有找到 nginx 的话</span></span><br><span class="line">yum install epel-release</span><br><span class="line"></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>
<h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>
<h5 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<h5 id="配置检查"><a href="#配置检查" class="headerlink" title="配置检查"></a>配置检查</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>main 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 worker 进程的运行身份，如组不指定，默认和用户名同名</span></span><br><span class="line">user nginx;</span><br><span class="line"><span class="comment"># worker 进程的数量，通常为当前主机 cpu 物理核心数</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="comment"># worker 进程能够打开的文件数量上限（支持的并发数如：65535）</span></span><br><span class="line">worker_rlimit_nofile number</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line"><span class="comment"># 指定存储 nginx 主进程 PID 的文件路径</span></span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line"><span class="comment"># 指明包含进来的其他配置文件片段</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"><span class="comment"># 后台执行，默认 on 开启，off 则关闭，适合调试使用</span></span><br><span class="line">daemon off;</span><br><span class="line"><span class="comment"># 是否以 master/worker 模式运行，默认 on ，off 将不启动 worker</span></span><br><span class="line">master_process on|off</span><br></pre></td></tr></table></figure>
<p>events 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events&#123;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line"><span class="comment"># 每个 worker 进程所能够打开的最大并发链接数数量</span></span><br><span class="line"><span class="comment"># 总最大并发数：worker_processes * worker_connections</span></span><br><span class="line">worker_connections number</span><br><span class="line"><span class="comment"># 并发连接请求处理方式，默认选择最优 epoll</span></span><br><span class="line">use epoll/select</span><br><span class="line"><span class="comment"># 处理新连接请求方法，on 指 worker 轮流处理新请求，off 指每个新请求到达会通知（唤醒）所有 worker 进程，但是只有一个进程可以获得连接，造成‘惊群’，影响性能。</span></span><br><span class="line">accept_mutex on | off</span><br></pre></td></tr></table></figure>
<p>http 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="comment"># 各个 server 的公共配置</span></span><br><span class="line">    server&#123;</span><br><span class="line">      <span class="comment"># 每个 server 用于定义一个虚拟主机  </span></span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="comment"># 当前虚拟主机监听的端口</span></span><br><span class="line">        listen IP:PORT                       <span class="comment"># ipV4 地址</span></span><br><span class="line">        listen       [::]:80 default_server; <span class="comment"># ipV6 地址</span></span><br><span class="line">        <span class="comment"># 当前虚拟主机名称 eg：www.baidu.com</span></span><br><span class="line">        server_name 虚拟主机名</span><br><span class="line">        <span class="comment"># root：server 虚拟主机下的根目录</span></span><br><span class="line">        root        主目录</span><br><span class="line">        location [OPERATOR] URL &#123;  <span class="comment"># 指定 URL 的特性</span></span><br><span class="line">            <span class="keyword">if</span> CONDITION&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>server_name</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 虚拟主机名称后可以跟多个由空白字符分割的字符串</span><br><span class="line">2. 支持 * 通配任意长度的任意字符：server_name *.baidu.com www.baidu.*</span><br><span class="line">3. 支持 ~ 起始的字符做正则表达式匹配，但是存在性能问题：server_name ~^www\d+\.baidu\.com$</span><br><span class="line">匹配优先级：</span><br><span class="line">a. 字符串精确匹。b. 左侧 * 通配符。c. 右侧 * 通配符 eg:com.www.baidu.* 。 d. 正则。e. defult_server</span><br></pre></td></tr></table></figure>
<p>location 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在一个 sever 中 location 配置段可存在多个，用于实现从 uri 到文件系统的路径映射，nginx 会根据用户请求的 uri 来检查定义的所有 location,并找出一个最佳匹配进行应用。</span></span><br><span class="line">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>location 中也有 root 路径，当请求是具体的 location 指向的路径时，走 location 中的 root 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果访问 http:192.168.31.107/news 则访问的时 location 指向的 /usr/local/html/news 目录下的文件，不带路径则访问的是 server 下 root 目录下的文件</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root        /usr/<span class="built_in">local</span>/html;</span><br><span class="line">        location /news &#123;</span><br><span class="line">                root /usr/<span class="built_in">local</span>/html</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>路径解析</p>
<blockquote>
<p>在 location 中指定路径有两种方式，一种是 root，一种是 alias。它们之间的区别是：<br>root 方式处理结果 = root 路径 + location 路径<br>alias 方式处理结果 = alias 路径直接替换 location 路径。</p>
</blockquote>
<p>匹配：<br><code>=</code> ：对 URL 精确匹配；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location = /&#123;  &#125;  只能精确匹配 http:fengzhu.top/  </span><br></pre></td></tr></table></figure>
<p><code>^~</code>：对 URL　的最右边部分做匹配检查，不区分字符大小写<br><code>~</code>：对 URL 做正则匹配，区分大小写<br><code>~*</code>：对 URL 做正则匹配，不区分大小写<br>不带符号：匹配起始于此 URL 的所有 URL<br>优先级：=,^<del>,</del>/~*,不带符号</p>
<p><strong>还是要自己配置试试，才能知道具体是怎么运行的</strong></p>
<hr>
<center>just do it</center>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ延时队列</title>
    <url>/2019/11/02/rabbitMQ%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p><img src="/2019/11/02/rabbitMQ%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/rabbitMqDelayQueue.png" alt="Photo by on Unsplash"></p>
<p>在一些业务场景中，会有延迟这种场景出现，比如常见的订单提交之后付款计时，还有一些针对特定用户，比如会员的一些定时优惠的发放，都会在一个时间点去执行，这种一般定时器也是可以实现的，但是如果涉及数据量大，使用定时器处理不是很优的解决方案。这时候就需要了解下 mq 的延迟队列，来更好的实现这个问题。</p>
<a id="more"></a>

<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><ol>
<li>Time-To-Live(TTL)</li>
</ol>
<p>mq 允许给队列设置过期时间 TTL，单位是毫秒，当设有过期时间的消息进入到队列后，说明它只能在队列中 ‘存活’ TTL 时间。过期之后会成为 Dead letter (死信)。</p>
<ol start="2">
<li>Dead Letter Exchange(DLX)</li>
</ol>
<p>消息过期成为死信之后，如果队列设置了 DLX，则会被 push 到 DLX 中等待绑定在 DLX 上的队列消费</p>
<h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>通过上面 2 个机制的配合，就可以实现 mq 延迟队列。给要延迟处理的消息设置指定的过期时间，到期之后被 push 到 DLX，监听 DLX 上的队列进行消费。通过这个机制可以比较优雅的实现延迟机制。</p>
<h4 id="Direct-交换机"><a href="#Direct-交换机" class="headerlink" title="Direct 交换机"></a>Direct 交换机</h4><ol>
<li>创建一个 direct 交换机</li>
</ol>
<p>死信交换机可以用任意类型交换机实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLetterExchangeConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey(),</span><br><span class="line">                <span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>配置枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MqExchangeEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    EXCHANGE_TEST(<span class="string">&quot;exchange_test&quot;</span>, <span class="string">&quot;direct交换机&quot;</span>),</span><br><span class="line">    FANOUT_EXCHANGE_TEST(<span class="string">&quot;fanout_exchange_test&quot;</span>, <span class="string">&quot;fanout交换机&quot;</span>),</span><br><span class="line">    TOPIC_EXCHANGE_TEST(<span class="string">&quot;topic_exchange_test&quot;</span>,<span class="string">&quot;topic交换机&quot;</span>),</span><br><span class="line">    DELAY_EXCHANGE_TEST(<span class="string">&quot;delay_exchange_test&quot;</span>,<span class="string">&quot;死信交换机&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>常量类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MqArgsEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    X_DEAD_LETTER_EXCHANGE(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,<span class="string">&quot;死信交换机参数&quot;</span>),</span><br><span class="line">    X_DEAD_LETTER_ROUTING_KEY(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;死信路由参数&quot;</span>),</span><br><span class="line">    X_MESSAGE_TTL(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="string">&quot;过期时间&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>队列<br>创建队列是重要的步骤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定到 DLX 交换机上面，监听并消费。</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">orderQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(MqQueueEnum.ORDER_QUEUE.getKey(),</span><br><span class="line">            <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 死信队列，消息发送到这个队列中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">orderDeadQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(MqQueueEnum.DEAD_ORDER_QUEUE.getKey())</span><br><span class="line">            .withArgument(MqArgsEnum.X_DEAD_LETTER_EXCHANGE.getKey(), MqExchangeEnum.DELAY_EXCHANGE_TEST.getKey())</span><br><span class="line">            .withArgument(MqArgsEnum.X_DEAD_LETTER_ROUTING_KEY.getKey(), MqRouteKeyEnum.DEAD_LETTER_KEY.getKey())</span><br><span class="line">            .withArgument(MqArgsEnum.X_MESSAGE_TTL.getKey(), <span class="number">10000</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">deadLetterBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queueConfig.orderQueue())</span><br><span class="line">            .to(deadLetterExchangeConfig.delayExchange())</span><br><span class="line">            .with(MqRouteKeyEnum.DEAD_LETTER_KEY.getKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>发消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里最好指定编码，不然会乱码。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deadLetterSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String msg = <span class="string">&quot;死信消息测试&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(MqQueueEnum.DEAD_ORDER_QUEUE.getKey(),msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发完之后在后台界面可以看到死信队列中已经有一条消息，等待过期之后刷新，消息会到绑定的死信交换机上的队列。</p>
</li>
<li><p>消费</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLetterConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;order_queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerDeadLetter</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DEAD_LETTER:&quot;</span> +msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>延迟在很多场景中都会使用的到，如果使用定时任务处理在大数据情况下会产生延迟等问题，这是不能被容忍的，并且使用任务来执行定时任务也不是很优的处理方式。使用 mq 延迟队列的话可以很好的解决对延迟场景下的业务处理，而且姿势比较帅。</p>
</li>
</ol>
<p>mq (官方文档)[<a class="link" href="https://www.rabbitmq.com/dlx.html]">https://www.rabbitmq.com/dlx.html]<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>我命由我不由天</center>


]]></content>
      <categories>
        <category>MQ</category>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot集成Jedis和Redisson</title>
    <url>/2019/11/23/springboot%E9%9B%86%E6%88%90jedis%E5%92%8Credisson/</url>
    <content><![CDATA[<p><img src="/2019/11/23/springboot%E9%9B%86%E6%88%90jedis%E5%92%8Credisson/redisLock.png" alt="Photo by lumberjacck on wallhaven.cc"></p>
<p>redis 最常见的场景就是分布式缓存，分布式锁的场景。它本身提供的数据结构在实现一些功能时要比关系型数据库方便很多，比如点赞，好友关系等功能，并且不用担心并发以及性能问题。这里记录下springboot整合jedis和redisson框架 ヽ(ˋ▽ˊ)ノ</p>
<a id="more"></a>


<h5 id="redisson"><a href="#redisson" class="headerlink" title="redisson"></a>redisson</h5><p>redis Java 客户端，类似 jedis，但是有更加丰富的解决方案，在分布式锁方面也提供了一套 API 来轻松实现分布式锁。<a class="link" href="https://github.com/redisson/redisson/wiki/">reddison wiki<i class="fas fa-external-link-alt"></i></a></p>
<h5 id="spring-boot-整合"><a href="#spring-boot-整合" class="headerlink" title="spring boot 整合"></a>spring boot 整合</h5><ol>
<li>引入 jar 包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置文件</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis 配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.107</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">3000ms</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>jedis 配置类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>redisson 配置类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port).setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>jedis 工具类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 String 类型键值对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取键对应值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>redisson 工具类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> lock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">getLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redissonClient.getLock(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisUtil jedisUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonUtil redissonUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jedis&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setAndGetRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String key = random.nextInt(<span class="number">1000</span>) + <span class="string">&quot;:name&quot;</span>;</span><br><span class="line">        jedisUtil.set(key, <span class="string">&quot;jihe&quot;</span> + key);</span><br><span class="line">        log.info(<span class="string">&quot;获取到的key:&#123;&#125;&quot;</span>,key);</span><br><span class="line">        <span class="keyword">return</span> (String) jedisUtil.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisson&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lockAndUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonUtil.getLock(<span class="string">&quot;2001:product&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;获取到了锁对象&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟处理业务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;处理完成&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>以上只是简单的将 2 个框架整合在一起，在具体业务场景下的一些使用会抽空继续更新。代码<a class="link" href="https://github.com/oliverschen/springBoot/tree/master/springboot-redisson-jedis">github 地址<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>喂马，劈柴，周游世界</center>]]></content>
      <categories>
        <category>Redis</category>
        <category>Lock</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud-config</title>
    <url>/2019/12/15/springcloud-config/</url>
    <content><![CDATA[<p><img src="/2019/12/15/springcloud-config/springcloud-config.png" alt="Photo by Maskarido on wallhaven.cc"></p>
<p>项目拆分成微服务架构之后，各个服务的配置文件会增多，并且每个环境（开发，测试，预发布，生产）都会有各自环境对应的配置，单独管理起来很容易出问题，springcloud-config 就是来解决这个问题的，它将配置文件统一管理，它支持将配置放在配置服务内存中，也支持放在远程 git 仓库中，它和注册中心结构类似，也是由两个部分组成，config server &amp; config client。</p>
<a id="more"></a>

<h4 id="springcloud-config"><a href="#springcloud-config" class="headerlink" title="springcloud-config"></a>springcloud-config</h4><h5 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h5><p>创建 config 工程，引入 config 坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jihe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jihe-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>jihe-config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>config service<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="开启-config-server"><a href="#开启-config-server" class="headerlink" title="开启 config server"></a>开启 config server</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jihe-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/oliverschen/springcloud.git</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">/jihe-config/**</span></span><br><span class="line">          <span class="attr">username:</span> </span><br><span class="line">          <span class="attr">password:</span></span><br><span class="line">      <span class="comment"># 分支名</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><p>创建 <code>user-config-dev.yml</code>，并提交到远程仓库</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">jihe</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">XXX@gmail.com</span></span><br></pre></td></tr></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>访问远程仓库的配置文件 <code>http://localhost:9090/user-config-dev.yml</code> 就可以访问到用户配置文件了。</p>
<h4 id="动态更新配置"><a href="#动态更新配置" class="headerlink" title="动态更新配置"></a>动态更新配置</h4><p>springcloud-config + springcloud-bus 实现配置文件动态刷新。</p>
<h4 id="高可用配置中心"><a href="#高可用配置中心" class="headerlink" title="高可用配置中心"></a>高可用配置中心</h4>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud-eureka</title>
    <url>/2019/04/18/springcloud-eureka/</url>
    <content><![CDATA[<p><img src="/2019/04/18/springcloud-eureka/eureka.png" alt="不如吃茶去"></p>
<p>spring cloud netflix eureka 是对 Netflix 公司开源组件封装后的服务注册与发现组件。主要负责对服务的治理功能。也是微服务的核心组件之一，它由 euraka server 和 eureka client 组成，服务的提供方将服务注册到 eureka server，服务的消费方通过 eureka client 调用在注册中心的服务。这样就完成了服务的提供和调用。</p>
<a id="more"></a>

<h4 id="eureka"><a href="#eureka" class="headerlink" title="eureka"></a>eureka</h4><h5 id="续约"><a href="#续约" class="headerlink" title="续约"></a>续约</h5><p>服务的续约：应用内的 eureka client 后台会启动一个定时任务，跟 eureka server 保持心跳续约任务。每个一段时间（默认30s）向 eureka server 发送一次 renew 请求进行续约，告诉 eureka server 自己还活着，防止被 eureka server 的 evict 任务剔除掉。</p>
<h5 id="下线"><a href="#下线" class="headerlink" title="下线"></a>下线</h5><p>服务下线：应用内的 eureka client 在应用停止后，向 eureka server 发送 cancel 请求，告诉注册中心自己已经关闭了， eureka server 收到请求后会将其移除注册列表，防止消费端消费不可用的服务。</p>
<h5 id="剔除"><a href="#剔除" class="headerlink" title="剔除"></a>剔除</h5><p>服务剔除：eureka server 启动后在后台会启动一个 evict 任务，对一定时间没有续约的服务进行剔除。</p>
<h4 id="eureka-server"><a href="#eureka-server" class="headerlink" title="eureka server"></a>eureka server</h4><h5 id="pom-坐标"><a href="#pom-坐标" class="headerlink" title="pom 坐标"></a>pom 坐标</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jihe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jihe-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>jihe-eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>eureka server<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果是第一次引入的话要下载依赖包，可能需要一会。</p>
<h5 id="开启-eureka-server"><a href="#开启-eureka-server" class="headerlink" title="开启 eureka server"></a>开启 eureka server</h5><p>在启动类加入注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheEurekaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheEurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jihe-eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 为 true 时注册中心会尝试注册自己，这里关闭。但是集群时需要打开，因为注册中心会相互注册</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 为 true 时服务中心进行服务检索</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:$&#123;server.port&#125;/eureka/</span>  <span class="comment"># 注册中心地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>现在启动服务，访问 <a class="link" href="http://localhost:8080/">http://localhost:8080<i class="fas fa-external-link-alt"></i></a> 就可以看到 eureka server 页面了。</p>
<h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>这里以用户 user 服务来充当服务的提供者</p>
<h5 id="pom-坐标-1"><a href="#pom-坐标-1" class="headerlink" title="pom 坐标"></a>pom 坐标</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jihe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jihe-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>jihe-user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>user service<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheUserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheUserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jihe-user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册到服务中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8080/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样就注册好服务了，现在访问 <a class="link" href="http://localhost:8080/">http://localhost:8080<i class="fas fa-external-link-alt"></i></a> 注册中心页面就可以看到已经注册的服务</p>
<p><strong>Instances currently registered with Eureka</strong></p>
<table>
<thead>
<tr>
<th>Application</th>
<th>AMIs</th>
<th>Availability Zones</th>
<th>Status</th>
</tr>
</thead>
<tbody><tr>
<td>JIHE-USER</td>
<td>n/a (1)</td>
<td>(1)</td>
<td>UP (1) - 192.168.0.104:jihe-user:8081</td>
</tr>
</tbody></table>
<p>到这里服务的注册和发现就完成了，可以看到服务提供者讲服务注册到服务中心，供服务的消费者调用服务,那微服务之间是如何调用的呢？下面看下另外一个组件。</p>
<h4 id="提供接口"><a href="#提供接口" class="headerlink" title="提供接口"></a>提供接口</h4><p>在 user 服务中创建 UserController,并向外抛一个可以访问的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + id + <span class="string">&quot;号用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><p>订单 order 服务充当 user 服务的消费者</p>
<h5 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jihe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jihe-order<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>jihe-order<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>order service<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jihe-order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册到服务中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8080/eureka/</span></span><br></pre></td></tr></table></figure>
<h4 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h4><p>spring 提供了一个 rest 接口调用组件 restTemplate 来调用其他服务，这里使用它来调用 user 服务接口，在订单服务中，创建 restTemplate 实例对象。</p>
<h5 id="启动类配置"><a href="#启动类配置" class="headerlink" title="启动类配置"></a>启动类配置</h5><p>消费者端开启服务发现和 Feign 客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="消费者远程调用接口"><a href="#消费者远程调用接口" class="headerlink" title="消费者远程调用接口"></a>消费者远程调用接口</h5><p>创建 OderService 类，调用 user 服务（这里直接写了具体的类，没有使用接口的方式）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://jihe-user/user/&#123;id&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OderService oderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/order/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderAndUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String user = oderService.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是：&quot;</span> + name + <span class="string">&quot;,&quot;</span> + user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里就完成了微服务模块最小的一个结构，<code>服务注册中心</code>，<code>服务提供者</code>，<code>服务调用者</code>。先启动 注册中心，然后在启动服务提供者，在启动服务调用者，在浏览器可以测试，直接访问服务的提供者，是可以访问到。通过调用者，也可以直接访问到服务的提供者，但是访问的端口和路径是不一样的。如果熟悉 spring boot 的话其实 spring cloud 的简单使用并不难，继续加油。<br>以上代码<a class="link" href="https://github.com/oliverschen/springcloud">地址<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>不积跬步，无以至千里</center>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud-feign</title>
    <url>/2019/12/15/springcloud-feign/</url>
    <content><![CDATA[<p><img src="/2019/12/15/springcloud-feign/springcloud-feign.png" alt="Photo by kejsirajbek on wallhaven.cc"></p>
<p>在远程调用时，Java 提供了 UrlConnection 来进行远程调用，也有 Apace 封装的 HttpClient 库进行调用。 在<a class="link" href="https://fengzhu.top/2019/04/18/springcloud-eureka/">eureka<i class="fas fa-external-link-alt"></i></a>中的例子使用了 RestTemplate 来进行服务调用，feign 也一样，是一个远程调用组件，它是以接口的方式来进行调用，时调用姿势更加优雅，使用起来更加方便。<a class="link" href="https://spring.io/projects/spring-cloud-openfeign#overview">官网地址<i class="fas fa-external-link-alt"></i></a></p>
<a id="more"></a>

<h4 id="feign"><a href="#feign" class="headerlink" title="feign"></a>feign</h4><p>改造 <a class="link" href="https://fengzhu.top/2019/04/18/springcloud-eureka/">eureka<i class="fas fa-external-link-alt"></i></a>中的例子，将 restTemplate 修改成 feign 调用。</p>
<h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="开启-feign"><a href="#开启-feign" class="headerlink" title="开启 feign"></a>开启 feign</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启 feign 客户端</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="接口方式调用"><a href="#接口方式调用" class="headerlink" title="接口方式调用"></a>接口方式调用</h5><p>feign 调用是以接口的方式进行 http 调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;jihe-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function">String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>@FeignClient 指定具体要调用的服务应用名。</li>
<li>@RequestMapping 指定要调用的服务路径，请求方式。</li>
</ol>
<h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Autowired</span></span><br><span class="line">    <span class="comment">// private OderService oderService;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestMapping(&quot;/order/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// public String getOrderAndUserInfo(@PathVariable(&quot;name&quot;) String name, @PathVariable(&quot;id&quot;) int id) &#123;</span></span><br><span class="line">    <span class="comment">//     String user = oderService.getUser(id);</span></span><br><span class="line">    <span class="comment">//     return &quot;我是：&quot; + name + &quot;,&quot; + user;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FeignService feignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/order-feign/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderAndUserInfoByFeign</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String user = feignService.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FEIGN-我是：&quot;</span> + name + <span class="string">&quot;,&quot;</span> + user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引入 feign 接口，直接调用接口中的方法，实现对远程服务的调用。实现方式很快捷方便。访问 <code>http://localhost:8082/order-feign/jihe/1002</code> 这个路径，可以看到具体的结果。</p>
<hr>
<center></center>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud-ribbon</title>
    <url>/2019/12/15/springcloud-ribbon/</url>
    <content><![CDATA[<p><img src="/2019/12/15/springcloud-ribbon/springcloud-ribbon.png" alt="Photo by kejsirajbek on wallhaven.cc"></p>
<p>一般负载均衡指的是服务端的负载均衡，硬件有 F5 等设备，软件方面有 nginx 等。负载均衡是系统在高可用和容灾性等方面的重要的解决方案之一。而 Ribbon 是一款基于客户端的负载均衡应用。<br>我的理解是，请求没有到达应用之前，是由 nginx 来进行请求分发，决定进入到那个服务，当请求进入到服务之后，在服务调用时由 Ribbon 来进行服务之间请求分发，实现内网应用的负载均衡。</p>
<a id="more"></a>


<h4 id="ribbon"><a href="#ribbon" class="headerlink" title="ribbon"></a>ribbon</h4><p>一般 <code>spring-cloud-starter-netflix-eureka-client</code> 已经引入了 ribbon 组件，在使用时直接进行使用就可以了。</p>
<h5 id="LoadBalanced"><a href="#LoadBalanced" class="headerlink" title="@LoadBalanced"></a>@LoadBalanced</h5><p>负载均衡注解，官方解释 <code>Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient.</code> 大概意思是 让 restTemplate 实例配置使用负载均衡客户端。</p>
<h5 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h5><h6 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h6><h6 id="随机获取"><a href="#随机获取" class="headerlink" title="随机获取"></a>随机获取</h6><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>使用在 <a class="link" href="https://fengzhu.top/2019/04/18/springcloud-eureka/">eureka<i class="fas fa-external-link-alt"></i></a>中的例子来进行使用。</p>
<h6 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h6><p>在订单服务启动时加载负载均衡配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载均衡注解</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>请求到服务时打印端口信息，方便测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + id + <span class="string">&quot;号用户&quot;</span> + <span class="string">&quot;,访问端口：&quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><ol>
<li><p>首先要在 idea 开启并行启动，在 idea 右上角编辑服务栏打开 <code>Edit Configurations</code> ，进入到编辑页面后，右上角会有和复选框 <code>Allow Parallel run</code> ，选择之后项目修改端口后就可以启动多个实列了。</p>
</li>
<li><p>修改端口号，同时启动 3 和 user 服务。</p>
</li>
<li><p>使用 order 服务调用 user 服务，通过不同的端口号打印信息，会看到 ribbon 默认是轮询的方式来负载均衡请求客户端的。</p>
</li>
</ol>
<hr>
<center></center>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud-hystrix(二)</title>
    <url>/2019/04/25/springcloud-hystrix/</url>
    <content><![CDATA[<p><img src="/2019/04/25/springcloud-hystrix/hystrix.png" alt="行到水穷处，坐看云起时"></p>
<p>springcloud hystrix 熔断器，顾名思义。在现实生活中也有很多熔断器，像家里的过载保护开关就充当这个角色，当有用电器过载或者发生短路时，就能及时切断电路，避免造成更大的损坏。hystrix 在整个微服务系统中也充当类似这种角色，但是它的功能要远比刚刚这个例子要丰富的多。</p>
<a id="more"></a>

<h4 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h4><p>通俗来讲雪崩效应就是有一处发生雪崩可能会造成大面积雪崩的现象。在微服务系统中，多个服务之间存在相互之间的调用，如果有一处服务出现物理故障或者其他故障，如果不及时处理，可能会造成更多服务的故障甚至会影响整个系统瘫痪。这种现象可能发生在大量请求调用某个服务，导致此服务出现等待甚至崩溃后，致使其他服务也出现等待等现象，直到导致整个系统崩溃。这是一件可怕的事情，不过好在我们部署服务的时候一般都是集群部署，保证高可用。但是在实际业务场景中，可能会存在很多情况发生，熔断机制是保护服务高可用的最后一道防线。</p>
<h4 id="hystrix"><a href="#hystrix" class="headerlink" title="hystrix"></a>hystrix</h4><p>hystrix 一般部署在服务的调用方，也就是服务的消费放，我这里创建的项目和昨天的一样，今天会多创建一个服务的调用方，来部署 hystrix</p>
<h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ol>
<li>请求熔断：当请求到达服务失败的数量到达一定比例（默认50%），断路器会自动切换到 Open 状态，这时所有的请求会直接失败，不会发送到具体的服务，一般断路器 Open 状态一段时间（默认5秒）后，自动切换到 HALF-Open 半开状态。这时会判断下次请求，如果成功，则切换到 CLOSE 关闭状态。否则重新回到 Open 状态。</li>
<li>服务降级：FallBack 相当于服务降级操作，当服务不可用时走异常处理逻辑返回一个默认结果，告知调用方服务处于异常状态。</li>
</ol>
<h5 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h5><p>也是依赖 <a class="link" href="https://fengzhu.top/2019/04/18/springcloud-eureka/">eureka<i class="fas fa-external-link-alt"></i></a>中的例子来进行集成 Hystrix 使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="comment">// 开启 Hystrix</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="开启-hystrix"><a href="#开启-hystrix" class="headerlink" title="开启 hystrix"></a>开启 hystrix</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启 hystrix</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="fallback"><a href="#fallback" class="headerlink" title="fallback"></a>fallback</h5><p>之前我们使用 feigin 进行远程调用，现在 feign 配合 hystrix 进行使用，首先使用 @FeignClient 注解中的回调参数 fallback 指定具体的回调类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;jihe-user&quot;,fallback = FeignServiceFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function">String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="回调实现类"><a href="#回调实现类" class="headerlink" title="回调实现类"></a>回调实现类</h5><p>编写具体的回调实现类，继承远程调用接口,编写相应的回调处理逻辑。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignServiceFallBack</span> <span class="keyword">implements</span> <span class="title">FeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user service is busy,please wait&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到这里工程就搭建好了，按顺序启动项目。访问 order 服务 <code>http://localhost:8082/order-feign/jihe/1002</code> 会看到 <code>FEIGN-我是：jihe,我是1002号用户,访问端口：8081</code> 的结果，这是服务正常情况下的结果，现在将 user 服务直接关机，然后访问，则返回熔断后的结果 <code>FEIGN-我是：jihe,user service is busy,please wait</code>。</p>
<hr>
<center>天涯远不远？人就在天涯，天涯怎会远呢</center>








]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2019/04/18/springcloud/</url>
    <content><![CDATA[<p><img src="/2019/04/18/springcloud/springcloud.png" alt="大多数人的生活，是无数次选择的结果"></p>
<p>最近两年微服务架构特别火，很多公司都投身到微服务的怀抱。面试的时候面试官也一定会问有没有用过或者了解过微服务，微服务的火热可见一斑。很多公司都在微服务的路上试探，我们公司也不例外。目前一般 Java 为基础的公司大多用的都是 spring 全家桶，而近年出了 spring boot 和 spring cloud，为微服务提供了一站式解决方案。</p>
<a id="more"></a>

<h4 id="什么是-Spring-boot"><a href="#什么是-Spring-boot" class="headerlink" title="什么是 Spring boot"></a>什么是 Spring boot</h4><p>官方是这样介绍的：“spring boot 可以轻松创建独立的企业级应用。”<br>它是对 spring 框架的封装，简化了开发流程，专注于开发功能。去除传统 xml 配置的方式。以 java 代码配合注解的方式实现配置，更易于理解和编写。因为它的这些特性，它也成为了开发微服务系统的基础。之前 spring 能开发的它都可以做到，并且更快速，更高效。</p>
<h4 id="什么是-Spring-Cloud"><a href="#什么是-Spring-Cloud" class="headerlink" title="什么是 Spring Cloud"></a>什么是 Spring Cloud</h4><p>spring cloud 是一系列框架的集合，它包含了 服务的注册、发现，服务网关，配置中心、消息总线、负载均衡、断路器、数据监控等，而这些组件中大部分也不是 spring 公司研发的，而是基于现有的一些优秀开源框架进行二次封装的。当然这也是 spring 不重复造轮子的理念。而这些服务的开发都是基于 spring boot 这款优秀的框架的。spring cloud 现有组件都有 20 多个，而且还在新增中。</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>可扩展性强：可以针对需求方便的进行扩展</li>
<li>弹性：各个组件独立部署，单个组件故障不会导致雪崩效应，系统还是正常运行</li>
<li>组合性高：不同服务之间的不同组合，可以完成不同业务的开发。</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>运维成本增高</li>
<li>系统复杂性增高</li>
</ol>
<h4 id="spring-boot-和-spring-cloud"><a href="#spring-boot-和-spring-cloud" class="headerlink" title="spring boot 和 spring cloud"></a>spring boot 和 spring cloud</h4><p>上面分别了解了 spring boot 和 spring cloud 之后相信对他们的区别和联系也有了认识。简单来说，没有 spring cloud，spring boot 是可以独立创建应用，并且投入生产不会有影响。而 spring cloud 的开发却离不开 spring boot 的支持。也就是说  spring cloud 是基于 spring boot 的，分清楚两者关系在学习微服务架构的时候就会有一个整体的概念，学好 spring boot 意味着 spring cloud 开发也会顺畅很多。</p>
<h4 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h4><p>dubbo 是阿里开源的一款服务治理中间件，在国内特别火，并且其有一个强大的监控后台，最近又开始了更新。相信未来在服务治理方面会做的更好。</p>
<h4 id="spring-cloud-和-dubbo"><a href="#spring-cloud-和-dubbo" class="headerlink" title="spring cloud 和 dubbo"></a>spring cloud 和 dubbo</h4><p>下面是一张它们核心功能对比表。</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>dubbo</th>
<th>spring cloud</th>
</tr>
</thead>
<tbody><tr>
<td>服务注册中心</td>
<td>zookeeper</td>
<td>Eureka 等等..</td>
</tr>
<tr>
<td>服务网关</td>
<td>无</td>
<td>Zuul 等..</td>
</tr>
<tr>
<td>断路器</td>
<td>不完善</td>
<td>Hystrix</td>
</tr>
<tr>
<td>配置中心</td>
<td>无</td>
<td>Config</td>
</tr>
<tr>
<td>链路追踪</td>
<td>无</td>
<td>Slenth</td>
</tr>
<tr>
<td>消息总线</td>
<td>无</td>
<td>Bus</td>
</tr>
</tbody></table>
<p>其实直接把 dubbo 和 spring cloud 放在一起对比是不公平的，spring cloud 是封装了很多优秀组件之后的一个微服务解决方案的集合，而 dubbo 更专注于服务治理，在服务治理和监控方面做的比是spring cloud 还要优秀。</p>
<p>总的来说 spring cloud 有 spring 这个强大的组织做背书，在未来微服务方向肯定是所向披靡的，但是 dubbo 在服务治理方面也会一枝独秀，毕竟在阿里这样体量的公司和实际的业务场景下，它只会进化的越来越完善，越来越优秀。</p>
<hr>
<center>愿你 平安喜乐</center>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud-zuul</title>
    <url>/2019/12/15/springcloud-zuul/</url>
    <content><![CDATA[<p><img src="/2019/12/15/springcloud-zuul/springcloud-zuul.png" alt="Photo by kejsirajbek on wallhaven.cc"></p>
<p>服务网关时微服务架构中服务的统一入口，除了服务路由分发，负载均衡等，还具备鉴权等功能。zuul 就是 springcloud 中提供服务网关的组件。</p>
<a id="more"></a>

<p><img src="/2019/12/15/springcloud-zuul/zuul-user.png" alt="网关作为微服务架构统一入口"></p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>易于监控：可以在网关收集监控数据将其推送到外部系统进行分析。</li>
<li>易于认证：在网关进行鉴权等，通过后在将请求分发到具体服务。请求进入网关之后，各个微服务之间进行无状态调用。</li>
<li>易于重构：客户端和服务之后交互入口统一，在后期服务重构等操作时，可以进行客户端无感知重构。</li>
</ol>
<h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><h5 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h5><p>引入 zuul pom 坐标。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jihe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jihe-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>jihe-zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>zuul service<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jihe-zuul</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册到服务中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8080/eureka/</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment"># 自定义路由</span></span><br><span class="line">    <span class="attr">api-order:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">jihe-order</span></span><br><span class="line">    <span class="attr">api-user:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-user/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">jihe-user</span></span><br></pre></td></tr></table></figure>
<h5 id="配置启动类"><a href="#配置启动类" class="headerlink" title="配置启动类"></a>配置启动类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在自定义路由部分可以自己按照需求来自定义路由分发，上面当请求是 <code>/api-order/**</code> 开头时，统一走 <code>jihe-order</code> 服务，当请求是 <code>api-user</code> 时，统一走 <code>jihe-user</code> 服务。 <code>*</code> 匹配任何路径。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动注册中心，启动网关和用户服务，访问 user 服务 <code>http://localhost:8081/user/1</code> 返回结果 <code>我是1号用户,访问端口：8081</code>，现在通过网关访问 user 服务 <code>http://localhost:9999/api-user/user/1</code> 返回结果 <code>我是1号用户,访问端口：8081</code>，通过网关，将 <code>api-user</code> 路由请求分发到了 user 服务，这里也可以用服务名来调用 <code>http://localhost:9999/jihe-user/user/1</code> 也是返回相同的结果。</p>
<h5 id="忽略服务名访问"><a href="#忽略服务名访问" class="headerlink" title="忽略服务名访问"></a>忽略服务名访问</h5><p>需要在配置文件添加下面配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment"># 自定义路由</span></span><br><span class="line">    <span class="attr">api-order:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">jihe-order</span></span><br><span class="line">    <span class="attr">api-user:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-user/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">jihe-user</span></span><br><span class="line">  <span class="comment"># 忽略通过服务名访问</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>
<p>配置之后通过服务名将访问不到资源。</p>
<h5 id="绑定-url-映射"><a href="#绑定-url-映射" class="headerlink" title="绑定 url 映射"></a>绑定 url 映射</h5><p>跳转到指定的路由。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">baidu:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://www.baidu.com</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/baidu/**</span></span><br></pre></td></tr></table></figure>
<h5 id="url-映射负载均衡"><a href="#url-映射负载均衡" class="headerlink" title="url 映射负载均衡"></a>url 映射负载均衡</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 请求服务负载均衡</span></span><br><span class="line"><span class="attr">jihe-user:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">listOfServers:</span> <span class="string">http://ke.qq.com/,http://www.imooc.com/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">class:</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">jihe-user</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/ketang/**</span></span><br></pre></td></tr></table></figure>
<p>请求 <code>http://localhost:9999/ketang</code> 请求线性负载到 listOfServers 中的服务。</p>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>配置统一过滤器，进行鉴权等操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jihe.zuul.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 统一过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ck</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019-12-15 22:16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包含类型：</span></span><br><span class="line"><span class="comment">     * pre:路由代理之前执行</span></span><br><span class="line"><span class="comment">     * route：代理时执行</span></span><br><span class="line"><span class="comment">     * error：代理出错执行</span></span><br><span class="line"><span class="comment">     * post：route || error 之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 之前执行</span></span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存在多个过滤器时执行顺序</span></span><br><span class="line"><span class="comment">     * 数字越小，优先级越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行过滤器：true 需要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体执行逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;enter UnionFilter,auth begin&quot;</span>);</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取到 request 对象，进行鉴权等操作</span></span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                context.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">                context.setResponseStatusCode(<span class="number">400</span>);</span><br><span class="line">                context.getResponse().getWriter().println(<span class="string">&quot;auth failed,please reload&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置好过滤器之后访问 <code>http://localhost:9999/api-user/user/1</code> 服务，直接返回 <code>auth failed,please reload</code> 结果，鉴权失败，请重试。</p>
<p>网关将鉴权等操作和服务分离出来，并且将整个微服务架构统一入口，也是微服务架构中重要的环节之一。以上就是 zuul 学习中的一些记录。</p>
<h4 id="用户系统集成-swagger"><a href="#用户系统集成-swagger" class="headerlink" title="用户系统集成 swagger"></a>用户系统集成 swagger</h4><h5 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h5><p>swagger 是一个 Restfull 接口文档在线自动生成和测试框架</p>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol>
<li>及时更新文档：修改接口之后，接口文档即使更新，提高和前端，测试沟通效率。</li>
<li>方便测试：可以给到测试接口测试信息，避免手写文档</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>代码侵入太高。</p>
<h5 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jihe.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: swagger config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ck</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019-12-16 00:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createTestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.jihe.user.controller&quot;</span>))</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;用户系统Api&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;用户系统接口文档&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> springfox.documentation.service.Contact(<span class="string">&quot;jihe&quot;</span>, <span class="string">&quot;http://fengzhu.top&quot;</span>,<span class="string">&quot;XXX@gmail.com&quot;</span>))</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(&quot;用户系统-API&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;返回用户服务信息&quot;,notes = &quot;根据 ID 返回用户和服务信息&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;id&quot;,value = &quot;用户ID&quot;,required = true,dataType = &quot;Integer&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + id + <span class="string">&quot;号用户&quot;</span> + <span class="string">&quot;,访问端口：&quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上 swagger 就集成好了，启动注册中心，启动 user 服务访问 <code>http://localhost:8081/swagger-ui.html</code> 就可以看到具体的接口文档。不过通过上面的代码也可以看出来 swagger 对代码的侵入性很高，本来简单的代码写了很多东西。果然有利则有弊。 </p>
<h4 id="zuul-集成-swagger"><a href="#zuul-集成-swagger" class="headerlink" title="zuul 集成 swagger"></a>zuul 集成 swagger</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>开启</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiheZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JiheZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jihe.zuul.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: swagger config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ck</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019-12-16 00:26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> <span class="keyword">implements</span> <span class="title">SwaggerResourcesProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RouteLocator routeLocator;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwaggerConfig</span><span class="params">(RouteLocator routeLocator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routeLocator = routeLocator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List resources = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        resources.add(swaggerResource(<span class="string">&quot;订单系统&quot;</span>, <span class="string">&quot;/api-order/v2/api-docs&quot;</span>, <span class="string">&quot;1.0&quot;</span>));</span><br><span class="line">        resources.add(swaggerResource(<span class="string">&quot;用户系统&quot;</span>, <span class="string">&quot;/api-user/v2/api-docs&quot;</span>, <span class="string">&quot;1.0&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SwaggerResource <span class="title">swaggerResource</span><span class="params">(String name, String location, String version)</span> </span>&#123;</span><br><span class="line">        SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource();</span><br><span class="line">        swaggerResource.setName(name);</span><br><span class="line">        swaggerResource.setLocation(location);</span><br><span class="line">        swaggerResource.setSwaggerVersion(version);</span><br><span class="line">        <span class="keyword">return</span> swaggerResource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在浏览器访问 <code>http://localhost:9999/swagger-ui.html</code> 可以看到右上角有个下拉选择框(Select a spec) 不同服务的接口在不同的分区下面。</p>
<p>今天重新看了一遍 <code>启示录</code>，还是很震撼，血腥而真实。还有一个月左右就要 2020 了，年初的 flag ，实现了几个？？？</p>
<hr>
<center>看完一本书，一部电影，真正留下来的是什么?</center>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>timeline</title>
    <url>/2019/03/25/timeline/</url>
    <content><![CDATA[<p><img src="/2019/03/25/timeline/timeline.png"></p>
<center>时间旅途</center>   

<a id="more"></a>

<p><img src="/2019/03/25/timeline/%E4%B8%80%E7%94%9F%E6%89%80%E7%88%B1.png"></p>
<p>时间线</p>
<hr>
<p>2015 年 3 月 14 号，我们在一起了。</p>
<p>那时我没有送她最爱的满天星</p>
<p>我们喜欢在学校周围的街边散步，一走就是几个小时。</p>
<p>感觉很开心。</p>
<p>在最好的年纪一起开心大笑过，一起流过泪。</p>
<p>市中心那家面馆</p>
<p>健身房下面的那家冰激凌店，还有农场里没有全开的樱花。</p>
<p>综合楼前的操场。</p>
<p>时间过的很快，转眼就毕业了。</p>
<p>时间走了，我们都在。</p>
<p>我很幸运。</p>
<hr>
<p>现在</p>
<p>我们一起徒步上过华山，虽然这辈子都不想在爬第二次，但是觉得很值得。</p>
<p>6 月份的天在青海穿着棉袄</p>
<p>我们饶了青海湖一圈。</p>
<p>刚察很好玩，北方城市的沧桑和寂静给人不一样的感觉。</p>
<p>在重庆吃火锅，你眼睛不小心进了辣椒油，吃完感觉没有嘴了。</p>
<p>但我们还是默默都说还会再来。</p>
<p>到洪崖洞挤过人，也看了网红轻轨。</p>
<p>还有那个全是我们足迹的小岛。</p>
<p>这只是开始。</p>
<p>之前有些东西放在 aboutme, 本来是要给删了，但是想了下还是留下，就像中学时代的空间留言一样，那是当时时间的自己</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##梦想</span><br><span class="line">做人如果没有梦想，跟咸鱼有什么区别？</span><br><span class="line"></span><br><span class="line">##旅途</span><br><span class="line">如果你足够幸运，年轻时候在巴黎居住过，那么此后无论你到哪里，巴黎都将一直跟着你。</span><br><span class="line"></span><br><span class="line">## 遗憾</span><br><span class="line">人生如果没有遗憾，那该多无聊？</span><br><span class="line"></span><br><span class="line">## 我</span><br><span class="line">good good study, day day up.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>we</category>
      </categories>
      <tags>
        <tag>we</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2020/01/08/tomcat/</url>
    <content><![CDATA[<p><img src="/2020/01/08/tomcat/tomcat.png" alt="Photo by MatrizenDesign on wallhaven.cc"></p>
<p>Tomcat 是一款轻量级 Web 容器，也是目前使用最广泛的应用服务器之一，Springboot 内嵌的默认服务器就是 Tomcat。</p>
<a id="more"></a>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Sun公司在其API中提供了一个servlet接口，用户若想用发一个动态web资源(即开发一个Java程序向浏览器输出数据)，需要完成以下2个步骤：</p>
<ol>
<li>编写一个Java类，实现servlet接口</li>
<li>把开发好的Java类部署到web服务器中</li>
</ol>
<h3 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h3><p>Servlet 程序是由WEB服务器调用，web 服务器收到客户端的 Servlet 访问请求后：</p>
<ol>
<li>Web 服务器首先检查是否已经装载并创建了该 Servlet 的实例对象。如果是，则直接执行第 4 步，否则，执行第 2 步。</li>
<li>装载并创建该 Servlet 的一个实例对象。</li>
<li>调用 Servlet 实例对象的 init() 方法。</li>
<li>创建一个用于封装 HTTP 请求消息的 HttpServletRequest 对象和一个代表 HTTP 响应消息的HttpServletResponse 对象，然后调用 Servlet 的 service() 方法并将请求和响应对象作为参数传递进去。</li>
<li>WEB 应用程序被停止或重新启动之前，Servlet 引擎将卸载 Servlet，并在卸载之前调用 Servlet 的 destroy() 方法。</li>
</ol>
<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>Servlet 接口 SUN 公司定义了两个默认实现类，分别为：GenericServlet、HttpServlet。</p>
<ol>
<li>HttpServlet 指能够处理 HTTP 请求的 Servlet，它在原有 Servlet 接口上添加了一些与 HTTP 协议处理方法，它比 Servlet 接口的功能更为强大。因此开发人员在编写 Servlet 时，通常应继承这个类，而避免直接去实现 Servlet 接口。</li>
<li>HttpServlet 在实现 Servlet 接口时，覆写了 service 方法，该方法体内的代码会自动判断用户的请求方式，如为 GET 请求，则调用 HttpServlet 的doGet 方法，如为 Post 请求，则调用 doPost 方法。因此，在编写 Servlet 时，通常只需要覆写 doGet 或 doPost 方法，而不要去覆写 service 方法。</li>
</ol>
<h3 id="URL-映射"><a href="#URL-映射" class="headerlink" title="URL 映射"></a>URL 映射</h3><p>由于客户端是通过 URL 地址访问 web 服务器中的资源，所以 Servlet 程序若想被外界访问，必须把 Servlet 程序映射到一个 URL 地址上，这个工作在 <code>web.xml</code> 文件中使用 <code>&lt;servlet&gt;</code> 元素和 <code>&lt;servlet-mapping&gt;</code> 元素完成。</p>
<h4 id><a href="#" class="headerlink" title></a><servlet></servlet></h4><p>该标签用于注册 Servlet，它包含有两个主要的子标签：<code>&lt;servlet-name&gt;</code> 和 <code>&lt;servlet-class&gt;</code> ，分别用于设置 Servlet 的注册名称和Servlet 的完整类名。</p>
<h4 id="-1"><a href="#-1" class="headerlink" title></a><servlet-mapping></servlet-mapping></h4><p>该标签用于映射一个已注册的 Servlet 的一个对外访问路径，它包含有两个子元素：</p>
<p><code>&lt;servlet-name&gt;</code> 和 <code>&lt;url-pattern&gt;</code> ，分别用于指定 Servlet 的注册名称和 Servlet 的对外访问路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;ck&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;HelloServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;ck&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;ck.html&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>同一个 Servlet 可以被映射到多个 URL 上，即多个 <code>&lt;servlet-mapping&gt;</code> 元素的 <code>&lt;servlet-name&gt;</code> 子元素的设置值可以是同一个 Servlet 的注册名。</li>
<li>在 Servlet 映射到的 URL 中也可以使用 <code>*</code> 通配符，但是只能有两种固定的格式：一种格式是 <code>*.扩展名</code> ，另一种格式是以正斜杠 <code>/</code> 开头并以 <code>/*</code> 结尾。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;url-pattern&gt;*.do&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;url-pattern&gt;&#x2F;action&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li>Servlet是一个供其他 Java 程序（Servlet 引擎）调用的 Java 类，它不能独立运行，它的运行完全由 Servlet 引擎来控制和调度。</li>
<li>针对客户端的多次 Servlet 请求，通常情况下，服务器只会创建一个 Servlet 实例对象，也就是说 Servlet 实例对象一旦创建，它就会驻留在内存中，为后续的其它请求服务，直至 web 容器退出，Servlet 实例对象才会销毁。</li>
<li>在 Servlet 的整个生命周期内，Servlet 的 init 方法只被调用一次。而对一个 Servlet 的每次访问请求都导致 Servlet 引擎调用一次 Servlet 的 service方法。对于每次访问请求，Servlet 引擎都会创建一个新的 HttpServletRequest 请求对象和一个新的 HttpServletResponse 响应对象，然后将这两个对象作为参数传递给它调用的 Servlet 的 service() 方法，service 方法再根据请求方式分别调用 doXXX 方法。</li>
<li>在 <servlet> 元素中配置了一个 <load-on-startup> 元素，那么 WEB 应用程序在启动时，就会装载并创建 Servlet 的实例对象、以及调用 Servlet 实例对象的 init() 方法。</load-on-startup></servlet></li>
<li>如果某个 Servlet 的映射路径仅仅为一个正斜杠 <code>/</code> ，那么这个 Servlet 就成为当前 Web 应用程序的默认 Servlet。</li>
<li>凡是在 web.xml 文件中找不到匹配的 <servlet-mapping> 元素的 URL，它们的访问请求都将交给缺省 Servlet 处理，也就是说，缺省 Servlet 用于处理所有其他 Servlet 都不处理的访问请求。</servlet-mapping></li>
<li>在 &lt;tomcat的安装目录&gt;\conf\web.xml 文件中，注册了一个名称为 org.apache.catalina.servlets.DefaultServlet 的 Servlet，并将这个 Servlet 设置为了缺省 Servlet。</li>
<li>当访问 Tomcat 服务器中的某个静态 HTML 文件和图片时，实际上是在访问这个缺省 Servlet。</li>
<li>当多个客户端并发访问同一个 Servlet 时，web 服务器会为每一个客户端的访问请求创建一个线程，并在这个线程上调用 Servlet 的 service 方法，因此 service 方法内如果访问了同一个资源的话，就有可能引发线程安全问题。</li>
</ol>
<h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><ol>
<li>在 Servlet 的配置文件中，可以使用一个或多个 <init-param> 标签为 servlet 配置一些初始化参数。</init-param></li>
<li>当 servlet 配置了初始化参数后，web 容器在创建 servlet 实例对象时，会自动将这些初始化参数封装到 ServletConfig 对象中，并在调用 servlet 的init 方法时，将 ServletConfig 对象传递给 servlet。进而通过 ServletConfig 对象就可以得到当前 servlet 的初始化参数信息。</li>
</ol>
<h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><ol>
<li>WEB 容器在启动时，它会为每个 WEB 应用程序都创建一个对应的 ServletContext 对象，它代表当前 web 应用。</li>
<li>ServletConfig 对象中维护了 ServletContext 对象的引用，开发人员在编写 servlet 时，可以通过 ServletConfig.getServletContext 方法获得ServletContext 对象。</li>
<li>由于一个 WEB 应用中的所有 Servlet 共享同一个 ServletContext 对象，因此 Servlet 对象之间可以通过 ServletContext 对象来实现通讯。ServletContext 对象通常也被称之为 context 域对象。</li>
</ol>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ol>
<li>多个 Servlet 通过 ServletContext 对象实现数据共享。</li>
<li>获取 WEB 应用的初始化参数。</li>
<li>实现 Servlet 的转发。</li>
<li>对于不经常变化的数据，在 servlet 中可以为其设置合理的缓存时间值，以避免浏览器频繁向服务器发送请求，提升服务器的性能。</li>
<li>利用 ServletContext 对象读取资源文件。</li>
<li>得到文件路径</li>
<li>读取资源文件的三种方式</li>
<li>properties文件（属性文件）</li>
</ol>
<h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Servlet API 中提供了一个 Filter 接口，开发 web 应用时，如果编写的 Java 类实现了这个接口，则把这个 java 类称之为过滤器 Filter。通过 Filter 技术，开发人员可以实现用户在访问某个目标资源之前，对访问的请求和响应进行拦截。</p>
<h4 id="拦截流程"><a href="#拦截流程" class="headerlink" title="拦截流程"></a>拦截流程</h4><p>Filter 接口中有一个 doFilter()，配置对哪个 web 资源进行拦截后，WEB 服务器每次在调用 web 资源的 <strong>service() 方法之前</strong>，都会先调用一下 Filter 的 doFilter()。</p>
<h4 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h4><ol>
<li>web 服务器在调用 doFilter 方法时，会传递一个 filterChain 对象进来，filterChain 对象是 filter 接口中最重要的一个对象，它也提供了一个doFilter 方法，开发人员可以根据需求决定是否调用此方法，调用该方法，则 web 服务器就会调用 web 资源的 service 方法，即 web 资源就会被访问，否则 web 资源不会被访问。</li>
<li>在一个 web 应用中，可以开发编写多个 Filter，这些 Filter 组合起来称之为一个 Filter 链。</li>
<li>web 服务器根据 Filter 在 web.xml 文件中的注册顺序，决定先调用哪个 Filter，当第一个 Filter 的 doFilter 方法被调用时，web 服务器会创建一个代表 Filter 链的 FilterChain 对象传递给该方法。在 doFilter 方法中，如果调用了 FilterChain 对象的 doFilter 方法，则 web 服务器会检查 FilterChain 对象中是否还有 filter，如果有，则调用第 2 个 filter，如果没有，则调用目标资源。</li>
</ol>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><blockquote>
<p>init(FilterConfig filterConfig)throws ServletException：</p>
</blockquote>
<ol>
<li>和 Servlet 程序一样，Filter 的创建和销毁由 WEB 服务器负责。 web 应用程序启动时，web 服务器将创建 Filter 的实例对象，并调用其 init 方法，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作「注：filter 对象只会创建一次，init 方法也只会执行一次。」通过 init 方法的参数，可获得代表当前 filter 配置信息的 FilterConfig 对象</li>
<li>destroy()：在Web容器卸载 Filter 对象之前被调用。该方法在 Filter 的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</li>
</ol>
<h4 id="FilterConfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h4><p>用户在配置 filter 时，可以使用 <code>&lt;init-param&gt;</code> 为 filter 配置一些初始化参数，当 web 容器实例化 Filter 对象，调用其 init 方法时，会把封装了 filter初始化参数的 filterConfig 对象传递进来。因此通过 filterConfig 对象的方法，就可获得：</p>
<ol>
<li>String getFilterName()：得到filter的名称。</li>
<li>String getInitParameter(String name)： 返回在部署描述中指定名称的初始化参数的值。如果不存在返回 null.</li>
<li>Enumeration getInitParameterNames()：返回过滤器的所有初始化参数的名字的枚举集合。</li>
<li>public ServletContext getServletContext()：返回 Servlet 上下文对象的引用。</li>
</ol>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><h5 id="统一全站字符编码的过滤器"><a href="#统一全站字符编码的过滤器" class="headerlink" title="统一全站字符编码的过滤器"></a>统一全站字符编码的过滤器</h5><p>通过配置参数 encoding 指明使用何种字符编码,以处理 Html Form 请求参数的中文问题</p>
<h5 id="禁止浏览器缓存所有动态页面的过滤器："><a href="#禁止浏览器缓存所有动态页面的过滤器：" class="headerlink" title="禁止浏览器缓存所有动态页面的过滤器："></a>禁止浏览器缓存所有动态页面的过滤器：</h5><p>有 3 个 HTTP 响应头字段都可以禁止浏览器缓存当前页面，它们在 Servlet 中的示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.setDateHeader(&quot;Expires&quot;,-1);</span><br><span class="line">response.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);</span><br><span class="line">response.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);</span><br></pre></td></tr></table></figure>
<p>并不是所有的浏览器都能完全支持上面的三个响应头，因此最好是同时使用上面的三个响应头。</p>
<ol>
<li>Expires 数据头：值为GMT时间值，为-1指浏览器不要缓存页面</li>
<li>Cache-Control 响应头有两个常用值</li>
<li>no-cache 指浏览器不要缓存当前页面</li>
<li>max-age xxx指浏览器缓存页面xxx秒</li>
</ol>
<h5 id="使用-Filter-实现-URL-级别的权限认证"><a href="#使用-Filter-实现-URL-级别的权限认证" class="headerlink" title="使用 Filter 实现 URL 级别的权限认证"></a>使用 Filter 实现 URL 级别的权限认证</h5><p>把一些执行敏感操作的 servlet 映射到一些特殊目录中，并用 filter 把这些特殊目录保护起来，限制只能拥有相应访问权限的用户才能访问这些目录下的资源。从而在我们系统中实现一种 URL 级别的权限功能。</p>
<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><ol>
<li>每个JSP 页面在第一次被访问时，WEB 容器都会把请求交给 JSP 引擎（即一个 Java 程序）去处理。JSP 引擎先将 JSP 翻译成一个 _jspServlet(实质上也是一个 servlet ) ，然后按照 servlet 的调用方式进行调用。</li>
<li>由于 JSP 第一次访问时会翻译成 servlet，所以第一次访问通常会比较慢，但第二次访问，JSP 引擎如果发现 JSP 没有变化，就不再翻译，而是直接调用，所以程序的执行效率不会受到影响。</li>
<li>JSP 引擎在调用 JSP 对应的 _jspServlet  时，会传递或创建 9 个与 web 开发相关的对象供 _jspServlet 使用。JSP 技术的设计者为便于开发人员在编写 JSP 页面时获得这些 web 对象的引用，特意定义了 9 个相应的变量，开发人员在 JSP 页面中通过这些变量就可以快速获得这 9 大对象的引用。</li>
</ol>
<h3 id="9大内置对象"><a href="#9大内置对象" class="headerlink" title="9大内置对象"></a>9大内置对象</h3><ol>
<li>Request</li>
<li>Response</li>
<li>Session</li>
<li>Application</li>
<li>Config</li>
<li>Page</li>
<li>Exception </li>
<li>Out</li>
<li>PageContext</li>
</ol>
<hr>
<center>何以为家</center>

]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>启动Tomcat Shell脚本</title>
    <url>/2020/02/24/tomcat%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><img src="/2020/02/24/tomcat%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/start-sh.png" alt="Photo by SamUerto on wallhaven.cc"></p>
<p>开发环境往往会部署很多服务在一台服务器上面，每次启动都要好几个命令才能启动 tomcat，很麻烦并且很浪费时间。所以写了一个简易脚本，用来在开发环境启动服务。不过这个脚本还有待完善，这个脚本需要手动把编译的包上传到服务器之后再指定重启，大量时间消耗在打包和上传文件的步骤中。可以考虑直接指定代码分支，直接在 GitLab 上拉取代码自动部署在服务器，这样会节省很多事情。当然也可以使用 Jenkins 等自动化部署工具来完成。</p>
<a id="more"></a>

<h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><ol>
<li>先判断启动参数是否正确</li>
<li>获取到想要启动服务的 PID</li>
<li>如果获取到了，说明改服务是启动状态，kill 进程之后重新启动。如果没有获取到，直接尝试启动服务</li>
</ol>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><blockquote>
<p>很简单的一个小脚本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">param=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 服务的绝对路径  </span></span><br><span class="line">path=/usr/<span class="built_in">local</span>/<span class="variable">$param</span>;</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$param</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]]&amp;&amp;[[ <span class="variable">$param</span> == tomcat* ]];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;服务名称：&quot;</span><span class="variable">$param</span></span><br><span class="line">    <span class="comment"># 获取服务的 pid,grep -v grep 去除 grep pid,grep -v &quot;start.sh&quot; 去掉当前脚本的pid</span></span><br><span class="line">    pid=$(ps -ef | grep <span class="variable">$param</span> | grep -v grep | grep -v <span class="string">&quot;start.sh&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>);</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前服务的 PID=&quot;</span><span class="variable">$pid</span>;</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$pid</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;杀掉进程执行结果：&quot;</span>$?;</span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;进程已结束&quot;</span>;</span><br><span class="line">            <span class="variable">$path</span>/bin/startup.sh;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;服务正在重启...&quot;</span>;</span><br><span class="line">            tail -f <span class="variable">$path</span>/logs/catalina.out;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;重启失败&quot;</span>;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;当前服务没有启动，尝试直接启动&quot;</span>;</span><br><span class="line">         <span class="variable">$path</span>/bin/startup.sh;</span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;服务正在启动...&quot;</span>;</span><br><span class="line">         tail -f <span class="variable">$path</span>/logs/catalina.out;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;请输入正确的服务名称&quot;</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>脚本很简单，有些地方也有说明，需要根据自己服务部署情况做一些相应的修改，就可以使用了。</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>如果想要启动 tomcat-xx 服务，则直接输入 <code>./start.sh tomcat-xx</code> 就可以重启服务。</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>脚本名称 <code>start.sh</code> 因为里面有个地方写死了脚本名称（这里可以优化下）。</p>
<hr>
<center>做一个温暖的人</center>]]></content>
      <categories>
        <category>Shell</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2019/12/20/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p><img src="/2019/12/20/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/transaction.png" alt="Photo by microcosmos on wallhaven.cc"></p>
<p>互联网项目一般都是分布式部署的，分布式部署不仅可以提高系统的吞吐量，降低系统之间的耦合性，便于扩展。但是也同样会带来很多问题，比如不同服务间的事务问题。本地事务是保证一组操作要么都执行成功，要么都失败。分布式环境下，要保证不同节点的数据操作需要保证一致性，要么全部成功，要么全部失败。</p>
<a id="more"></a>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="强一致"><a href="#强一致" class="headerlink" title="强一致"></a>强一致</h4><p>XA</p>
<h4 id="弱一致"><a href="#弱一致" class="headerlink" title="弱一致"></a>弱一致</h4><ol>
<li>不用事务，业务补偿冲正</li>
<li>柔性事务，使用事务框架保证事务最终一致<h3 id="XA-2PC"><a href="#XA-2PC" class="headerlink" title="XA(2PC)"></a>XA(2PC)</h3>分布式事务协议，基于强一致性思路，是一个数据库本身支持的协议。<br>X/Open 维护的分布式协议。结构如下：<br><img src="/2019/12/20/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/xa-struct.png" alt="来源官方网站"><h4 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h4>应用程序，一般界定事务的起始和终止，在事务内对资源操作<h4 id="TM"><a href="#TM" class="headerlink" title="TM"></a>TM</h4>事务管理器，监控事务的执行进度，提交和回滚。<h4 id="RM"><a href="#RM" class="headerlink" title="RM"></a>RM</h4>资源管理器，数据库/文件系统，并提供访问接口<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3>Atomikos 和 Narayana<h3 id="BASE柔性事务"><a href="#BASE柔性事务" class="headerlink" title="BASE柔性事务"></a>BASE柔性事务</h3>BASE 是基本可用，柔性状态和最终一致三要素的缩写。<br>柔性事务的理念是：通过放宽对强一致性要求，来换取系统吞吐量的提升<h4 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h4><h5 id="Basically-Avaliable"><a href="#Basically-Avaliable" class="headerlink" title="Basically-Avaliable"></a>Basically-Avaliable</h5>基本可用：保证分布式事务参与方不一定同时在线<h5 id="Soft-state"><a href="#Soft-state" class="headerlink" title="Soft-state"></a>Soft-state</h5>柔性状态：允许系统状态更新有一定延时，且延时对客户来说不一定能够察觉<h5 id="Eventually-consistent"><a href="#Eventually-consistent" class="headerlink" title="Eventually-consistent"></a>Eventually-consistent</h5>最终一致性：通过消息传递的方式保证系统的最终一致性<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h4>通过手动进行补偿处理<h4 id="AT"><a href="#AT" class="headerlink" title="AT"></a>AT</h4>通过自动进行补偿处理<h3 id="TCC-1"><a href="#TCC-1" class="headerlink" title="TCC"></a>TCC</h3>TCC模式即将每个服务业务操作分为两个阶段，第一个阶段检查并预留相关资源，第二阶段根据所有服务业务的Try状态来操作，如果都成功，则进行Confirm操作，如果任意一个Try发生错误，则全部Cancel。 <h4 id="三阶段"><a href="#三阶段" class="headerlink" title="三阶段"></a>三阶段</h4>TCC使用要求就是业务接口都必须实现三段逻辑，要么 try-confirm，要么 try-cancel<h4 id="try"><a href="#try" class="headerlink" title="try"></a>try</h4>准备操作 Try：完成所有业务检查，预留必须的业务资源。<h4 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h4>确认操作 Confirm：真正执行的业务逻辑，不做任何业务检查，只使用 Try 阶段预留的业务资源。因此， 只要 Try 操作成功，Confirm 必须能成功。另外，Confirm 操作需满足幂等性，保证一笔分布式事务能且只能成功一次。<h4 id="cancel"><a href="#cancel" class="headerlink" title="cancel"></a>cancel</h4>取消操作 Cancel：释放 Try 阶段预留的业务资源。同样的，Cancel 操作也需要满足幂等性。<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4>TCC 需要注意的几个问题： 1、允许空回滚 2、防悬挂控制 3、幂等设计<h3 id="AT-1"><a href="#AT-1" class="headerlink" title="AT"></a>AT</h3>AT 模式是两阶段提交，生成反向 SQL。<h3 id="框架-1"><a href="#框架-1" class="headerlink" title="框架"></a>框架</h3>Seata,Himily,ShardingSphere<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3>分布式事务隔离级别<h4 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h4>相当于加了一个大锁，所有事务排队执行，是一个强一致性事务。<h4 id="柔性事务"><a href="#柔性事务" class="headerlink" title="柔性事务"></a>柔性事务</h4>隔离级别：读未提交<br>在柔性事务机制下，由于网络抖动，CPU 调度问题，没有办法保证多台机器执行的处于分布式事务中的语句是同时执行的，所以就会发生其他事务读到在分布式情况下还没有彻底提交的事务数据。<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4>对表设计要求比较高，将有外键关联的表尽量放在同一个数据库中，处于分布式事务中的表相互没有很大的依赖。或者使用定时任务等方法将数据进行补偿冲正</li>
</ol>
<center>keep doing</center>]]></content>
      <categories>
        <category>事务</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程</title>
    <url>/2020/02/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/2020/02/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/duoxiancheng.png" alt="Photo by WoshWosh on wallhaven.cc"></p>
<p>多线程是提高 CPU 利用率，以及提高执行效率的有效方法之一，但是多线程使用不当会造成会多问题，比如多线程并发下共享资源问、线程之间的协作通信问题，都是需要注意和深入学习的地方。新冠肺炎大家家门都出不了，正好拿来补补知识。（武汉加油！中国加油！）</p>
<a id="more"></a>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在主线程中开启一个子线程，等待子线程执行完成返回结果后再继续执行主线程，一共有多少种写法？<br>这个问题实现的方式确实有很多种，下面是我写的一些方法。</p>
<h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p>模板方法是一种设计模式，简单来说就是将公共的操作抽象封装起来，将需要实现的方法写成抽象类给不同的子类来实现。是一种比较实用且理解简单且用云广泛的设计模式之一。</p>
<h4 id="Base类"><a href="#Base类" class="headerlink" title="Base类"></a>Base类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * 统一基础类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">template</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 在这里创建一个线程或线程池，</span></span><br><span class="line">        <span class="comment">// 异步执行 下面方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = asyncInvoke();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 确保  拿到result 并输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;异步计算结果为：&quot;</span>+result);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用时间：&quot;</span>+ (System.currentTimeMillis()-start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后退出main线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fibo(<span class="number">36</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( a &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fibo(a-<span class="number">1</span>) + fibo(a-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">getPool</span><span class="params">(Integer poolSize, Integer queueSize)</span> </span>&#123;</span><br><span class="line">        AtomicInteger num = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, poolSize, <span class="number">60L</span>, SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(queueSize),</span><br><span class="line">                r -&gt; &#123;</span><br><span class="line">                    Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">                    t.setName(<span class="string">&quot;my-&quot;</span> + num.incrementAndGet());</span><br><span class="line">                    t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CompletableFutrue"><a href="#CompletableFutrue" class="headerlink" title="CompletableFutrue"></a>CompletableFutrue</h4><p>CompletableFutrue 异步工具类实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * 使用 CompletableFutrue 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V1</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V1().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(AbstractBase::sum);</span><br><span class="line">        <span class="keyword">return</span> future.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><p>FutureTask 实现方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * FutureTask 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V2</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V2().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(AbstractBase::sum);</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        <span class="keyword">return</span> task.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>CountDownLatch 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * CountDownLatch 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V3</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V3().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        AtomicInteger result = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.set(sum());</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        latch.await();</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>CyclicBarrier 实现，和 CountDownLatch 很相似的一个方法，CountDownLatch 是采用减数的方式，它采用的是家数的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * CyclicBarrier 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V4</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V4().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AtomicInteger result = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.set(sum());</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        barrier.await();</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>Semaphore 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * Semaphore 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V5</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V5().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">        AtomicInteger result = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">            result.set(sum());</span><br><span class="line">            s.release();</span><br><span class="line">        &#125; ).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.acquire();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h4><p>wait() 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * wait &amp; notify</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V6</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V6().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        AtomicInteger result = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">                result.set(sum());</span><br><span class="line">                o.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            o.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><p>Future 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * Future 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V7</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V7().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ThreadPoolExecutor pool = getPool(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        Future&lt;Integer&gt; result = pool.submit(AbstractBase::sum);</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>join() 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * join 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V8</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V8().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AtomicInteger result = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; result.set(sum()));</span><br><span class="line">        thread.start();</span><br><span class="line">        thread.join();</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h4><p>LockSupport 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * LockSupport 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V9</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V9().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AtomicInteger result = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        Thread main = Thread.currentThread();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.set(sum());</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                LockSupport.unpark(main);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><p>BlockingQueue 阻塞队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * BlockingQueue 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V10</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V10().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.put(sum());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">return</span> queue.take();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Lock-amp-Condition"><a href="#Lock-amp-Condition" class="headerlink" title="Lock&amp;Condition"></a>Lock&amp;Condition</h4><p>Lock &amp; Condition 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ck</span></span><br><span class="line"><span class="comment"> * Lock &amp; Condition 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">V11</span> <span class="keyword">extends</span> <span class="title">AbstractBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> V11().template();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">asyncInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        Condition condition = lock.newCondition();</span><br><span class="line">        AtomicInteger result = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               lock.lock();</span><br><span class="line">               result.set(sum());</span><br><span class="line">               condition.signal();</span><br><span class="line">           &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            condition.await();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是多线程下各个线程通讯的方式中的几种。</p>
<hr>
<center>月是家乡圆</center>

]]></content>
      <categories>
        <category>Java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-类加载</title>
    <url>/2019/08/04/jvm-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p><img src="/2019/08/04/jvm-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/load-class.png" alt="photo by https://unsplash.com/photos/ISVm7Rzhy8s"></p>
<p>关于 JVM 涉及的知识比较深，并且比较难理解。每次看到不懂的地方，我习惯了解之后记下来。相信了解多了也就会变成自己的知识了。今天周六，准备换地方和朋友一起合租住，想想还是美滋滋。</p>
<a id="more"></a>

<h4 id="类生命周期"><a href="#类生命周期" class="headerlink" title="类生命周期"></a>类生命周期</h4><p>一个静态的类从被加载到内存，变成动态类，在到被卸载为止，它的生命周期是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">加载--&gt; 链接--&gt; 初始化--&gt; 使用--&gt; 卸载</span><br><span class="line"></span><br><span class="line">链接包含：</span><br><span class="line">验证--&gt; 准备--&gt; 解析</span><br></pre></td></tr></table></figure>
<p>类的加载必须按照这个过程来加载，除了解析阶段，有可能发生在初始化阶段之后。</p>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>JDK 包含类 3 中类加载器。分别是 BootStrap ClassLoader 启动类加载器，Extension ClassLoader 扩展类加载器和 Application ClassLoader 应用程序类加载器，启动类类加载器是用 C++ 实现的，作为 JVM 的一部分，而其他类加载器是用 Java 来实现的，都继承自 java.lang.ClassLoader。</p>
<h5 id="双亲委任"><a href="#双亲委任" class="headerlink" title="双亲委任"></a>双亲委任</h5><p>递归交给自己的上层类加载</p>
<h6 id="类加载器层级"><a href="#类加载器层级" class="headerlink" title="类加载器层级"></a>类加载器层级</h6><p>自定义类加载器 &gt; 应用程序类加载器 &gt; 扩展类加载器 &gt; 启动类加载器</p>
<p>除了启动类加载器之外，每个类都有父类加载器。</p>
<p>双亲委任大致可以理解为：当一个加载器加载一个类时，首先交给它的父类加载器加载此类路径下的类，如果父类找不到，在交给它自己的父类进行加载，如果找到了，则加载此类，如果没有找到，则会告知子类信息，子类才会尝试自己加载。也就是说，如果想自己写一个 <code>java.lang.String</code> 类来代替 jdk 本身的 <code>String</code> 类是不可以的，就算自己写了类加载器也是不能被加载成功的。</p>
<h5 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h5><p>简单来说，运行时数据区就是 Java 程序运行时的数据在内存中的存放空间。主要包含 方法区、堆、虚拟机栈、本地方法栈、程序计数器。</p>
<p>其中方法区和堆是所有线程共享的，而虚拟机栈、本地方法栈和程序计数器是线程私有的。</p>
<h6 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h6><p> <code>.java</code> 文件被编译为  <code>.class</code> 文件后，被类加载器加载到内存需要存放到一个内存区域，这个区域就是方法区，方法区主要存放一些不经常改变的数据，常量，静态变量等都存放在这个区域。就像数据表的建表语句，规定了这张表就应该有哪些属性，这些属性应该是什么类型。当我们 new 一个对象时，就像给这张表添加一条数据，内容可以不一样，当时必须要遵循这些属性的格式。当方法区没有足够的空间时会抛 OutOfMemoryError 异常。</p>
<h6 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h6><p>堆是 Java 虚拟机管理的内存中最大的一块，这块区域被所有线程共享，这块区域主要用来存放对象，在内存不足的情况下会抛出 OutOfMemoryError 异常。</p>
<blockquote>
<p>堆是所有线程共享的，用来存放共有的资源</p>
</blockquote>
<h6 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h6><p>这块区域主要记录当前线程的运行指令的记录。在 cpu 发生线程切换时，程序计数器可以记录当前线程执行的位置，等切回来时可以正确执行。程序计数器是线程私有的，每个线程都拥有一个自己的计数器。</p>
<h6 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h6><p>每当一个线程被启动时，Java 虚拟机会创建一个 Java 栈，栈的单位为栈帧，栈可以分为基本类型变量区，执行环境上下文，操作指令几部分。栈的数据是当前栈私有的，其他栈不能访问。</p>
<blockquote>
<p>栈是线程私有的，简单来说就是用来执行逻辑的地方</p>
</blockquote>
<h6 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h6><blockquote>
<p>即时编译，指将一些经常使用的字节码（循环等） 编译成机器本身的字节码来提高运行速度。</p>
</blockquote>
<h6 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;how interesting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.toWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里大致描述下 jvm 执行流程：</p>
<ol>
<li>首先在方法区寻找 User 类信息。</li>
<li>如果没有找到的话，通过类加载器加载 User 类到方法区。</li>
<li>在堆上 new 一个User 实例，并把此实例的引用添加到主线程的调用栈中。</li>
<li>执行 user.work() 时，jvm 先根据 user 引用找到堆上对应的对象</li>
<li>根据堆上实例对象持有的方法区引用，获取到方法区 User 类信息，获取到 work() 方法的字节码，执行此方法的代码。</li>
</ol>
<h4 id="Java-垃圾回收"><a href="#Java-垃圾回收" class="headerlink" title="Java 垃圾回收"></a>Java 垃圾回收</h4><h5 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h5><ol>
<li>标记-清除</li>
</ol>
<p>顾名思义，先标记在清除，第一个阶段，先标记需要清除的对象，在讲它们全部清除。这种算法存在 2 种不足，标记和清除的效率都不是很高，而且标记和清除之后很容易产生大量的不连续空间碎片。</p>
<ol start="2">
<li>复制算法</li>
</ol>
<p>复制算法会把内存分成2块，一块真正投入使用，当这块内存空间不足时，将还在存活的对象复制到另外一块内存中。标记清除算法最大的缺点是回收之后会产生大量空间碎片，而复制算法则不。但是这样在真正使用时只能使用一般的内存，对内存的使用率很低。</p>
<ol start="3">
<li>标记整理算法</li>
</ol>
<p>标记整理算法也是有2个阶段，先将还在存活的对象标记出来，然后将存活的对象复制到一端连续的空间，然后直接将边缘外的空间释放掉。</p>
<h5 id="jvm-参数"><a href="#jvm-参数" class="headerlink" title="jvm 参数"></a>jvm 参数</h5><ol>
<li>-Xms</li>
</ol>
<blockquote>
<p>设置堆的最小空间大小</p>
</blockquote>
<ol start="2">
<li>-Xmx</li>
</ol>
<blockquote>
<p>设置堆的最大空间大小</p>
</blockquote>
<ol start="3">
<li>-Xss</li>
</ol>
<blockquote>
<p>设置每个线程栈大小</p>
</blockquote>
<ol start="4">
<li>-XX:NewSize </li>
</ol>
<blockquote>
<p>设置新生代最小空间大小</p>
</blockquote>
<ol start="5">
<li>-XX:MaxNewSize</li>
</ol>
<blockquote>
<p>设置新生代最大空间大小</p>
</blockquote>
<ol start="6">
<li>-XX:PermSize</li>
</ol>
<blockquote>
<p>设置永久代大小</p>
</blockquote>
<ol start="7">
<li>-XX:MaxPermSize</li>
</ol>
<blockquote>
<p>设置永久代最大空间大小</p>
</blockquote>
<p><strong>老年代空间大小=堆空间大小-年轻代最大空间大小</strong></p>
<h5 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h5><p>使用指定的垃圾回收器</p>
<blockquote>
<p>-XX:+Use&lt;垃圾回收器名字&gt;GC<br>-XX:+UseSerialGC</p>
</blockquote>
<h6 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h6><ol>
<li><p>配置</p>
<blockquote>
<p>-XX:+UseSerialGC</p>
</blockquote>
</li>
<li><p>工作方式</p>
<blockquote>
<p>它不仅在收集时使用单线程来完成工作，并且在新生代和老年代收集时都会出现 STW (stop the world)现象。</p>
</blockquote>
</li>
<li><p>适用场景</p>
<blockquote>
<p>桌面应用</p>
</blockquote>
</li>
</ol>
<h6 id="ParNew-ParalleNew"><a href="#ParNew-ParalleNew" class="headerlink" title="ParNew (ParalleNew)"></a>ParNew (ParalleNew)</h6><ol>
<li><p>配置</p>
<blockquote>
<p>-XX:+UseParNewGc</p>
</blockquote>
</li>
<li><p>工作方式</p>
<blockquote>
<p>只针对新生代使用多线程，老年代还是单线程，收集过程中会出现 STW</p>
</blockquote>
</li>
<li><p>使用场景</p>
<blockquote>
<p>server 新生代收集器</p>
</blockquote>
</li>
</ol>
<h6 id="Parallel-Scavenge-PS"><a href="#Parallel-Scavenge-PS" class="headerlink" title="Parallel Scavenge(PS)"></a>Parallel Scavenge(PS)</h6><ol>
<li><p>配置</p>
<blockquote>
<p>-XX:+UseParallelGC</p>
</blockquote>
</li>
<li><p>工作方式</p>
<blockquote>
<p>可控制吞吐量，所谓吞吐量 = 运行用户代码时间/（运行用户代码时间 + 垃圾收集时间）<br>高吞吐量可以提高 cpu 利用率，提高运算速度。</p>
</blockquote>
</li>
<li><p>使用场景</p>
<blockquote>
<p>计算量比较小，用户交互不多的场景</p>
</blockquote>
</li>
<li><p>参数</p>
<blockquote>
<p>-XX:MaxGCPauseMilis          最大垃圾收集停顿时间（大于0毫秒）<br>-XX:GCTimeRatio              吞吐量大小（0-100%）<br>-XX:+UseAdaptiveSizePolicy   内存调优委托虚拟机管理</p>
</blockquote>
</li>
</ol>
<h6 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h6><ol>
<li><p>配置</p>
<blockquote>
<p>-XX:+UseParallelOldGC</p>
</blockquote>
</li>
<li><p>工作方式</p>
<blockquote>
<p>Parallel Scavenge 收集器老年代收集版本。多线程完成工作，采用了“标记-整理” 算法。</p>
</blockquote>
</li>
<li><p>使用场景</p>
</li>
</ol>
<blockquote>
<p>桌面应用场景</p>
</blockquote>
<h6 id="Concurrent-Mark-Sweep（CMS）"><a href="#Concurrent-Mark-Sweep（CMS）" class="headerlink" title="Concurrent Mark Sweep（CMS）"></a>Concurrent Mark Sweep（CMS）</h6><ol>
<li><p>配置</p>
<blockquote>
<p>-XX:UseConcMarkSweepGC</p>
</blockquote>
</li>
<li><p>工作方式</p>
<blockquote>
<p>基于“标记-清除”算法，在整个过程中都是并发进行的，以获取最短回收停顿时间为目标，整个过程分为4步：初始标记，并发标记，重新标记，并发清除。</p>
</blockquote>
</li>
<li><p>使用场景</p>
<blockquote>
<p>互联网应用服务端</p>
</blockquote>
</li>
</ol>
<h6 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h6><ol>
<li>配置<blockquote>
<p>-XX:+UseG1GC</p>
</blockquote>
</li>
<li>工作方式</li>
</ol>
<blockquote>
<p>G1算法将堆划分为若干和区域，但它仍然属于分代收集器，这些区域一部分包含新生代，新生代垃圾收集依然采用暂停所有线程的方式，将存货对象拷贝到老年代或者 Survivor 空间。<br>老年代也分成很多区域，G1 收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作，这就意味着在正常处理过程中，G1完成了堆的压缩（至少是部分堆的压缩） ，这样就不会存在 CMS 内存碎片问题了。<br>G1 有两种 GC 模式（都是 STW）<br>Yong GC 和 Mixed GC</p>
</blockquote>
<h5 id="JVM-内存分配与回收策略"><a href="#JVM-内存分配与回收策略" class="headerlink" title="JVM 内存分配与回收策略"></a>JVM 内存分配与回收策略</h5><ol>
<li><p>大对象直接进入老年代</p>
<blockquote>
<p>大对象是指需要大量连续内存空间的 Java 对象，典型的是很长的字符串或者大数组。<br>-XX:PretenureSizeThreshold 可以使大于这个值的对象直接在老年代分配。这样会避免在 Eden 区以及两个 Survivor 区之间发生大量内存复制。</p>
</blockquote>
</li>
<li><p>长期存货的对象将进入老年代</p>
<blockquote>
<p>对象在 Survivor 区中撑过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定值（默认 15），就会将它复制到老年代中。</p>
</blockquote>
</li>
<li><p>动态对象年龄判定</p>
<blockquote>
<p>如果在 Survivor 空间中相同年龄所有对象的大小总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，不需要等到 MaxTenuringThreshold 中要求的年龄。</p>
</blockquote>
</li>
<li><p>空间分配担保</p>
<blockquote>
<p>HandlePromotionFailure 检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于该值，将尝试进行一次 Minor GC，如果小于，或者设置不允许冒险，这是就会改为进行一次 FullGC.</p>
</blockquote>
</li>
</ol>
<h5 id="字节码执行引擎"><a href="#字节码执行引擎" class="headerlink" title="字节码执行引擎"></a>字节码执行引擎</h5><ol>
<li>输入字节码文件</li>
<li>处理过程是字节码解析的过程</li>
<li>输出的是执行结果</li>
</ol>
<p>虚拟机的执行引擎则是由自己实现的，因此可以自行指定指令集与执行引擎的结构体系，并且能够执行哪些不被硬件直接支持的指令集格式。</p>
<h6 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h6><p>每个方法从调用开始至执行完成都会对应从入栈到出栈的过程，栈帧中包含：</p>
<ol>
<li>局部变量表</li>
<li>操作数栈</li>
<li>动态链接</li>
<li>返回地址</li>
<li>…</li>
</ol>
<p>一个栈帧需要分配多少内存，在编译的时候已经确定，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p>
<p>局部变量表</p>
<p>局部变量表是一组变量存储空间，用于存放方法参数和方法内部定义的局部变量，在 Java 程序编译为 class 文件时，就在 code 属性的 max_local 数据项中确定了该方法所需要分配的局部变量表最大容量。</p>
<blockquote>
<p>一个 Slot 可以存放一个 32 位以内的数据类型，对于 64 位的数据类型，虚拟机会以高位对齐的方式为其分配两个连续的 Slot 空间。</p>
</blockquote>
<p>操作数栈</p>
<p>操作数栈是一个后入先出栈，和局部变量一样，操作数栈最大深度也在编译的时候写入到 code 属性的 max_stacks 数据项中。</p>
<p>方法返回地址</p>
<p>当一个方法开始执行后，只有两种方式可以推出这个方法。</p>
<ol>
<li>执行引擎遇到任意一个方法返回的字节码指令。</li>
<li>在方法执行过程中遇到了异常，并没有在方法体内得到处理。</li>
</ol>
<p>方法退出的过程实际上就是等同于把当前栈帧出栈</p>
<ol>
<li>恢复上层方法的局部变量表和操作数栈</li>
<li>把返回值（若存在）压入调用者栈帧的操作数栈中</li>
<li>调正 PC 计数器的值以指向方法调用指令后面的一条指令等</li>
</ol>
<p>方法调用</p>
<p>方法调用并不等于方法执行，该阶段唯一的任务就是确定哪一个方法，方法在实际运行时内存中的入口地址需要在类加载期间，甚至到运行期间才能确定。</p>
<p>虚方法</p>
<p>可以被复写的方法都可以称作虚方法，虚方法不需要做特殊声明，可以理解为除了 static，final，private 修饰的都是虚方法。</p>
<p>虚拟机动态分派机制</p>
<p>虚方法表（vtable，invokeinterface 执行时调用到 itable）使用虚方法表索引来代替元数据查找来提高性能，虚方法表中存放着各个方法的实际入口地址。</p>
<ol>
<li>如果方法在子类中没有被重写，那子类虚方法表里面的地址入口和父类相同方法的地址入口是一致的，都是指向父类的实现入口。</li>
<li>如果子类中重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。</li>
</ol>
<h5 id="JDK-性能监控与故障处理工具"><a href="#JDK-性能监控与故障处理工具" class="headerlink" title="JDK 性能监控与故障处理工具"></a>JDK 性能监控与故障处理工具</h5><p>jdk 中自带的用于监视虚拟机和故障处理工具</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用描述</th>
</tr>
</thead>
<tbody><tr>
<td>jps</td>
<td>JVM 进程状态工具（JVM Process Status Tool），用于显示目标系统上 JVM 的 Java 进程信息</td>
</tr>
<tr>
<td>jstat</td>
<td>JVM 统计监测工具（JVM Statistics Monitoring Tool），用于监控并显示 JVM 性能统计信息</td>
</tr>
<tr>
<td>jinfo</td>
<td>Java 配置信息工具（Java Configuration Information），用于打印指定 Java 进程，核心文件或远程调试服务器的配置信息。</td>
</tr>
<tr>
<td>jhat</td>
<td>Java 堆分析工具（Java Heap Analysis Tool），用于分析 Java 堆内存中的对象信息</td>
</tr>
<tr>
<td>jmap</td>
<td>Java 内存映射工具（Java Memory Map），用于打印指定 Java 进程，核心文件或远程调试服务器共享对象内存映射或堆内存细节</td>
</tr>
<tr>
<td>jstack</td>
<td>Java 堆栈跟踪工具，主要用于打印指定 Java 进程，核心文件或远程调试服务器的 Java 线程的堆栈跟踪信息</td>
</tr>
<tr>
<td>jmc</td>
<td>Java 任务控制工具（Java Misson Control），主要用于 JVM 的生产时间监测，分析，诊断</td>
</tr>
<tr>
<td>jvisualvm</td>
<td>JVM 监测，故障排除，分析工具，主要以图形化界面的方式梯控与指定虚拟机的 Java 应用程序的详细信息</td>
</tr>
<tr>
<td>jconsole</td>
<td>图形化用户界面监控工具，主要用于监测并显示运行于 Java 平台上的应用程序的性能和资源占用等信息</td>
</tr>
</tbody></table>
<h6 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h6><ol>
<li>功能</li>
</ol>
<blockquote>
<p>显示正在运行的虚拟机进程</p>
</blockquote>
<ol start="2">
<li>参数</li>
</ol>
<blockquote>
<p>-q    只显示 LVMID，省略主类信息（LVMID: 本地虚拟机进程唯一编号）<br>-l    显示虚拟机启动进程时传递给 main() 的参数<br>-m    显示类全面，如果是 jar 包显示 jar 路径<br>-v    显示虚拟机启动时候的 JVM 参数<br>3. 用法</p>
</blockquote>
<blockquote>
<p>jps -l</p>
</blockquote>
<h6 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h6><ol>
<li><p>功能</p>
<blockquote>
<p>显示本地或者远程虚拟机进程中的类装载，内存，垃圾收集，JIT 编译等运行数据，是定位虚拟机性能问题的首选工具。</p>
</blockquote>
</li>
<li><p>参数</p>
</li>
</ol>
<blockquote>
<p>-class：类加载，卸载数量，总空间及类装载所耗费时间<br>-compiler：显示 JIT 编译器编译过的方法，耗时等信息<br>-gc：统计 Java 堆，包括 Eden,Survior,老年代，永久代的容量，已用空间，GC时间等信息。<br>-gccapacity：显示 Java 堆各个区域使用到的最大，最小空间<br>-gcutil：显示已使用空间占总空间的百分比<br>-gccause：垃圾收集统计概述，和 -gcutil 相同，附件最近两次垃圾回收时间的原因<br>-gcnew：新生代行为统计<br>-gcnewcapacity：兴盛带使用到的最大，最小空间统计<br>-gcold：统计老年代 GC 状况<br>-gcoldcapacity：年老代行为统计，主要关注使用最大，最小空间<br>-gcpermcapacity：显示永久代使用到的最大，最小空间（-gcmetacapacity）<br>printcompilation：显示已经被 JIT 编译的方法</p>
</blockquote>
<ol start="3">
<li>用法</li>
</ol>
<blockquote>
<p>jstat -gccause vmid  [时间间隔/毫秒]</p>
</blockquote>
<h6 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h6><ol>
<li><p>功能</p>
<blockquote>
<p>可以用来查看正在运行的 Java 应用程序的扩展参数，甚至支持在运行时，修改部分参数</p>
</blockquote>
</li>
<li><p>参数</p>
</li>
</ol>
<blockquote>
<p>-flag <name> pid:打印指定 JVM 的参数值。<br>-flag [+|-]<name> pid：设置指定 JVM 参数值<br>-flag <name> =<value> pid :设置指定 JVM 参数值</value></name></name></name></p>
</blockquote>
<ol start="3">
<li>用法</li>
</ol>
<blockquote>
<p>jinfo -flag +PrintGC pid<br>jinfo -flag +PrintGCDetails pid<br>jinfo -flag +PrintGCTimestamp pid</p>
</blockquote>
<blockquote>
<p>jinfo -flag -PrintGC pid<br>jinfo -flag -PrintGCDetails pid<br>jinfo -flag -PrintGCTimestamp pid</p>
</blockquote>
<h6 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h6><ol>
<li>功能</li>
</ol>
<blockquote>
<p>用于生产 heap dump 文件，如果不适用这个命令，还可以使用 -XX:+HeapDumpOnOutOfMemoryError 参数来让虚拟机出现 OOM 的时候自动生产 dump 文件。jmap 不仅能生成 dump 文件，还可以查询 finalize 执行队列，Java 堆和永久带的详细信息，如当前使用率，当前使用的是那种收集器。</p>
</blockquote>
<ol start="2">
<li>参数</li>
</ol>
<blockquote>
<p>-dump：生成 Java 堆快照。格式：-dump:[live,]format=b,file=<filename>,live 为是否只生成存活的对象<br>-histo：显示堆中对象的统计信息，包括类，有都少个实例，合计容量等<br>-permstat：显示永久代内存状态。在 Linux 下有效<br>-heap：显示堆详细信息，如使用哪种回收器，参数配置，分代状况等。在 Linux 下有效<br>-finalizerinfo：显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法对象。 在 Linux 下有效。<br>-F：当虚拟机进程多 -dump 没有响应时，可以使用这个选项强制生成 dump 快照。在 Linux 下有效。</filename></p>
</blockquote>
<ol start="3">
<li>用法<blockquote>
<p>jmap -dump vmid</p>
</blockquote>
</li>
</ol>
<h6 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h6><ol>
<li><p>功能</p>
<blockquote>
<p>用于生成虚拟机当前时刻的线程快照，一边可以进一步定位线程出现长时间停顿原因，如线程间死锁，死循环，清酒外部资源导致的长时间等待等。</p>
</blockquote>
</li>
<li><p>参数</p>
</li>
</ol>
<blockquote>
<p>-F：输出请求不被响应时，强制输出线程堆栈信息<br>-l：除堆栈信息外，附加显示关于锁 的信息<br>-m：如果涉及本地方法调用，则显示C/C++ 的堆栈</p>
</blockquote>
<ol start="3">
<li>用法</li>
</ol>
<blockquote>
<p>jstack -l vmid<br>查看堆情况：jmap -heap pid </p>
</blockquote>
<hr>
<center>很平凡，很认真</center>]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安装和使用</title>
    <url>/2019/11/20/redis%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/2019/11/20/redis%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/redis.png" alt="Photo by Richs on wallhaven.cc"></p>
<p>在互联网项目中，缓存中间件是一个必不可少的组件。由于磁盘 IO 和 内存 IO 在性能上的差异，通常一些热点数据都会放在缓存中，既提高了用户访问速度，缓存也在很大程度上减轻了数据库的压力，提高了系统整体的吞吐量，redis 是很成熟的一款 NoSql 数据库，是目前使用最多的缓存中间件，当然它的作用不仅仅可以用来做缓存，可以做分布式锁，简单消息队列等。性能稳定且高效，是居家必备用品。┑(￣▽ ￣)┍ </p>
<a id="more"></a>

<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol>
<li>解压</li>
</ol>
<p>目标路径</p>
<blockquote>
<p>/usr/local</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf ./redis-4.0.6.tar.gz </span><br></pre></td></tr></table></figure>
<p>redis 压缩包是一个源码包，需要编译安装，<a class="link" href="https://redis.io/">redis官网<i class="fas fa-external-link-alt"></i></a>有下载地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum -y install gcc gcc-c++ kernel-devel</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 安装到指定目录</span></span><br><span class="line">make PERFIX=/usr/<span class="built_in">local</span>/redis  install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若在编译过程中出现错，可以尝试删除掉解压的 redis 包重新解压在编译一次。</p>
</blockquote>
<ol start="2">
<li>启动</li>
</ol>
<p>将编译包中的 redis.conf 和 sentinel.conf 文件复制到 redis/conf 目录下，方便配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定配置文件启动</span></span><br><span class="line">redis/bin/redis-server redis/conf/redis.conf</span><br></pre></td></tr></table></figure>
<p>启动之后会看到 redis 的logo:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">              _._                                                  </span><br><span class="line">          _.-&#96;&#96;__ &#39;&#39;-._                                             </span><br><span class="line">     _.-&#96;&#96;    &#96;.  &#96;_.  &#39;&#39;-._           Redis 4.0.6 (00000000&#x2F;0) 64 bit</span><br><span class="line"> .-&#96;&#96; .-&#96;&#96;&#96;.  &#96;&#96;&#96;\&#x2F;    _.,_ &#39;&#39;-._                                   </span><br><span class="line">(    &#39;      ,       .-&#96;  | &#96;,    )     Running in standalone mode</span><br><span class="line">|&#96;-._&#96;-...-&#96; __...-.&#96;&#96;-._|&#39;&#96; _.-&#39;|     Port: 6379</span><br><span class="line">|    &#96;-._   &#96;._    &#x2F;     _.-&#39;    |     PID: 24482</span><br><span class="line"> &#96;-._    &#96;-._  &#96;-.&#x2F;  _.-&#39;    _.-&#39;                                   </span><br><span class="line">|&#96;-._&#96;-._    &#96;-.__.-&#39;    _.-&#39;_.-&#39;|                                  </span><br><span class="line">|    &#96;-._&#96;-._        _.-&#39;_.-&#39;    |           http:&#x2F;&#x2F;redis.io        </span><br><span class="line"> &#96;-._    &#96;-._&#96;-.__.-&#39;_.-&#39;    _.-&#39;                                   </span><br><span class="line">     &#96;-._    &#96;-.__.-&#39;    _.-&#39;                                   </span><br><span class="line">         &#96;-._        _.-&#39;                                </span><br><span class="line">             &#96;-.__.-&#39;                                   </span><br><span class="line">                   </span><br></pre></td></tr></table></figure>
<p>使用 redis-cli 连接测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端连接</span></span><br><span class="line">redis/bin/redis-cli</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
<p>完成以上步骤，redis 就使用默认配置启动成功了。</p>
<h6 id="redis-可视化工具"><a href="#redis-可视化工具" class="headerlink" title="redis 可视化工具"></a>redis 可视化工具</h6><p>推荐一款免费的 windows 下 redis 可视化工具<a class="link" href="http://electronjs.org/apps/anotherredisdesktopmanager">Anotherredisdesktopmanager<i class="fas fa-external-link-alt"></i></a></p>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>redis 在配置文件中提供了很多可供修改的参数，在实际使用中需要对这些参数进行配置在使用。</p>
<h6 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h6><p>绑定地址，0.0.0.0(默认) 允许任何互联网上的机器访问，这种配置方式很不安全，127.0.0.1 只允许本机客户端连接，这种是最安全的。配置多个主机访问为 <code>bind 127.0.0.1 192.268.31.108</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br></pre></td></tr></table></figure>
<h6 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h6><p>保护模式，可选参数 yes/on，yes 为开启状态。在开启状态时，当没有指定 bind 等参数时，默认 <code>bind 127.0.0.1</code>，如果设置为 no 时，则默认指定 bind 为 <code>bind 0.0.0.0</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode</span><br></pre></td></tr></table></figure>
<h6 id="port"><a href="#port" class="headerlink" title="port"></a>port</h6><p>访问端口，默认 6379</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure>
<h6 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h6><p>连接断开时间（秒），当客户端连续空闲指定 timeout 时间后，就断开该连接，为 0 时为禁止该功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">timeout 0</span><br></pre></td></tr></table></figure>
<h6 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h6><p>守护进程模式，可选参数 yes/on，yes 时 redis 服务以守护进程在后台执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>
<h6 id="pidfile"><a href="#pidfile" class="headerlink" title="pidfile"></a>pidfile</h6><p>当指定守护进程方式启动时，会在 pidfile 参数指定的目录下生成 PID 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pidfile /var/run/redis_6379.pid</span><br></pre></td></tr></table></figure>
<h6 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h6><p>redis 数据库数量，默认 16</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">databases 16</span><br></pre></td></tr></table></figure>
<h6 id="requirepass"><a href="#requirepass" class="headerlink" title="requirepass"></a>requirepass</h6><p>在客户端连接后设置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置</span></span><br><span class="line">config <span class="built_in">set</span> requirepass <span class="string">&quot;password&quot;</span></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">auth <span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="redis-数据结构"><a href="#redis-数据结构" class="headerlink" title="redis 数据结构"></a>redis 数据结构</h5><p>redis 支持很多数据结构，String，List，Hash，Set，ZSet等，简单理解它每种数据结构，都是它的 value 对应的数据结构。</p>
<h6 id="String"><a href="#String" class="headerlink" title="String"></a>String</h6><ol>
<li>命令</li>
</ol>
<p><strong>GET</strong>,<strong>SET</strong><br>存入/获取字符串键值对 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET key value</span><br><span class="line">GET key  </span><br></pre></td></tr></table></figure>
<p><strong>MSET</strong>,<strong>MGET</strong><br>批量存入/获取字符串键值对 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MSET key value [key value]</span><br><span class="line">MGET key [key]</span><br></pre></td></tr></table></figure>
<p>将用户对象使用批量字符串的方式保存在 redis</p>
<table>
<thead>
<tr>
<th>userId</th>
<th>userName</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>zhangsan</td>
<td>20</td>
</tr>
<tr>
<td>1002</td>
<td>lisi</td>
<td>21</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MSET user:1001:name zhangsan user:1001:age 20</span><br><span class="line">127.0.0.1:6379&gt; MGET user:1001:name user:1001:age</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br></pre></td></tr></table></figure>
<p>以上命令将用户表记录按照批量字符的方式设置到了redis，如果将对象序列化成 json 格式保存一般字符串格式，这样在用户对象年龄或者其他单个字段有改变时会涉及到 JSON 格式转化设置之后在保存的操作，加重了代码量，代码可读性降低。如果用这种方式保存的话可以直接进行针对字段的修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET user:1001:name zhangsanMOD</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MGET user:1001:name</span><br><span class="line">1) <span class="string">&quot;zhangsanMOD&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<p><strong>SETNX</strong><br>存入不存在的键值对<br>当设置的 key 存在时，则设置不成功，当不存在时，设置成功。因为 redis 是单线程模型，此命令可以用来实现<strong>分布式锁功能</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置送出15001礼物价值1000元</span></span><br><span class="line">SETNX gift:15001 1000</span><br></pre></td></tr></table></figure>
<p><strong>DEL</strong><br>删除一个键值对 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEL gift:15001</span><br></pre></td></tr></table></figure>
<p><strong>INCR</strong><br>计数器<br>这个命令可以很方便的对 key 的 value 加 1 操作，而且不用考虑并发等问题，在实际场景中<strong>文章阅读量可以使用此功能来实现</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 111111 文章对应的阅读量</span></span><br><span class="line">INCR article:readcount:111111</span><br></pre></td></tr></table></figure>
<p><strong>INCRBY</strong><br>增量添加<br>将 key 中储存的数字加上指定的增量值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 键不存在时初始化为 0 之后在加 50</span></span><br><span class="line">INCRBY gift:15001:count 50</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>应用</li>
</ol>
<blockquote>
<p>分布式锁功能简单实现<br>文章阅读量<br>分布式 session 保存，用于权限认证。</p>
</blockquote>
<h6 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h6><ol>
<li>命令</li>
</ol>
<p><strong>HSET</strong>,<strong>HGET</strong><br>存储/获取键值对</p>
<p>Hash 结构的 key 对应的值类似于 Java 中的 HashMap 结构。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HSET key field value</span><br><span class="line">HGET key field</span><br></pre></td></tr></table></figure>
<p>上面将用户信息用 <code>MSET</code> 以批量字符串的形式存储，现在将用户表中用户信息用 Hash 结构存储：</p>
<table>
<thead>
<tr>
<th>userId</th>
<th>userName</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>zhangsan</td>
<td>20</td>
</tr>
<tr>
<td>1002</td>
<td>lisi</td>
<td>21</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HSET user 1001:name zhangsan</span><br><span class="line">HSET user 1001:age 20</span><br><span class="line"><span class="comment"># 获取 key 中的属性对应的值</span></span><br><span class="line">127.0.0.1:6379&gt; HGET user 1001:name</span><br><span class="line"><span class="string">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>HMSET</strong>,<strong>HMGET</strong><br>存储多个键值对（批量）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HMSET key field value [key field valye]</span><br><span class="line">HMGET key field [field]</span><br></pre></td></tr></table></figure>
<p>使用批量的方式存储用户 <code>lisi</code> 的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HMSET user 1002:name lisi 1002:age 21</span><br><span class="line">HMGET user 1002:name 1002:age</span><br><span class="line"><span class="comment"># 批量获取</span></span><br><span class="line">127.0.0.1:6379&gt; HMGET user 1002:name 1002:age</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;21&quot;</span></span><br><span class="line"><span class="comment"># 获取多个</span></span><br><span class="line">127.0.0.1:6379&gt; HMGET user 1001:name 1001:age 1002:name 1002:age</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">4) <span class="string">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>HSETNX</strong><br>存储一个不存在的键值对 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HSETNX key field value</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#第二次设置不成功</span></span><br><span class="line">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>HDEL</strong><br>删除键对应的属性 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HDEL key field [field]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HDEL gift 15000:count</span><br><span class="line"><span class="comment"># 删除之后重新设置成功</span></span><br><span class="line">127.0.0.1:6379&gt; HSET gift 15000:count 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p><strong>HLEN</strong><br>Hash 表大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HLEN key</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HLEN user</span><br><span class="line"><span class="comment"># 用户 Hash 表大小 4 </span></span><br><span class="line">127.0.0.1:6379&gt; HLEN user</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure>
<p><strong>HGETALL</strong><br>Hash 表所有的键值对 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HGETALL key</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HGETALL user</span><br><span class="line"><span class="comment"># 用户表中所有键值对</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL user</span><br><span class="line">1) <span class="string">&quot;1001:name&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">3) <span class="string">&quot;1001:age&quot;</span></span><br><span class="line">4) <span class="string">&quot;20&quot;</span></span><br><span class="line">5) <span class="string">&quot;1002:name&quot;</span></span><br><span class="line">6) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">7) <span class="string">&quot;1002:age&quot;</span></span><br><span class="line">8) <span class="string">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>HINCRBY</strong><br>Hash 表 key 中属性的键的值设置增量（increment）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HINCRBY key field increament</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户 1001 年龄 +1</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBY user 1001:age 1</span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>应用</li>
</ol>
<p>购物车</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 用户 ID 为 key</span><br><span class="line">2. 商品 ID 为 field</span><br><span class="line">3. 商品数量为 value</span><br><span class="line"><span class="comment"># 购物车操作</span></span><br><span class="line">1. 添加：                 HSET cart:1001 2001 1</span><br><span class="line">2. 增加数量：             HINCRBY cart:1001 2001 1</span><br><span class="line">3. 商品总数：             HLEN cart:1001</span><br><span class="line">4. 删除商品：             HDEL cart:1001 2001</span><br><span class="line">5. 获取购物车所有商品：    HGETALL cart:1001</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>用户 1001 添加 了 1 个 2001 商品到购物车</li>
<li>用户 1001 又新增了 1 个商品 2001</li>
<li>用户 1001 购物车商品总数</li>
<li>用户 1001 删除购物车商品 2001 </li>
<li>用户 1001 获取购物车所有商品 </li>
</ol>
</blockquote>
<h6 id="List"><a href="#List" class="headerlink" title="List"></a>List</h6><p>List 结构中 key 对应的 value 是一个链表结构，<strong>实现常用数据结构</strong></p>
<blockquote>
<p>Stack(栈) = LPUSH + LPOP -&gt; FILO（先进后出）<br>Queue(队列) = LPUSH + RPOP<br>Blocking MQ(阻塞队列) = LPUSH + BRPOP 在阻塞队列中，LPUSH 一条数据之后，使用 BRPOP 获取数据，区别于 RPOP 的是，当 List 中没有数据时 BRPOP 会一直监听这个 List，有值被 push 进来它会立马获取</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结构</span></span><br><span class="line">           LPUSH                   RPUSH</span><br><span class="line">key  ---&gt; |   a   |   b   |   c   |   d   |</span><br><span class="line">           LPOP                    RPOP</span><br></pre></td></tr></table></figure>
<ol>
<li>命令</li>
</ol>
<p><strong>LPUSH</strong>,<strong>LPOP</strong><br>插入/取出一个或者多个值插入列表头部（最左边） </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LPUSH key value [value]</span><br><span class="line">LPOP key</span><br></pre></td></tr></table></figure>
<p>将礼物按照分类存入列表中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通礼物列表存入 4 个礼物</span></span><br><span class="line">LPUSH ordinary 4001 4002 4003 4004</span><br><span class="line">LPOP ordinary</span><br><span class="line"><span class="comment"># 4001 在最右边，第一次取出最左边的 4004</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP ordinary</span><br><span class="line"><span class="string">&quot;4004&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP ordinary</span><br></pre></td></tr></table></figure>
<p><strong>RPUSH</strong>,<strong>RPOP</strong><br>插入/取出一个或者多个值插入列表头部（最右边）<br>这个命令和上面的命令是相同的结果，只是取出的位置不一样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RPUSH key value [value]</span><br><span class="line">RPOP key</span><br></pre></td></tr></table></figure>
<p><strong>BLPOP</strong>,<strong>BRPOP</strong><br>列表头/尾取出一个元素，如果没有则阻塞等待，timeout = 0 时一直阻塞等待（timeout/s） </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BLPOP key [key] timeout</span><br><span class="line">BRPOP key [key] timeout</span><br></pre></td></tr></table></figure>
<p>监听礼物列表是否有商品，有则在右边阻塞取出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LPUSH ordinary 4001 4002 4003 4004</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 BRPOP 每次取出一条，如果没有，则一直等待</span></span><br><span class="line">127.0.0.1:6379&gt; BRPOP ordinary 0</span><br><span class="line">1) <span class="string">&quot;ordinary&quot;</span></span><br><span class="line">2) <span class="string">&quot;4001&quot;</span></span><br></pre></td></tr></table></figure>
<p>等待时添加一个元素，等待中的 BRPOP 立马输出新添加的元素</p>
<p><strong>LRANGE</strong><br>获取指定 key 列表区间的元素 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LRANGE key start stop</span><br></pre></td></tr></table></figure>
<p>获取 0-2 区间的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH ordinary 4001 4002 4003 4004</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE ordinary 0 2</span><br><span class="line">1) <span class="string">&quot;4004&quot;</span></span><br><span class="line">2) <span class="string">&quot;4003&quot;</span></span><br><span class="line">3) <span class="string">&quot;4002&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>应用</li>
</ol>
<p>微信公众号的推送信息可以使用 List 结构，用户关注的公众号每推送一个消息，在用户对应的列表增加一个文章ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户 1001 有 5001，5002 两个推送文章消息</span></span><br><span class="line">LPUSH 1001:msg 5001,5002</span><br></pre></td></tr></table></figure>
<h6 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h6><p>Set 键值对中的值数据结构类似 Java 中 Set 集合中的 key 值结构，元素不能重复。</p>
<ol>
<li>命令</li>
</ol>
<p> <strong>SADD</strong>,<strong>SREM</strong><br>添加/删除集合中元素，添加时如果存在则忽略</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SADD key member [member]</span><br><span class="line">SREM key member</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户 6001,6002 关注用户 1001</span></span><br><span class="line">SADD user:1001:fans 6001 6002</span><br><span class="line"><span class="comment"># 用户 6002 取消关注用户 1001</span></span><br><span class="line">SREM user:1001:fans 6002</span><br></pre></td></tr></table></figure>
<p><strong>SMEMBERS</strong><br>获取集合所有元素 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SMEMBERS key</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户 1001 粉丝</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class="line">1) <span class="string">&quot;6001&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>SISMEMBER</strong><br>判断元素是否存在 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SISMEMBER key member</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断 6002 是否在集合 user:1001:fans 中</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER user:1001:fans 6002</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<p><strong>SCARD</strong><br>获取集合元素个数 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SCARD key</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取用户 1001 的粉丝数</span></span><br><span class="line">127.0.0.1:6379&gt; SCARD user:1001:fans</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p><strong>SRANDMEMBER</strong><br>从集合随机获取 count 个元素，默认获取 1 个，元素不删除 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SRANDMEMBER key [count]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给用户 1001 添加粉丝</span></span><br><span class="line">SADD user:1001:fans 6002 6003 6004 6005 6006</span><br><span class="line"><span class="comment"># 随机获取 2 个粉丝 ID</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER user:1001:fans 2</span><br><span class="line">1) <span class="string">&quot;6002&quot;</span></span><br><span class="line">2) <span class="string">&quot;6006&quot;</span></span><br><span class="line"><span class="comment"># 查看用户 1001 的粉丝，刚刚查看的还在集合中</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class="line">1) <span class="string">&quot;6001&quot;</span></span><br><span class="line">2) <span class="string">&quot;6002&quot;</span></span><br><span class="line">3) <span class="string">&quot;6003&quot;</span></span><br><span class="line">4) <span class="string">&quot;6004&quot;</span></span><br><span class="line">5) <span class="string">&quot;6005&quot;</span></span><br><span class="line">6) <span class="string">&quot;6006&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>SPOP</strong><br>从集合随机获取 count 个元素，默认获取 1 个，删除元素 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SPOP key [count]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机获取用户 1001 的 2 个粉丝</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP user:1001:fans 2</span><br><span class="line">1) <span class="string">&quot;6003&quot;</span></span><br><span class="line">2) <span class="string">&quot;6004&quot;</span></span><br><span class="line"><span class="comment"># 查看用户 1001 的粉丝，刚刚取出的已经被移除</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS user:1001:fans</span><br><span class="line">1) <span class="string">&quot;6001&quot;</span></span><br><span class="line">2) <span class="string">&quot;6002&quot;</span></span><br><span class="line">3) <span class="string">&quot;6005&quot;</span></span><br><span class="line">4) <span class="string">&quot;6006&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>应用<br>微信小程序抽奖活动<blockquote>
<ol>
<li>用户 1001,1002,1003,1004 参与活动 7001 —-&gt; SADD act:7001 1001 1002 1003 1004</li>
<li>查看参与 7001 活动的全部用户 —-&gt; SMEMBERS act:7001</li>
<li>随机抽奖 2 名用户 —-&gt; SRANDMEMBER act:7001 2</li>
<li>抽取 1 等奖 1 名，2 等奖 2 名(去除一等奖用户) —-&gt; SPOP act:7001 1 ,SPOP act:7001 2</li>
</ol>
</blockquote>
</li>
</ol>
<p>微信点赞，收藏，标签</p>
<blockquote>
<ol>
<li>用户 1002 点赞用户 1001 的朋友圈消息 8001 —-&gt; SADD like:1001:8001 1002</li>
<li>取消点赞 —-&gt; SREM like:1001:8001 1002</li>
<li>查看用户 1003 是否点赞 —-&gt; SISMEMBER like:1001:8001 1003</li>
<li>获取点赞朋友列表 —-&gt; SMEMBERS like:1001:8001</li>
<li>获取点赞用户数 —-&gt; SCARD like:1001:8001</li>
</ol>
</blockquote>
<ol start="3">
<li>Set 集合运算操作</li>
</ol>
<p>集合 set1:{a,b,e,f},set2:{c,d,e},set3:{a,b,e,g}</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 交集：多个集合中共有的元素</span></span><br><span class="line">set1 set2 set3 ----&gt; &#123;e&#125;</span><br><span class="line"><span class="comment"># 并集：去重多个集合中所有元素</span></span><br><span class="line">set1 set2 set3 ----&gt; &#123;a,b,c,d,e,f,g&#125;</span><br><span class="line"><span class="comment"># 差集：第一个集合和其他集合不一样的元素</span></span><br><span class="line">set1 set2 set3 ----&gt; &#123;f&#125;</span><br></pre></td></tr></table></figure>
<p>Set 中对应的集合运算<br><strong>SINTER</strong><br>交集运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SINTER set1 set2 set3</span><br></pre></td></tr></table></figure>
<p><strong>SUNION</strong><br>并集运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SUNION set1 set2 set3</span><br></pre></td></tr></table></figure>
<p><strong>SDIFF</strong><br>差集运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SDIFF set1 set2 set3</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>运算应用<br>关注模型<blockquote>
<ol>
<li>zhangsan/lisi 关注的人：zhangsan/lisi 粉丝 set 集合</li>
<li>zhangsan 和 list 共同关注：集合求并集 SINTER zhangsan lisi</li>
<li>我关注的人也关注了他（wangwu）：遍历 zhangsan 关注列表用户是否关注 wangwu SISMEMBER</li>
<li>可能认识的人：求差集 SDIFF zhangsan lisi</li>
</ol>
</blockquote>
</li>
</ol>
<h6 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h6><p>有序集合，且不允许有重复的元素，通过 score 对集合中元素排序<br><strong>ZADD</strong>,<strong>ZREM</strong><br>添加/移除集合中的元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZADD key score member [score member]</span><br><span class="line">ZREM key member [member]</span><br></pre></td></tr></table></figure>
<p>通过热度值对直播房间排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 房间 1100 的热度值 90000</span></span><br><span class="line">ZADD room:sort 90000 1100 80000 2200 70000 3300</span><br><span class="line"><span class="comment"># 移除 3300 这个房间</span></span><br><span class="line">ZREM room:sort 3300 </span><br></pre></td></tr></table></figure>
<p><strong>ZCARD</strong><br>获取有序集合的元素个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZCARD key</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZCARD room:sort</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>
<p><strong>ZCOUNT</strong><br>获取有序集合 [min,max] 区间 score 元素数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZCOUNT key min max</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 热度在80000-85000 之间的房间</span></span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT room:sort 80000 85000</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p><strong>ZINCRBY</strong><br>有序集合中指定成员 score 增加 increment</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZINCRBY key increment member</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1100 房间热度增加 1000</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY room:sort 1000 1100</span><br><span class="line"><span class="string">&quot;91000&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>ZRANGE</strong>,<strong>ZREVRANGE</strong><br>有序集合 [start,stop] 区间元素，通过 score，递增/递减<br>start 和 stop 都是以 0 开始，0 表示第一个元素，1 表示第二个，以此类推<br>负数下标 -1 表示倒数第一个元素，-2 表示倒数第二个元素，以此类推</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZRANGE key start stop [WITHSCORES]</span><br><span class="line">ZREVRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递增排序 room:sort 下所有元素</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE room:sort 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;2200&quot;</span></span><br><span class="line">2) <span class="string">&quot;80000&quot;</span></span><br><span class="line">3) <span class="string">&quot;1100&quot;</span></span><br><span class="line">4) <span class="string">&quot;91000&quot;</span></span><br><span class="line"><span class="comment"># 递减排序 room:sort 下所有元素</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE room:sort 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;1100&quot;</span></span><br><span class="line">2) <span class="string">&quot;91000&quot;</span></span><br><span class="line">3) <span class="string">&quot;2200&quot;</span></span><br><span class="line">4) <span class="string">&quot;80000&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>ZUNIONSTORE</strong><br>运算多个有序集合并集，并存储在新 key 中, <code>destination</code>新集合 key 值，<code>numkeys</code>合并的集合个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZUNIONSTORE destination numkeys key [key]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加房间在线人数集合</span></span><br><span class="line">ZADD room:onlinenum 800 3300 1000 4400</span><br><span class="line"><span class="comment"># 合并房间在线人数集合和房间热度集合为房间信息集合 room:info</span></span><br><span class="line">ZUNIONSTORE room:info 2 room:sort room:onlinenum</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>应用<br>各类排行榜实现</li>
</ol>
<blockquote>
<ol>
<li>用户点击新闻 —-&gt; ZINCRBY hotnews:20191125 1 学好redis</li>
<li>展示当日排行榜前十 —-&gt; ZREVRANGE hotnews:20191125 0 10 WITHSORES</li>
<li>七日搜索榜统计 —-&gt; ZUNIONSTROE hotnews:20191119-20191125 7 hotnews:20191119 … hotnews:20191125</li>
<li>七日排行前十 —-&gt; ZREVRANGE hotnews:20191119-20191125 0 10 WITHSCORES</li>
</ol>
</blockquote>
<p>参考 <a class="link" href="https://testerhome.com/topics/16402">testerhome<i class="fas fa-external-link-alt"></i></a>,<a class="link" href="http://redis.io/">redis<i class="fas fa-external-link-alt"></i></a> 官网，<a class="link" href="http://redisdoc.com/">redisdoc<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<center>拥有每一天</center>


]]></content>
      <categories>
        <category>Cache</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝微信一码支付</title>
    <url>/2019/12/01/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BE%AE%E4%BF%A1%E4%B8%80%E7%A0%81%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<p><img src="/2019/12/01/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BE%AE%E4%BF%A1%E4%B8%80%E7%A0%81%E6%94%AF%E4%BB%98/alipay-wechatpay-qr.png" alt="Photo by kejsirajbek on wallhaven.cc"></p>
<p>前几天有个需求要将支付宝和微信扫码集中在同一个二维码上面。当时已经上线了微信各种渠道支付（Native，公众号，H5）,支付宝上线了 Native，H5 支付，于是开始了一码多付的开发。在开发过程中也碰到了一些问题，好在快速解决了问题。</p>
<a id="more"></a>


<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ol>
<li>微信<br>从微信官方文档了解到扫码支付需要使用公众号支付方式拉起支付进行支付，这个过程需要进行用户认证等操作，从开发的角度来讲比较麻烦，而且多了认证操作，虽然可以使用静默授权（微信提供的一种用户无感知的授权方式）但是在加载过程中需要耗费更多的时间，用户体验降低。</li>
<li>支付宝<br>支付宝支付在官方了解到使用当面付功能可以完成扫码支付，前端 jssdk 也具备拉起的方式。但是在开发过程中发现公司账号没有开通此功能，申请需要 1-2 天时间，时间上来不及，于是和前端同学试了支付宝也采用 H5 支付的方式，结果完美解决。支付宝还是很方便的，在交互还是开发方面。</li>
<li>对账<br>这里其实可以不用回调也可以的，因为没有业务逻辑需要在回调处理，但是因为公司也使用H5,Native 支付 方式，所以这里需要记录下，方便后期对账等操作。</li>
</ol>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>前端页面使用 userAgent 判断是微信还是支付宝扫码进入的，如果是支付宝，跳转到支付宝 H5 支付的方式，后端返回 H5 支付返回的 Form 表单，前端直接拉起支付宝支付。如果是微信扫码进来，则跳转到微信支付静默授权链接，后端处理跳转到相应的 H5 支付页面进行处理。完成之后把前端判断是支付宝还是微信的页面生成二维码作为入口，就可以完美实现了。</p>
<h5 id="alipay"><a href="#alipay" class="headerlink" title="alipay"></a>alipay</h5><ol>
<li>引入支付宝提供的 SDK</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--支付宝sdk--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.1.ALL<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置文件<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否启用沙盒支付</span></span><br><span class="line"><span class="meta">alipay.sandbox</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 支付宝后台获取 appId</span></span><br><span class="line"><span class="meta">alipay.appId</span>=<span class="string">your.app.id</span></span><br><span class="line"><span class="comment"># 私有 key</span></span><br><span class="line"><span class="meta">alipay.privateKey</span>=<span class="string">your.private.key</span></span><br><span class="line"><span class="comment"># 公有 key</span></span><br><span class="line"><span class="meta">alipay.alipayPublicKey</span>=<span class="string">your.public.key</span></span><br><span class="line"><span class="comment"># 回调</span></span><br><span class="line"><span class="meta">alipay.qr.notifyUrl</span>=<span class="string">https://$&#123;your.domain&#125;/alipay/notify</span></span><br></pre></td></tr></table></figure></li>
<li>配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlipayProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否沙箱环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;alipay.sandbox&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isTest;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;alipay.appId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;alipay.privateKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String privateKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付宝公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;alipay.alipayPublicKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String alipayPublicKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付异步回调地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;alipay.notifUrl&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前配置环境网关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">obtainUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 沙盒环境</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isTest) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;https://openapi.alipay.com/gateway.do&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>对接</li>
</ol>
<p><strong>支付controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 支付宝扫码支付</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alipay&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseMsg <span class="title">qrAlipay</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@RequestBody</span> QrPayRequestParams qrPayRequestParams,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@RequestHeader(value = &quot;activityId&quot;, required = false)</span> String activityId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 参数校验省略</span></span><br><span class="line">    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());</span><br><span class="line">    <span class="comment">// 活动标记</span></span><br><span class="line">    qrPayRequestParams.setActivityId(activityId);</span><br><span class="line">    log.info(<span class="string">&quot;支付宝扫码参数：&#123;&#125;&quot;</span>, qrPayRequestParams.toString());</span><br><span class="line">    AliResultParams params = qrPaymentService.qrAlipay(qrPayRequestParams);</span><br><span class="line">    ResponseMsg&lt;AliResultParams&gt; msg = <span class="keyword">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class="line">    msg.setData(params);</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>支付service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存在多个回调，这里指定到具体回调</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;alipay.qr.notifyUrl&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String alipayQrNotifyUrl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 支付宝扫码支付</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> qrPayRequestParams params</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> form table</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AliResultParams <span class="title">qrAlipay</span><span class="params">(QrPayRequestParams qrPayRequestParams)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建订单-根据具体业务</span></span><br><span class="line">    <span class="comment">//QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams, QrPayConstants.PAYWAY_ALIPAY);</span></span><br><span class="line">    <span class="comment">// 支付宝支付</span></span><br><span class="line">    AlipayClient alipayClient = <span class="keyword">new</span> DefaultAlipayClient(alipayProperties.obtainUrl(),</span><br><span class="line">            alipayProperties.getAppId(), alipayProperties.getPrivateKey(),</span><br><span class="line">            AlipayConstants.FORMAT_JSON, AlipayConstants.CHARSET_UTF8, alipayProperties.getAlipayPublicKey(),</span><br><span class="line">            AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class="line">    AlipayTradeWapPayRequest request = <span class="keyword">new</span> AlipayTradeWapPayRequest();</span><br><span class="line">    AlipayTradeWapPayModel model = <span class="keyword">new</span> AlipayTradeWapPayModel();</span><br><span class="line">    <span class="comment">//该笔订单允许的最晚付款时间，逾期将关闭交易。</span></span><br><span class="line">    model.setTimeoutExpress(<span class="string">&quot;30m&quot;</span>);</span><br><span class="line">    model.setTotalAmount(qrPayRequestParams.getMoney());</span><br><span class="line">    model.setSubject(<span class="string">&quot;XXXX&quot;</span>);</span><br><span class="line">    <span class="comment">// 更具具体业务生成的订单号</span></span><br><span class="line">    <span class="comment">//model.setOutTradeNo(order.getRechargeOrderId());</span></span><br><span class="line">    model.setOutTradeNo(<span class="string">&quot;201912011111111111&quot;</span>);</span><br><span class="line">    model.setProductCode(<span class="string">&quot;XXXX&quot;</span>);</span><br><span class="line">    request.setBizModel(model);</span><br><span class="line">    request.setNotifyUrl(alipayQrNotifyUrl);</span><br><span class="line">    request.setReturnUrl(qrPayRequestParams.getReturnUrl());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;支付宝扫码请求参数：&#123;&#125;&quot;</span>,request.getTextParams());</span><br><span class="line">        AlipayTradeWapPayResponse response = alipayClient.pageExecute(request);</span><br><span class="line">        log.info(<span class="string">&quot;请求信息：&#123;&#125;&quot;</span>,response.getBody());</span><br><span class="line">        AliResultParams params = AliResultParams.builder().alipayParams(response.getBody()).build();</span><br><span class="line">        <span class="keyword">if</span> (response.getBody().contains(model.getOutTradeNo())) &#123;</span><br><span class="line">            params.setAlipayTradeNo(model.getOutTradeNo());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> AliResultParams.builder().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h6><p><strong>回调controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝扫码回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alipay/notify&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">alipayNotify</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;进入支付宝扫码支付回调&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> qrPaymentService.alipayNotify(request);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        log.info(<span class="string">&quot;支付宝扫码支付回调失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>回调service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝扫码支付回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">alipayNotify</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> AlipayApiException </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map;</span><br><span class="line">    Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class="line">    map = <span class="keyword">this</span>.paramsString(requestParams);</span><br><span class="line">    String outTradeNo = map.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">    String tradeStatus = map.get(<span class="string">&quot;trade_status&quot;</span>);</span><br><span class="line">    String tradeNo = map.get(<span class="string">&quot;trade_no&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> signVerified = AlipaySignature.rsaCheckV1(map, alipayProperties.getAlipayPublicKey(),</span><br><span class="line">            AlipayConstants.CHARSET_UTF8, AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class="line">    log.info(<span class="string">&quot;支付宝扫码参数：out_trade_no：&#123;&#125;，trade_status，&#123;&#125;，trade_no，&#123;&#125;，校验结果：&#123;&#125;&quot;</span>,</span><br><span class="line">            outTradeNo, tradeStatus, tradeNo,signVerified);</span><br><span class="line">    <span class="comment">// 校验订单-省略</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验签通过，验证金额通过</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    <span class="comment">// 检验失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拼接参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">paramsString</span><span class="params">(Map&lt;String, String[]&gt; requestParams)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String name : requestParams.keySet()) &#123;</span><br><span class="line">        String[] values = requestParams.get(name);</span><br><span class="line">        String valueStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i] : valueStr + values[i] + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            System.out.println(valueStr);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(name, valueStr);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;支付宝扫码支付参数：&#123;&#125;&quot;</span>,map);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>entity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装微信和支付宝请求实体</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QrPayRequestParams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String openId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 金额 - 元</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remoteAddr;</span><br><span class="line">    <span class="keyword">private</span> String activityId;</span><br><span class="line">    <span class="keyword">private</span> String returnUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装支付宝返回参数信息</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliResultParams</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String alipayParams;</span><br><span class="line">    <span class="keyword">private</span> String alipayTradeNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就完成了支付宝扫码支付的整个流程，手机网站支付的<a class="link" href="https://docs.open.alipay.com/203">官方文档<i class="fas fa-external-link-alt"></i></a>。</p>
<h5 id="weChat-pay"><a href="#weChat-pay" class="headerlink" title="weChat pay"></a>weChat pay</h5><p>这里使用了微信公众号支付，需要进行授权处理。个人感觉步骤比较繁琐。</p>
<h6 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h6><p>微信<a class="link" href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">网页授权<i class="fas fa-external-link-alt"></i></a>官方说明，扫码支付时采用静默授权，用户无感知状态下完成支付动作。主要有以下几步（官网）：</p>
<ol>
<li>引导用户进入授权页面同意授权，获取code</li>
</ol>
<p>以下链接可以直接复制到微信客户端打开</p>
<blockquote>
<p><a class="link" href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https://chong.qq.com/php/index.php?d=&c=wxAdapter&m=mobileDeal&showwxpaytitle=1&vb2ctag=4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<ol start="2">
<li><p>通过code换取网页授权access_token（与基础支持中的access_token不同）</p>
</li>
<li><p>如果需要，开发者可以刷新网页授权access_token，避免过期</p>
</li>
<li><p>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静默授权页面跳转，这里 `/wx/gzh/pay/menu` 就是上面链接中的 redirect_uri 的内容，获取到openId之后重定向到具体的业务页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 请求实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 页面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/wx/gzh/pay/menu&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">payGuguDou</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String code = request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParamDefectException(Code.WARN, <span class="string">&quot;没有获取到用户微信code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String openId = mpService.authorization(code);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(openId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;redirect:&quot;</span> + htmlUrl + <span class="string">&quot;/pay.html&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 openId</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> result</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">authorization</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;voi获取的code ： &#123;&#125;，开始调用网页授权&quot;</span>, code);</span><br><span class="line">    String wxUrl = <span class="string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;</span> + properties.getAppId()</span><br><span class="line">            + <span class="string">&quot;&amp;secret=&quot;</span> + properties.getAppSecret() + <span class="string">&quot;&amp;code=&quot;</span> + code + <span class="string">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">    String weiUserJson = OkHttpUtil.getSent(wxUrl, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    JSONObject jsonObject = JSONObject.parseObject(weiUserJson);</span><br><span class="line">    String openid = jsonObject.getString(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot; voi结束调用网页授权，网页授权获取到的openid：&#123;&#125;&quot;</span>, openid);</span><br><span class="line">    <span class="keyword">return</span> openid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取accessToken</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url 拉起支付的页面路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> info</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseMsg <span class="title">signature</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getAccessToken();</span><br><span class="line">    String noncestr = RandomUtils.getRandomStr();</span><br><span class="line">    String timestamp = System.currentTimeMillis() + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    timestamp = timestamp.substring(<span class="number">0</span>, timestamp.length() - <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    String string1 = <span class="string">&quot;jsapi_ticket=&quot;</span> + jsToken + <span class="string">&quot;&amp;noncestr=&quot;</span> + noncestr +</span><br><span class="line">            <span class="string">&quot;&amp;timestamp=&quot;</span> + timestamp + <span class="string">&quot;&amp;url=&quot;</span> + url;</span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    String signature = SHAUtil.SHA1(string1);</span><br><span class="line">    <span class="comment">// 返回参数</span></span><br><span class="line">    Map&lt;String, String&gt; o = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">    o.put(<span class="string">&quot;jsapiticket&quot;</span>, jsToken);</span><br><span class="line">    o.put(<span class="string">&quot;noncestr&quot;</span>, noncestr);</span><br><span class="line">    o.put(<span class="string">&quot;timestamp&quot;</span>, timestamp);</span><br><span class="line">    o.put(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">    o.put(<span class="string">&quot;signature&quot;</span>, signature);</span><br><span class="line">    o.put(<span class="string">&quot;appid&quot;</span>, properties.getAppId());</span><br><span class="line">    ResponseMsg&lt;Map&gt; msg = <span class="keyword">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class="line">    msg.setData(o);</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 ticket</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAccessToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String accessTokenUrl = <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span> +</span><br><span class="line">            properties.getAppId() + <span class="string">&quot;&amp;secret=&quot;</span> + properties.getAppSecret();</span><br><span class="line"></span><br><span class="line">    String sent = OkHttpUtil.getSent(accessTokenUrl, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    JSONObject accessJsonObject = JSONObject.parseObject(sent);</span><br><span class="line">    String accessToken = accessJsonObject.getString(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">    String jsTokenUrl = <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=&quot;</span> + accessToken + <span class="string">&quot;&amp;type=jsapi&quot;</span>;</span><br><span class="line">    String jsTokenResult = OkHttpUtil.getSent(jsTokenUrl, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    JSONObject jsTokenJsonObject = JSONObject.parseObject(jsTokenResult);</span><br><span class="line">    <span class="keyword">if</span> (jsTokenJsonObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> errcode = jsTokenJsonObject.getInteger(<span class="string">&quot;errcode&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (errcode == <span class="number">0</span>) &#123;</span><br><span class="line">            jsToken = jsTokenJsonObject.getString(<span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成以上动作，就完成了对用户的静默授权，<strong>在这次扫码支付中，用户微信扫码进入到入口页面，通过 userAgent 判断时微信扫码进入后，直接跳转到下面授权链接（具体的参数需要自己的），然后开始输入金额进行支付</strong> </p>
<blockquote>
<p><a class="link" href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https://chong.qq.com/php/index.php?d=&c=wxAdapter&m=mobileDeal&showwxpaytitle=1&vb2ctag=4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&amp;response_type=code&amp;scope=snsapi_base&amp;state=123#wechat_redirect<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h6 id="拉起支付"><a href="#拉起支付" class="headerlink" title="拉起支付"></a>拉起支付</h6><p><strong>引入SDK</strong><br>我这里引入了第三方开源包，<a class="link" href="https://github.com/Pay-Group/best-pay-sdk">官方地址<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>best-pay-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mp weChat pay</span></span><br><span class="line"><span class="meta">gzh.wx.appId</span>=<span class="string">wx123456789</span></span><br><span class="line"><span class="meta">gzh.wx.appSecret</span>=<span class="string">afjidshu434234hwier3432</span></span><br><span class="line"><span class="meta">gzh.wx.mchId</span>=<span class="string">123456789</span></span><br><span class="line"><span class="meta">gzh.wx.apiKey</span>=<span class="string">Ydfsdfkf565sdf45d4</span></span><br><span class="line"><span class="meta">qr.wx.notifyUrl</span>=<span class="string">https://$&#123;your.domain&#125;/wx/notify</span></span><br></pre></td></tr></table></figure>
<p><strong>配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpPayProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;gzh.wx.appSecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appSecret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置微信公众号或者小程序等的appid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;gzh.wx.appId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信支付商户号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;gzh.wx.mchId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信支付商户密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;gzh.wx.apiKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mchKey;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>支付Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信扫码支付</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/wechat&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseMsg <span class="title">qrWechat</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@RequestBody</span> QrPayRequestParams qrPayRequestParams,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@RequestHeader(value = &quot;activityId&quot;,required = false)</span> String activityId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 安全校验（参数合法性等）-省略</span></span><br><span class="line"></span><br><span class="line">    qrPayRequestParams.setRemoteAddr(request.getRemoteAddr());</span><br><span class="line">    <span class="comment">// 活动ID</span></span><br><span class="line">    qrPayRequestParams.setActivityId(activityId);</span><br><span class="line">    log.info(<span class="string">&quot;微信扫码参数：&#123;&#125;&quot;</span>, qrPayRequestParams.toString());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WxPayMpOrderResult result = qrPaymentService.qrWechat(qrPayRequestParams);</span><br><span class="line">        ResponseMsg&lt;WxPayMpOrderResult&gt; msg = <span class="keyword">new</span> ResponseMsg&lt;&gt;(Code.SUCCESSED, Constants.SUCCESS);</span><br><span class="line">        msg.setData(result);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseMsg(Code.FAILED, <span class="string">&quot;服务异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>支付Service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存在多个回调，这里指定到具体回调</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;qr.wx.notifyUrl&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String wxQrNotifyUrl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 微信二维码支付</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> qrPayRequestParams params</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 支付参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxPayMpOrderResult <span class="title">qrWechat</span><span class="params">(QrPayRequestParams qrPayRequestParams)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建订单-根据业务生成订单</span></span><br><span class="line">    <span class="comment">//QrRechargeOrder order = qrRechargeOrderService.createOrder(qrPayRequestParams,QrPayConstants.PAYWAY_WECHAT);</span></span><br><span class="line">    <span class="comment">//log.info(&quot;扫码支付创建订单：&#123;&#125;&quot;, order.toString());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信公众号支付参数</span></span><br><span class="line">    PayRequest orderRequest = <span class="keyword">new</span> PayRequest();</span><br><span class="line">    orderRequest.setOpenid(qrPayRequestParams.getOpenId());</span><br><span class="line">    <span class="comment">//orderRequest.setOrderAmount(order.getPayMoney());</span></span><br><span class="line">    orderRequest.setOrderAmount(<span class="number">1000</span>);</span><br><span class="line">    orderRequest.setOrderId(order.getRechargeOrderId());</span><br><span class="line">    orderRequest.setSpbillCreateIp(qrPayRequestParams.getRemoteAddr());</span><br><span class="line">    orderRequest.setOrderName(<span class="string">&quot;XXXX&quot;</span>);</span><br><span class="line">    orderRequest.setPayTypeEnum(BestPayTypeEnum.WXPAY_H5);</span><br><span class="line">    <span class="comment">//统一下单</span></span><br><span class="line">    wxPayH5Config.setNotifyUrl(wxQrNotifyUrl);</span><br><span class="line">    bestPayService.setWxPayH5Config(wxPayH5Config);</span><br><span class="line">    PayResponse payResponse = bestPayService.pay(orderRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加签返回结果</span></span><br><span class="line">    WxPayMpOrderResult payResult = WxPayMpOrderResult.builder()</span><br><span class="line">            .appId(payResponse.getAppId())</span><br><span class="line">            .timeStamp(String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>))</span><br><span class="line">            .nonceStr(payResponse.getNonceStr())</span><br><span class="line">            .packageValue(payResponse.getPackAge())</span><br><span class="line">            .signType(<span class="string">&quot;MD5&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    payResult.setPaySign(SignUtils.createSign(payResult, <span class="keyword">null</span>, <span class="keyword">this</span>.wxPayH5Config.getMchKey(), <span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">    <span class="keyword">return</span> payResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="回调-1"><a href="#回调-1" class="headerlink" title="回调"></a>回调</h6><p><strong>回调Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信支付回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/wx/notify&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">wxNotify</span><span class="params">(<span class="meta">@RequestBody</span> String xmlData)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;***********微信扫码回调参数：&#123;&#125;**************&quot;</span>, xmlData);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> qrPaymentService.wxNotify(xmlData);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        log.error(<span class="string">&quot;微信扫码回调处理异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>回调Service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信扫码支付回调</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> xmlData 回调信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 返回给微信服务器处理结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">wxNotify</span><span class="params">(String xmlData)</span> <span class="keyword">throws</span> WxPayException </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;微信扫码回调开始解析&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> WxPayOrderNotifyResult notifyResult = <span class="keyword">this</span>.wxPayService.parseOrderNotifyResult(xmlData);</span><br><span class="line">    log.info(<span class="string">&quot;解析结果&#123;&#125;&quot;</span>, notifyResult.getOutTradeNo());</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;SUCCESS&quot;</span>.equals(notifyResult.getReturnCode()) || !<span class="string">&quot;SUCCESS&quot;</span>.equals(notifyResult.getResultCode())) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;订单校验出错&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    String rechargeOrderId = notifyResult.getOutTradeNo();</span><br><span class="line">    <span class="comment">// 具体的参数校验-省略</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 校验成功</span></span><br><span class="line">    <span class="keyword">return</span> QrPayConstants.WX_NOTIFY_SUCCESS;</span><br><span class="line">    <span class="comment">// 校验失败</span></span><br><span class="line">    <span class="keyword">return</span> QrPayConstants.WX_NOTIFY_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>微信回调会走多次，在订单成功的情况下需要设置状态等确保成功业务只执行一次，避免多次调用后数据错乱等情况发生。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol>
<li>需要前后端配置完成，前期需要沟通确认使用哪种方式处理。（开发过程中因为对接方式的原因，延误了一些时间）</li>
<li>微信和支付宝的文档比较多，需要仔细阅读。</li>
</ol>
<blockquote>
<p>今天中午出门逛了一大圈，有空还是多出去走走，毕竟小命要紧，保持身体健康是最重要的。</p>
</blockquote>
<hr>
<center>2019-12-01 12月的第一天，我和小扣去了盒马，我觉得我更爱她了</center>













]]></content>
      <categories>
        <category>Pay</category>
      </categories>
      <tags>
        <tag>Pay</tag>
      </tags>
  </entry>
</search>
